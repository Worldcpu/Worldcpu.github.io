<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2-SAT</title>
    <url>/posts/a4051058/</url>
    <content><![CDATA[ 0. 前言
因为之前一篇写的太烂了，没有搞清楚主次关系导致云里雾里，以至于后人（没错就是我自己）根本看不懂，所以本篇于2025.4.22重写。
你需要知道芝士：

Tarjan求有向图强联通分量
基础图论建模芝士
命题的概念及反命题（初中内容）

 1. 2-SAT概念及求法
 1.1 概念
这个我们需要好好说这个概念，所以我们对于 “2-SAT” 这个名词我们做一下辨析。

SAT 是适定性（Satisfiability）问题的简称。一般形式为 k - 适定性问题，即 k-SAT。

什么，看不懂？没关系因为这个k-SAT问题当 k&gt;2k&gt;2k&gt;2 的时候是NP完全问题，只能暴力求解，但是当 k=2k=2k=2 的2-SAT问题我们可以好好玩。
对于2-SAT问题通俗的说，就是给你 nnn 个变量 XiX_iXi​，每个变量只能取 0或1，同时给定若干条件，形如：
(¬)Xi⊕(¬)Xj=0/1(\neg) X_{i}\oplus (\neg)X_{j}=0 /1
(¬)Xi​⊕(¬)Xj​=0/1
其中 ¬Xi\neg X_i¬Xi​ 表示 XiX_iXi​ 这个命题的反命题。其中 ⊕\oplus⊕ 代表的操作有与，或，异或操作中的一种。
其实不难发现我们在求解2-SAT问题，如果我们发现这个问题的“方程组”有解，那么其实解有许多组，但是我们只需要求出1组解即可。
 1.2 2-SAT求解
所以怎么求解呢？一个显然的想法是暴力枚举，但是这个复杂度太炸裂了（其实也不算太炸裂www），怎么做？
我们发现与，或，异或操作一定有不同真命题与反命题之间约束的关系…图论？
没错其实对于这类问题我们可以建立图论模型来去解决，虽然两两bool变量的关系有很多，但是可以都归属以下三种关系：
¬Xi∨Xj¬Xi∨¬XjXi∨Xj\begin{aligned}
\neg X_{i} &amp; \vee X_{j} \\
\neg X_{i}&amp; \vee \neg X_{j}\\
X_{i}&amp; \vee X_j
\end{aligned}
¬Xi​¬Xi​Xi​​∨Xj​∨¬Xj​∨Xj​​
其中，∨\vee∨ 符号表示或的关系。其实不难得到如果左边不成立那右边必须成立，于是我们可以对于Xi,¬Xi,Xj,¬XjX_{i},\neg X_{i},X_{j},\neg X_jXi​,¬Xi​,Xj​,¬Xj​ 这四个变量我们可以用四个不同的变量：

Xi→TiX_{i}\rightarrow T_iXi​→Ti​
Xj→TjX_{j}\rightarrow T_jXj​→Tj​
¬Xi→Fi\neg X_{i}\rightarrow F_i¬Xi​→Fi​
¬Xj→Fj\neg X_{j}\rightarrow F_j¬Xj​→Fj​

那么我们可以这么连边：
对于第一个式子，如果我们让 XiX_iXi​ 成立（¬Xi\neg X_i¬Xi​ 不成立 ），那么XjX_jXj​ 必须成立，如果¬Xj\neg X_j¬Xj​ 成立那么 ¬Xi\neg X_i¬Xi​ 必须成立，下面同理：



公式
建边(同时建边代表与)




¬Xi∨Xj\neg X_{i} \vee X_j¬Xi​∨Xj​
Ti→Tj,Fj→FiT_{i}\rightarrow T_{j},F_{j}\rightarrow F_{i}Ti​→Tj​,Fj​→Fi​


¬Xi∨¬Xj\neg X_{i} \vee \neg X_{j}¬Xi​∨¬Xj​
Ti→Fj,Tj→FiT_{i}\rightarrow F_{j},T_{j}\rightarrow F_{i}Ti​→Fj​,Tj​→Fi​


Xi∨XjX_{i} \vee X_{j}Xi​∨Xj​
Fi→Tj,Fj→TiF_{i}\rightarrow T_{j},F_{j} \rightarrow T_{i}Fi​→Tj​,Fj​→Ti​



有没有发现什么？其实建边中都是假设一个变量不成立，那么另一个变量必定成立，通过像这样限定两个变量建2条边就可以限定了。
那我们建立好图：

这里变量名有所改变，但是不难发现的一点就是，如果¬a,b\neg a,b¬a,b 在一个强联通分量那么解肯定是一样的。但是，例如a,¬aa,\neg aa,¬a在同一个强联通分量，那么必定无解，因为这两个必须选一个但是如果在一个强联通分量，那么必定无解，反之一定有解。
那怎么构造解呢？在一个强联通分量如果我们确定任意一个变量的初始赋值，那么这里面其他所有变量的赋值都确定，这启发我们缩点。其次互为逆否命题会成对出现（对称性），所以一个零出度点的否命题（否命题的否命题是真命题）一定有出边，选有出点的一定会影响后面的，而选择零初度点的不会影响。
于是我们可以有一个基本思想就是：自底向上走拓扑排序，不断尝试选择零出度点。
但是tarjan中SCC的一个存储特点就是刚好是反拓扑序（自底向上的），所以只需要对比XiX_iXi​ 和 ¬Xi\neg X_i¬Xi​ 两个所属于的强联通分量编号谁更小，更小的拓扑序越大，越优。
P4782 【模板】2-SAT
这里我们用i→Xi,i+n→¬Xii \rightarrow X_{i},i+n \rightarrow \neg X_{i}i→Xi​,i+n→¬Xi​
那么代码如下：
#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;const int MN=2*1e6+15;int n,m,dfn[MN],low[MN],vdcc[MN],tot,dcc;vector&lt;int&gt; adj[MN];bool vis[MN];int s[MN],top;void tarjan(int u)&#123;    low[u]=dfn[u]=++tot;    s[++top]=u;    vis[u]=1;    for(int i=0;i&lt;adj[u].size();i++)&#123;        int v=adj[u][i];        if(!dfn[v])&#123;            tarjan(v);            low[u]=min(low[u],low[v]);        &#125;else if(vis[v])&#123;            low[u]=min(low[u],dfn[v]);        &#125;    &#125;    if(low[u]==dfn[u])&#123;        dcc++;        int t;        while (s[top]!=u)        &#123;            vdcc[s[top]]=dcc;            vis[s[top]]=0;            top--;        &#125;        vdcc[s[top]]=dcc;        vis[s[top]]=0;        top--;    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int xi,a,xj,b;        cin&gt;&gt;xi&gt;&gt;a&gt;&gt;xj&gt;&gt;b;        int ni=xi+n,nj=xj+n;        if(a==0&amp;&amp;b==0)&#123;            adj[ni].push_back(xj);//a=1则b=0            adj[nj].push_back(xi);//b=1则a=0        &#125;        if(a==1&amp;&amp;b==0)&#123;            adj[xi].push_back(xj);//a=0则b=0            adj[nj].push_back(ni);//b=1则a=1        &#125;        if(a==0&amp;&amp;b==1)&#123;            adj[ni].push_back(nj);//a=1则b=1            adj[xj].push_back(xi);//b=0则a=0        &#125;        if(a==1&amp;&amp;b==1)&#123;            adj[xi].push_back(nj);//a=0 b=1            adj[xj].push_back(ni);//b=0 a=1        &#125;    &#125;    for(int i=1;i&lt;=n*2;i++)&#123;        if(!dfn[i])&#123;            tarjan(i);        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(vdcc[i]==vdcc[i+n])&#123;            cout&lt;&lt;&quot;IMPOSSIBLE&quot;;            return 0;        &#125;    &#125;    cout&lt;&lt;&quot;POSSIBLE&quot;&lt;&lt;endl;    for(int i=1;i&lt;=n;i++)&#123;        //强联通分量编号越小 -&gt; 拓扑序越大 -&gt; 越优        cout&lt;&lt;(vdcc[i]&gt;vdcc[i+n])&lt;&lt;&quot; &quot;;    &#125;    return 0;&#125;
 2. 例题
 2.1 P4171 满汉全席
我们可以拆成2个点，一个是汉式，一个是满式。
于是就变成了正反命题，就可以2-SAT了。
关于式子看代码。
代码如下：
#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;vector&gt;using namespace std;const int MN=2048;int k,n,m,tot,ecc,dfn[MN],low[MN],color[MN],s[MN],top;vector&lt;int&gt; adj[MN];bool vis[MN];void tarjan(int u)&#123;    low[u]=dfn[u]=++tot;    vis[u]=1;    s[++top]=u;    for(int i=0;i&lt;adj[u].size();i++)&#123;        int v=adj[u][i];        if(!dfn[v])&#123;            tarjan(v);            low[u]=min(low[u],low[v]);        &#125;else if(vis[v])&#123;            low[u]=min(low[u],dfn[v]);        &#125;    &#125;    if(low[u]==dfn[u])&#123;        ecc++;        int p;        do        &#123;            p=s[top--];            color[p]=ecc;            vis[p]=0;        &#125; while(p!=u);            &#125;&#125;int main()&#123;    cin&gt;&gt;k;    while (k--)    &#123;        top=tot=ecc=0;        cin&gt;&gt;n&gt;&gt;m;        for(int i=1;i&lt;MN;i++)&#123;            dfn[i]=low[i]=color[i]=0;            adj[i].clear();        &#125;        char p1,p2;        int a,b,xa,xb;        //m-&gt;0 h-&gt;1        for(int i=1;i&lt;=m;i++)&#123;            cin&gt;&gt;p1&gt;&gt;a&gt;&gt;p2&gt;&gt;b;            int na=a+n,nb=b+n;            if(p1==&#x27;m&#x27;&amp;&amp;p2==&#x27;h&#x27;)&#123;//a=0 b=1                adj[b].push_back(a);//b=0 a=0                adj[na].push_back(nb);//a=1 b=1            &#125;            if(p1==&#x27;h&#x27;&amp;&amp;p2==&#x27;h&#x27;)&#123;//a=1 b=1                adj[a].push_back(nb);                adj[b].push_back(na);            &#125;            if(p1==&#x27;h&#x27;&amp;&amp;p2==&#x27;m&#x27;)&#123;//a=1 b=0                adj[a].push_back(b);                adj[nb].push_back(na);            &#125;            if(p1==&#x27;m&#x27;&amp;&amp;p2==&#x27;m&#x27;)&#123;// a=0 b=0                adj[nb].push_back(a);                adj[na].push_back(b);            &#125;        &#125;        for(int i=1;i&lt;=2*n;i++)&#123;            if(!dfn[i])&#123;                tarjan(i);            &#125;        &#125;        bool flag=0;        for(int i=1;i&lt;=n;i++)&#123;            if(color[i]==color[i+n])&#123;                cout&lt;&lt;&quot;BAD&quot;&lt;&lt;endl;                flag=1;                break;            &#125;        &#125;        if(!flag) cout&lt;&lt;&quot;GOOD&quot;&lt;&lt;endl;    &#125;        return 0;&#125;
 P6378 Riddle

nnn 个点 mmm 条边的无向图被分成 kkk 个部分。每个部分包含一些点。
请选择一些关键点，使得每个部分恰有一个关键点，且每条边至少有一个端点是关键点。
1≤k,w≤n≤1061\le k,w\le n\le 10^61≤k,w≤n≤106，∑w=n\sum w=n∑w=n，1≤a,b≤n1\le a,b\le n1≤a,b≤n，0≤m≤1060\le m\le 10^60≤m≤106。

初始观察这个题我们其实发现不出来这个和2-SAT有什么关系，但是我们发现一个点，我们边至少有一个端点是关键点。而且这些部分中只能选1个，剩下全都不选。很像2-SAT的真否命题。
那么我们的命题就是选或不选，对于第一个条件，其实就是¬u→v,¬v→u\neg u \rightarrow v,\neg v \rightarrow u¬u→v,¬v→u。
而对于第二个条件，就是枚举组内的点暴力连边，选定一个成立后对组内其他节点暴力连否命题的边，那么这个题就做完…了？
这样暴力连边的复杂度是O(n2)O(n^2)O(n2)，不仅时间炸空间也会炸掉，怎么办？
借用以下阴阳八卦大佬的图：
我们暴力连边的边如下：

这样连边的分数我们只能拿到92分。怎么优化？关键在于怎么优化这种建图方式，第一种是优化不了了只能优化第二种。我们观察以下：

1向4，6，8连边。
3向2，6，8连边。
5向2，4，8连边。
7向2，4，6连边。

我们新建一些点作为这个点的分身：

转移以下边：

我们利用上面的方式，我们其实不难发现9-16，10-16，11-16，可以直接转成9-10-11-16这样连边，而且这样连边甚至9-15,9-16都不用连了！这样连就可以得到这张图。

唉不对啊，1-9-14-13-2这是什么，我们修改以下，把9-14改为9-4，把10-13改为3-13。一系列操作有：

这种优化方式叫做 前缀优化建图，通过类似于前缀和的优化操作来建图。
有的人会说线段树优化建图，请自己想想两个建图方式实质上是不是类似。
故代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=8e6+15;int n,m,k,dfn[MN],low[MN],vdcc[MN],tot,dcc; // dfn: DFS序, low: Tarjan算法中的low值, // vdcc: 强连通分量编号, tot: dfn时间戳, dcc: 强连通分量计数器vector&lt;int&gt; adj[MN],gp[MN]; //gp: 存储每个部分(题意中的部分)的点bool vis[MN];int s[MN],top;void tarjan(int u)&#123;    // tarjan求强联通    low[u]=dfn[u]=++tot;    s[++top]=u;    vis[u]=1;    for(auto v:adj[u])&#123;        if(!dfn[v])&#123;            tarjan(v);            low[u]=min(low[u],low[v]);        &#125;else if(vis[v])&#123;            low[u]=min(low[u],dfn[v]);        &#125;    &#125;    if(low[u]==dfn[u])&#123;        dcc++;        int p;        do        &#123;            p=s[top--];            vdcc[p]=dcc;            vis[p]=0;        &#125; while (p!=u);    &#125;&#125;// 以下注释中// ¬u表示u的否定，即u+n// u的前缀辅助点，即u+2n// u的后缀辅助点，即u+3nint main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        int fu=u+n,fv=v+n;        adj[fu].push_back(v); // 添加边¬u → v        adj[fv].push_back(u); // 添加边¬v → u    &#125;    for(int i=1;i&lt;=k;i++)&#123;        int num;        cin&gt;&gt;num;        for(int j=1;j&lt;=num;j++)&#123;            int p;            cin&gt;&gt;p;            gp[i].push_back(p);            adj[p].push_back(p+2*n); // 添加边 p → p+2n（前缀变量）            adj[p+3*n].push_back(p+n); // 添加边 p+3n → ¬p（后缀变量）        &#125;        for(int j=1;j&lt;gp[i].size();j++)&#123;            int d1=gp[i][j-1],d2=gp[i][j]; // 前一个点和当前点            adj[d1+2*n].push_back(d2+2*n); // 添加边 d1+2n → d2+2n（前缀传递）            adj[d2+3*n].push_back(d1+3*n); // 添加边 d2+3n → d1+3n（后缀传递，可以看图理解）            adj[d1+2*n].push_back(d2+n); // 添加边 d1+2n → ¬d2（前缀已选，d2不可选）            adj[d2].push_back(d1+3*n); // 添加边 d2 → d1+3n（选d2，后缀必须选到d1）        &#125;    &#125;    for(int i=1;i&lt;=n*4;i++)&#123;        if(!dfn[i]) tarjan(i);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(vdcc[i]==vdcc[i+n] || vdcc[i+2*n]==vdcc[i+3*n])&#123;             // 如果i和¬i在同一分量，或前缀和后缀变量在同一分量则环无解            cout&lt;&lt;&quot;NIE&quot;;            return 0;        &#125;    &#125;    cout&lt;&lt;&quot;TAK&quot;;    return 0;&#125;
 3. 总结
2-SAT的问题在于怎么看出来，其实一个明显的特征就是类似于取或不取的关系，或者二元对立的关系（议论文？），或者要么取这个，要么取那个，或者转化成蕴含关系，考法很灵活，我目前见到的只有上面的，做题还是有点少www。
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>2025-8-10提高组模拟赛</title>
    <url>/posts/f566038c/</url>
    <content><![CDATA[被诈骗的一集。
话说你是打得好才记吗，下次打的不好更应该记录反思的好吧。
 T1
CF1295D Same GCDs - 洛谷
暴力肯定是不行的，考虑如何对这个 xxx 计数，考虑算术唯一分解定理，对于 gcd⁡\gcdgcd 来说就是所有质数上指数取 min⁡\minmin，那么对 gcd⁡(a+x,m)=gcd⁡(a,m)\gcd(a+x,m)=\gcd(a,m)gcd(a+x,m)=gcd(a,m) 可以把 xxx 以质因数分解的形式看待的话，就是加上 xxx 之后取 min⁡\minmin 的值不变，可以分析出几个性质：

xxx 不会添加新的质数，质数取集只在 a,ma,ma,m 之间。
xxx 不会改变 aaa 取到 min⁡\minmin 指数的质数贡献。

那么有 gcd⁡(x,m)=gcd⁡(a,m)\gcd(x,m)=\gcd(a,m)gcd(x,m)=gcd(a,m)，除掉 gcd⁡(a,m)\gcd(a,m)gcd(a,m)，gcd⁡(xgcd⁡(a,m),mgcd⁡(a,m))=1\gcd(\frac{x}{\gcd(a,m)},\frac{m}{\gcd(a,m)})=1gcd(gcd(a,m)x​,gcd(a,m)m​)=1，求有多少满足这个的 xxx，显然这是欧拉函数的定义，答案就是 φ(mgcd⁡(a,m))\varphi(\frac{m}{\gcd(a,m)})φ(gcd(a,m)m​)，m\sqrt{m}m​ 直接做即可。
显然我们没有看数据，数据中有一个及其 nb 的地方在于多测且 t≤2×106t\le 2 \times 10^6t≤2×106，而 mmm 在 10710^7107 根号显然会炸掉，需要线性筛预处理不然只有 60 分也是无敌了，下次多留心以下数据吧 www。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e7+15;int a,m,phi[MN];vector&lt;int&gt; prime;vector&lt;bool&gt; notp(1e7+15);namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;void euler(int n)&#123;    phi[1]=1;    notp[1]=1;    for(int i=2;i&lt;=n;i++)&#123;        if(!notp[i])&#123;            prime.push_back(i);            phi[i]=i-1;        &#125;        for(auto p:prime)&#123;            if(i*p&gt;n) break;            notp[i*p]=1;            if(i%p==0)&#123;                phi[i*p]=phi[i]*p;                break;            &#125;            phi[i*p]=phi[i]*(p-1);        &#125;    &#125;&#125;int phii(int n)&#123;    if(n&lt;=1e7) return phi[n];    int ans=n;    for(int i=2;i*i&lt;=n;i++)&#123;        if(n%i==0)&#123;            ans=ans/i*(i-1);            while(n%i==0)&#123;                n/=i;            &#125;        &#125;    &#125;    if(n&gt;=2)&#123;        ans=ans/n*(n-1);    &#125;    return ans;&#125;void solve()&#123;    read(a,m);    put(phii(m/__gcd(a,m)));&#125;signed main()&#123;    #ifndef ONLINE_JUDGE    freopen(&quot;num.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;num.out&quot;,&quot;w&quot;,stdout);    #endif    euler(1e7);    int T;    read(T);    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 T2
PAM？PAM？Manacher？其实不是。
正着做及其困难，因为我也不知道这玩意到底怎么做，反正我们正难则反，那么答案就是 n×n−12−坏子串个数\dfrac{n\times n-1}{2}-\text{坏子串个数}2n×n−1​−坏子串个数。让后现在问题在于怎么求后面的坏子串个数。
考虑坏子串有没有什么性质，手摸不难发现坏子串只可能有如下四种情况：

…AAAAB\dots AAAAB…AAAAB
…BBBBA\dots BBBBA…BBBBA
ABBBB…ABBBB\dotsABBBB…
BAAAA…BAAAA\dotsBAAAA…

只有一端端头字符不同的子串不合法。可以 O(n)O(n)O(n) 扫一遍乘两边贡献就可以了，但是我是唐诗我 O(n2log⁡n)O(n^2 \log n)O(n2logn) 暴力拿下 80 分，剪枝高手有点无敌。
反思：做完题目之后要正确分析复杂度，而不是靠着虚无的剪枝骗分。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e6+15;int a[MN],n,ans;string s;namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;signed main()&#123;    #ifndef ONLINE_JUDGE    freopen(&quot;palin.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;palin.out&quot;,&quot;w&quot;,stdout);    #endif    read(n,s);    for(int i=0,r;i&lt;n;i=r)&#123;        r=i;        while(r&lt;n&amp;&amp;s[i]==s[r]) r++;        if(i&gt;0) ans+=r-i;        if(r&lt;n) ans+=r-i-1;    &#125;    put(n*(n-1)/2-ans);    return 0;&#125;
 T3

给定一个仅包含小写英文字母的字符串 SSS，你需要以最小代价编辑出完全等于 SSS 的字符串。
初始时，你手中并没有任何字符。你可以使用以下操作：

购买操作：你可以一次性购买 SSS 的任意前缀。若购买的是长度为 LLL 的前缀，则需花费 a×La \times La×L 万元。
复制操作：你可以将当前已有的字符串整体复制一遍并接在末尾，花费 bbb 万元。
切割操作：你可以在当前字符串的任意位置切开，只保留前缀部分，花费 ccc 万元。

你可以多次使用这些操作，顺序任意。请计算：最少需要花费多少万元才能编辑出字符串 SSS。
1≤x,y,z≤10,1≤∣S∣≤2×1051\le x,y,z \le 10,1\le |S| \le 2\times 10^51≤x,y,z≤10,1≤∣S∣≤2×105。

好题，因为我真不太会拓展 kmp www。
设 f(i)f(i)f(i) 表示编辑出前缀 iii 的最小花费，有三种转移：

直接购买：f(i)=x×if(i)=x\times if(i)=x×i；
倍长 f(2i)=f(i)+yf(2i)=f(i)+yf(2i)=f(i)+y，当且仅当 s[1,i]=s[i+1,2i]s[1,i]=s[i+1,2i]s[1,i]=s[i+1,2i]。
倍长后剪切：f(i+k)=f(i)+y+zf(i+k)=f(i)+y+zf(i+k)=f(i)+y+z，当且仅当 s[1,k]=s[i+1,i+k]s[1,k]=s[i+1,i+k]s[1,k]=s[i+1,i+k]。

显然要用拓展 kmp 求出 s[i:n]s[i:n]s[i:n] 与 sss 的 LCP，那么第三个转移的限制就是 k∈[1,min⁡(zi+1,i)]k\in [1,\min(z_{i+1},i)]k∈[1,min(zi+1​,i)]，这是 O(n2)O(n^2)O(n2)，用一个后缀 min 的树状数组维护转移可以做到 O(nlog⁡n)O(n\log n)O(nlogn)。
反思：我们仅需要保留与状态计算有关的量，尽量做到所谓的状态 “最小化”，在场上自行设计状态的时候设计了二维状态（从哪里倍长过来），导致时间复杂度来到了 O(n3)O(n^3)O(n3)。在 DP 设计状态的时候应当需要保留和状态计算有关的量，这里倍长完全可以正解设一维转移过来。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e5+15,INF=0x3f3f3f3f3f3f3f3f;int n,X,Y,Z,nxt[MN],f[MN];string s;struct BIT&#123;    int t[MN];    BIT()&#123;        memset(t,0x3f,sizeof(t));    &#125;    int lowbit(int x)&#123;return x&amp;-x;&#125;    void modify(int x,int k)&#123;        while(x)&#123;            t[x]=min(t[x],k);            x-=lowbit(x);        &#125;    &#125;    int query(int x)&#123;        int ret=INF;        while(x&lt;MN)&#123;            ret=min(ret,t[x]);            x+=lowbit(x);        &#125;        return ret;    &#125;&#125;bit;void qnxt(string s)&#123;    int l=-1,r=-1;    nxt[0]=n;    for(int i=1;i&lt;n;i++)&#123;        if(i&lt;r) nxt[i]=min(nxt[i-l],r-i);        while(i+nxt[i]&lt;n&amp;&amp;s[i+nxt[i]]==s[nxt[i]]) ++nxt[i];        if(i+nxt[i]&gt;r)&#123;            l=i;            r=i+nxt[i];        &#125;    &#125;&#125;signed main()&#123;    #ifndef ONLINE_JUDGE    freopen(&quot;edit.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;edit.out&quot;,&quot;w&quot;,stdout);    #endif    cin&gt;&gt;s&gt;&gt;X&gt;&gt;Y&gt;&gt;Z;    n=s.length();    qnxt(s);    for(int i=1;i&lt;=n;i++)&#123;        f[i]=min(bit.query(i),X*i);        if(i%2==0&amp;&amp;nxt[i/2]&gt;=i/2) f[i]=min(f[i],f[i/2]+Y);        int r=i+min(nxt[i],i-1);        bit.modify(r, f[i]+Y+Z);    &#125;    cout&lt;&lt;f[n];    return 0;&#125;
 T4
CF1538E
啊哈，我已经在 GF 被骗过了，所以不会再骗啦，只需要计算跨段的贡献就可以了，合并时可能增加的 haha 数量只会在边界字符拼接产生。只需要记录开头和结尾的字符串，拼接的时候暴力模拟就可以了，常熟是 555。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;int n;string lst;struct Node&#123;    string ls,rs;    int ans;    Node()&#123;        ans=0,ls=&quot;&quot;,rs=&quot;&quot;;    &#125;    Node(const string &amp;st)&#123;        ans=(st.find(&quot;haha&quot;))!=string::npos;        ls=st.substr(0,min(4ll,(int)st.length())),rs=st.substr(max(0ll,(int)st.length()-4));    &#125;    friend Node operator +(const Node &amp;x,const Node &amp;y)&#123;        Node ret=x;        ret.ls+=y.ls;        ret.rs+=y.rs;        ret.ls=ret.ls.substr(0,min(4ll,(int)ret.ls.length()));        ret.rs=ret.rs.substr(max(0ll,(int)ret.rs.length()-4));        ret.ans+=y.ans;        int rss=(x.rs.find(&quot;haha&quot;)!=string::npos),lss=((y.ls.find(&quot;haha&quot;))!=string::npos),res=0;        string st=x.rs+y.ls;        for(int i=0;i&lt;=(int)st.length()-4;i++)&#123;            if(st.substr(i,4)==&quot;haha&quot;) res++;        &#125;        ret.ans+=res-rss-lss;        return ret;    &#125;&#125;;map&lt;string,Node&gt; mp;void solve()&#123;    cin&gt;&gt;n;    string lst;    for(int i=1;i&lt;=n;i++)&#123;        string x,y,z;        string op,tmp;        cin&gt;&gt;x&gt;&gt;op;        if(op==&quot;:=&quot;)&#123;            cin&gt;&gt;y;            mp[x]=Node(y);            lst=x;        &#125;else&#123;            cin&gt;&gt;y&gt;&gt;tmp&gt;&gt;z;            mp[x]=mp[y]+mp[z];            lst=x;        &#125;    &#125;    cout&lt;&lt;mp[lst].ans&lt;&lt;&#x27;\n&#x27;;    mp.clear();&#125;signed main()&#123;    freopen(&quot;haha.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;haha.out&quot;,&quot;w&quot;,stdout);    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>比赛记录</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>2025.8.16模拟赛</title>
    <url>/posts/ec022ca1/</url>
    <content><![CDATA[ T1
8 数码问题简化版，O(7!)O(7!)O(7!) 爆搜 BFS，没了。
 T2

∑i=0m+1(n+1i)=∑i=0m(ni)+(n−1i)\sum\limits_{i=0}^{m+1}\binom{n+1}{i}=\sum\limits_{i=0}^{m}\binom{n}{i}+\binom{n-1}{i}
i=0∑m+1​(in+1​)=i=0∑m​(in​)+(in−1​)
∑i=0m+1(ni)=∑i=0m(ni)+(nm+1)\sum\limits_{i=0}^{m+1}\binom{n}{i}=\sum\limits_{i=0}^m \binom{n}{i}+\binom{n}{m+1}
i=0∑m+1​(in​)=i=0∑m​(in​)+(m+1n​)
时间复杂度为 O(n)O(n)O(n)，瓶颈在预处理组合数。
 T3

 Subtask 1
暴力枚举排列，逆序对也可以暴力统计，时间复杂度 O(7!)O(7!)O(7!)。
 Subtask 2
注意到暴力枚举排列不行，但是注意到这个只和排列奇偶性有关。本质上就是求行列式。具体的就是照题目的把矩阵 [li,ri][l_{i},r_{i}][li​,ri​] 设为 1，其他设为 0。求行列式即可，时间复杂度 O(n3)O(n^3)O(n3)。
 Subtask 3
特判了所以没分。
 Subtask 4
首先我们到了 O(nlog⁡n)O(n\log n)O(nlogn)，连暴力 O(n2)O(n^2)O(n2) 初始化矩阵都无法初始化了就很难受。考虑到本题就是让你求行列式，那么目标就是优化求行列式的这一步骤。
我们考虑发掘一个性质，发现最大的性质就是行列式的取值就是 {0,1}\{ 0,1\}{0,1}，且 111 是连续的一段。
考虑行列式展开：
det⁡M=∑psgn⁡(p)∏i=1nAi,pi\det M = \sum_{p} \operatorname{sgn}(p) \prod_{i=1}^n A_{i,p_{i}}
detM=p∑​sgn(p)i=1∏n​Ai,pi​​
这个 sgnsgnsgn 就是题目中的逆序对奇偶性，即 (−1)逆序对对数(-1)^{\text{逆序对对数}}(−1)逆序对对数，而 pip_{i}pi​ 就是我们枚举的排列。
根据过往在提高组线性代数课上，我把这个玩意叫做二分图完美匹配问题。
那么转化一下到二分图，一个合法排列相当于区间匹配问题：对于 Ai,piA_{i,p_{i}}Ai,pi​​，每行选取的列是一个区间，要在区间里挑一个点，要求所有选取的列互不相同。
二分图建模相当于就是左部点是行 iii，右部点是列 jjj，对于 j∈[li,ri],i→jj\in [l_{i},r_{i}],i\to jj∈[li​,ri​],i→j 连边，问题转化为求二分图完美匹配和这个逆序对奇偶性。
这里我们顺序扫描列，枚举右部点来和左部点进行匹配。我们发现一个性质：

若看作二分图结构的话，那么左部点向右部点连边的是一个区间范围。

那么我们有一个贪心的想法，每次我们选择连边区间右端点最小的匹配。证明考虑反证法，如果不选右端点最小的区间，那么它很可能在后面用不了，导致全局无解释。
然后我们就可以做了，具体的，我们需要维护一个可并堆的结构，初始把所有区间插入每个左端点对应的堆里面，每次取出右端点最小的右端点，让后将剩下的元素放到 heapi+1heap_{i+1}heapi+1​ 这个堆里面。
如果你不会可并堆，可以使用 Fhq-Treap 维护最小值和合并进行操作，但是我用可并堆是因为我一开始写 Fhq-Treap 写了一小时炸杠了 QAQ。
而奇偶性可以把高斯消元的代码抄过来，也是可以的，就是如果当前主元不再对角线上，我们可以把它交换回来，同时一次交换代表出现一个逆序对，将 ans 制反即可。
时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：图论模型的转化是一个比较常见的，对于优化如果无从下手是否可以考虑贪心的想法来进行优化？
 T4

好题
首先大量对优先级区间的查询操作，很容易想到使用线段树来维护优先级的查询，但是查什么？如何维护？
考虑发掘性质，发现一个关键性质就是结点数 ≤9\le 9≤9，这是一个关键提示，而且题目中求的是多源最短路，联想 Floyd。
但是题目中还有一个限制就是走的优先级边必须单调不降，如果直接用 Floyd 做的话很难受不好处理性质。但是结点数很少，我们能不能……把每一个优先级对应的边用单独的图存下来？
思考这种方法可行性，注意到 Floyd 的本质其实是邻接矩阵的 (min⁡,+)(\min,+)(min,+) 广义矩阵乘法。也就是说这个又结合律，也可以上线段树维护！从左向右乘，正好满足了不同优先级道路之间的先后顺序。
做法也就这么出来了，注意到 ppp 总共就 2000 个，所以创建最多 2000 个叶子节点，让后并对每个叶子结点跑一遍 Floyd 预处理出只走该优先级道路时的最短路。让后用线段树维护矩阵乘法。
查询的时候通过和线段树无任何差别，答案通过矩阵乘法统计即可。
反思：
当看到某个数据量极小的时候，我们要从它入手，分析性质，例如本题的结点数，上场模拟赛 T4 的 k≤5k\le 5k≤5。
应用线段树要灵活。一般进行区间修改，查询等操作的题目都可以使用线段树解决。其结点类型也不一定是“数”，只要是具有可并性的数据类型都可以当成结点，只要再对其各种操作进行相应修改即可。感觉要再复习一遍线段树理论了。
]]></content>
      <categories>
        <category>比赛记录</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>2025.8.19模拟赛</title>
    <url>/posts/1d09772c/</url>
    <content><![CDATA[ T1
字符串基础练习，时间复杂度 O(nL)O(nL)O(nL)。
 T2

BFS 洪水填充，但是如果你直接暴力枚举一个点进行拓展的话显然不对。我们可以通过多源 BFS 来做到 O(nm)O(nm)O(nm)。
注意这里必须 O(nm)O(nm)O(nm)，记得以后一定要计算复杂度，不然会被卡常。
 T3
更唐的做法：
观察一组合法的三元组的格式是怎样的，显然这三元组因为在树上，故必然存在一个点使得到这三个点距离相等(距离不等反而赢了）。如果不认为显然的请列方程计算，你会发现有解情况唯一剩下的都有环。
那么我们可以枚举交点，把它提起来作为根，然后我们枚举距离 ttt，对每一个孩子的子树求其子树内有多少距离根节点为 ttt 的点，记一个孩子子树的合法点个数为 aia_{i}ai​。
那么答案就是三个不同子树的点进行配对 ∑i≠j≠kaiajak\sum\limits_{i\neq j\neq k} a_{i}a_{j}a_{k}i=j=k∑​ai​aj​ak​。不难发现上述过程光枚举就花了 O(n2)O(n^2)O(n2)，这个玩意还是 O(n3)O(n^3)O(n3) 的，我们很成功的只有 252525 分，而且是 O(1)O(1)O(1) 进行计算很难泵。
然后考虑怎么优化这个答案统计过程，发现及其难以优化。但是发现这具有组合意义，考虑容斥计算。
首先记 sum1=∑iaisum1=\sum\limits_{i}a_{i}sum1=i∑​ai​，那么任意选三个点的方案数就是 (sum13)\dbinom{sum1}{3}(3sum1​)。显然这个方案包含了同子树的，我们要把他们减去：

两个点在一个子树：∑i(ai2)⋅(sum−ai)\sum\limits_{i} \dbinom{a_{i}}{2} \cdot (sum-a_{i})i∑​(2ai​​)⋅(sum−ai​)。
三个点在一个子树：∑i(ai3)\sum\limits_{i}\dbinom{a_{i}}{3}i∑​(3ai​​)。

故答案 (sum13)−∑i(ai2)⋅(sum−ai)−∑i(ai3)\dbinom{sum1}{3}-\sum\limits_{i} \dbinom{a_{i}}{2} \cdot (sum-a_{i})-\sum\limits_{i}\dbinom{a_{i}}{3}(3sum1​)−i∑​(2ai​​)⋅(sum−ai​)−i∑​(3ai​​)。
直接开始化简！

第一个式子：(sum13)=sum(sum−1)(sum−2)6\dbinom{sum1}{3}=\dfrac{sum(sum-1)(sum-2)}{6}(3sum1​)=6sum(sum−1)(sum−2)​。
第二个式子：∑i(ai2)⋅(sum−ai)=ai−(ai−1)2(sum−ai)\sum\limits_{i} \dbinom{a_{i}}{2} \cdot (sum-a_{i})=\dfrac{a_{i}-(a_{i}-1)}{2} (sum-a_{i})i∑​(2ai​​)⋅(sum−ai​)=2ai​−(ai​−1)​(sum−ai​)。
第三个式子：ai(ai−1)(ai−2)6\dfrac{a_{i}(a_{i}-1)(a_{i}-2)}{6}6ai​(ai​−1)(ai​−2)​

第二个式子和第三个式子：
=ai(ai−1)2(sum−ai)+ai(ai−1)(ai−2)6=ai(ai−1)6(3(sum−ai)+(ai−2))=ai(ai−1)6(3sum−2ai−2)\begin{aligned}
&amp; =\dfrac{a_{i}(a_{i}-1)}{2}(sum-a_{i})+\dfrac{a_{i}(a_{i}-1)(a_{i}-2)}{6} \\
&amp; = \dfrac{a_{i}(a_{i}-1)}{6}(3(sum-a_{i})+(a_{i}-2)) \\
&amp; = \dfrac{a_{i}(a_{i}-1)}{6}(3sum -2a_{i} -2)
\end{aligned}
​=2ai​(ai​−1)​(sum−ai​)+6ai​(ai​−1)(ai​−2)​=6ai​(ai​−1)​(3(sum−ai​)+(ai​−2))=6ai​(ai​−1)​(3sum−2ai​−2)​
原式即为：
sum(sum−1)(sum−2)6−∑iai(ai−1)6(3sum−2ai−2)\dfrac{sum(sum-1)(sum-2)}{6}-\sum\limits_{i} \dfrac{a_{i}(a_{i}-1)}{6}(3sum -2a_{i} -2)
6sum(sum−1)(sum−2)​−i∑​6ai​(ai​−1)​(3sum−2ai​−2)
进一步化简：
16[sum(sum−1)(sum−2)−∑iai(ai−1)(3sum−2ai−2)]\dfrac{1}{6}[sum(sum-1)(sum-2)-\sum\limits_{i} a_{i}(a_{i}-1)(3sum-2a_{i}-2)]
61​[sum(sum−1)(sum−2)−i∑​ai​(ai​−1)(3sum−2ai​−2)]
考虑后式，记 sum2=∑iai2,sum3=∑iai3sum_{2}=\sum\limits_{i}a_{i}^2,sum_{3}=\sum\limits_{i}a_{i}^3sum2​=i∑​ai2​,sum3​=i∑​ai3​。有：
∑iai(ai−1)(3sum−2ai−2)=∑i(3sum⋅ai2−(3sum−2)ai−2ai3)\sum\limits_{i} a_{i}(a_{i}-1)(3sum-2a_{i}-2)=\sum\limits_{i}(3sum\cdot a_{i}^2-(3sum-2)a_{i}-2a_{i}^3)
i∑​ai​(ai​−1)(3sum−2ai​−2)=i∑​(3sum⋅ai2​−(3sum−2)ai​−2ai3​)
进一步化简代回分子式有：
sum(sum−1)(sum−2)−(3sum⋅sum2−(3sum−2)⋅sum−2sum3)sum(sum-1)(sum-2)-(3sum\cdot sum_{2}-(3sum -2)\cdot sum-2sum_3)
sum(sum−1)(sum−2)−(3sum⋅sum2​−(3sum−2)⋅sum−2sum3​)
最后化简有：
ans=sum3−3sum⋅sum2+2sum36ans=\dfrac{sum^3 -3sum\cdot sum_{2}+2sum_{3}}{6}
ans=6sum3−3sum⋅sum2​+2sum3​​
即可 O(1)O(1)O(1) 计算，用 BFS 按层计算，时间复杂度 O(nm)O(nm)O(nm)，推式子时长占到了总时长的 90%，据观察没有人会想我这么唐推这个式子，直接一开始不等距离也是可以直接做的，反而会更简单直接组合数即可。
总结：不要看到式子就星宇大发，一定要冷静观察有没有更好的做法。
 T4



 赛后总结
T3 太唐了没有分配好时间去做。推完式子发现没时间做了，以后要有时间意识。
卡常，卡常，卡常！
]]></content>
      <categories>
        <category>比赛记录</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>2025.8.24模拟赛</title>
    <url>/posts/71159a9d/</url>
    <content><![CDATA[省流：被诈骗的一集
 T1
诈骗题。
本题的性质只能从答案入手，很难观察到答案不超过 333，具体的就是令 i=n−2,j=n−1i=n-2,j=n-1i=n−2,j=n−1。那么由于 LCP 肯定不超过长度，所以答案构造 ≤3\le 3≤3。
一个暴力的想法就是暴力枚举两个指针 i,ji,ji,j 来去判断，但是这是 O(n2)O(n^2)O(n2) 的，不过有了答案 ≤3\le 3≤3 我们思考具体取值。
考虑固定 iii。首先 j∈[i+1,i+3]j\in[i+1,i+3]j∈[i+1,i+3] 的枚举是肯定需要的，复杂度可以接受。但是一但到了 i+4i+4i+4 之后呢？结论是直接取到 j=n−1j=n-1j=n−1 即可，答案还是因为答案不超过 3，可以让 LCP(a,c)+LCP(b,c)=0LCP(a,c)+LCP(b,c)=0LCP(a,c)+LCP(b,c)=0 当且仅当存在 cj≠a1∧cj≠bic_j\neq a_1\land c_j\neq b_icj​=a1​∧cj​=bi​。否则：如果 a1≠bia_1\neq b_ia1​=bi​，我们选 j=n−1j = n - 1j=n−1 就有 LCP(a,c)+LCP(b,c)=1LCP(a,c)+LCP(b,c)=1LCP(a,c)+LCP(b,c)=1，最优；如果 a1=bia_1 = b_ia1​=bi​，那后面的 cjc_jcj​ 也都和它们相等，LCP(a,c)+LCP(b,c)≥2LCP(a,c)+LCP(b,c)\ge 2LCP(a,c)+LCP(b,c)≥2，还是选 j=n−1j=n-1j=n−1 最优。
所以就枚举 iii，然后按照上面暴力统计即可。
总结：当且仅当无法从正向导出任何有效结论且用时过长，考虑从答案入手。一个简要的方法就是通过暴力或题目所给出的特殊性结构（例如树），通常会发现答案与给出的特殊性结构或着取值在一个范围内。
 T2
题意就是问有多少个图的深度优先搜索树是给定的树。
题目代码给定了每个点孩子的访问顺序是编号从小到大，所以可以直接得到每个点的 dfs 序。
考虑 dfs 过程，可以发现树边一定存在，非树边如果是横叉边（两端点在 dfs 树上不是祖孙关系）则一定不存在（否则先 dfs 到其中一端的时候一定会让另一端在这个 dfs 树的子树里），如果是返祖边（祖先到子孙）则在子孙点编号大于它在 dfs 树上所在祖先子树的编号（也就是到祖先点路径的倒数第二个点的编号）时可以存在，否则也不能存在。
综合起来，结论是所有树边一定存在，一部分非树边一定不存在，其余非树边可以存在也可以不存在且每条边状态都互相独立任选。那么答案等于 2c2^c2c，其中 ccc 是可存在可不存在的非树边个数。我们称这些非树边是合法的。
根据上述讨论，一条非树边合法当且仅当它是祖孙边，且子孙点所属的祖先点的子树的根编号小于子孙点的编号。那么合法的边数总数其实就是满足以下条件的 (u,v)(u,v)(u,v) 点对数：

uuu 是 vvv 的祖先。
u&lt;vu\lt vu&lt;v
uuu 不是根。（u≠1u\ne 1u=1）

这样，uuu 父亲和 vvv 之间的边是合法的。
要统计这样的点对数，只要统计每个点到根路径上编号小于自己的点数之和。dfs 一遍，用树状数组或者其它数据结构在 dfs 过程中维护当前点到根路径上的点集即可。用权值线段树可以简单做到 O(nlog⁡n)O(n\log n)O(nlogn)。但是问题在于你不对拍，你 30 分。
总结：对拍过程：先暴力拍小的，然后不带暴力拍大的测极端数据下是否合法。
 T3
先考虑 k=1k=1k=1 的情况，看到这种有多个可以状压的部分，你可能无从下手，但是我们要考虑我们到底要状压什么部分。
考虑贡献，贡献有三部分，固定点内部，固定点与可选点，可选点内部的贡献。
考虑到前两部分的贡献都是可以暴力预处理的，但是后面很难受，这个地方就是我们要特殊处理的部分。
首先考虑这个距离贡献，曼哈顿距离我们将绝对值拆开有：
∣a∣+∣b∣=max⁡(a+b,a−b,−a+b,−a−b).|a|+|b|=\max(a+b,a-b,-a+b,-a-b).
∣a∣+∣b∣=max(a+b,a−b,−a+b,−a−b).
也就是说，绝对值此时无关紧要，我们只需要考虑安排好每个数每一维正负号的贡献就好了。举个例子，假设已经选好了 mmm 个点，那么你可以先排序成  x1≤x2≤⋯≤xmx_1\le x_2\le \cdots\le x_mx1​≤x2​≤⋯≤xm​，然后你按贡献计算 ∑i=1m(2i−m−1)xi=∑i≠j∣xi−xj∣\sum_{i=1}^m(2i-m-1)x_i=\sum_{i\ne j}|x_i-x_j|∑i=1m​(2i−m−1)xi​=∑i=j​∣xi​−xj​∣。我们实际上只需要枚举 m!m!m! 种排列，然后将 ∑i=1m(2i−m−1)xi\sum_{i=1}^m(2i-m-1)x_i∑i=1m​(2i−m−1)xi​ 的最大值算出来。
那么有状压 DP，设 f(i,S)f(i,S)f(i,S) 表示前 iii 个点中，已经钦定了一些点位于 SSS 这些位置的情况下，所能产生的贡献最大值。此处的 SSS 应当是 mmm 位二进制数。也就是相当于用状压DP枚举了点坐标大小的 m!m!m! 种排列。
转移时，把第 iii 个点放到第 ppp 个位置，贡献将会是 (2p−m−1)xi+ci(2p - m - 1)x _i + c _i(2p−m−1)xi​+ci​，其中 cic _ici​ 表示第 iii 个点与其他固定点之间的贡献。如此状压 DP，复杂度是 O(nm2m)O(n m2^m)O(nm2m)，其中 nnn 代表可选点数，也即 m+tm + tm+t。
考虑 k=2k=2k=2，同上拓展，设 f(i,S1,S2)f(i, S_1, S_2)f(i,S1​,S2​) 表示前 iii 个点中，已经钦定了一些点的 xxx 坐标占据了 S1S_1S1​ 的位置，yyy 坐标占据了 S2S_2S2​ 的位置，所能产生的贡献最大值。
转移时，把第 iii 个点的 xxx 坐标放到 p1p _1p1​ 的位置，yyy 坐标放到 p2p _2p2​ 的位置，贡献将会是 (2p1−m−1)xi+(2p2−m−1)yi+ci(2p _1 - m - 1)x _i + (2p _2 - m - 1)y _i + c _i(2p1​−m−1)xi​+(2p2​−m−1)yi​+ci​，复杂度粗略估计一下大概是 O(nm24m)O(nm^2 4^m)O(nm24m)，已经可以过了。
但是注意到，S1S _1S1​ 和 S2S_2S2​ 互相之间是有限制的，因为他们总需要保证出现的点数相同，不可能会是 O(4m)O(4 ^m)O(4m) 级别的状态量。实际上考虑枚举两个状态中出现的点数 kkk，状态量应当为
∑k=0m(mk)2,\sum _{k = 0}^m {m \choose k}^2,
k=0∑m​(km​)2,
这是 O(4mm)O(\frac {4^m} {\sqrt m})O(m​4m​) 的。
总结：
看到一堆可以状压的变量时，首先要分析贡献发觉性质而不是什么考虑状压的变量。有的时候状态变量可能会比实际要更少。
 T4
彩色括号
]]></content>
      <categories>
        <category>比赛记录</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>20250814模拟赛</title>
    <url>/posts/68036b89/</url>
    <content><![CDATA[ 前言
省流：300 分。
 T1
考虑 DP，设 f(i,0/1/2)f(i,0/1/2)f(i,0/1/2) 表示处理到第 iii 个数，当前是往左，不动，往右，方案是否合法，转移如下：
f[i][0]=f[i−1][0]⋅[xi−xi−1=1]+f[i−1][1]⋅[xi−(xi−1−1)=1]+f[i−1][2]⋅[xi−(xi−1+1)=1],f[i][1]=f[i−1][0]⋅[xi−1−xi−1=1]+f[i−1][1]⋅[xi−1−(xi−1−1)=1]+f[i−1][2]⋅[xi−1−(xi−1+1)=1],f[i][2]=f[i−1][0]⋅[xi+1−xi−1=1]+f[i−1][1]⋅[xi+1−(xi−1−1)=1]+f[i−1][2]⋅[xi+1−(xi−1+1)=1],\begin{aligned}
f[i][0] &amp;= f[i-1][0] \cdot [x_i - x_{i-1} = 1] 
        + f[i-1][1] \cdot [x_i - (x_{i-1} - 1) = 1] 
        + f[i-1][2] \cdot [x_i - (x_{i-1} + 1) = 1], \\
f[i][1] &amp;= f[i-1][0] \cdot [x_i - 1 - x_{i-1} = 1] 
        + f[i-1][1] \cdot [x_i - 1 - (x_{i-1} - 1) = 1] 
        + f[i-1][2] \cdot [x_i - 1 - (x_{i-1} + 1) = 1], \\
f[i][2] &amp;= f[i-1][0] \cdot [x_i + 1 - x_{i-1} = 1] 
        + f[i-1][1] \cdot [x_i + 1 - (x_{i-1} - 1) = 1] 
        + f[i-1][2] \cdot [x_i + 1 - (x_{i-1} + 1) = 1],
\end{aligned}f[i][0]f[i][1]f[i][2]​=f[i−1][0]⋅[xi​−xi−1​=1]+f[i−1][1]⋅[xi​−(xi−1​−1)=1]+f[i−1][2]⋅[xi​−(xi−1​+1)=1],=f[i−1][0]⋅[xi​−1−xi−1​=1]+f[i−1][1]⋅[xi​−1−(xi−1​−1)=1]+f[i−1][2]⋅[xi​−1−(xi−1​+1)=1],=f[i−1][0]⋅[xi​+1−xi−1​=1]+f[i−1][1]⋅[xi​+1−(xi−1​−1)=1]+f[i−1][2]⋅[xi​+1−(xi−1​+1)=1],​
O(n)O(n)O(n)。
O(1)O(1)O(1) 做法：直接判断 an−a1≤n+1a_n-a_{1}\le n+1an​−a1​≤n+1 即可。
 T2
原题 CF1824B2 LuoTianyi and the Floating Islands (Hard Version) - 洛谷
 T3
四元环计数，考虑和三元环计数一样，先度数小的往度数大的定向。
不难发现只有三种情况：

A -&gt; B -&gt; C -&gt; D
A -&gt; B -&gt; D -&gt; C
A -&gt; D -&gt; B -&gt; C

考虑固定 AAA，让后我们对于后面三个进行暴力枚举，不难发现后面三个相当于在枚举三元环，时间复杂度是 O(mm)O(m\sqrt{m})O(mm​)。
有必要澄清一点的是，loj 的提交是因为我根本不知道样例合法性，有好心人说样例有误我也只能自己猜样例这样改应该是对的，不算分。
 T4
一眼 nnn 极大 m,km,km,k 极小，考虑矩阵快速幂。
先把 DP 设出来，由于 kkk 极小可以直接在状态内部表示我们恐怖的奴隶主的类型，设 f(i,cnt1,cnt2,cnt3)f(i,cnt1,cnt2,cnt3)f(i,cnt1,cnt2,cnt3) 表示目前打到第 iii 轮，恐怖的奴隶主剩一滴血的数量为 cnt1cnt1cnt1，两滴血的为 cnt2cnt2cnt2，三滴血的为 cnt3cnt3cnt3，的扣减 Boss 的生命值点数的期望。先写出打 4 种怪的概率：

打 Boss：p0=1cnt1+cnt2+cnt3+1p_0=\dfrac{1}{cnt1+cnt2+cnt3+1}p0​=cnt1+cnt2+cnt3+11​。
打一滴血的：p1=cnt1cnt1+cnt2+cnt3+1p_{1}=\dfrac{cnt1}{cnt1+cnt2+cnt3+1}p1​=cnt1+cnt2+cnt3+1cnt1​。
打两滴血的：p2=cnt2cnt1+cnt2+cnt3+1p_{2}=\dfrac{cnt2}{cnt1+cnt2+cnt3+1}p2​=cnt1+cnt2+cnt3+1cnt2​。
打三滴血的：p3=cnt3cnt1+cnt2+cnt3+1p_{3}=\dfrac{cnt3}{cnt1+cnt2+cnt3+1}p3​=cnt1+cnt2+cnt3+1cnt3​。

那么转移如下，令 nowf=f(i,cnt1,cnt2,cnt3)nowf=f(i,cnt1,cnt2,cnt3)nowf=f(i,cnt1,cnt2,cnt3)：
f(i+1,cnt1,cnt2,cnt3)←nowf+p0f(i+1,cnt1,cnt2,cnt3)\leftarrow nowf+p_0
f(i+1,cnt1,cnt2,cnt3)←nowf+p0​
f(i+1,cnt1−1,cnt2,cnt3)←nowf⋅p1(cnt1≠0)f(i+1,cnt1+1,cnt2−1,cnt3+1)←nowf⋅p2(cnt1+cnt2+cnt3≤k)f(i+1,cnt1+1,cnt2−1,cnt3)←nowf⋅p2(cnt1+cnt2+cnt3&gt;k)f(i+1,cnt1,cnt2+1,cnt3)←nowf⋅p3(cnt1+cnt2+cnt3≤k)f(i+1,cnt1,cnt2+1,cnt3−1)←nowf⋅p3(cnt1+cnt2+cnt3&gt;k)\begin{aligned}
f(i+1,cnt1-1,cnt2,cnt3) &amp; \leftarrow nowf\cdot p_{1} &amp; (cnt1\neq 0) \\ \\
f(i+1,cnt1+1,cnt2-1,cnt3+1) &amp; \leftarrow nowf\cdot p_{2} &amp; (cnt1+cnt2+cnt3 \le k) \\
f(i+1,cnt1+1,cnt2-1,cnt3) &amp; \leftarrow nowf\cdot p_{2} &amp; (cnt1+cnt2+cnt3 &gt; k) \\ \\
f(i+1,cnt1,cnt2+1,cnt3) &amp; \leftarrow nowf\cdot p_{3} &amp; (cnt1+cnt2+cnt3 \le k) \\
f(i+1,cnt1,cnt2+1,cnt3-1) &amp; \leftarrow nowf\cdot p_{3} &amp; (cnt1+cnt2+cnt3 &gt; k) \\
\end{aligned}f(i+1,cnt1−1,cnt2,cnt3)f(i+1,cnt1+1,cnt2−1,cnt3+1)f(i+1,cnt1+1,cnt2−1,cnt3)f(i+1,cnt1,cnt2+1,cnt3)f(i+1,cnt1,cnt2+1,cnt3−1)​←nowf⋅p1​←nowf⋅p2​←nowf⋅p2​←nowf⋅p3​←nowf⋅p3​​(cnt1=0)(cnt1+cnt2+cnt3≤k)(cnt1+cnt2+cnt3&gt;k)(cnt1+cnt2+cnt3≤k)(cnt1+cnt2+cnt3&gt;k)​
时间复杂度 O(nk)O(nk)O(nk)，爆搜发现有效的状态数上界 kkk 很小，在 170 左右，用矩阵快速幂简单优化可以做到 O(Tk3log⁡n)O(Tk^3 \log n)O(Tk3logn)，发现炸掉了，考虑优化。
首先向量乘法是 k2k^2k2 的，所以简单实现向量乘法而不是矩阵乘法容易有 O(Tk2(k3log⁡n)O(Tk^2(k^3 \log n)O(Tk2(k3logn)，发现瓶颈在于每一次我们都要算一遍转移矩阵。注意到 m,km,km,k 固定而 nnn 才是变化的。所以预处理转移矩阵，通过二进制分组转移即可，时间复杂度 O(k3log⁡n+Tk2log⁡n)O(k^3 \log n+Tk^2 \log n)O(k3logn+Tk2logn)。
反思：矩阵乘法实现的时候应当注意有效状态的数量以及矩阵乘法带来的 n3n^3n3 的大小，这个一定是要注意的。
]]></content>
      <categories>
        <category>比赛记录</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC236G题解</title>
    <url>/posts/f19f1a1/</url>
    <content><![CDATA[推销自己的矩阵优化文章：矩阵快速幂优化DP

注意到点数及其小，边数也算小，而 LLL 极大，有一股浓烈的矩阵快速幂优化的味道。
首先这个问题肯定是一个 DP 的题，我们有一个暴力的想法，我们对于每一个操作，利用 Floyd 的 DP 思想，邻接矩表示图两点之间经过 111 条边的路径数量这个特点，对于每一个操作我们更新邻接矩阵，让后在上面跑矩阵快速幂，幂 LLL 次后的邻接矩阵代表的就是经过 LLL 条边的信息，一次次更新答案判断可达性即可，时间复杂度 O(Tn3log⁡L)O(T n^3 \log L)O(Tn3logL)，不能通过。
我们考虑如何优化，根据题意，每一次操作只会添加一条边，而要求的是求经过边中操作编号更靠后（也就是更大）的边。我们可以将这个操作编号绑到边权上，那么实际上我们就是要对经过的边的边权取 max⁡\maxmax 操作。
那么我们有一个显而易见的状态，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示在从 iii 到 jjj 节点，经过 kkk 条边的最大边权，转移如下：
f(i,j,k)=min⁡{max⁡p=1nf(i,p,k−1)+w(p,j)}f(i,j,k)=\min\left\{ \max_{p=1}^{n} f(i,p,k-1)+w(p,j) \right\}
f(i,j,k)=min{p=1maxn​f(i,p,k−1)+w(p,j)}
其中 w(i,j)w(i,j)w(i,j) 表示从 i→ji\rightarrow ji→j 边的边权。
考虑这个能不能转成广义矩阵乘法的形式，检验如下：

外部加法结合交换律：min⁡\minmin 满足结合律交换律。
内部乘法结合律：max⁡\maxmax 满足结合律与交换律。
分配律：左分配为：max⁡(a,min⁡(b,c))=min⁡(max⁡(a,b),max⁡(a,c))\max(a,\min(b,c))=\min(\max(a,b),\max(a,c))max(a,min(b,c))=min(max(a,b),max(a,c))，由于 max⁡\maxmax 有交换律所有右分配律同样成立，故分配律成立。

注意转矩阵乘法后千万不要思维定势，各个特殊乘法加法的单位元都是不一样的，下面给出一张图给出了各个广义矩阵乘法对应的单位元：

注意到这个矩阵幂的形式其实和上面 Floyd 的形式差不太多，我们在实现的时候还是邻接矩阵，每个操作的边的边权设为 iii，跑矩阵快速幂即可。时间复杂度 O(n3log⁡L)O(n^3 \log L)O(n3logL)，代码如下，跑的很慢大常数选手非我莫属 www。
#include&lt;bits/stdc++.h&gt;#include &lt;cmath&gt;#define int long longusing namespace std;constexpr int MN=250,INF=1e18;int n,t,l;struct Matrix&#123;    int mat[MN][MN];    Matrix(int x=INF)&#123;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                mat[i][j]=INF;            &#125;        &#125;        if(x==INF) return;        for(int i=0;i&lt;MN;i++) mat[i][i]=x;    &#125;    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    ret.mat[i][j]=min(ret.mat[i][j],max(mat[i][k],x.mat[k][j]));                &#125;            &#125;        &#125;        return ret;    &#125;&#125;adj;Matrix ksm(Matrix a,int b)&#123;    Matrix ret(0);    while(b)&#123;        if(b&amp;1) ret=ret*a;        a=a*a;        b&gt;&gt;=1;    &#125;    return ret;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;t&gt;&gt;l;    for(int i=1;i&lt;=t;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj.mat[u][v]=i;    &#125;    adj=ksm(adj,l);    for(int i=1;i&lt;=n;i++)&#123;        cout&lt;&lt;(adj.mat[1][i]==INF?-1:adj.mat[1][i])&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC410E题解</title>
    <url>/posts/7d01b1ce/</url>
    <content><![CDATA[可能更洛谷的体验
有一个 O(n3)O(n^3)O(n3) 的 DP 是很显然的，就是设 f(i,j,k,0/1)f(i,j,k,0/1)f(i,j,k,0/1) 表示第 iii 只怪兽，用了 jjj 的体力，用了 kkk 的魔力，当前打怪兽用不用魔力的最大打怪兽数量，这显然不能通过。
我们考虑什么状态中信息是有用的。首先，既然我们是一个一个按顺序打的怪物，遇到每一个怪兽我们肯定都要打。那么实际上我们根本就不用存储打怪兽的数量，只需要存储当前魔力或体力的信息，通过这个我们来判断是否到现在能够打怪兽。
那么，我们只需要把体力或魔力任一维度丢到我们 DP 求解的答案即可，因为这里我们有一个是否使用魔力的状态决策，我们考虑把魔力丢进去。
设 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示第 iii 只怪兽，用了 jjj 的体力，当前打怪兽用不用魔力的最小魔力使用。转移方程是显然的：
f(i,j,0)=min⁡{f(i−1,j+ai,0),f(i−1,j+ai,1)}f(i,j,1)=min⁡{f(i−1,j,0),f(i−1,j,1)}+bi\begin{aligned}
f(i,j,0) &amp; = \min \left\{ f(i-1,j+a_{i},0),f(i-1,j+a_{i},1) \right\} \\

f(i,j,1) &amp; = \min \left\{ f(i-1,j,0),f(i-1,j,1) \right\} +b_{i}

\end{aligned}
f(i,j,0)f(i,j,1)​=min{f(i−1,j+ai​,0),f(i−1,j+ai​,1)}=min{f(i−1,j,0),f(i−1,j,1)}+bi​​
答案统计即求最大的 iii 使得 min⁡j=1h{f(i,j,0),f(i,j,1)}≤M\min\limits_{j=1}^{h} \left\{ f(i,j,0),f(i,j,1) \right\}\le Mj=1minh​{f(i,j,0),f(i,j,1)}≤M。
代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3520;int f[MN][MN][2],n,h,m,a[MN],b[MN];signed main()&#123;    cin&gt;&gt;n&gt;&gt;h&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i]&gt;&gt;b[i];    &#125;    memset(f,0x3f,sizeof(f));    for(int i=0;i&lt;=h;i++)&#123;        f[0][i][0]=f[0][i][1]=0;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=0;j+a[i]&lt;=h;j++)&#123;            f[i][j][0]=min(f[i-1][j+a[i]][0],f[i-1][j+a[i]][1]);        &#125;        for(int j=0;j&lt;=h;j++)             f[i][j][1]=min(f[i-1][j][0],f[i-1][j][1])+b[i];    &#125;    bool flag=0;    for(int i=n;i&gt;=1;i--)&#123;        int ans=0x3f3f3f3f3f3f3f3f;        for(int j=0;j&lt;=h;j++)&#123;            ans=min(&#123;ans,f[i][j][0],f[i][j][1]&#125;);        &#125;        if(ans&lt;=m)&#123;            flag=1;            cout&lt;&lt;i;            break;        &#125;    &#125;    if(!flag) cout&lt;&lt;0;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC422题解A-F</title>
    <url>/posts/4b51acd/</url>
    <content><![CDATA[省流：20:50~22:00 短时场
 A
暴力模拟即可
 B
每个点暴力判断即可，写挂了 1 次
 C
没脑子写二分，有脑子猜结论，上界显然是 min⁡{na,nb}\min\{n_{a},n_{b}\}min{na​,nb​}，下界不太好，因为下界和这个能够分配的数量有关，设数量为 xxx，那么显然答案必定为 na−x+nb+nc−x≥xn_{a}-x+n_{b}+n_{c}-x\ge xna​−x+nb​+nc​−x≥x，那么显然 na+nb+nc−2x≥xn_{a}+n_{b}+n_{c}-2x\ge xna​+nb​+nc​−2x≥x。显然有 x≥nA+nB+nC3x\ge \dfrac{n_{A}+n_{B}+n_{C}}{3}x≥3nA​+nB​+nC​​。上下界有了知道咋做了吧。
 D
你猜为什么给你 2n2^n2n？
你倒着操作，每次操作肯定是 2n2=2n−1\dfrac{2^n}{2}=2^{n-1}22n​=2n−1 啊，这些部分相当于子问题分治的结构，再翻译一下就是完全二叉树的结构，根节点点权为 kkk，你要在遍历每一层的时候通过合理均分当前点点权到两个孩子，使得分配到两个孩子的权值之间差值最小，什么时候最小？直接除二平均分不就做完了，时间复杂度 O(n)O(n)O(n)。因为我是唐我写了个 O(n2n)O(n 2^n)O(n2n) 判断不平衡度。
 E
要求 &gt;⌊n2⌋&gt; \lfloor \dfrac{n}{2} \rfloor&gt;⌊2n​⌋？而且题目没说无解？
直接随机化，每次取 2 个点求直线即可，时间复杂度 O(能过)O(\text{能过})O(能过)。
 F
Dijkstra 能解决的好吧，但是论文级别。动态权这玩意除非你学过论文级别的东西否则这玩意是没法做的。
注意到时间复杂度是宽裕的 O(nm)O(nm)O(nm)，同时注意到我们可以通过拆分法将路径点权贡献拆分到每个点上，这些点的贡献只和当前路径长度有关。也就是说我们可以考虑 DP 求解，设 f(i,j)f(i,j)f(i,j) 表示目前到 iii 点路径长度为 jjj 的最小花费，枚举每一个点和路径长度求解即可，时间复杂度 O(n2+nm)O(n^2+nm)O(n2+nm)。
其实有更好的性质就是每一个点不会经过两次，所以这个图必定是一个 DAG，DAG上 DP 即可，时间复杂度 O(n+m)O(n+m)O(n+m)。
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>AC自动机的进阶应用</title>
    <url>/posts/6074ec1/</url>
    <content><![CDATA[ 0. 前言
你需要知道的芝士：

AC 自动机基础；
Trie 树；

这里是进阶使用，所以会结合一些例题来讲解，读者应有 AC 自动机的基础芝士即可。
 1. 自动机与 AC 自动机本质
考虑到大多数都是先学 AC 自动机，而很久以后才学自动机，这里有必要先给出概念，这样才能更好的理解后面的芝士。
 1.1 自动机
自动机，在 OI 中一般我们涉及的是有限状态自动机，它拥有有限数量的状态，每个状态代表不同的意义，每个状态可以通过输入自动机，让自动机切换到其他的状态。任意时刻状态机只能处在一个状态。
而有限状态机可以表示为一个有向图：

从图中看出来一个信息学竞赛一共包含 5 个状态：学信竟，学 whk，吃吃饭，睡睡觉，摸摸鱼。每种带有箭头的连线，表示可以从当前状态切换到其他的状态，以及切换的条件。
我们列个表格：




学信竟
学 whk
吃吃饭
睡睡觉
摸摸鱼




学信竟


去机房

摆烂时间到


学 whk
信竟时间到


回去午睡



吃吃饭
去食堂
去教室





睡睡觉

回教室
被吵醒




摸摸鱼



回家




表格中左侧第一列为当前状态。
表格中上方第一行为切换的下一个状态。
表格中每行从左到右为状态切换的条件(状态 A 能不能切换到状态B)。
举例：

学 whk -&gt; 学信竟：条件（信竟时间到）。
学信竟 -&gt; 摸摸鱼：条件（摸鱼时间到）。
摸摸鱼 -&gt; 睡睡觉：条件（回家）。

几个概念：

状态：当前所处的状态，在当前状态下可以有不同的行为和属性。
转移：状态变更，满足条件是从一个状态转移到另一个状态。
动作：表示在给定时刻进行的活动。
条件：触发一个事件、当一个条件满足触发状态转移切换到另一个状态。

一个自动机，我们应当还有起始状态，在本图中我们的起始状态是 “睡睡觉”。（不准通宵！）
那为啥叫自动呢，是因为只要输入符号和转移规则确定，状态变化是自动的，自动机可以自己通过设定好的路线（即有向图的边权）来进行转移。
而自动机的实质就是：状态集合（点） + 转移规则（边）。
在竞赛中的应用我们有 AC 自动机，后缀自动机，DP 套 DP等。
 1.2 Trie 与 AC 自动机
那我们上面提到了自动机，那么，信竟中有哪些我们值得举例的呢？
例如字典树，我们看看字典树的形状，我们借用 OI-Wiki 的图：

那我们回看上面的自动机表示图，你会发现两者十分相似，我们模拟一下 Trie 的过程。
我们把自动机丢在 1 号点，让自动机读入字符串。起始状态在 1 号点，让后我们输入一个字符 a，就转移到 2 号点，让后输入一个字符 b，转移到 6 号点，让后输入一个字符 a，转移到 11 号点。
那么实际上，字典树其实就是一个自动机，通过接受指定字符串集合中的元素来转移，而转移的时候就是利用 Trie 图上的边来进行转移。
而 AC 自动机，是 Trie+Fail 指针，本质上是 Trie 上的自动机。
Trie 不用说我们上面已经提到过了，那么既然 AC 自动机叫自动机，那么 Trie+Fail 这一甜蜜组合一定也能构成自动机吧？其实是的，Fail 指针实际上就是在 Trie 的有向转移图上进行拓展。在单模式匹配中，失败时需要回溯文本指针；而 AC 自动机通过失配指针自动匹配状态，让 Trie 进化为一条永通路，以便避免文本串匹配时一个模式串到结尾了没有地方可走的尴尬。
严格来说，AC自动机是一个带有失败转移的确定性有限状态自动机（DFA），在经典的 Trie 上我们增加了失败状态的优化处理机制。而我们引入失配指针，是为了最小化状态数（避免为所有可能的失败情况显式建边），同时保持高效匹配。而AC自动机的 “自动” 正体现在其能根据预定义的转移规则（包括正常转移和失败转移），无需人工干预地完成多模式匹配。
 2. AC 自动机上 DP
 2.1 状态设计
我们上面讲自动机当然不是摆烂的，我们需要结合芝士进行讲解。
众所周知，AC 自动机上的 DP，一般来说都是这么设计状态 f(i,j)f(i,j)f(i,j)，表示长度为 iii 的字符串在 AC 自动机上匹配到 jjj 节点。但是我们为什么这个设计？
动态规划通过将问题分解为子问题，并存储子问题的解（状态）来避免重复计算。关键在于：

状态定义；
状态转移；
边界确定；

而 AC 自动机上 DP，本质就是自动机上的 DP，其本质就是：将问题的约束条件建模为一个自动机，在 DP 状态中增加自动机的状态维度，通过在自动机上逐层推进的转移规则指导 DP 的决策。因为自动机的状态是唯一确定的，通过 AC 自动机的有向转移图，我们就可以方便的进行状态转移，并进行答案统计。
通常来说，自动机上的 DP 我们需要自动机的状态，一般来说为 f(i,S)f(i,S)f(i,S)，其中 iii 是一个确定的顺序，而 SSS 代表自动机的状态。对应到 AC 自动机上，AC 自动机的状态是一个节点，所以我们定义 f(i,j)f(i,j)f(i,j)，表示长度为 iii 的字符串在 AC 自动机上匹配到 jjj 节点。
还是来看例题吧：
 2.2 例题
 USACO12JAN] Video Game G
对输入的模板串建 AC 自动机，设 f(i,j)f(i,j)f(i,j) 表示前 iii 个字符，最后一个跑到了 AC 自动机 jjj 号点的最大答案，我们只需要枚举对于每一个 f(i,j)f(i,j)f(i,j) 下一个是字符是什么，题目中是 A，B，C。转移到下一个节点，让后跳 Fail 指针求答案，对于匹配到一个长度为 kkk 的模板串，有 f(i,son[j][k])=max⁡(f(i−1,j)+end[son[j][k]]f(i,son[j][k]) = \max(f(i-1,j)+end[son[j][k]]f(i,son[j][k])=max(f(i−1,j)+end[son[j][k]]。直接做就可以了。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2e4+15;int n,K,f[MN][520];struct ACAuto&#123;    int t[MN][3],fail[MN],end[MN],tot;    void insert(string s)&#123;        int p=0;        for(auto c:s)&#123;            int k=c-&#x27;A&#x27;;            if(!t[p][k]) t[p][k]=++tot;            p=t[p][k];        &#125;        end[p]++;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;3;i++)&#123;            if(t[0][i]) q.push(t[0][i]);        &#125;          while(!q.empty())&#123;            int u=q.front();            q.pop();            for(int i=0;i&lt;3;i++)&#123;                int v=t[u][i];                if(v)&#123;                    fail[v]=t[fail[u]][i];                    q.push(v);                &#125;else t[u][i]=t[fail[u]][i];            &#125;            end[u]+=end[fail[u]];        &#125;    &#125;&#125;t;signed main()&#123;    cin&gt;&gt;n&gt;&gt;K;    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        t.insert(s);    &#125;    t.build();    memset(f,-0x3f,sizeof(f));    for(int i=0;i&lt;=K;i++) f[i][0]=0;    for(int i=1;i&lt;=K;i++)&#123;        for(int j=0;j&lt;=t.tot;j++)&#123;            for(int k=0;k&lt;3;k++)&#123;                f[i][t.t[j][k]]=max(f[i][t.t[j][k]],f[i-1][j]+t.end[t.t[j][k]]);            &#125;        &#125;    &#125;    int ans=-0x3f3f3f3f;    for(int i=0;i&lt;=t.tot;i++) ans=max(ans,f[K][i]);    cout&lt;&lt;ans;    return 0;&#125;
 JSOI2007 文本生成器
本部分是反向的计算 DP。
状态还是我们上面所说的，f(i,j)f(i,j)f(i,j)，表示长度为 iii 的字符串在 AC 自动机上匹配到 jjj 节点。但是题目中还有一个限制：“包含至少一个”，考虑容斥，答案就是整体减去一个模式串都不包含的文本串数。整体是 26m26^m26m，问题转化为求解第二部分。
文本串中不能出现模式串，所以我们要在一个字符串的末尾打标记 enduend_{u}endu​，同时如果一个字符串的后缀也是模式串，那么它也不能出现在文本串中，所以我们要让 endu=endfail[u]end_{u}=end_{fail[u]}endu​=endfail[u]​。
那么转移方程就是避开模式串进行转移：
void dodp()&#123;    f[0][0]=1;    for(int i=0;i&lt;m;i++)&#123;        for(int j=0;j&lt;=tot;j++)&#123;            for(int k=0;k&lt;26;k++)&#123;                if(!end[ch[j][k]])&#123;                    f[i+1][ch[j][k]]=(f[i+1][ch[j][k]]+f[i][j])%MOD;                &#125;            &#125;        &#125;    &#125;&#125;
那么第二部分答案就是 ∑i=1cntf(m,i)\sum\limits_{i=1}^{cnt} f(m,i)i=1∑cnt​f(m,i)，其中 cntcntcnt 表示 AC 自动机的点数，那么答案就是：
26m−∑i=1cntf(m,i)(mod10007)26^m - \sum\limits_{i=1}^{cnt} f(m,i) \pmod{10007}
26m−i=1∑cnt​f(m,i)(mod10007)
直接写：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MOD=1e4+7,MN=120,MK=1e5;int n,m,f[MN][MK];template&lt;typename type&gt;inline void read(type &amp;x)&#123;    x=0;bool flag(0);char ch=getchar();    while(!isdigit(ch)) flag=ch==&#x27;-&#x27;,ch=getchar();    while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();    flag?x=-x:0;&#125;inline string stread()&#123;    char ch = getchar();    string st1 = &quot;&quot;;    while (!((ch &gt;= &#x27;A&#x27;) &amp;&amp; (ch &lt;= &#x27;Z&#x27;)))        ch = getchar();    while ((ch &gt;= &#x27;A&#x27;) &amp;&amp; (ch &lt;= &#x27;Z&#x27;))        st1 += ch, ch = getchar();    return st1;&#125;struct Acauto&#123;    int ch[MK][26],tot,fail[MK],end[MK];    void insert(string s)&#123;        int p=0;        for(auto c:s)&#123;            if(!ch[p][c-&#x27;A&#x27;]) ch[p][c-&#x27;A&#x27;]=++tot;            p=ch[p][c-&#x27;A&#x27;];        &#125;        end[p]=1;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;26;i++)&#123;            if(ch[0][i]) q.push(ch[0][i]);        &#125;        while(!q.empty())&#123;            int f=q.front();            q.pop();            for(int i=0;i&lt;26;i++)&#123;                if(ch[f][i])&#123;                     fail[ch[f][i]]=ch[fail[f]][i];                    q.push(ch[f][i]);                    end[ch[f][i]]|=end[fail[ch[f][i]]];                &#125;                else ch[f][i]=ch[fail[f]][i];            &#125;        &#125;    &#125;    void dodp()&#123;        f[0][0]=1;        for(int i=0;i&lt;m;i++)&#123;            for(int j=0;j&lt;=tot;j++)&#123;                for(int k=0;k&lt;26;k++)&#123;                    if(!end[ch[j][k]])&#123;                        f[i+1][ch[j][k]]=(f[i+1][ch[j][k]]+f[i][j])%MOD;                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;ac;int qpow(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=(ret*a)%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;int main()&#123;    read(n);    read(m);    for(int i=1;i&lt;=n;i++)&#123;        string s;        s=stread();        ac.insert(s);    &#125;    ac.build();    ac.dodp();    int ans=qpow(26,m);    for(int i=0;i&lt;=ac.tot;i++)&#123;        ans=(ans-f[m][i]+MOD)%MOD;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 SDOI2014 数数
自动机上 DP 可以与许多不同类型的 DP 结合，因为实质上自动机上 DP 利用的是自动机的转移顺序，所以很灵活可以与许多类型的 DP 结合，这里是数位 DP。
注意到本题就是不让特定的模式数串出现，考虑到一个集合有许多模式数串，考虑 AC 自动机，因为自动机上的 DP 我们是必须要知道自动机跑到哪里了，有一个维度必须设计 SSS 表示 AC 自动机上的节点（即自动机状态）。本题在数位 DP 只需要关心自动机状态即可，考虑设 f[pos][st]f[pos][st]f[pos][st] 表示现在从最高位填到第 pospospos 位，当前 AC 自动机状态节点在 ststst。通过记忆化搜索是很容易实现的，注意一下前导零也是算模式串里面的，注意实现细节。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1520,MOD=1e9+7;int m,a[MN],tot,f[MN][MN];string n;struct ACAuto&#123;    int t[MN][12],tot,fail[MN],end[MN];    void insert(string s)&#123;        int p=0;        for(auto c:s)&#123;            int k=c-&#x27;0&#x27;;            if(!t[p][k]) t[p][k]=++tot;            p=t[p][k];        &#125;        end[p]=1;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;10;i++)&#123;            if(t[0][i]) q.push(t[0][i]);        &#125;        while(!q.empty())&#123;            int u=q.front();            q.pop();                        for(int i=0;i&lt;10;i++)&#123;                int v=t[u][i];                if(v)&#123;                    fail[v]=t[fail[u]][i];                    q.push(v);                &#125;else t[u][i]=t[fail[u]][i];            &#125;            end[u]|=end[fail[u]];        &#125;    &#125;&#125;t;int dfs(int pos,bool lim,bool lead,int st)&#123;    if(t.end[st]) return 0;    if(!pos) return !lead;    if(!lim&amp;&amp;!lead&amp;&amp;~f[pos][st]) return f[pos][st];    int up=lim?a[pos]:9;    int ret=0;    for(int i=0;i&lt;=up;i++)&#123;        ret=(ret+dfs(pos-1,lim&amp;&amp;i==up,(lead&amp;&amp;!i),(lead&amp;&amp;!i)?0:t.t[st][i]))%MOD;    &#125;    if(!lim&amp;&amp;!lead) f[pos][st]=ret;    return ret;&#125;int solve()&#123;    memset(f,-1,sizeof(f));    tot=0;    for(auto c:n)&#123;        a[++tot]=(int)(c-&#x27;0&#x27;);    &#125;    reverse(a+1,a+1+tot);    return dfs(tot,1,1,0);&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        string s;        cin&gt;&gt;s;        t.insert(s);    &#125;    t.build();    cout&lt;&lt;solve();    return 0;&#125;
 CF696D Legen
有的时候，转移过程过大，但是通过借助 AC 自动机状态数有的时候较小，我们可以通过矩阵快速幂来优化 DP 这一过程。
顺便推销自己优质文章：矩阵快速幂优化DP。
有显然的转移，和第一道例题差不太多。设 f(i,j)f(i,j)f(i,j) 表示前 iii 个字符，最后一个跑到了 AC 自动机 jjj 号点的最大答案，有显然的转移方程：
f(i+1,j′)=max⁡(f(i,j)+end[j′])f(i+1,j&#x27;)=\max(f(i,j)+end[j&#x27;])
f(i+1,j′)=max(f(i,j)+end[j′])
其中 j′j&#x27;j′ 为当前状态 jjj 转移后的节点，而 end[j′]end[j&#x27;]end[j′] 表示自动机在节点 j′j&#x27;j′ 上有多少模式串以该节点为结尾的数量。
但是问题在于 lll 太大啦！怎么办？观察数据范围，注意到 n≤200,∑∣Si∣≤200n\le 200,\sum\limits |S_{i}|\le 200n≤200,∑∣Si​∣≤200，也就是说一个模式串的长度是很小的，也就是说 AC 自动机转移的状态数是很小的，但是转移过程是巨大不可接受的，浓烈的矩阵优化味道，考虑矩阵快速幂优化。我们可以把转移图当作在有向图上进行转移，我们把 AC 自动机的图当作邻接矩阵存起来，让后利用广义矩阵乘法矩阵快速幂，接着再给初始状态以其他状态作为结束状态的权值和取个最大值即可。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=201,INF=1e9;int n,L,a[MN],ret;struct Matrix&#123;    int mat[MN][MN];    Matrix(int x=-1e9)&#123;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                mat[i][j]=-INF;            &#125;        &#125;        for(int i=0;i&lt;MN;i++)&#123;            mat[i][i]=x;        &#125;    &#125;    Matrix operator *(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    ret.mat[i][j]=max(ret.mat[i][j],mat[i][k]+x.mat[k][j]);                &#125;            &#125;        &#125;        return ret;    &#125;&#125;G;struct ACAuto&#123;    int t[MN][26],tot,fail[MN],end[MN];    void insert(string s,int val)&#123;        int p=0;        for(auto c:s)&#123;            int k=c-&#x27;a&#x27;;            if(!t[p][k]) t[p][k]=++tot;            p=t[p][k];        &#125;        end[p]+=val;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;26;i++)&#123;            if(t[0][i]) q.push(t[0][i]);        &#125;        while(!q.empty())&#123;            int u=q.front();            q.pop();            for(int i=0;i&lt;26;i++)&#123;                int v=t[u][i];                if(v)&#123;                    fail[v]=t[fail[u]][i];                    q.push(v);                &#125;else t[u][i]=t[fail[u]][i];            &#125;            end[u]+=end[fail[u]];        &#125;        for(int i=0;i&lt;=tot;i++)&#123;            for(int j=0;j&lt;26;j++)&#123;                G.mat[i][t[i][j]]=end[t[i][j]];            &#125;        &#125;    &#125;&#125;t;Matrix ksm(Matrix a,int b)&#123;    Matrix ret(0);    while(b)&#123;        if(b&amp;1) ret=ret*a;        a=a*a;        b&gt;&gt;=1;    &#125;    return ret;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;L;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        t.insert(s,a[i]);      &#125;    t.build();    Matrix QwQ=ksm(G,L);    for(int i=0;i&lt;=t.tot;i++)&#123;        ret=max(ret,QwQ.mat[0][i]);    &#125;    cout&lt;&lt;ret;    return 0;&#125;
 UVA1401 Remeber the Word
来点不一样的，Trie 上 DP，别忘了 Trie 也是一个自动机！
设 f(i)f(i)f(i) 表示 i→leni \to leni→len 有多少种表示方法，转移如下：
f(i)=∑f(j+1)si∈[i+1,j] 可以由多个字典拼成\begin{aligned}f(i) &amp; = \sum\limits f(j+1) &amp;  s _{i}\in [i+1,j]\text{ 可以由多个字典拼成} \end{aligned}
f(i)​=∑f(j+1)​si​∈[i+1,j] 可以由多个字典拼成​
利用字典树就可以快速判断，DP 结果为 f(0)f(0)f(0)。
 HNOI2004 L语言
本题目是状压 DP 的运用用于优化 DP 过程中跳 Fail 的复杂度。
有一个显然的思路就是建 AC 自动机，让后在子殴打凝固剂上对于所有 fail 指针的子串，让后取最大值得到答案，但是这样的复杂度不是线性因为要跳 fail。
根据题目特殊性质，所有单词长度只有 202020？不难考虑到状压，但是我们要状压什么？我们的时间瓶颈在于跳 fail 这一步，我们不妨将其优化到 O(1)O(1)O(1)！
我们可以将前 202020 位字母所有可能的字串长度存下来，并压缩到状态中，并存于每个字节点中。
那么我们插入和建 fail 可以这么写：
void insert(string s,int id)&#123;    int p=0;    for(auto c:s)&#123;        int k=c-&#x27;a&#x27;;        if(!t[p][k]) t[p][k]=++tot;        p=t[p][k];    &#125;    end[p]=id;&#125;void build()&#123;    queue&lt;int&gt; q;    for(int i=0;i&lt;26;i++)&#123;        if(t[0][i])&#123;            q.push(t[0][i]);            dep[t[0][i]]=1;        &#125;    &#125;    while(!q.empty())&#123;        int u=q.front();        q.pop();        st[u]=st[fail[u]];        if(end[u])&#123;            st[u]|=1&lt;&lt;(dep[u]);        &#125;        for(int i=0;i&lt;26;i++)&#123;            int v=t[u][i];            if(v)&#123;                fail[v]=t[fail[u]][i];                dep[v]=dep[u]+1;                q.push(v);            &#125;else t[u][i]=t[fail[u]][i];        &#125;    &#125;&#125;
而查询我们这么写：
int query(string s)&#123;    int p=0,mx=0;    unsigned now=1;    for(int i=0;i&lt;s.length();i++)&#123;        int k=s[i]-&#x27;a&#x27;;        p=t[p][k];        now&lt;&lt;=1;        if(st[p]&amp;now) now|=1,mx=i+1; // 若与不为 0 那么长度集交集非空，那就是有匹配串。    &#125;    return mx;&#125;
代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=3e6+15;int n,m;struct ACAuto&#123;    int t[MN][26],tot,end[MN],dep[MN],fail[MN],st[MN];    void insert(string s,int id)&#123;        int p=0;        for(auto c:s)&#123;            int k=c-&#x27;a&#x27;;            if(!t[p][k]) t[p][k]=++tot;            p=t[p][k];        &#125;        end[p]=id;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;26;i++)&#123;            if(t[0][i])&#123;                q.push(t[0][i]);                dep[t[0][i]]=1;            &#125;        &#125;        while(!q.empty())&#123;            int u=q.front();            q.pop();            st[u]=st[fail[u]];            if(end[u])&#123;                st[u]|=1&lt;&lt;(dep[u]);            &#125;            for(int i=0;i&lt;26;i++)&#123;                int v=t[u][i];                if(v)&#123;                    fail[v]=t[fail[u]][i];                    dep[v]=dep[u]+1;                    q.push(v);                &#125;else t[u][i]=t[fail[u]][i];            &#125;        &#125;    &#125;    int query(string s)&#123;        int p=0,mx=0;        unsigned now=1;        for(int i=0;i&lt;s.length();i++)&#123;            int k=s[i]-&#x27;a&#x27;;            p=t[p][k];            now&lt;&lt;=1;            if(st[p]&amp;now) now|=1,mx=i+1;        &#125;        return mx;    &#125;&#125;t;namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;int main()&#123;    read(n,m);    for(int i=1;i&lt;=n;i++)&#123;        string s;        read(s);        t.insert(s,i);    &#125;    t.build();    for(int i=1;i&lt;=m;i++)&#123;        string s;        read(s);        put(t.query(s));    &#125;    return 0;&#125;
 3. Fail 树
有的时候，我们的复杂度瓶颈就在于跳 Fail 这一步。
思考一下 AC 自动机的匹配过程：从第一个字符开始，每到达一个节点 xxx，就从 xxx 开始不断跳 fail 到根。期间跳到的节点代表的串都在文本串中出现。
既然我们可以从文本串每一位向上跳 fail 找模式串结尾节点，那么，我们可以倒过来！我们从结尾节点逆着找 fail 找文本串节点！
那么，从结尾节点开始逆着跳 fail，期间跳到的文本串节点个数就是这个模式串在文本串中出现的次数。
而 Fail 树，就是 AC 自动机建立好之后，只留下反向的 Fail 指针作为边，就得到的 Fail 树：

而这颗树是在一个 Trie 的基础上产生的，所以这棵树上的每个点都是一个字符串的前缀，而且每个字符串的每个前缀在这棵树上都对应着一个点。其次，由于 fail 指针，每个点父节点的字符串都是这个点字符串的后缀，并且树上没有更长的它的后缀。也就是说，对于字符串 sss，在 Fail 树上的祖先就是 sss 的所有子串。
这是一个 Trick：一个串对应终止节点在 fail 树上到根的这段路径就是他的所有子串。我们后面会提到的。
而对于任意两个节点，它们在 Fail 树上的 LCA 就是它们所共同拥有的子串。
那么怎么优化跳 Fail 呢？只需要将每个属于文本串的终止节点权值设置为 111，那么节点 xxx 的子树总权值就是 xxx 代表的串在文本串中出现的次数。
那怎么快速求呢？这里有一个 Trick：子树的 DFN 序是连续的一个区间。那么我们就可以通过 DFS 序加树状数组来进行实现，接下来我们来看例题：
 P2414 [NOI2011] 阿狸的打字机
首先一个很 native 的想法就是把所有串拿出来建 AC 自动机，让后暴力跳 fail 找 xxx 串的末尾，但是这样时间复杂度是飞起的。
但是，我们在跳 fail 啊，我们是不是可以用上面的思路来求解呢？每次查询从 yyy 串向上跳到 xxx 终止节点，而反过来就是往子树跳能达到多少个 yyy 串的节点，这不就是我们上面所说的吗！我们每次把 yyy 这个串插入树状数组的时候，只需要对 yyy 所在子树 +1+1+1 即可，对应到 DFN 上就是区间加。这不就是树状数组加差分吗！对于结束的位置打 −1-1−1，其余打 111。让后就做完了，代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=8e5+15;struct Query&#123; int x,y,id; &#125; qry[MN];int n, siz[MN], dfn[MN], ans[MN],stk[MN], dtot;string st;vector&lt;int&gt; ft[MN];struct BIT &#123;    int t[MN];    int lowbit(int x) &#123; return x&amp;-x; &#125;    int query(int x) &#123;        int ret=0;        while(x&gt;0) ret+=t[x], x-=lowbit(x);        return ret;    &#125;    void update(int x, int k) &#123;        while(x&lt;MN) t[x]+=k, x+=lowbit(x);    &#125;&#125; bit;namespace ACAuto &#123;    struct Node &#123; int ch[26], fail; &#125; t[MN];    int tot, g_top, ctot, cut[MN], sta[MN];    void buildAC(string str) &#123;        int p = 0;        g_top = 0;        for (int i=0; i&lt;str.length(); i++) &#123;            if (str[i]&gt;=&#x27;a&#x27; &amp;&amp; str[i]&lt;=&#x27;z&#x27;) &#123;                int ch = str[i]-&#x27;a&#x27;;                if (!t[p].ch[ch]) t[p].ch[ch] = ++tot;                p = t[p].ch[ch];                sta[++g_top] = p;            &#125; else if (str[i]==&#x27;B&#x27;) &#123;                p = sta[--g_top];            &#125; else &#123;                cut[++ctot] = p;            &#125;        &#125;    &#125;    void build() &#123;        queue&lt;int&gt; q;        for (int i=0; i&lt;26; i++) &#123;            if (t[0].ch[i]) &#123;                q.push(t[0].ch[i]);                ft[0].push_back(t[0].ch[i]);            &#125;        &#125;        while (!q.empty()) &#123;            int f = q.front(); q.pop();            for (int i=0; i&lt;26; i++) &#123;                int &amp;v = t[f].ch[i];                if (v) &#123;                    t[v].fail = t[t[f].fail].ch[i];                    ft[t[v].fail].push_back(v);                    q.push(v);                &#125; else &#123;                    v = t[t[f].fail].ch[i];                &#125;            &#125;        &#125;    &#125;&#125;using namespace ACAuto;bool cmp(Query x, Query y) &#123;    return x.y != y.y ? x.y &lt; y.y : x.id &lt; y.id;&#125;void dfs(int u) &#123;    dfn[u] = ++dtot;    siz[u] = 1;    for (int v : ft[u]) &#123;        dfs(v);        siz[u] += siz[v];    &#125;&#125;int main() &#123;    cin &gt;&gt; st;    cin &gt;&gt; n;    for (int i=1; i&lt;=n; i++) &#123;        cin &gt;&gt; qry[i].x &gt;&gt; qry[i].y;        qry[i].id = i;    &#125;    sort(qry+1, qry+n+1, cmp);    buildAC(st);    build();    dfs(0);    for (int i=1, p=0, top=0, pt=0, up=0; i&lt;=n; i++) &#123;        while (up &lt; qry[i].y) &#123;            if (st[pt]&gt;=&#x27;a&#x27; &amp;&amp; st[pt]&lt;=&#x27;z&#x27;) &#123;                int ch = st[pt]-&#x27;a&#x27;;                p = t[p].ch[ch];                stk[++top] = p;                bit.update(dfn[p], 1);            &#125; else if (st[pt]==&#x27;B&#x27;) &#123;                bit.update(dfn[p], -1);                p = stk[--top];            &#125; else &#123;                up++;            &#125;            pt++;        &#125;        int node = cut[qry[i].x];        ans[qry[i].id]=bit.query(dfn[node]+siz[node]-1)- bit.query(dfn[node]-1);    &#125;    for (int i=1; i&lt;=n; i++) cout &lt;&lt; ans[i] &lt;&lt; &#x27;\n&#x27;;    return 0;&#125;
 CF1437G
用到上面我们的 Trick：一个串对应终止节点在 fail 树上到根的这段路径就是他的所有子串。
那么现在问题转化为单点修改和在 Fail 树上一条链查询权值的最大值，对 Fail 树上进行树链剖分即可，代码如下：
但是有重复串，要用 Multiset 维护每个节点的最大权值。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3e5+1145;int n,m,pval[MN];vector&lt;int&gt; adj[MN];multiset&lt;int&gt; val[MN];struct ACAuto&#123;    int t[MN][26],tot,fail[MN],end[MN];    void insert(string s,int x)&#123;        int p=0;        for(auto c:s)&#123;            int k=c-&#x27;a&#x27;;            if(!t[p][k]) t[p][k]=++tot;            p=t[p][k];        &#125;        end[x]=p;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;26;i++)&#123;            if(t[0][i]) q.push(t[0][i]);        &#125;        while(!q.empty())&#123;            int u=q.front();            q.pop();            for(int i=0;i&lt;26;i++)&#123;                int v=t[u][i];                if(v)&#123;                    fail[v]=t[fail[u]][i];                    q.push(v);                &#125;else t[u][i]=t[fail[u]][i];            &#125;        &#125;        for(int i=1;i&lt;=tot;i++)&#123;            adj[fail[i]].push_back(i);         &#125;    &#125;&#125;ac;struct Segment&#123;#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1    struct Node&#123;        int l,r,val;    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].val=max(t[ls].val,t[rs].val);    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        if(l==r)&#123;            t[p].val=-1;            return;        &#125;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void modify(int p,int pos,int k)&#123;        if(t[p].l==t[p].r)&#123;            t[p].val=k;            return;        &#125;        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=pos) modify(ls,pos,k);        else modify(rs,pos,k);        pushup(p);    &#125;    int query(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].val;        &#125;        int mid=(t[p].l+t[p].r)&gt;&gt;1;        int ret=-1;        if(mid&gt;=fl) ret=max(ret,query(ls,fl,fr));        if(mid&lt;fr) ret=max(ret,query(rs,fl,fr));        return ret;    &#125;#undef ls #undef rs&#125;sg;namespace Tree&#123;    int id[MN],dtot,siz[MN],dep[MN],fa[MN],hson[MN],htop[MN];    void dfs1(int u,int pre)&#123;        dep[u]=dep[pre]+1;        siz[u]=1;        fa[u]=pre;        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs1(v,u);            siz[u]+=siz[v];            if(!hson[u]||siz[hson[u]]&lt;siz[v]) hson[u]=v;        &#125;    &#125;    void dfs2(int u,int top)&#123;        htop[u]=top;        id[u]=++dtot;        if(!hson[u]) return;        dfs2(hson[u],top);        for(auto v:adj[u])&#123;            if(v==fa[u]||v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;    int querychain(int x,int y)&#123;        int ret=-1;        while(htop[x]!=htop[y])&#123;            if(dep[htop[x]]&lt;dep[htop[y]]) swap(x,y);            ret=max(ret,sg.query(1,id[htop[x]],id[x]));            x=fa[htop[x]];        &#125;        if(dep[x]&gt;dep[y]) swap(x,y);        ret=max(ret,sg.query(1,id[x],id[y]));        return ret;    &#125;&#125;using namespace Tree;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        ac.insert(s,i);    &#125;    ac.build();    sg.build(1,1,MN-1);    dfs1(0,0);    dfs2(0,0);    for(int i=1;i&lt;=n;i++)&#123;        sg.modify(1,id[ac.end[i]],0);        pval[i]=0;         val[ac.end[i]].insert(0);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int op;        cin&gt;&gt;op;        if(op==1)&#123;            int x,y;            cin&gt;&gt;x&gt;&gt;y;            val[ac.end[x]].erase(val[ac.end[x]].find(pval[x]));            pval[x]=y;            val[ac.end[x]].insert(pval[x]);            sg.modify(1,id[ac.end[x]],*prev(val[ac.end[x]].end()));        &#125;else&#123;            string s;            cin&gt;&gt;s;            int p=0,ret=-1;            for(auto c:s)&#123;                int k=c-&#x27;a&#x27;;                p=ac.t[p][k];                ret=max(ret,querychain(0,p));            &#125;            cout&lt;&lt;ret&lt;&lt;&#x27;\n&#x27;;        &#125;    &#125;    return 0;&#125;
 P5840 Divljak
首先先建出来 AC 自动机。搞出来 Fail 树。
我们暴力的思路就跳 Fail，将经过的路径的权值都加上 1，让后查询特定的终止节点被访问了多少次即可。那么怎么搬到 Fail 树上呢？我们利用树上差分的思想，首先把将要插入的字符串 PPP 统计在 Trie 中走过的节点，再按照 DFN 排序，每相邻节点在树上位置加 1，表示多一个串匹配上，但是它们的 LCA 及其祖先显然多加了一次，减去 1 即可。自此，我们可以通过树链剖分加树状数组维护即可：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e6+15;int n,q,a[MN];vector&lt;int&gt; adj[MN];struct BIT&#123;    int t[MN];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    void modify(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;&#125;bit;struct ACAuto&#123;    int t[MN][26],tot=1,fail[MN],end[MN];    void insert(string s,int id)&#123;        int p=1;        for(auto c:s)&#123;            int k=c-&#x27;a&#x27;;            if(!t[p][k]) t[p][k]=++tot;            p=t[p][k];        &#125;        end[id]=p;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;26;i++)&#123;            t[0][i]=1;        &#125;        q.push(1);        while(!q.empty())&#123;            int u=q.front();            q.pop();            for(int i=0;i&lt;26;i++)&#123;                int v=t[u][i];                if(v)&#123;                    fail[v]=t[fail[u]][i];                    q.push(v);                &#125;else t[u][i]=t[fail[u]][i];            &#125;        &#125;    &#125;&#125;t;namespace Tree&#123;    int dfn[MN],dfntot,fa[MN],dep[MN],siz[MN],hson[MN],htop[MN];    void dfs1(int u,int pre)&#123;        siz[u]=1;        fa[u]=pre;        dep[u]=dep[pre]+1;        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs1(v,u);            siz[u]+=siz[v];            if(siz[hson[u]]&lt;siz[v]) hson[u]=v;        &#125;    &#125;    void dfs2(int u,int top)&#123;        htop[u]=top;        dfn[u]=++dfntot;        if(!hson[u]) return;        dfs2(hson[u],top);        for(auto v:adj[u])&#123;            if(v==fa[u]||v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;    int lca(int x,int y)&#123;        while(htop[x]!=htop[y])&#123;            if(dep[htop[x]]&lt;dep[htop[y]])&#123;                swap(x,y);            &#125;            x=fa[htop[x]];        &#125;        return dep[x]&lt;dep[y]?x:y;    &#125;&#125;using namespace Tree;bool cmp(int x,int y)&#123;    return dfn[x]&lt;dfn[y];&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        t.insert(s,i);    &#125;    t.build();    for(int i=2;i&lt;=t.tot;i++)&#123;        adj[t.fail[i]].push_back(i);    &#125;    dfs1(1,0);    dfs2(1,1);    cin&gt;&gt;q;    while(q--)&#123;        int op,x;        string p;        cin&gt;&gt;op;        if(op==1)&#123;            cin&gt;&gt;p;            int len=p.length(),u=1;            p=&quot; &quot;+p;            for(int i=1;i&lt;=len;i++)&#123;                int v=p[i]-&#x27;a&#x27;;                u=t.t[u][v];                a[i]=u;            &#125;            sort(a+1,a+1+len,cmp);            for(int i=1;i&lt;=len;i++)&#123;                bit.modify(dfn[a[i]],1);            &#125;            for(int i=1;i&lt;len;i++)&#123;                bit.modify(dfn[lca(a[i],a[i+1])],-1);            &#125;        &#125;else&#123;            cin&gt;&gt;x;            int p=t.end[x];            cout&lt;&lt;bit.query(dfn[p]+siz[p]-1)-bit.query(dfn[p]-1)&lt;&lt;&#x27;\n&#x27;;        &#125;    &#125;    return 0;&#125;
 P2444 POI 2000病毒
本题即构造一个可行的无限长文本串，使没有任何子串为给出模式串中的一个。
那么，实际上就是我们永远都不会跳到某个病毒代码的终止节点，我们会一直在自动机上跑啊跑，也就是说，若能构造文本串，当且仅当自动机有成环，并且走到环的路径及其环内没有终止节点，DFS 判断即可：
等会这个和 Fail 树有啥关系？其实还是要理解跳 Fail 的本质是在干什么。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=3e4+15;int n;bool vis[MN],inst[MN];namespace ACAuto&#123;    struct Node&#123;        int ch[2];        int end,fail;    &#125;t[MN];    int tot;    void insert(string s)&#123;        int p=0;        for(auto c:s)&#123;            int cp=c-48;            if(!t[p].ch[cp]) t[p].ch[cp]=++tot;            p=t[p].ch[cp];        &#125;        t[p].end=1;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;=1;i++)&#123;            if(t[0].ch[i]) q.push(t[0].ch[i]);        &#125;        while(!q.empty())&#123;            int f=q.front();            q.pop();            for(int i=0;i&lt;=1;i++)&#123;                int v=t[f].ch[i];                if(v)&#123;                    t[v].fail=t[t[f].fail].ch[i];                    t[v].end|=t[t[t[f].fail].ch[i]].end;                    q.push(v);                &#125;else t[f].ch[i]=t[t[f].fail].ch[i];            &#125;        &#125;    &#125;&#125;using namespace ACAuto;void dfs(int u)&#123;    if(inst[u])&#123;        cout&lt;&lt;&quot;TAK&quot;;        exit(0);    &#125;    if(vis[u]||t[u].end) return;    inst[u]=vis[u]=1;    dfs(t[u].ch[0]);    dfs(t[u].ch[1]);    inst[u]=0;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        string st;        cin&gt;&gt;st;        insert(st);    &#125;    build();    dfs(0);    cout&lt;&lt;&quot;NIE&quot;;    return 0;&#125;
 4. 数据结构结合
通过数据结构和 AC 自动机的完美，我们就可以通过快速维护某些信息来求解答案。
 P3121 Censoring G
多模式串匹配，考虑 AC 自动机，难点在于拼合过程。我们发现，一个字符匹配上之后就会删除，让后接着进行匹配，我们发现，只需要记录某个点在 Trie 图上匹配的位置就可以了，一旦成功匹配，我们只需要跳到这个单词的前一个字符的位置即可。考虑怎么维护，我们可以用栈来维护，删除逐个删除字符，加入一个一个加，时间复杂度是 O(n)O(n)O(n) 的：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e5+15;int n,top;int s1[MN];char s2[MN];string s;namespace ACAuto&#123;    int tot,trie[MN][26];    int end[MN],fail[MN];    void insert(string s)&#123;        int p=0;        for(auto c:s)&#123;            int k=c-&#x27;a&#x27;;            if(!trie[p][k]) trie[p][k]=++tot;            p=trie[p][k];        &#125;        end[p]=s.length();    &#125;    void build()&#123;        queue&lt;int&gt; q;        memset(fail,0,sizeof(fail));        for(int i=0;i&lt;26;i++)&#123;            if(trie[0][i]) q.push(trie[0][i]);        &#125;        while(!q.empty())&#123;            int u=q.front();            q.pop();            for(int i=0;i&lt;26;i++)&#123;                if(trie[u][i])&#123;                    fail[trie[u][i]]=trie[fail[u]][i];                    q.push(trie[u][i]);                &#125;else trie[u][i]=trie[fail[u]][i];            &#125;        &#125;    &#125;    void query(string s)&#123;        int p=0;        for(auto c:s)&#123;            p=trie[p][c-&#x27;a&#x27;];            s1[++top]=p;            s2[top]=c;            while(end[p])&#123;                top-=end[p];                p=top?s1[top]:0;            &#125;        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;s&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        string awa;        cin&gt;&gt;awa;        ACAuto::insert(awa);    &#125;    ACAuto::build();    ACAuto::query(s);    for(int i=1;i&lt;=top;i++) cout&lt;&lt;s2[i];    return 0;&#125;
是不是很水，能不能上一点难度啊！
 P5599 文本编辑器（毕业题）
？？？安详的睡去 XD。
没关系我们顺着 Subtask 一步一步来：
 Subtask 1-2
AC 自动机板子，14分 get！
 Subtask 3
只有一个模式串，要不要 KMP 呢？
但是正解显然不是让我们要用 KMP 啊，可是这里只有一个模式串耶？
我们考虑，一个匹配，当且仅当 s[i−L+1,i]s[i-L+1,i]s[i−L+1,i] 是完全相同的，其中 LLL 为模式串的长度。我们不妨考虑设 f(i)f(i)f(i) 表示 s[i−L+1,i]s[i-L+1,i]s[i−L+1,i] 是否完全匹配，那么查询就是查 ∑k∈[l+len−1,r]fk\sum\limits_{k \in [l+len-1,r]} f_{k}k∈[l+len−1,r]∑​fk​，这是区间和，可以上线段树耶。
但是修改怎么办，我们注意到，修改实质上是一个循环，一次修改只会影响 [l,r+L)[l,r+L)[l,r+L)（有循环截止部分），而我们的 f(i)f(i)f(i) 只需要判断出没出现过即可，而 f(i)f(i)f(i) 显然会有一个长度为 ∣t∣|t|∣t∣ 的循环节，而且一定在经过 LLL 个字符后出现，考虑对循环节之前的地方暴力，中间部分通过线段树打加法标记即可。
但是区间右端点在截止的时候也会修改，考虑把区间 (r,r+L)(r,r+L)(r,r+L) 的信息暴力修改就可以了，13 分 get！
 Subtask 4
没有修改！那我们就不用关心难受的循环节了哈哈哈。
现在问题转化为如何快速求出贡献之和，我们当然要建立起 AC 自动机，但是怎么维护区间呢？
我们考虑设 f(i)f(i)f(i) 表示 AC 自动机上匹配 s[1→i]s[1\to i]s[1→i]，的时候，到达的点 uuu 在 fail 树上子树中有多少终止节点。
不难发现一个对答案有贡献的字符串长度一定 ≤L\le L≤L，考虑对于一个询问 [l,r][l,r][l,r]，我们暴力求出 s[l→l+L−1]s[l \to l+L-1]s[l→l+L−1] 所有字串对答案贡献，让后查询 fff 在区间 [l+L,r][l+L,r][l+L,r] 的区间和就可以了。
让后就不会了啊啊啊啊啊啊。
 Subtask 5,6,7,114514
这部分参考了s_r_f 的题解。
其实答案就是 ∑f(i)+g(l,l+L−1)\sum\limits f(i)+g(l,l+L-1)∑f(i)+g(l,l+L−1)，其中 g(l,r)g(l,r)g(l,r) 表示 s[l→r]s[l \to r]s[l→r] 所有字串对答案的贡献，第二个很好求之前我们讲过，现在问题如何快速维护第一个。
每次区间修改的话必然会有循环节，但是我们只维护 fff 是求不出来循环节的，我们考虑我们要知道什么信息才能维护循环节，通过 Sub 3 我们发现，暴力修改完 [l,l+L−1][l,l+L-1][l,l+L−1] 之后需要知道匹配到 s[1→l+L−1]s[1\to l+L-1]s[1→l+L−1] 到 AC 自动机上的节点，也就是说，我们需要维护 uuu。
我们考虑在线段树的节点维护两个信息：

uuu 表示匹配 s[1→r]s[1\to r]s[1→r] 时到了 AC 自动机哪个节点。
ccc 表示区间 ∑f(i)\sum\limits f(i)∑f(i)。

让后我们对于叶子节点我们还需要知道这个点是什么字符，这样方便我取维护 u,cu,cu,c。
对于一次查询，我们只需要 [l,l+L)[l,l+L)[l,l+L) 暴力，[l+L,r][l+L,r][l+L,r] 暴力查 ccc。
怎么修改，首先前面 l+Ll+Ll+L 的部分还是暴力修改，让后我们查询 [l+L−1,l+L−1][l+L-1,l+L-1][l+L−1,l+L−1] 这个叶子节点的 uuu 来求循环节，让后对 [l+L,r][l+L,r][l+L,r] 进行区间修改，最后在对 [r+1,r+L][r+1,r+L][r+1,r+L] 所有的 uuu 暴力修改以下即可。
没了？没了！（一脸震惊 Orz）
复杂度 O(62×∑∣si∣+q×(log⁡n+L))O(62 \times \sum\limits |s_{i}|+q\times (\log n +L))O(62×∑∣si​∣+q×(logn+L))
代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15,L=55;int n,m,q,id,f[MN],len[MN],sum[MN];string a,qry[MN];vector&lt;int&gt; pre[MN];unordered_map&lt;char,int&gt; mp;struct ACAuto&#123;    int t[MN][62],fail[MN],end[MN],tot;    void insert(string s)&#123;        int p=0;        for(auto c:s)&#123;            int k=mp[c];            if(!t[p][k]) t[p][k]=++tot;            p=t[p][k];        &#125;        end[p]++;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;62;i++)&#123;            if(t[0][i]) q.push(t[0][i]);        &#125;        while(!q.empty())&#123;            int u=q.front();            q.pop();            end[u]+=end[fail[u]];            for(int i=0;i&lt;62;i++)&#123;                int v=t[u][i];                if(v)&#123;                    fail[v]=t[fail[u]][i];                    q.push(v);                &#125;else t[u][i]=t[fail[u]][i];            &#125;        &#125;    &#125;    void getf()&#123;        int p=0;        for(int i=1;i&lt;=n;i++)&#123;            p=t[p][mp[a[i-1]]];            f[i]=end[p];        &#125;    &#125;    &#125;ac;struct Segment&#123;    #define ls p&lt;&lt;1    #define rs p&lt;&lt;1|1    struct Lazytag&#123;        int id,hd;    &#125;;    struct Node&#123;        int l,r,val;        Lazytag tag;    &#125;t[MN&lt;&lt;2];    int lpos;    string tmp;    void pushup(int p)&#123;        t[p].val=t[ls].val+t[rs].val;    &#125;    void dotag(int p,int id,int hd)&#123;        t[p].tag=&#123;id,hd&#125;;        int bef=t[p].l-hd,lid=(t[p].r-bef)%len[id],rid=(t[p].r-bef)/len[id];        if(rid==0)&#123;            t[p].val=pre[id][lid]-(hd?pre[id][hd-1]:0);        &#125;else t[p].val=pre[id][lid]+rid*sum[id]-(hd?pre[id][hd-1]:0);    &#125;    void pushdown(int p)&#123;        if(t[p].tag.id)&#123;            int id=t[p].tag.id,hd=t[p].tag.hd,val=(hd+(t[ls].r-t[ls].l+1))%len[id];            dotag(ls,id,hd);            dotag(rs,id,val);            t[p].tag.id=0;        &#125;    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        if(l==r)&#123;            t[p].val=f[l];            return;        &#125;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void modifyt(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            dotag(p,id,(t[p].l-lpos)%len[id]);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) modifyt(ls,fl,fr);        if(mid&lt;fr) modifyt(rs,fl,fr);        pushup(p);    &#125;    void modifyc(int p,int fl,int fr,bool tg)&#123;        if(fl&gt;fr) return;        if(t[p].l==t[p].r)&#123;            t[p].val=f[t[p].l];            if(tg)&#123;                t[p].tag=&#123;id,(t[p].l-lpos)%len[id]&#125;;            &#125;            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) modifyc(ls,fl,fr,tg);        if(mid&lt;fr) modifyc(rs,fl,fr,tg);        pushup(p);    &#125;    void modify(int p,int fl,int fr)&#123;        if(fl&gt;fr) return;        if(t[p].l==t[p].r)&#123;            if(t[p].tag.id)&#123;                tmp+=qry[t[p].tag.id][t[p].tag.hd];            &#125;else tmp+=a[t[p].l-1];            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) modify(ls,fl,fr);        if(mid&lt;fr) modify(rs,fl,fr);        pushup(p);    &#125;    int query(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].val;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        int ret=0;        if(mid&gt;=fl) ret+=query(ls,fl,fr);        if(mid&lt;fr) ret+=query(rs,fl,fr);        return ret;    &#125;    #undef ls    #undef rs&#125;sg;void initmp()&#123;	for(int i=&#x27;A&#x27;;i&lt;=&#x27;Z&#x27;;i++)mp[i]=i-&#x27;A&#x27;;	for(int i=&#x27;a&#x27;;i&lt;=&#x27;z&#x27;;i++)mp[i]=26+(i-&#x27;a&#x27;);	for(int i=&#x27;0&#x27;;i&lt;=&#x27;9&#x27;;i++)mp[i]=52+(i-&#x27;0&#x27;);&#125;signed main()&#123;    initmp();    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q&gt;&gt;a;    for(int i=1;i&lt;=m;i++)&#123;        string s;        cin&gt;&gt;s;        ac.insert(s);    &#125;    ac.build();    ac.getf();    sg.build(1,1,n);    while(q--)&#123;        int op,l,r,ls;        cin&gt;&gt;op&gt;&gt;l&gt;&gt;r;        ls=r-l+1;        sg.lpos=l;        if(op==1)&#123;            int rpos=min(r,l+L),ret=0,p=0;            sg.tmp=&quot;&quot;;            sg.modify(1,l,rpos);            for(int i=l;i&lt;=rpos;i++)&#123;                p=ac.t[p][mp[sg.tmp[i-l]]];                ret+=ac.end[p];            &#125;            cout&lt;&lt;ret+sg.query(1,rpos+1,r)&lt;&lt;&#x27;\n&#x27;;        &#125;else&#123;            string st;            cin&gt;&gt;st;            len[++id]=st.size();            pre[id].resize(len[id]);            int lpos=max(1ll,l-L+1),rpos=min(n,r+L-1);            int p=0;            if(ls&lt;=L*2+len[id]*2)&#123;                sg.tmp=&quot;&quot;;                sg.modify(1,lpos,rpos);                for(int i=lpos;i&lt;=rpos;i++)&#123;                    char ch=(i&lt;l||i&gt;r?sg.tmp[i-lpos]:st[(i-l)%len[id]]);                    p=ac.t[p][mp[ch]];                    if(i&gt;=l) f[i]=ac.end[p];                &#125;                sg.modifyc(1,l,r,1);                sg.modifyc(1,r+1,rpos,0);            &#125;else&#123;                int led=l+L-1,red=r-L+1;                while((led-l)%len[id]) led++;                sg.tmp=&quot;&quot;;                sg.modify(1,lpos,l-1);                for(int i=lpos;i&lt;led+len[id];i++)&#123;                    char ch=(i&lt;l?sg.tmp[i-lpos]:st[(i-l)%len[id]]);                    p=ac.t[p][mp[ch]];                    if(i&gt;=l)&#123;                        if(i&lt;led) f[i]=ac.end[p];                        else pre[id][i-led]=(i&gt;led?pre[id][i-led-1]:0)+ac.end[p];                    &#125;                &#125;                sum[id]=pre[id][len[id]-1];                sg.modifyc(1,l,led-1,1);                sg.modifyt(1,led,r);                sg.tmp=&quot;&quot;;                sg.modify(1,r+1,rpos);                for(int i=red;i&lt;=rpos;i++)&#123;                    char ch=(i&gt;r?sg.tmp[i-r-1]:st[(i-l)%len[id]]);                    p=ac.t[p][mp[ch]];                    if(i&gt;r)&#123;                        f[i]=ac.end[p];                    &#125;                &#125;                sg.modifyc(1,r+1,rpos,0);            &#125;            qry[id]=st;        &#125;    &#125;    return 0;&#125;
 5. 后言
AC 自动机我用了 3 天的时间来钻研，感觉学到很多，但是感觉自己还是很菜 www，可能并没有完全理解 Fail 的本质，但是能完整做出来题就很不错了。
不要脸的求赞 www。
 参考

Evitagen的FAil树
OI-Wiki
s_r_f 的文本编辑器题解
alex-wei的AC好题
weixin2024的自动机上DP
ying_mei的在AC自动机上DP
ThinerZQ的自动机讲解

]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>A星与IDDFS与IDA星</title>
    <url>/posts/7e84078f/</url>
    <content><![CDATA[ 0.前言
这里没有负边权，SPFA请右转最短路。
本文章基于路径规划之 A* 算法的精致动图以及算法竞赛等数据以及个人鄙见，望大佬提出建议qwq。
 1. 前人的铺垫
 1.1.Dijkstra算法
这不是图论的最短路吗？
其实这个算法就是用来寻找图形中节点之间的最短路径
考虑这样一种场景，在一些情况下，图形中相邻节点之间的移动代价并不相等。例如，游戏中的一幅图，既有平地也有山脉，那么游戏中的角色在平地和山脉中移动的速度通常是不相等的。
在Dijkstra算法中，需要计算每一个节点距离起点的总移动代价。同时，还需要一个优先队列结构。对于所有待遍历的节点，放入优先队列中会按照代价进行排序。
在算法运行的过程中，每次都从优先队列中选出代价最小的作为下一个遍历的节点。直到到达终点为止。
下图中绿色部分代表有额外点权（默认大于1）：


当图形为网格图且点权均为1时，降为BFS

这里贴一个Dijkstra算法的单源最短路模板：
struct node&#123;    int pos,dis;    bool operator&lt;(const node&amp;x)const&#123;        return x.dis&lt;dis;    &#125;&#125;;priority_queue&lt;node&gt; q;vector&lt;edge&gt; adj[MN];void djl()&#123;	memset(ans,0x3f,sizeof(ans));    while (!q.empty())    &#123;        node f=q.top();        q.pop();        int fp=f.pos,fdis=f.dis;        if(vis[fp]) continue;        vis[fp]=1;        for(auto v:adj[fp])&#123;            if(ans[v.v]&gt;v.w+ans[fp])&#123;                ans[v.v]=ans[fp]+v.w;                if(!vis[v.v])&#123;                    q.push(&#123;v.v,ans[v.v]&#125;);                &#125;            &#125;        &#125;    &#125;&#125;
 1.2.贪心最佳优先搜索
如果我们可以预先计算出每个节点到终点的距离，利用曼哈顿，欧拉，对角线距离等求出。我们可以利用这个距离丢进优先队列。每次我们取出最小的进行遍历，这种算法和Dijkstra算法是相似的，而且时间复杂度很低很低。如右图

仔细观察一下，不对啊，如果你在沿着“理论”上的最短路径进行搜索的话，如果最短路径上有障碍物不就错误了？而且这个时候如果绕开，答案是错误的！因为在障碍物有缺口的时候我完全可以直接走离答案最近的缺口啊，也就是说这种情况在“理论最优路径”有障碍物的时候就会出现错误
如下图，有图即最佳优先搜索。

看完上面集中算法，我们总结一下上面的算法的优点与缺点。这里我们直接点出各个算法之间的本质


Dijkstra算法：高效的求出一个起点到其他所有点的最短路径，把所有遍历到的点按照到起点的距离压进优先队列进行处理，直到终点停止。但是他也有BFS的一定弊端，就是只看起点，不看终点，说白了就是把图上所有点遍历差不多了，他一定会遇到终点。这种在极端情况下仍需要遍历很多的点（目前来说若不指定终点，这种算法的时间复杂度是O(nlog⁡n)O(n\log n)O(nlogn)最优，证明可以见计算机协会的报刊）


贪心最佳优先搜索：对于每一个遍历的点我们看其到终点的距离进行选择，也就是说他只看终点，不看起点。在无障碍物的图上跑的飞快，有障碍物不适用。而且不会回头反悔重新选择。并且使用欧拉，曼哈顿，对角线这类简单的计算，不会提前绕开障碍。


 2. A-STAR算法
看完上面算法，我们能否实现一个搜索算法，让他即能够做到即看起点，又看终点，而且跑的都比Dijkstra算法和贪心优先快呢？大名鼎鼎的A-STAR算法就能同时够做到这一点！
我们来看A-STAR是怎么结合这个算法的：
我们设起点为sss，终点为ttt，对于每个当前位置的点iii，我们将s→ts \rightarrow ts→t的路径分为s→i→ts\rightarrow i \rightarrow ts→i→t。

对于s→is\rightarrow is→i，我们使用Dijkstra算法来保证最优性
对于i→ti\rightarrow ti→t ，我们使用贪心最佳优先来保证最优
如果iii碰壁，我们丢弃他，回溯（类似于反悔贪心），回溯过程中仍由Dijkstra算法保证到起点最优

我们可以使用一个估价函数来操作：
f(i)=g(i)+h(i)f(i)=g(i)+h(i)
f(i)=g(i)+h(i)
其中f(i)f(i)f(i)表示当前对iii点的评估，g(i)g(i)g(i)表示s→is\rightarrow is→i的代价，h(i)h(i)h(i)表示i→ti \rightarrow ti→t的代价。
敏锐的你一定能发现，如果我把g(i)=0g(i)=0g(i)=0，那么不就是贪心最佳优先吗；如果我把h(i)=0h(i)=0h(i)=0，那么不就是Dijkstra算法吗。这个时候我们就可以了解到A-STAR是怎么能够做到“即看起点，又看终点”
那么怎么设计函数呢，对于g(i)g(i)g(i)我们只需要记录走过的路径长度即可，放优先队列里就可以来。而A-STAR高效的地方就在于h(i)h(i)h(i)的设计,设计一个好的h(i)h(i)h(i)的函数能够减少我们到处“碰壁”的可能，h(i)h(i)h(i)函数在A-STAR算法中起到的作用就类似于引路人，引导你如何走（就是如何选点），找到一个好的引路人能够少走弯路（懒的走qwq）。
时间复杂度？在你完全不找引路人h(i)h(i)h(i)或者h(i)h(i)h(i)及其不靠谱的情况下就是Dijkstra算法，一般情况下跑的快。
最终结果是最优吗，因为它和Dijkstra算法的解一样都是最短路径，当iii达到终点ttt的时候h(t)=0h(t)=0h(t)=0，这个时候f(t)=g(t)+h(t)=g(t)f(t)=g(t)+h(t)=g(t)f(t)=g(t)+h(t)=g(t)，就是Dijkstra算法求得的最短路。
可以看看A-STAR是如何绕开障碍的

 2.1如何设计h函数
在二维平面图中，有三种放置可以设计

曼哈顿距离——只能在上下左右四个方向移动

h(i)=∣i.x−t.x∣+∣i.y−t.y∣h(i)=|i.x-t.x|+|i.y-t.y|
h(i)=∣i.x−t.x∣+∣i.y−t.y∣

对角线距离，可以在八个方向移动

h(i)=max(∣i.x−t.x∣,∣i.y−t.y∣)h(i)=max(|i.x-t.x|,|i.y-t.y|)
h(i)=max(∣i.x−t.x∣,∣i.y−t.y∣)

欧拉距离，可以向任意方向移动

h(i)=(i.x−t.x)2+(i.y−t.y)2h(i)=\sqrt{(i.x-t.x)^2+(i.y-t.y)^2}
h(i)=(i.x−t.x)2+(i.y−t.y)2​
而对于非平面问题我们就需要自行设计。
但是我们对于h函数应当遵循以下规则

ggg和hhh应当使用同样的计算方法，例如hhh是曼哈顿距离那么ggg也一样，不然性质都不一样fff就没有参考意义了。
根据应用情况正确选择hhh，你不能在坐标系上任意移动使用曼哈顿距离吧
hhh应当优于实际存在的所有路径。也就是说最后得到的实际路径长度必须大于等于h(i)h(i)h(i)，如果小于的话那么最优的路径就算不上了。这一条十分重要。

 2.2例题
 2.2.1——k短路问题

给出一张图，有 n 个点， m 条边（有向边），并给出起点 s ，终点 t ，以及第 k 短路的 k 。请你求出从 s 到 t 的路径中，第 k 短路径的长度。若不存在，则输出 −1 。

我们使用A-STAR算法做这一类题目，这个题正解不是A-STAR算法因为在图是个nnn元环时，最坏时间复杂度为O(nklog⁡n)O(nk\log n)O(nklogn)可以构造数据卡出，正解为可持久化可并堆。
那么如何设计h(i)h(i)h(i)呢，在这个题目里h(i)h(i)h(i)其实就是到终点的距离，我们可以建反边跑Dijkstra算法，就可以求出每个点到终点的h(i)h(i)h(i)了。
记g(i)g(i)g(i)为经过的距离，那么初始的时候就是(s,0)(s,0)(s,0)，每个点的状态就是(i,g(i))(i,g(i))(i,g(i))，因为h(i)h(i)h(i)是确定的。
因为是kkk短路，我们可以给每一个点加一个计数器，如果被重复计算超过kkk次就不再计算，这种做法对吗？如果该点在最优路径上，那么这个显然不影响结果；如果在，那么分两种情况，第一种kkk短路都经过这个点，那么刚好计数器就能够累加答案至kkk结束，如果不都经过也不影响kkk短路的答案。
故代码如下：
#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define pir pair&lt;int,int&gt;using namespace std;const int MN=1e5+15;int n,m,s,t,x,h[MN],g[MN],cnt[MN];const int INF=0x3f3f3f3f;struct edge&#123;    int v,w;&#125;;struct node&#123;    int v,nh,ng;    bool operator&lt;(const node&amp;x)const&#123;        return nh+ng&lt;x.nh+x.ng;    &#125;&#125;;vector&lt;edge&gt; adj[MN],adjh[MN];void dij()&#123;// 求h(i)priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt;q;    q.push(pir(0,t));    h[t]=0;    while(!q.empty())&#123;        pir f=q.top();        q.pop();        int u=f.second,w=f.first;        if(w&gt;h[u]) continue;        for(int i=0;i&lt;adjh[u].size();i++)&#123;            edge e=adjh[u][i];            int v=e.v,ew=e.w;            if(h[v]&gt;h[u]+ew)&#123;                h[v]=h[u]+ew;                q.push(pir(h[v],v));            &#125;        &#125;    &#125;&#125;bool astar()&#123;	//跑A-STAR，如何开局引路人说不能走就不走	// INF默认无解    if(h[s]==INF) return 0;    priority_queue&lt;node&gt; q;    q.push(&#123;s,0,0&#125;);    while(!q.empty())&#123;        node f=q.top();        q.pop();        int u=f.v,fh=f.nh,fg=f.ng;        cnt[u]++;        if(u==t&amp;&amp;cnt[u]==x)&#123;            cout&lt;&lt;fg;            return 1;        &#125;        if(cnt[u]&gt;x) continue;        for(int i=0;i&lt;adj[u].size();i++)&#123;            edge e=adj[u][i];            int v=e.v,ew=e.w;            q.push(&#123;v,h[v],fg+ew&#125;);        &#125;    &#125;    return 0;&#125;int main()&#123;    memset(h,0x3f,sizeof(h));    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        adj[u].push_back(&#123;v,w&#125;);        adjh[v].push_back(&#123;u,w&#125;);    &#125;    cin&gt;&gt;s&gt;&gt;t&gt;&gt;x;    dij();    if(!astar())&#123;        cout&lt;&lt;-1;    &#125;    return 0;&#125;
 2.Power Hungry Cows
P10494

2个变量a,ba,ba,b初始时为a=1,b=0a=1,b=0a=1,b=0，每一步可以执行a×2,b×2,a+b,∣a−b∣a\times 2,b\times 2,a+b,|a-b|a×2,b×2,a+b,∣a−b∣ 任意操作，并把结果存回aaa或bbb，问最快能得到一个整数PPP。
1≤P≤200001\le P \le 200001≤P≤20000


如何设计估价函数？我们要求出的是最快能够达到x=Px=Px=P或y=Py=Py=P的结果，那么这个时候就呼之欲出了，我们可以设h(i)h(i)h(i)为当前值到PPP一共需要多少步。我们可以看出只需要让最大的这样做就可以了，而且贪心一下最佳操作就是乘法操作。
我们肯定需要剪枝，因为在计算h(i)h(i)h(i)的时候会出现一些无法转移或非最优解的情况。
我们一个状态(x,y,g,h)(x,y,g,h)(x,y,g,h)，其中xxx为较大的(a,b)(a,b)(a,b)其中一个，另一个yyy即较小的。
首先当x&gt;n×2x&gt;n\times 2x&gt;n×2的时候肯定不行（此路不通非走）
当x&gt;n and y=0x&gt;n\,and\,y=0x&gt;nandy=0时无法转移
当x&gt;n and y&gt;nx&gt;n\,and\,y&gt;nx&gt;nandy&gt;n时不是最优解
当x=yx=yx=y的时候肯定也不是
我们可以用map记录当前的最优解，之后不断更新，如果当前解比最优解还大那么就剪枝。
如果只执行到这里会TLE4个点。
我们还能否进一步进行剪枝，对于a,ba,ba,b函数来说，我们可以进行乘法和加减操作。乘法？加法？
我们可以将上述题目转化为一个方程即ax+byax+byax+by，默认的时候a=1,b=0a=1,b=0a=1,b=0，在操作的时候只需要对aaa与bbb进行修改即可。
我们不考虑能否进行最优解，我们只需要判断是否有解即可，接下来请出贝祖定理！

设a,ba,ba,b是不为0的整数，对任意整数x,yx,yx,y，满足gcd(x,y)∣ax+bygcd(x,y)|ax+bygcd(x,y)∣ax+by

那么就很简单了，就看PPP能否整除gcd(x,y)gcd(x,y)gcd(x,y)就可以了
#include&lt;bits/stdc++.h&gt;using namespace std;typedef pair&lt;int,int&gt; pir;template&lt;typename type&gt;inline void read(type &amp;x)&#123;    x=0;bool flag(0);char ch=getchar();    while(!isdigit(ch)) flag=ch==&#x27;-&#x27;,ch=getchar();    while(isdigit(ch))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48),ch=getchar();    flag?x=-x:0;&#125;template&lt;typename type&gt;inline void write(type x,bool mode=1)&#123;    x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;static short Stack[50],top(0);    do Stack[++top]=x%10,x/=10; while(x);    while(top) putchar(Stack[top--]|48);    mode?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;int n;map&lt;pir,int&gt; m;struct node&#123;    int x,y,g,h;    bool operator&lt;(const node&amp; a)const&#123;        return h+g&gt;a.g+a.h;    &#125;&#125;;priority_queue&lt;node&gt; q;void update(int x,int y,int g,int h)&#123;    if(x&lt;y) swap(x,y);    if(x&gt;n*2) return;    if(x&gt;n&amp;&amp;y==0) return;    if(x&gt;n&amp;&amp;y&gt;n) return;    if(x==y) return;    if(m[pir(x,y)]&amp;&amp;m[pir(x,y)]&lt;g+1+h) return;    if(n%__gcd(x,y)) return;    int newh=0,k=x;    while(k&lt;n)k*=2,newh++;    m[pir(x,y)]=g+newh+1;    q.push(&#123;x,y,g+1,newh&#125;);&#125;void astar()&#123;    update(1,0,0,0);    while(!q.empty())&#123;        node f=q.top();        q.pop();        int x=f.x,y=f.y,g=f.g,h=f.h;        if(f.x==n||f.y==n)&#123;            write(f.g-1);            return;        &#125;        update(x,2*y,g,h);        update(y,2*x,g,h);        update(x,2*x,g,h);        update(y,2*y,g,h);        update(x,x-y,g,h);        update(y,x-y,g,h);        update(x,x+y,g,h);        update(y,x+y,g,h);    &#125;&#125;int main()&#123;    ios::sync_with_stdio(0);    read(n);    astar();    return 0;&#125;
 3.ID-DFS与IDA∗*∗迭代加深(启发式)搜索
 3.1 BFS与DFSの痛
我们假设一个场景，一个多叉树，树十分甚至九分的深，树上每一个点表示当前解的状态，而我们要搜索的答案就是这个树上的一个点。我们可以通过BFS和DFS来找到这个终点。例如下图


BFS是一层一层遍历，到depth=2depth=2depth=2的层找到，而在他的队列中，拓展到红色节点中同一层级和下一层级的部分节点也会入队。
DFS是按照深度，先遍历左子树在遍历有子树，直到遇到终点，如果树很深那么只有遍历到最深的叶子节点才会回溯。
缺点如下：

BFS可能会消耗巨大空间，第kkk层就有至多2k−12^k-12k−1个节点，如果是一颗满二叉树就如上图那么消耗的节点空间就会很多。如果确定终点可以考虑双向BFS，复杂度降为2k22^{\frac{k}{2}}22k​，但是一般情况是不知道终点。
DFS有很多无效搜索的节点，这里不再阐明，可以看图理解。
那我们可以将两者结合起来吗？IDDFS！

 3.2 IDDFS迭代加深搜索
如果问题的解在搜索树的较浅层，那么我们可以用IDDFS来解决问题，他是BFS和DFS结合的产物。即不像BFS挥霍空间，又不像DFS一样搜索过多无效节点。
IDDFS的步骤如下：

限制深度depth=0depth=0depth=0，做DFS
限制深度depth=1depth=1depth=1，做DFS
限制深度depth=2depth=2depth=2，做DFS…直到遇到节点


我们发现最坏的情况就是答案节点一直在最后才会遍历到，由上面公式可以得到对于第kkk层至多有2k−12^k-12k−1个节点。那么以此遍历每一层，总时间时间复杂度就是O(21+22+...+2k)=O(2k)O(2^1+2^2+...+2^k)=O(2^k)O(21+22+...+2k)=O(2k) ，空间复杂度因为是DFS与BFS的结合体，我们DFS由递归计空间复杂度O(n)O(n)O(n)，考虑BFS按层遍历，显然空间复杂度O(k)O(k)O(k)。
以下是对比：



算法
时间复杂度
空间复杂度
应用场景




DFS
O(2n)O(2^n)O(2n)
O(n)O(n)O(n)
n不是很大，就是搜索树不是很大


BFS
O(2k)O(2^k)O(2k)
O(2k)O(2^k)O(2k)
k不是很大，占用空间不会超过限制


IDDFS
O(2k)O(2^k)O(2k)
O(k)O(k)O(k)
k不是很大且空间限制较大



 3.3 IDA∗*∗
IDDFS一般需要升级为IDA∗IDA*IDA∗，IDA∗IDA*IDA∗就是利用估价函数f(x)f(x)f(x)来进行剪枝的IDDFS。
我们观察IDDFS的步骤，我们再回顾A∗A*A∗提到的BFS与DFS算法的优缺点，我们发现IDDFS也是有着“盲目”的特性在，只是对搜索层数进行限制。如果我们在进行搜索能通过估价函数进行“剪枝”，就能够大幅优化！
来看一道题
P2324


补充：如果能在15步以内达到输出结果，否则输出-1

这道题就是经典的例题，我们可以用A∗A*A∗或者IDA∗IDA*IDA∗去做，我们使用IDA∗IDA*IDA∗。
我们的估价函数的目的就是引导我们去达到这个目标状态，我们回顾以下估价函数的组成：$$f(x)=g(x)+h(x)$$
这里g(x)g(x)g(x)我们可以统计之前的步数来实现，而h(x)h(x)h(x)的设计需要和上面2.1的内容的条件，其中最重要的是“hhh应优于实际存在的所有路径”，那么我们就可以设h(x)h(x)h(x)为与最终状态的相差个数。
那么h(x)h(x)h(x)函数设计很简单，如下：
char goal[6][6]=&#123;	&#123;&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;&#125;,	&#123;&#x27;0&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;&#125;,	&#123;&#x27;0&#x27;,&#x27;0&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;&#125;,	&#123;&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;*&#x27;,&#x27;1&#x27;,&#x27;1&#x27;&#125;,	&#123;&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;1&#x27;&#125;,	&#123;&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;0&#x27;&#125;&#125;;char map[6][6];int geth()&#123;    int cnt=0;    for(int i=1;i&lt;=5;i++)&#123;        for(int j=1;j&lt;=5;j++)&#123;            if(map[i][j]!=goal[i][j])&#123;                cnt++;            &#125;        &#125;    &#125;    return cnt;&#125;
那么怎么进行IDA∗IDA*IDA∗呢？其实也很简单，估价函数的值就是预估我们从当前点到目标点到底走多少步，到IDDFSIDDFSIDDFS上就是拓展多少深度。
void dfs(int x,int y,int dep,int mdep)&#123;    if(dep==mdep)&#123;        if(!geth()) isok=1;//答案找到了        return;    &#125;    for(int i=0;i&lt;8;i++)&#123;        int nx=x+fx[i],ny=y+fy[i];        if(nx&gt;=1&amp;&amp;nx&lt;=5&amp;&amp;ny&gt;=1&amp;&amp;ny&lt;=5)&#123;            swap(map[x][y],map[nx][ny]);            if(dep+geth()&lt;=mdep) dfs(nx,ny,dep+1,mdep);//如果预估深度足够，那么dfs            if(isok) return;//如果有答案就返回            swap(map[x][y],map[nx][ny]);        &#125;    &#125;&#125;
让后就和IDDFS一样，直接搜索就可以了
void dfs(int x,int y,int dep,int mdep)&#123;    if(dep==mdep)&#123;        if(!geth()) isok=1;//答案找到了        return;    &#125;    for(int i=0;i&lt;8;i++)&#123;        int nx=x+fx[i],ny=y+fy[i];        if(nx&gt;=1&amp;&amp;nx&lt;=5&amp;&amp;ny&gt;=1&amp;&amp;ny&lt;=5)&#123;            swap(map[x][y],map[nx][ny]);            if(dep+geth()&lt;=mdep) dfs(nx,ny,dep+1,mdep);//如果预估深度足够，那么dfs            if(isok) return;//如果有答案就返回            swap(map[x][y],map[nx][ny]);        &#125;    &#125;&#125;void solve()&#123;    int kx,ky;    isok=0;    for(int i=1;i&lt;=5;i++)&#123;        for(int j=1;j&lt;=5;j++)&#123;            cin&gt;&gt;map[i][j];            if(map[i][j]==&#x27;*&#x27;)&#123;                kx=i;                ky=j;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=15;i++)&#123;        dfs(kx,ky,0,i);        if(isok)&#123;            cout&lt;&lt;i&lt;&lt;&#x27;\n&#x27;;            return;        &#125;    &#125;    cout&lt;&lt;-1&lt;&lt;&#x27;\n&#x27;;&#125;
 4.总结
A∗A*A∗与IDA∗IDA*IDA∗两个算法都关键在于h(x)h(x)h(x)的设计，如果h(x)h(x)h(x)设计的好，那么算法跑的就飞快，反之就根BFSBFSBFS差不多。
IDA∗IDA*IDA∗的速度是大部分比A∗A*A∗快的。
]]></content>
      <categories>
        <category>搜索</category>
      </categories>
  </entry>
  <entry>
    <title>CDQ分治与整体二分</title>
    <url>/posts/f5367f52/</url>
    <content><![CDATA[ 0. 前言
你需要知道——分治。
对于我们介绍的CDQ分治和整体二分，他们都属于离线分治算法的一类。
 1. CDQ 分治
 1.1 分治的经典应用
分治一个经典应用就是归并排序，我们可以参考它的运行过程。
回忆一下归并排序的步骤？

把数组分成 [l,mid],[mid+1,r][l,mid],[mid+1,r][l,mid],[mid+1,r] 两个区间。
对左区间和右区间进行归并排序。
把左区间和有区间合并为一个有序数组。

这里引用GTWZeus大佬的文章的图：

ok回忆完了分治的结构，记住这个图的结构，我们来看 CDQ 分治。
 1.2 基于时间的分治算法
CDQ 分治不是一个模板，它是一个思想。

大多数数据结构问题都可以抽象为：“维护一堆数据，对一系列操作依次作出响应” 的形式。而这些操作一般分为所谓的 “查询” 操作或者 “更新” 操作。
而查询操作和更新操作也是有问题类型划分的。如果所有查询操作都在更新操作之后，那么这个问题就是一个静态问题。反之则为动态问题。 ——蓝书（非原文）

一般来说我们在做数据结构遇到的到多数都是动态问题，我们要想出来一个维护方法很难，而对于静态问题却很好做。CDQ分治就能做到将动态问题拍扁成静态问题。
我们将所有操作横向展开画在以 “时间” 为横坐标平面轴上，我们观察修改操作，发现它只会对在它后面出现的操作产生影响。

那么我们可不可以这样想，对于操作序列中每一个查询，计算查询结果就是 “计算初始数据+在该查询之前所有修改“ 所造成的影响。
我们可以将每个操作对后续操作的贡献图画出来，在这里实线箭头表示对后续操作有贡献（修改），虚线即为无贡献（查询）。
我们对于操作不断向上合并贡献，如果一个操作区间有了对后继操作有贡献，我们也把这个区间的线全表为实线。

这个结构…怎么这么像归并排序的结构？
我们不妨试试分治，对于一个操作序列有 mmm 项操作。∀l,r∈[1,m]\forall l,r \in [1,m]∀l,r∈[1,m]，我们定义 solve(l,r)solve(l,r)solve(l,r) 为：
∀k∈[l,r]\forall k \in [l,r]∀k∈[l,r]，若第 kkk 项操作是查询操作，那么我们就计算 [l,k−1][l,k-1][l,k−1] 里面操作对当前操作的影响，实际上就是分治的思想，我们区间砍成一半 [l,mid],[mid+1,r][l,mid],[mid+1,r][l,mid],[mid+1,r]，对左右区间递归计算，让后计算 [l,mid][l,mid][l,mid] 中修改操作对 [mid+1,r][mid+1,r][mid+1,r] 的查询操作影响。
我们还需要证明这样分治是正确的：

若第 kkk 个操作是查询操作，若 k≤midk\le midk≤mid 那么 solve(l,mid)solve(l,mid)solve(l,mid) 已经计算了 [l,k−1][l,k-1][l,k−1] 操作对它的影响，反之k&gt;midk&gt;midk&gt;mid，同理珂证明 solve(mid+1,r)solve(mid+1,r)solve(mid+1,r) 计算了操作对它的影响，再加上 solve(l,mid)solve(l,mid)solve(l,mid) 的影响。得证。
修改操作？我们计算查询贡献的。

总结一下 CDQ 分治有三个操作：

递归左区间 solve(l,mid)solve(l,mid)solve(l,mid)。
递归右区间 solve(mid+1,r)solve(mid+1,r)solve(mid+1,r)。
计算左区间修改操作对右区间的影响。
当 l=rl=rl=r 时是递归边界，因为这还怎么递归，操作3都走不了www。

对于递归树如下，借用oiwiki的图：

那不对啊，你一开始说这个分治能把我不会的动态问题派扁成静态，哪里拍扁了？
你看第三个操作，左右区间里面单独的查询修改操作已经操作完毕，我们只需要算左区间单独的修改操作对右区间查询操作的影响即可，这个难道不就是静态问题吗，肯定是的。
这样的话，CDQ 分治就把一个动态问题划分成 mmm 个静态问题，每个查询结果是由 log⁡m\log mlogm 个静态问题的结果共同造成的。
静态问题当然比动态问题好做多啦，如果我们对于操作 3 能做到仅在 r−lr-lr−l 的规模内完成，和 mmm 无关，那么我们就能以优秀的时间复杂度，多个 O(log⁡m)O(\log m)O(logm) 的代价做削弱版本的问题，这是十分甚至九分好的，这样的总时间复杂度就是 O((n+m)log⁡2(n+m))O((n+m)\log^2 (n+m))O((n+m)log2(n+m))。
接下来我们来看例题：
 洛谷P4169 [Violet] 天使玩偶/SJY摆棋子
假如说没有 t=1t=1t=1 的操作我们看看怎么做，根据题意，答案就是：
min⁡i=1n{∣x−xi∣+∣y−yi∣}\min_{i=1}^n \left\{ |x-x_i|+|y-y_i| \right\}
i=1minn​{∣x−xi​∣+∣y−yi​∣}
我们看看这个怎么去掉绝对值符号，先拆掉试试。
min⁡i=1n{(x−xi)+(y−yi)}\min_{i=1}^n \left\{ (x-x_i)+(y-y_i) \right\}
i=1minn​{(x−xi​)+(y−yi​)}
不难发现 x,yx,yx,y 是定值，考虑提出来。
(x+y)−max⁡i=1n(xi+yi)(x+y)-\max_{i=1}^n (x_{i}+y_{i})
(x+y)−i=1maxn​(xi​+yi​)
但是这样拆有个前提条件，我们的 (xi,yi)(x_i,y_i)(xi​,yi​) 坐标必须在左下角，但是点在四面八方怎么办？我们充分发挥人类智慧，直接旋转坐标系让他们移动到左下角，或者不用旋转直接平移就可以了。
暴力当然是 O(n2)O(n^2)O(n2) 的，我们考虑怎么做到 O(nlog⁡n)O(n \log n)O(nlogn) ，直接上数据结构，先按照 xix_ixi​ 从小到大排序 ，树状数组以 yiy_iyi​ 为下标，对于 x+yx+yx+y 取最大值就可以了。
有修改怎么做？发现可以离线，直接上CDQ！
但是注意一下，我们不能每个 solvesolvesolve 都搞一个树状数组，那样时间和空间都会爆炸，我们要保证时间复杂度仅与 r−lr-lr−l 相关，要在计算贡献完后清空树状数组影响的部分。时间复杂度 O(qlog⁡2q)O(q\log^2 q)O(qlog2q)。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15,INF=0x3f3f3f3f;struct Query&#123;    int x,y,op,id;&#125;a[MN],b[MN],tmp[MN];int n,m,mxlen,ans[MN];struct mxBIT&#123;    int t[MN];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    int query(int x)&#123;        int ret=-INF;        while(x)&#123;            ret=max(ret,t[x]);            x-=lowbit(x);        &#125;        return ret;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]=max(t[x],k);            x+=lowbit(x);        &#125;    &#125;    void clear(int x)&#123;        while(x&lt;MN&amp;&amp;t[x])&#123;            t[x]=-INF;            x+=lowbit(x);        &#125;    &#125;&#125;bit;void cdq(int l,int r)&#123;    // cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&#x27;\n&#x27;;    if(l==r) return;    int mid=(l+r)&gt;&gt;1;    cdq(l,mid);    cdq(mid+1,r);    int i=l,j=mid+1,k=l;    while(j&lt;=r)&#123;        while(b[i].x&lt;=b[j].x&amp;&amp;i&lt;=mid)&#123;            if(b[i].op==1) bit.update(b[i].y,b[i].x+b[i].y);            tmp[k++]=b[i++];        &#125;        if(b[j].op==2)&#123;            ans[b[j].id]=min(ans[b[j].id],b[j].x+b[j].y-bit.query(b[j].y));        &#125;        tmp[k++]=b[j++];    &#125;    for(int p=l;p&lt;i;p++)&#123;        if(b[p].op==1) bit.clear(b[p].y);    &#125;    while(i&lt;=mid) tmp[k++]=b[i++];    for(int p=l;p&lt;=r;p++) b[p]=tmp[p];&#125;void solve(int x,int y)&#123;    for(int i=1;i&lt;=n+m;i++)&#123;        b[i]=a[i];        if(x) b[i].x=mxlen-b[i].x;        if(y) b[i].y=mxlen-b[i].y;    &#125;    cdq(1,n+m);&#125;int main()&#123;    memset(bit.t,-0x3f,sizeof(bit.t));    memset(ans,0x3f,sizeof(ans));    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i].x&gt;&gt;a[i].y;        a[i].id=i;        a[i].op=1;// 1是插入，除此以外都为查询        a[i].x++;        a[i].y++;        mxlen=max(&#123;mxlen,a[i].x,a[i].y&#125;);    &#125;    for(int i=n+1;i&lt;=n+m;i++)&#123;        int op,x,y;        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;        a[i].op=op;        a[i].x=++x;        a[i].y=++y;        mxlen=max(&#123;mxlen,a[i].x,a[i].y&#125;);        a[i].id=i;    &#125;    mxlen++;    solve(0,0);    solve(1,0);    solve(0,1);    solve(1,1);    for(int i=n+1;i&lt;=n+m;i++)&#123;        if(a[i].op==2) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 1.3 基于钉死一维的点对问题分治算法
这个名字有点形象www。
CDQ 分治不仅能时间分治，还能解决点对问题。
来看三维偏序例题：

有 nnn 个元素，第 iii 个元素有 ai,bi,cia_i,b_i,c_iai​,bi​,ci​ 三个属性，设 f(i)f(i)f(i) 表示满足 aj≤aia_j \leq a_iaj​≤ai​ 且 bj≤bib_j \leq b_ibj​≤bi​ 且 cj≤cic_j \leq c_icj​≤ci​ 且 j≠ij \ne ij=i 的 jjj 的数量。
对于 d∈[0,n)d \in [0, n)d∈[0,n)，求 f(i)=df(i) = df(i)=d 的数量。

我们回忆一下二维偏序（逆序对）问题我们是怎么做的，我们不会二维所以我们考虑先钉死一维，比如说 i&lt;ji&lt;ji&lt;j 就很好钉死，另一维 ai&gt;aja_i&gt;a_jai​&gt;aj​ 很好做，用权值树状数组做就可以了。
但是二维偏序还有一个解法就是归并排序，事实上归并排序也是定死一维 i&lt;ji&lt;ji&lt;j ，让后分治的处理 ai&gt;aja_i&gt;a_jai​&gt;aj​。
那么对于三维偏序呢？我们是不是也可以想上面钉死一维度呢？但是好像轻易的钉死会出事，因为对于当前第一维度的位置，前面的偏序对后面偏序也会造成影响，这告诉我们什么？CDQ分治！
我们像上面例题的解决方法一样，先对于 aia_iai​ 进行排序，CDQ分治先递归 solve(l,mid),solve(mid+1,r)solve(l,mid),solve(mid+1,r)solve(l,mid),solve(mid+1,r)，接下来要开始计算前对后的影响。
仔细思考可以发现 aia_iai​ 的排序已经没啥用了，因为在 CDQ 分治中左区间和右区间的计算已经满足的 aia_iai​ 的限制了，于是接下来我们可以看剩下两个限制，接下来就是一个最经典的二维偏序问题了，做就可以了。
这样的时间复杂度还是一样的 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
仔细思考一下，CDQ 分治一个天然的特性它能满足一个维度的限制，对于时间分治他能天然的满足 timei&lt;timejtime_i&lt;time_jtimei​&lt;timej​。对于本题来说，通过先对 aia_iai​ 排序，CDQ分治能做到天然的满足三维偏序中的 aia_iai​ 偏序，这样就大大将问题简化为二维偏序问题。
事实上，CDQ分治的一个核心特性是通过分治策略逐层处理多维问题中的单个维度限制 ，从而将高维问题转化为低维问题。通过在每一步递归中主动构造一个维度的有序性（注意我们是在内部进行排序而非外部，不然就摁死不了一维了），天然的满足一个维度的限制条件。
代码如下：
#include &lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e5+15;struct Node&#123;    int x,y,z,ans,cnt;&#125;a[MN],b[MN];int n,K,tot,cnt[MN],t[MN];struct BIT&#123;    int t[MN];    inline int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;&#125;bit;bool cmp1(Node x,Node y)&#123;    if(x.x==y.x)&#123;        if(x.y==y.y) return x.z&lt;y.z;        return x.y&lt;y.y;    &#125;    return x.x&lt;y.x;&#125;bool cmp2(Node x,Node y)&#123;    if(x.y==y.y) return x.z&lt;y.z;    return x.y&lt;y.y;&#125;void cdq(int l,int r)&#123;    if(l==r) return;    int mid=(l+r)&gt;&gt;1;    cdq(l, mid);    cdq(mid+1,r);    sort(a+l,a+mid+1,cmp2);    sort(a+mid+1,a+r+1,cmp2);    int i=mid+1,j=l;    while(i&lt;=r)&#123;        while(a[j].y&lt;=a[i].y&amp;&amp;j&lt;=mid)&#123;            bit.update(a[j].z,a[j].cnt);            j++;        &#125;        a[i].ans+=bit.query(a[i].z);        i++;    &#125;    for(int i=l;i&lt;j;i++)&#123;        bit.update(a[i].z,-a[i].cnt);    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;K;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;b[i].x&gt;&gt;b[i].y&gt;&gt;b[i].z;    &#125;    sort(b+1,b+1+n,cmp1);//先钉死一维    int c=0;    for(int i=1;i&lt;=n;i++)&#123;        c++;        if(b[i].x!=b[i+1].x||b[i].y!=b[i+1].y||b[i].z!=b[i+1].z)&#123;            a[++tot]=b[i];            a[tot].cnt=c;            c=0;        &#125;    &#125;    cdq(1,tot);    for(int i=1;i&lt;=tot;i++)&#123;        cnt[a[i].ans+a[i].cnt-1]+=a[i].cnt;    &#125;    for(int i=0;i&lt;n;i++) cout&lt;&lt;cnt[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
更一般的，我们总结为以下问题：

给定一个长度为 nnn 的序列，统计有一些特性的点对 (i,j)(i,j)(i,j) 的数量/找到一对点对 (i,j)(i,j)(i,j) 使得一些函数的值最大。

流程如下：

找到序列中点 midmidmid。
对于所有点对分3类：

(i,j)(i,j)(i,j) 在左区间的。
(i,j)(i,j)(i,j) 跨区间的,指 iii 在左区，jjj 在右区。
(i,j)(i,j)(i,j) 在右区间的。


递归处理左右区间，设计算法处理跨区间点对。

我们其实发现，对于基于时间的分治算法和这个也极为相似，同样都是要解决跨区间的问题，递归处理左右区间的算法。
 洛谷P3157 [CQOI2011] 动态逆序对
一个不难发现就是其实删除操作也是更新操作（废话）, 考虑有贡献的点对 (i,j)(i,j)(i,j)，转成三维偏序话就是两个逆序对。

对于每一个被删的元素，消失的逆序对等于
在它前面，权值比他大，且删去时间比他晚的点个数
在它后面，权值比他小，且删去时间比他晚的点个数
——shadowice1984大佬

timei&lt;timej,i&lt;j,ai&gt;ajtimei&lt;timej,i&gt;j,ai&lt;aj\begin{aligned}
time_{i}&lt;time_{j},i&lt;j,a_{i}&gt;a_{j} \\
time_{i}&lt;time_{j},i&gt;j,a_{i}&lt;a_{j}
\end{aligned}
timei​&lt;timej​,i&lt;j,ai​&gt;aj​timei​&lt;timej​,i&gt;j,ai​&lt;aj​​
这样的话直接做！
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3e5+15;struct Query&#123;    int op,x,y,t,id;&#125;q[MN];int n,m,qtot,ans[MN],a[MN],pos[MN];struct BIT&#123;    int t[MN];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;&#125;bit;bool cmp2(Query x,Query y)&#123;    return x.x&lt;y.x;&#125;void cdq(int l,int r)&#123;    if(l==r) return;    int mid=(l+r)&gt;&gt;1;    cdq(l,mid);    cdq(mid+1,r);    int i=l,j=mid+1;    sort(q+l,q+mid+1,cmp2);    sort(q+mid+1,q+r+1,cmp2);    while(j&lt;=r)&#123;        while(q[i].x&lt;=q[j].x&amp;&amp;i&lt;=mid)&#123;            bit.update(q[i].y,q[i].op);            i++;        &#125;        ans[q[j].id]+=q[j].op*(bit.query(n)-bit.query(q[j].y));        j++;    &#125;    for(int p=l;p&lt;i;p++)&#123;        bit.update(q[p].y,-q[p].op);    &#125;    i=r,j=mid;    while(i&gt;mid)&#123;        while(j&gt;=l&amp;&amp;q[j].x&gt;=q[i].x) bit.update(q[j].y,q[j].op),j--;        ans[q[i].id]+=q[i].op*bit.query(q[i].y-1);        i--;    &#125;    for(i=mid;i&gt;j;i--) bit.update(q[i].y,-q[i].op);&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        pos[a[i]]=i;        q[++qtot]=&#123;1,i,a[i],0,0&#125;;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int x;        cin&gt;&gt;x;        q[++qtot]=&#123;-1,pos[x],x,i,i&#125;;// 1是加入，-1是删除    &#125;    // sort(q+1,q+1+qtot,cmp1); 已经满足时间从前往后了所以不用排序。    cdq(1,qtot);    for(int i=1;i&lt;=m;i++) ans[i]+=ans[i-1];    for(int i=0;i&lt;m;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 P4690 [Ynoi Easy Round 2016] 镜中的昆虫

维护一个长为 nnn 的序列 aia_iai​，有 mmm 次操作。


将区间 [l,r][l,r][l,r] 的值修改为 xxx。


询问区间 [l,r][l,r][l,r] 出现了多少种不同的数，也就是说同一个数出现多次只算一个。
1≤n,m≤1051\leq n , m \leq 10^51≤n,m≤105，1≤ai≤1091\leq a_i\leq 10^91≤ai​≤109。



经典的颜色段问题，但是加强版。
珂朵莉树？你看看这是谁出的题。
带修莫队，疯了吧 。
怎么做？发现可以离线哦，而且 aia_iai​ 可以离散化。
先考虑不修改怎么做，在不能用莫队和珂朵莉树的情况下，我们可以开一个 preprepre 数组，对于 preipre_iprei​ 表示当前节点颜色在它左侧第一个和它同色点的位置，这个位置可以 O(n)O(n)O(n) 求出来。
对于区间询问其实就是询问 [l,r][l,r][l,r] 中 prei&lt;lpre_{i}&lt; lprei​&lt;l 的数有多少个，用线段树或树状数组即可做，我们看作二维数点 (i,prei)(i,pre_i)(i,prei​)，实际上就是一个二维偏序问题吗，树状数组做即可。
那么有单点修改呢？单点修改有点炸裂我不会做在线（分块写的很少的蒟蒻），我们可以利用上面的CDQ时间分治做，考虑一次修改对于 preprepre 数组会造成什么影响？显然只会对后继第一个同色点有影响，我们可以对每个颜色开一个 set，直接 O(log⁡n)O(\log n)O(logn) 查询后继，O(1)O(1)O(1) 修改即可。
那区间修改呢？你确定区间修改不会炸到 O(nm)O(nm)O(nm) ？
其实是 O(n+m)O(n+m)O(n+m) （我一直以为会炸 O(nm)O(nm)O(nm) ）？
为什么？我们不妨考虑一个极端情况，一个相同数的最长连续段作为一个节点（其实就是 ODT 啦），如果一个节点附上一个值，只有节点第一个数的 preprepre 会被修改。
考虑 ODT 的过程，每次修改有分裂和合并，若分裂的话最多增加三个节点，对于 preprepre 来说分裂和修改 preprepre 的时间复杂度是基本一样的（不知道为啥看上面），我们最多添加 mmm 个节点，初始最多 nnn 个，于是修改次数最多就是 O(n+m)O(n+m)O(n+m)。
那么这样我们就可以找到 preprepre 数组被修改的位置，记录一下修改的时间，暴力单点修改就可以了，怎么找？直接上ODT，怎么求 preprepre ? 对每个颜色开ODT！。
不对啊你不说ODT被卡了吗，我们这里是求操作序列，不是直接用ODT求解，我们最后求解用的还是 CDQ 分治大神。
你疯啦开那么多 ODT？卡卡空间就可以了，离散化之后不会有很多的颜色。
但是这个空间很难受，我卡了50次才卡过。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e6,MC=3e5,MK=1e5+15;struct Node&#123;    int op,l,r,t,id;&#125;q[MN];int n,m,tot,qtot,ptot,mptot,ans[MN],lst[MN],pre[MK],a[MK];map&lt;int,int&gt; mp;struct BIT&#123;    int t[MK];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;&#125;bit;struct ODTNode&#123;    int l,r,val;    bool operator&lt;(const ODTNode &amp;x)const&#123;        return l&lt;x.l;    &#125;&#125;;struct ODT&#123;    set&lt;ODTNode&gt; s,col[MC];    auto insert(int l,int r,int k)&#123;        col[k].insert(&#123;l,r,k&#125;);        return s.insert(&#123;l,r,k&#125;).first;    &#125;    void del(int l,int r,int k)&#123;        col[k].erase(&#123;l,r,k&#125;);        s.erase(&#123;l,r,k&#125;);    &#125;    auto split(int x)&#123;        auto it=s.lower_bound(&#123;x,0,0&#125;);        if(it!=s.end()&amp;&amp;it-&gt;l==x) return it;        it--;        int l=it-&gt;l,r=it-&gt;r,k=it-&gt;val;        del(l,r,k);        insert(l,x-1,k);        return insert(x,r,k);    &#125;    int getpre(int x)&#123;        auto it=s.upper_bound(&#123;x,0,0&#125;);        it--;        if(it-&gt;l&lt;x) return x-1;        else&#123;            auto co = col[it-&gt;val].lower_bound(&#123; x, 0, 0 &#125;);            if (co != col[it-&gt;val].begin()) return (--co)-&gt;r;            return 0;        &#125;    &#125;    void Assign(int l, int r, int v, int t) &#123;        auto itr = split(r + 1), itl = split(l);        vector&lt;int&gt; ps;        for (auto it = itl; it != itr; it++) &#123;            if (it != itl) ps.emplace_back(it-&gt;l);            auto nxt = col[it-&gt;val].upper_bound(*it);            if (nxt != col[it-&gt;val].end()) ps.emplace_back(nxt-&gt;l);            col[it-&gt;val].erase(*it);        &#125;        s.erase(itl, itr);        insert(l, r, v);        ps.emplace_back(l);        auto nxt = col[v].upper_bound(&#123; l, r, v &#125;);        if (nxt != col[v].end()) ps.emplace_back(nxt-&gt;l);        for (int i = 0; i &lt; ps.size(); i++) &#123;            q[++qtot] = &#123; -1,ps[i], pre[ps[i]], t, 0 &#125;;            pre[ps[i]] = getpre(ps[i]);            q[++qtot] = &#123; 1,ps[i], pre[ps[i]], t, 0 &#125;;        &#125;    &#125;&#125;odt;bool cmp1(Node x,Node y)&#123;    if(x.t==y.t)&#123;        return x.id&lt;y.id;    &#125;    return x.t&lt;y.t;&#125;bool cmp2(Node x,Node y)&#123;    if(x.l==y.l)return x.id&lt;y.id;    return x.l&lt;y.l;&#125;void cdq(int l,int r)&#123;    if(l==r) return;    int mid=(l+r)&gt;&gt;1;    cdq(l,mid);    cdq(mid+1,r);    // sort(q+l+1,q+mid+1,cmp2);    // sort(q+mid+1,q+r+1,cmp2);    int i=l,j=mid+1;    while(j&lt;=r)&#123;        while(q[i].l&lt;=q[j].l&amp;&amp;i&lt;=mid)&#123;            if(!q[i].id) bit.update(q[i].r+1,q[i].op);            // tmp[ttot++]=q[i++];            i++;        &#125;        if(q[j].id) ans[q[j].id]+=q[j].op*bit.query(q[j].r+1);        // tmp[ttot++]=q[j++];        j++;    &#125;    for(int p=l;p&lt;i;p++)&#123;        if(!q[p].id) bit.update(q[p].r+1,-q[p].op);    &#125;    // while(i&lt;=mid) tmp[ttot++]=q[i++];    // for(int p=l;p&lt;=r;p++) q[p]=tmp[p];    inplace_merge(q+l,q+mid+1,q+r+1,cmp2);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        if(!mp[a[i]]) mp[a[i]]=++mptot;        a[i]=mp[a[i]];        pre[i]=lst[a[i]];        lst[a[i]]=i;        q[++qtot]=&#123;1,i,pre[i],0,0&#125;;        odt.insert(i,i,a[i]);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int op,l,r,d;        cin&gt;&gt;op&gt;&gt;l&gt;&gt;r;        if(op==1)&#123;            cin&gt;&gt;d;            if(!mp[d]) mp[d]=++mptot;            d=mp[d];            odt.Assign(l,r,d,i);        &#125;else&#123;            q[++qtot]=&#123;1,r,l-1,i,++tot&#125;;            q[++qtot]=&#123;-1,l-1,l-1,i,tot&#125;;        &#125;    &#125;    stable_sort(q+1,q+1+qtot,cmp1);//归并排序防炸空间    cdq(1,qtot);    for(int i=1;i&lt;=tot;i++)&#123;        cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 1.4 基于决策单调性的DP优化。
我们在讲四边形不等式优化DP做法的时候，我们给出了两个解法，一个是单调队列，另一个就是分治。
但是这个到底是什么分治？其实就是CDQ分治啦。
对于1D/1D 转移方程如下：
f(i)=min/max{g(j)+w(i,j)}1≤j&lt;if(i)=min/max\left\{g(j)+w(i,j) \right\}\quad 1\le j &lt; i
f(i)=min/max{g(j)+w(i,j)}1≤j&lt;i
其中有决策单调性即 w(i,j)w(i,j)w(i,j) 满足四边形不等式或反四边形不等式，这里 ggg 可以为 fff。
若转移方程是 g+w→fg+w \rightarrow fg+w→f 的转移，且 ggg 与 fff 的计算无关，也就是说转移是由一个已知的函数或这fff的上一层转移过来，那么我们就可以用 CDQ 分治的方法，这种决策是离线的，我们不依赖fi−1f_{i-1}fi−1​来计算fif_ifi​，这时候就不必采用单调队列这种顺序计算fif_ifi​了，只需要分治就可以，编码更简单也更灵活。
算法步骤：

初始化：首先暴力遍历j∈[1,n/2)j\in[1,n/2)j∈[1,n/2)来计算pn/2p_{n/2}pn/2​，作为分治的中心点。
分治求解：接下来分别计算2个区间[1,n/2)[1,n/2)[1,n/2)和(n/2,2](n/2,2](n/2,2]的pip_ipi​。

对于前半段，最优决策点一定在[1,pn/2][1,p_{n/2}][1,pn/2​]之间。
对于后半段，最优决策点一定在[pn/2,pn][p_{n/2},p_n][pn/2​,pn​]之间。


递归处理即可。

代码实现如下：
int clac(int i,int j); //计算选择决策j的费用// l,r是决策区间，kl,kr是决策点的区间void dfs(int l,int r,int kl,int kr)&#123;	int mid=(l+r)&gt;&gt;1,k=kl;	for(int i=kl;i&lt;=min(kr,mid-1);i++)&#123;		//求费用最少的f[mid]最优决策点		if(clac(mid,i)&lt;clac(mid,k)) k=i;		f[mid]=clac(mid,k);	&#125;	if(l&lt;mid) dfs(l,mid-1,kl,k);	if(r&gt;mid) dfs(mid+1,r,k,kr);&#125;//ans=f[n];
这个的证明和基于时间分治的证明类似，这里不给出了。
 2. 整体二分
 2.1 基于值域的整体二分

在信息学竞赛中，有一部分题目可以使用二分的办法来解决。但是当这种题目有多次询问且我们每次查询都直接二分可能导致 TLE 时，就会用到整体二分。整体二分的主体思路就是把多个查询一起解决。（所以这是一个离线算法）——OiWiki

我们考虑一下这个问题：

给定长度为 nnn 的序列 aaa，求序列 aaa 中第 kkk 小的数。

这题怎么做都可以，我们可以考虑一个二分答案的做法。
先从小到大排序，二分答案，设当前二分值域的值为 midmidmid，统计序列中有多少个数 ≤mid\le mid≤mid，记为 cntcntcnt。

若 k≤cntk \le cntk≤cnt，那么 ans∈[l,mid]ans\in [l,mid]ans∈[l,mid]，直接二分即可。
若 k&gt;cntk&gt;cntk&gt;cnt，那么 ans∈[mid+1,r]ans\in [mid+1,r]ans∈[mid+1,r]，等价于在值域 [mid+1,r][mid+1,r][mid+1,r] 找第 k−cntk-cntk−cnt 小的数，那么直接 k−=cntk-=cntk−=cnt 让后直接在右半区间继续二分。

这样时间复杂度为 O(nlog⁡∣V∣)O(n\log |V|)O(nlog∣V∣) ，其中 VVV 为值域。
如果我们加强一下呢？

给定长度为 nnn 的序列 aaa，给定 mmm 次询问，每次询问区间 [l,r][l,r][l,r] 的中第 kkk 小的数。

这题我会，主席树吗。
我们看看怎么用整体二分来写。
记 [l,r][l,r][l,r] 为答案的值域，[L,R][L,R][L,R] 为答案的定义域。（也就是说求答案时仅考虑下标在区间 [L,R][L,R][L,R] 内的操作和询问，这其中询问的答案在 [l,r][l,r][l,r] 内）

我们首先把所有操作 按时间顺序 存入数组中，然后开始分治。
在每一层分治中，利用数据结构（常见的是树状数组）统计当前查询的答案和 midmidmid 之间的关系。
根据查询出来的答案和 midmidmid 间的关系（小于等于 midmidmid 和大于 midmidmid）将当前处理的操作序列分为 q1q1q1 和 q2q2q2 两份，并分别递归处理。
当 l=rl=rl=r 时，找到答案，记录答案并返回即可。

代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=4e5+15,INF=1e9,MK=2e5+15;struct Query&#123;    int x,y,z,id;&#125;q[MN],lq[MN],rq[MN];int n,m,qtot,a[MK],ans[MK];struct BIT&#123;    int t[MK];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;&#125;bit;void solve(int l,int r,int st,int ed)&#123;    if(st&gt;ed) return;    if(l==r)&#123;        for(int i=st;i&lt;=ed;i++)&#123;            if(q[i].id) ans[q[i].id]=l;        &#125;        return;    &#125;    int mid=(l+r)&gt;&gt;1,lt=0,rt=0;    for(int i=st;i&lt;=ed;i++)&#123;        if(q[i].id==0)&#123;            if(q[i].y&lt;=mid)&#123;                bit.update(q[i].x,1);                lq[++lt]=q[i];            &#125;else rq[++rt]=q[i];        &#125;else&#123;            int cnt=bit.query(q[i].y)-bit.query(q[i].x-1);            if(cnt&gt;=q[i].z) lq[++lt]=q[i];            else q[i].z-=cnt,rq[++rt]=q[i];        &#125;    &#125;    for(int i=ed;i&gt;=st;i--) if(q[i].id==0&amp;&amp;q[i].y&lt;=mid) bit.update(q[i].x,-1);    for(int i=1;i&lt;=lt;i++) q[st+i-1]=lq[i];    for(int i=1;i&lt;=rt;i++) q[st+lt+i-1]=rq[i];    solve(l,mid,st,st+lt-1);    solve(mid+1,r,st+lt,ed);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        q[++qtot]=&#123;i,a[i],0,0&#125;;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int l,r,k;        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;        q[++qtot]=&#123;l,r,k,i&#125;;    &#125;    solve(-INF,INF,1,qtot);    for(int i=1;i&lt;=m;i++)&#123;        cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 2.2 例题
 P1527 [国家集训队] 矩阵乘法
二维树状数组即可，这个真的没什么好讲的，注意一下求一个矩阵点要容斥一下。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=520,MQ=5e5+15,INF=1e9+7;struct Query&#123;    int x1,y1,x2,y2,k,id;&#125;q[MQ],lq[MQ],rq[MQ];int n,m,qtot,atot,tot,ans[MQ],a[MN];struct ewBIT&#123;    int t[MN][MN];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void update(int x,int y,int k)&#123;        for(int i=x;i&lt;MN;i+=lowbit(i))&#123;            for(int j=y;j&lt;MN;j+=lowbit(j))&#123;                t[i][j]+=k;            &#125;        &#125;    &#125;    int query(int x,int y)&#123;        int ret=0;        for(int i=x;i;i-=lowbit(i))&#123;            for(int j=y;j;j-=lowbit(j))&#123;                ret+=t[i][j];            &#125;        &#125;        return ret;    &#125;&#125;bit;void solve(int l,int r,int st,int ed)&#123;    if(st&gt;ed) return;    if(l==r)&#123;        for(int i=st;i&lt;=ed;i++)&#123;            ans[q[i].id]=l;        &#125;        return;    &#125;    int mid=(l+r)&gt;&gt;1,lt=0,rt=0;    for(int i=st;i&lt;=ed;i++)&#123;        if(!q[i].id)&#123;            if(q[i].k&lt;=mid) bit.update(q[i].x1,q[i].y1,1),lq[++lt]=q[i];            else rq[++rt]=q[i];        &#125;else&#123;            int cnt=bit.query(q[i].x2,q[i].y2)-bit.query(q[i].x2,q[i].y1-1)-bit.query(q[i].x1-1,q[i].y2)+bit.query(q[i].x1-1,q[i].y1-1);            if(cnt&gt;=q[i].k) lq[++lt]=q[i];            else q[i].k-=cnt,rq[++rt]=q[i];        &#125;    &#125;    for(int i=ed;i&gt;=st;i--) if(!q[i].id&amp;&amp;q[i].k&lt;=mid) bit.update(q[i].x1,q[i].y1,-1);    for(int i=1;i&lt;=lt;i++) q[st+i-1]=lq[i];    for(int i=1;i&lt;=rt;i++) q[st+lt+i-1]=rq[i];    solve(l,mid,st,st+lt-1);    solve(mid+1,r,st+lt,ed);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            int x;            cin&gt;&gt;x;            q[++qtot]=&#123;i,j,0,0,x,0&#125;;            a[++tot]=x;        &#125;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int x1,y1,x2,y2,k;        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;k;        q[++qtot]=&#123;x1,y1,x2,y2,k,i&#125;;    &#125;    solve(-INF,INF,1,qtot);    for(int i=1;i&lt;=m;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 P4602 [CTSC2018] 混合果汁
发现询问独立，答案可二分，并且可离线，考虑整体二分。
我们实际上二分美味度，将美味度大于等于 midmidmid 的果汁搞出来，按照单价从小到大，求买 LiL_iLi​ 升的价格。我们可以用树状数组维护单价，二分树状数组求得最大单价 ppp 使得单价不大于 ppp 的果汁体积 L&lt;LiL&lt;L_iL&lt;Li​，买单价不大于 ppp 的果汁和 Li−LL_i-LLi​−L 升单价为 ppp 的果汁即可。
树状数组二分可以倍增写，注意每次递归前要把美味度小于 LLL （这里 LLL 是值域的 L）已经加入树状数组，这样才能保证复杂度仅与 R−LR-LR−L 相关。
时间复杂度 O((n+mlog⁡2(n+m)))O((n+m \log^2 (n+m)))O((n+mlog2(n+m)))。
]]></content>
      <categories>
        <category>离线</category>
      </categories>
      <tags>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1474F题解</title>
    <url>/posts/7eadb925/</url>
    <content><![CDATA[头脑风暴！
注意到 xxx 对答案一点用都没有，因为我们求的是长度，光一个 ddd 就能够确定答案了。
发现最长严格上升子序列的性质不太好刻画，我们考虑这个添加数的操作过程能不能以一种形式来表现出来。注意到每一个数具体取值只和最后一个数的变化有关，而且变化是连续的，考虑给它拍到二维平面上，横轴按照每一次添加一个数划分时间，纵轴为最后一个值的具体取值，原操作在二维平面上表现的是斜率为 1 或 -1 的一堆直线，如下图，红点表示一次插入操作的：

最长严格上升子序列的性质就很好刻画了，因为根据图来看其实就是最低点和最高点的极差就是我们的长度（因为斜率为 ±1\pm 1±1）。让后我们考虑这个子序列个数怎么解决。发现直接 DP 求解答案十分困难，考虑发掘性质，首先不难发现一个性质：一个段不可能贡献超过一种答案，即一个点不可能成为最低点或最高点。
这个性质有什么用呢，也就是说，我们可以统计对段的答案进行贡献统计。然而注意到段数极小（数据范围 nnn），值域极大，有一个强烈的矩阵味道，但是我到现在连状态都没设计耶？
最长严格上升子序列可能从任意值拼过来，考虑在状态中加上这一个，设 f(i,j)f(i,j)f(i,j) 表示目前计算到第 iii 段，末尾值为 jjj 的方案数，哎这矩阵味道对了，转移：
f(i,j)=∑k=0if(k,j−1)f(i,j)=\sum\limits_{k=0}^i f(k,j-1)
f(i,j)=k=0∑i​f(k,j−1)
矩阵快速幂优化，时间复杂度 O(n4log⁡∣V∣)O(n^4 \log |V|)O(n4log∣V∣)。
Submission #333002703
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>CF573D题解</title>
    <url>/posts/376987c3/</url>
    <content><![CDATA[好题。
有一个显然的想法就就是二分图带权最大匹配，但是时间复杂度是 O(n3)O(n^3)O(n3) 及其难受，考虑 DP 但直接 DP 十分困难，考虑发掘一些性质。
利用贪心思想，先对 www 和 hhh 进行从小到大的排序，一个基本思想就是对应位置的相乘，用调整法不难证明这是最优决策，但是本题目中存在第 iii 个人不能骑自己的马，所以最优解可能不会取到。
考虑到这个限制只是限制自己不能骑自己的马，合理猜测 iii 位置匹配马的决策是一个范围，有结论：匹配范围为 [i−2,i+2][i-2,i+2][i−2,i+2]。证明考虑反证法，设 iii 的禁止匹配位置为 baniban_{i}bani​。那么反证法，假设如果在这个以外的范围选，那么最多向前会造成两次 (i,i−1)(i,i-1)(i,i−1) 无法匹配，自行画图发现这种情况最劣情况下也只会在 i−2i-2i−2 的情况形成匹配。
借用 _sys的图：

完美匹配至少有三个红线和黑线相交整法不难证明如果两条线相交那么交换这两个匹配会得到更优的解。
让后考虑交换的过程，我们如果前 iii 个人和前 iii 匹马匹配完全，那么存在 k&lt;3k&lt;3k&lt;3，[i,i+k][i,i+k][i,i+k] 这区间内的人和马匹配，可以用反证法证明。
故，设 fif_{i}fi​ 表示前 iii 个人和前 iii 匹马完成匹配的最大全职，所以从 fi−3,fi−2,fi−1f_{i-3},f_{i-2},f_{i-1}fi−3​,fi−2​,fi−1​ 转移过来即可，同时改成矩阵方式维护 DP 做动态 DP 即可，时间复杂度 O(27nlog⁡n)O(27n \log n)O(27nlogn)，其中 272727 是矩阵带来的常数。
提交记录
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Fail树</title>
    <url>/posts/18adad6c/</url>
    <content><![CDATA[ 0.引入
我们在写KMP的时候会求出来长度为nnn的字符串的前缀最长border的长度为Next[n]Next[n]Next[n]，接下来先介绍一个border

定义：对于一字符串SSS，用∣S∣|S|∣S∣表示其长度，后面我们简化用lenSlen_SlenS​来表示，那么SSS串的一个Border一定是SSS串的一个前缀，并且他前缀和后缀都能够相互匹配。举个例子，比如说“BeckyBe”的一个border就是Be,一个字符串的border可能有多个，但在这里我们要求的是最长的border
对于任意一个字符串SSS，一个Border的长度就对应一个Border（比如说上面的长度为2各border只能是“Be”），我们可以求出他所有border的长度分别为ne[ne[ne[lenSlen_SlenS​]，ne[ne[ne[ne[ne[ne[lenSlen_SlenS​]]]]]] 以此类推直到为0。根据上面的结论，我们可以知道，对一个字符串S求解next数组之后，我们就知道了S所有前缀（包括S自身）的所有Border了。

 1.Fail树
fail树就是把所有next[i]next[i]next[i]的节点指向iii的有向边所构成的树，这课树，是自底部指向顶部，最终汇聚到一个rootrootroot点。
例如一个字符串“aaaabbabbaa”，我们可以得到他的nextnextnext数组如下
POS:1 2 3 4 5 6 7 8 9 10 11S:  a a a a b b a b b a  aNe: 0 1 2 3 0 0 1 0 0 1  2 
我们画出他的fail树就是如下

结合前面Border的结论，在fail树上，一个结点x不断向上寻找祖先的过程，就是遍历字符串S[1,x]的所有Border长度的过程，又因为Border的长度和Border一一对应，所以fail树上就记录着字符串S所有前缀的Border。
根据前面所说，我们就能推出以下结论，S的两个前缀S[1,p]和S[1,q]的公共最长Border长度，就是Lca(ne[p],ne[q])Lca(ne[p],ne[q])Lca(ne[p],ne[q])
到这里你应该就能理解KMP在失配的情况下其实就是在回溯fail树。
模板失配树
代码如下
#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;const int MN=1e6+15,ML=20;string s;int m,fa[MN][40],dep[MN],pre[MN],n;int lca(int x,int y)&#123;    if(dep[x]&lt;dep[y]) swap(x,y);    for(int i=__lg(n)+1;i&gt;=0;i--)&#123;        if(dep[x]-(1&lt;&lt;i)&gt;=dep[y])x=fa[x][i];    &#125;    if(x==y) return x;    for(int i=__lg(n)+1;i&gt;=0;i--)&#123;        if(fa[x][i]!=fa[y][i])&#123;            x=fa[x][i];            y=fa[y][i];        &#125;    &#125;    return fa[x][0];&#125;int main()&#123;    cin&gt;&gt;s;    n=s.length();    s=&quot; &quot;+s;    //cout&lt;&lt;&quot;N:&quot;&lt;&lt;n&lt;&lt;endl;    for(int i=2,j=0;i&lt;=n;i++)&#123;        while(j&amp;&amp;s[i]!=s[j+1])&#123;            j=pre[j];        &#125;        if(s[i]==s[j+1])j++;        pre[i]=j;        fa[i][0]=j;        dep[i]=dep[j]+1;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cout&lt;&lt;pre[i]&lt;&lt;&quot; &quot;;    &#125;    cout&lt;&lt;endl;    for(int k=1;k&lt;=__lg(MN)+1;k++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            fa[j][k]=fa[fa[j][k-1]][k-1];        &#125;    &#125;    cin&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;fa[i][0]&lt;&lt;endl;    &#125;    while (m--)    &#123;        int p,q;        cin&gt;&gt;p&gt;&gt;q;        cout&lt;&lt;lca(fa[p][0],fa[q][0])&lt;&lt;endl;    &#125;        return 0;&#125;
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Hall定理</title>
    <url>/posts/6cf9e98c/</url>
    <content><![CDATA[ 1. Hall 定理
对于一张二分图，设两部分点数为 (x,y)(x,y)(x,y)，则其的一个完备匹配定义为左部分 xxx 个点成为匹配点，特别的，当 x=yx=yx=y 的时候这列匹配也称作完备匹配。
一个如上定义的二分图存在完备匹配的充要条件是对于左部分大小为 kkk 的任意子集 SSS，这些点在右部连到的点集，记作 N(S)N(S)N(S)，的大小不小于 kkk，即 ∣S∣≥∣N(S)∣|S|\ge |N(S)|∣S∣≥∣N(S)∣。
证明见： 「学习笔记」Hall定理。
上面就是 Hall 定理，下面是它的推论。

二分图存在大小为 kkk 的匹配，当且仅当 ∀S,∣S∣≤∣N(S)∣−k\forall S,|S|\le|N(S)|-k∀S,∣S∣≤∣N(S)∣−k。

进一步推论：

若使 GGG 中存在完美匹配，则最少补充 max⁡{0,∣S∣−∣N(S)∣}\max\{ 0,|S|-|N(S)| \}max{0,∣S∣−∣N(S)∣} 条边。

我们还有网络流的形式：

设左部点的流量为 aia_{i}ai​，右部点的流量为 bib_{i}bi​，那么有左部点满流，当且仅当 ∀S,∑i∈Sai≤∑i∈NSbi\forall S,\sum_{i\in S} a_i\le \sum_{i\in N_S} b_i∀S,∑i∈S​ai​≤∑i∈NS​​bi​。

最大匹配：

二分图 GGG 的最大匹配为 ∣S∣−max⁡(∣S′∣−∣N(S′)∣)|S|-\max(|S&#x27;|-|N(S&#x27;)|)∣S∣−max(∣S′∣−∣N(S′)∣)，其中 SSS 为左部点集合，S′S&#x27;S′ 为 SSS 子集。

 2.k-正则二分图
k-正则二分图，即所有点度数均为 kkk 的二分图。
k-正则二分图存在 kkk 组不相交的完美匹配，证明考虑 Hall 定理：选出 aaa 个左部点，他们的度数为 akakak，连到右部点上，至少有 kkk 个点，所以此时存在一组完美匹配，删去所有匹配边，k-正则二分图变成了 k-1-正则二分图，归纳即可。
如何快速求出一个 k-正则二分图的完美匹配呢？
利用随机化：
算法如下：

重复 NNN 次：
随机选一个左边的未匹配点，然后沿增广路随机游走（即从左往右随机走未匹配边，从右往左走匹配边），直到走到一个右边的未匹配点。
把走出来的环去掉（找到最后一个出现过多次的点，然后把第一次走到它到最后一次走到它中间的这段路砍掉）。这样就找到了一条增广路。对它进行增广以把匹配数增加 111。

这样的时间复杂度是 O(nlog⁡n)O(n\log n)O(nlogn)。
 3. 习题
 CF1519F
设 LxL_xLx​ 表示第 xxx 个宝箱上所有锁的集合，则对于宝箱选取的集合 SSS 要满足：
∑i∈Sai≤∑j∈∪i∈SLibj\sum\limits_{i\in S} a_{i}\le \sum\limits_{j\in \cup_{i\in S} L_{i}} b_{j}
i∈S∑​ai​≤j∈∪i∈S​Li​∑​bj​
这个形式长得很想 Hall 定理的形式，考虑转化，对于每一个宝箱 iii，我们把这个宝箱拆成 aia_{i}ai​ 个点，同理于锁拆成 bjb_{j}bj​ 个点。如果宝箱 iii 上有锁 jjj，则将宝箱 iii 拆出的所有点连一条边到锁 jjj 拆出的所有点，得到一个二分图，其中宝箱拆成的点在二分图的左部，则要求这个图的左部存在完美匹配（即左部每个点都能和右部的一个点匹配，且匹配点互不相同），下面只需要构造出这个完美匹配即可。
设 f(i,S)f(i,S)f(i,S) 表示考虑到第 iii 个宝箱的点，右部点的锁拆除的点钟还没有被匹配的个数，最少要花费多少。
专一考虑枚举当前宝箱对应匹配上的点，如果匹配上至少一个锁 jjj 拆出的点，则花费的钱要加上 ci,jc_{i,j}ci,j​，最后取 f(n,∗)f(n,*)f(n,∗) 的最小值即为答案，时间复杂度 O(n×52n)O(n\times 5^{2n})O(n×52n)。
 ARC076D
用上面补充边的定理，把人看做左部点，而椅子看做右部点，人向 i∈[1,li]∪[ri,m]i\in [1,l_{i}] \cup [r_{i},m]i∈[1,li​]∪[ri​,m] 连边。
那么节点数为 m−(r−l+1)=m−r+l−1m-(r-l+1)=m-r+l-1m−(r−l+1)=m−r+l−1，由霍尔定理不难得出答案为 ∣S∣−m+r−l+1|S|-m+r-l+1∣S∣−m+r−l+1。
考虑到数据范围不允许暴力枚举 SSS，考虑优化，考虑对右部区间 [L,R][L,R][L,R] 找出对应的做不节点，将人按 lil_ili​ 升序让后扫描线存储 rir_{i}ri​，将又不借点映射上去，每次将左端点 lll 的 rir_{i}ri​ 更新入线段树区间加一，让后求 [L,m][L,m][L,m] 的最大值即可。
代码咕咕咕，写太多外部题库的题了？
 P3488
显然的二分图完备匹配，但是显然 O(nlog⁡n)O(n \log n)O(nlogn) 直接会直接炸缸，考虑优化。
利用 Hall 定理，令 cnticnt_{i}cnti​ 表示 [l,r][l,r][l,r] 中 iii 号码的出现次数，那么满足条件如下：
∑i=lrcnti≤k×(r−k+1+d)\sum\limits_{i=l}^r cnt_{i}\le k\times (r-k+1+d)
i=l∑r​cnti​≤k×(r−k+1+d)
进一步化简有：
∑i=lrcnti−k≤k×d\sum\limits_{i=l}^r cnt_{i}-k \le k \times d
i=l∑r​cnti​−k≤k×d
维度动态最大子段和即可，时间复杂度 O(mlog⁡n)O(m\log n)O(mlogn)。
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>IOI2018会议题解</title>
    <url>/posts/43fb7374/</url>
    <content><![CDATA[可能更洛谷的阅读体验
很好的题，能够很好的练习枚举最大值转移 DP。
我们一步一步来，顺着 subtask 来走：
有一个显然的想法，就是暴力选取开会的位置，直接做即可，复杂度 O(n2q)O(n^2 q)O(n2q)。
考虑 sub 2 如何做，首先注意到询问的是一个区间的答案，我们可以暴力预处理出来，但时间复杂度要在 O(n2)O(n^2)O(n2) 以内，怎么做？注意到我们实际上不用暴力枚举，我们只需要一个区间的最大值出现在哪里，这个最大值将会贡献答案，让后枚举把会议丢在该位置左边还是右边即可。
具体来说，我们设 f(l,r)f(l,r)f(l,r) 表示在 [l,r][l,r][l,r] 的位置区间选会议的最小代价，转移是显然的：
f(l,r)=min⁡{f(l,p−1)+(r−p+1)×ap,f(p+1,r)+(p−l+1)×ap}f(l,r)=\min\left\{f(l,p-1)+(r-p+1) \times a_p,f(p+1,r)+(p-l+1) \times a_{p} \right\}
f(l,r)=min{f(l,p−1)+(r−p+1)×ap​,f(p+1,r)+(p−l+1)×ap​}
ppp 即为 [l,r][l,r][l,r] 的最大值，发现这两边形式一致，就可以只考虑一半东西，然后另一半直接将序列翻转再做一遍即可得到，利用 st 表即可做到 19 分。
我们观察这个转移方程，多次涉及区间 max⁡\maxmax 来进行转移，我们考虑笛卡尔树，不难发现我们枚举的最大值节点就是笛卡尔树的根节点，转移方程实际上就是在对左右儿子的答案进行统计，注意到原题目标准复杂度为 O(qlog⁡n)O(q \log n)O(qlogn)，启示我们使用一些数据结构优化。
首先因为这是类似于笛卡尔树的 DP，我们可以考虑类似于树形 DP 的方式，从底往上进行 DP，但是如果直接做仍是 O(n2)O(n^2)O(n2) 的，怎么办，自底向上合并答案？考虑这个东西我们可以用线段树试试？注意到线段树刚好符合上面的转移方程（甜菜的想法），观察上面的转移方程刚好符合线段树的区间形式。考虑转移，不对暴力转移还是 O(n2)O(n^2)O(n2) 的啊！我们根据转移方程，。发现 iii 越小，在左侧所需代价一定越来越小，而 iii 越来越大的时候，在右侧所需代价也一定越来越小，这两个形似一次函数，具有单调性，考虑线段树二分找交点（俗称转移优化），交点左侧为左侧的 DP 更新，右侧即右侧更新，线段树即可做：
这就是我们所说的枚举最大值转移，枚举最大值转移 DP，实际上就是排列在笛卡尔树结构上的 DP（注意不是真正的笛卡尔树），有点类似于分治的思想。我们利用的是一个笛卡尔树的性质：我们设一个区间 [l,r][l,r][l,r] 最大值的位置为 pospospos，发现可以把区间分成 [l,pos][l,pos][l,pos] 和 [pos,r][pos,r][pos,r] 两个区间，并且两个区间互不影响，也就是说我左边怎么乱搞放数也不会影响右边的区间。这个时候全局最大值作为区间的端点出现。自底向上类似 “树形 DP” 来合并区间。
代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=8e5+15;struct Query&#123;    int l,r;&#125;qry[MN];int n,q,ans[MN],h[MN],st[MN][30],arcst[MN][30],lg[MN];vector&lt;int&gt; pos[MN];struct Segment&#123;#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1    struct Node&#123;        int l,r,cov,k,b,lmx,rmx;    &#125;t[MN&lt;&lt;2];    void docov(int p)&#123;        t[p].cov=1;        t[p].k=t[p].b=t[p].lmx=t[p].rmx=0;    &#125;    void doadd(int p,int k,int b)&#123;        t[p].k+=k;        t[p].b+=b;        t[p].lmx+=k*t[p].l+b;        t[p].rmx+=k*t[p].r+b;    &#125;     void pushdown(int p)&#123;        if(t[p].cov)&#123;            docov(ls);            docov(rs);        &#125;        if(t[p].k||t[p].b)&#123;            doadd(ls,t[p].k,t[p].b);            doadd(rs,t[p].k,t[p].b);        &#125;        t[p].cov=t[p].k=t[p].b=0;    &#125;    void pushup(int p)&#123;        t[p].lmx=t[ls].lmx,t[p].rmx=t[rs].rmx;    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        if(l==r) return;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void update(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            doadd(p,0,k);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) update(ls,fl,fr,k);        if(mid&lt;fr) update(rs,fl,fr,k);        pushup(p);    &#125;    void merge(int p,int fl,int fr,int k,int b)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            int lv=t[p].l*k+b,rv=k*t[p].r+b;            if(lv&gt;=t[p].lmx&amp;&amp;t[p].rmx&lt;=rv) return;            if(t[p].lmx&gt;=lv&amp;&amp;rv&lt;=t[p].rmx)&#123;                docov(p);                doadd(p,k,b);                return;            &#125;        &#125;          pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) merge(ls,fl,fr,k,b);        if(mid&lt;fr) merge(rs,fl,fr,k,b);        pushup(p);    &#125;    int querylmx(int p,int pos)&#123;        if(t[p].l==t[p].r) return t[p].lmx;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=pos) return querylmx(ls,pos);        return querylmx(rs,pos);    &#125;    int queryrmx(int p,int pos)&#123;        if(t[p].l==t[p].r) return t[p].rmx;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=pos) return queryrmx(ls,pos);        else return queryrmx(rs,pos);    &#125;#undef ls#undef rs&#125;s,t;void initst()&#123;    for(int j=1;j&lt;=20;j++)&#123;        for(int i=1;i&lt;=n;i++)&#123;            if(i+(1&lt;&lt;j)-1&gt;n) break;            st[i][j]=max(st[i][j-1],st[i+(1&lt;&lt;(j-1))][j-1]);            if(st[i][j]==st[i][j-1]) arcst[i][j]=arcst[i][j-1];            else arcst[i][j]=arcst[i+(1&lt;&lt;(j-1))][j-1];        &#125;    &#125;&#125;int cmp(int l,int r)&#123;    int len=__lg(r-l+1);    if(st[l][len]&gt;=st[r-(1&lt;&lt;len)+1][len])&#123;        return arcst[l][len];    &#125;else return arcst[r-(1&lt;&lt;len)+1][len];&#125;void solve(int l,int r)&#123;    if(l&gt;r) return;    int mid=cmp(l,r);    solve(l,mid-1);    solve(mid+1,r);    for(auto now:pos[mid])&#123;        ans[now]=h[mid]*(qry[now].r-qry[now].l+1);        if(qry[now].l&lt;mid)&#123;            ans[now]=min(ans[now],s.querylmx(1,qry[now].l)+h[mid]*(qry[now].r-mid+1));        &#125;        if(qry[now].r&gt;mid)&#123;            ans[now]=min(ans[now],t.queryrmx(1,qry[now].r)+h[mid]*(mid-qry[now].l+1));        &#125;    &#125;    int sx=h[mid],tx=h[mid];    if(l&lt;mid) tx+=t.queryrmx(1,mid-1);    if(r&gt;mid) sx+=s.queryrmx(1,mid+1);    s.update(1,mid,mid,sx);    t.update(1,mid,mid,tx);    if(l&lt;mid)&#123;        s.update(1,l,mid-1,h[mid]*(r-mid+1));        s.merge(1,l,mid-1,-1*h[mid],sx+mid*h[mid]);    &#125;    if(r&gt;mid)&#123;        t.update(1,mid+1,r,h[mid]*(mid-l+1));        t.merge(1,mid+1,r,1ll*h[mid],tx-1ll*mid*h[mid]);    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;q;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;h[i];        st[i][0]=h[i];        arcst[i][0]=i;    &#125;    for(int i=1;i&lt;=q;i++)&#123;        cin&gt;&gt;qry[i].l&gt;&gt;qry[i].r;        qry[i].l++;        qry[i].r++;    &#125;    initst();    for(int i=1;i&lt;=q;i++)&#123;        pos[cmp(qry[i].l,qry[i].r)].push_back(i);    &#125;    s.build(1,1,n);    t.build(1,1,n);    solve(1,n);    for(int i=1;i&lt;=q;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Kruskal重构树学习笔记</title>
    <url>/posts/6d897253/</url>
    <content><![CDATA[ 1.算法简介
我们回忆一下 Kruskal 求最小生成树的过程，可以表述为以下：

将边按照边权从小到大进行排序。
若当前边 (u,v)(u,v)(u,v) 两端不连通，我们就在生成树的边集中加入这条边并连接 (u,v)(u,v)(u,v)，关于连通性显然我们可以考虑利用冰茶几维护。

有的时候，我们可能想要求得信息就和边权的大小关系有关，例如路径上的最大边权和最小边权，你可能会想到使用最小生成树，但是问题在于最小生成树上的边权是乱序的，但是我们发现在构建的最小生成树的过程就可以解决这个路径上最大边权和最小边权问题。
如果能用某种结构描述每条边被连接的先后顺序就很好了，因为越往后加入的边权就越大，就可以快速刻画边权有限制的图连通性了。
于是我们就有了 Kruskal 重构树！它在 Kruskal 的过程上进行了一些改进：

将边按照边权进行排序。
若当前边 (u,v)(u,v)(u,v) 两端不连通，连接 u,vu,vu,v 的时候找到 u,vu,vu,v 的代表元 U,VU,VU,V。新建节点 ccc，将并查集中 U,VU,VU,V 的父亲设为 ccc，并在图上连边 c→Uc\to Uc→U 和 c→Vc\to Vc→V。注意 U,VU,VU,V 可能不是原树节点。
通常将 ccc 的权值 wcw_{c}wc​ 设置为边的边权，为虚点设置权值方便解题，巧妙设置点权对解题有极大帮助。

如果图是联通的，如上操作将会得到一颗大小为 2n−12n-12n−1 且以 2n−12n-12n−1 为根的二叉树 TTT，这个就是 kruskal 重构树。
以下为例子，原图：

Kruskal 重构树：

以下为构建代码：
struct Edge&#123;    int u,v,w;&#125;e[MN];int dtot;namespace EXKru&#123;    int pre[MN];    void initpre()&#123;        for(int i=0;i&lt;MN;i++)&#123;            pre[i]=i;        &#125;    &#125;    int root(int x)&#123;        if(pre[x]==x) return pre[x];        else return pre[x]=root(pre[x]);    &#125;    bool cmp(Edge x,Edge y)&#123;        return x.w&lt;y.w;    &#125;    void solve()&#123;        sort(e+1,e+n,cmp);        dtot=n;        for(int i=1;i&lt;n;i++)&#123;            int ru=root(e[i].u),rv=root(e[i].v);            if(ru!=rv)&#123;                dtot++;                val[dtot]=e[i].w;                pre[ru]=pre[rv]=dtot;                adj[dtot].push_back(ru);                adj[dtot].push_back(rv);                if(dtot==2*n-1) break;            &#125;        &#125;    &#125;&#125;
Kruskal 重构树有一些优秀的性质：

重构树是一颗二叉树。
原图 GGG 中所有叶子是重构树 TTT 的叶子，原节点和重构树叶子节点本质相同。
对于任意新节点 uuu 及其祖先 vvv，满足 wu≤wvw_{u}\le w_{v}wu​≤wv​，默认叶子 w=0w=0w=0。

第三个性质是十分重要，我们在做题的时候将会重复利用该性质，它的推论：原节点 xxx 在原图上经过权值 ≤d\le d≤d 的边可到达的所有点就是它在重构树上，最浅的祖先 xxx 满足权值 ≤d\le d≤d 的子树内所有叶子节点。翻译下就是从一个叶子节点 xxx 倍增找到满足权值 ≤d\le d≤d 的最浅祖先 fafafa，那么 fafafa 子树内所有叶子就是原图仅保留边权 ≤d\le d≤d 的边时 xxx 所在连通块的所有点。
进一步的，原图中两个点间所有路径上的边最大权值的最小值 = 最小生成树上两点简单路径的边最大权值 = Kruskal 重构树上两点 LCA 的点权。
综上我们可以总结出一个套路，当题目限制涉及只经过权值不大于某个值的点或边的时候，我们可以从 Kruskal 的角度入手。如果我们想要利用这个刻画图连通性，我们可以通过利用可持久化冰茶几来实现动态图连通性的刻画，我们会在例题中详细说明其应用。
 2. 例题
 最小瓶颈路
建立 Kruskal 重构树，那么答案就是 A 点与 B 点 LCA 的点权，因为至少要满足图联通必须从 LCA 开始往上，显然不可能再往上走不然点权会更大，所以必定是 LCA。
 P4197 Peaks
上面性质的拓展应用，先建立 Kruskal 重构树，每次询问找到 xxx 祖先中点权 ≤v\le v≤v 的最浅祖先，那么答案就是子树中叶子节点点权第 kkk 大，用主席树维护即可。
 [AGC002D] Stamp Rally
翻译全部错误 666.
最大编号尽可能小，考虑二分。问题转化为求经过边编号 ≤mid\le mid≤mid 的 x→yx\to yx→y 路径上点数量，将边权设置为边的编号，那么命题关系求两点路径最大权值最小值，容易想到 Kruskal 重构树，且这题限制了经过点的个数要恰好为 zzz，不能大也不能小，所以二分是一个比较好的解决方案。时间复杂度 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
 P3684 [CERC2016] 机棚障碍 Hangar Hurdles
先考虑我们初始点最大能放多少，由于是一个正方形，我们考虑前缀和预处理这个网格图，然后二分求出最大长度。这样我们就能得出每一个点所能容纳的最大正方形长度 ddd。利用这个 ddd 我们对于正方形每一个点向四周连边，边权设置为 min⁡(du,dv)\min(d_{u},d_{v})min(du​,dv​)，那么命题转化为求起点到终点的路径上边的权值最小值的最大值，用 Kruskal 重构树即可解决，但是为题在于连边过多，我们考虑对于 ddd 相同的点缩点即可，时间复杂度 O(n2log⁡n)O(n^2 \log n)O(n2logn)。在实现细节方面，我们注意到，由于障碍的存在，所以可能最后得到的是森林而不是一棵树。考虑到树与树之间是不连通的，所以我们完全可以新建一个节点连向这些树，并把点权设为 0，就可以直接按照普通一棵树的情况来做了。
码力题不写。
 AT_arc098_d [ARC098F] Donation
牛牛牛
首先不难发现一个性质就是如果我们在某个地方给塞钱了之后我们肯定之后就不回来这里。同时发现答案必定 ≥∑Bi\ge \sum\limits B_{i}≥∑Bi​，考虑到给钱很难想，正难则反考虑倒着走领钱，设 ci=max⁡(ai−bi,0)c_{i}=\max(a_{i}-b_{i},0)ci​=max(ai​−bi​,0)，不难发现题目的条件就是要求满足到达点 iii 的时候满足 val≥cival\ge c_{i}val≥ci​，如果不满足就补充即可。如果是第一次经过令 val←val+bival\leftarrow val+b_{i}val←val+bi​。
这玩意怎么做？考虑最小生成树，令边权为 max⁡(cu,cv)\max(c_{u},c_{v})max(cu​,cv​)，表示经过这条边当前钱数的最小值。但是我们发现这玩意很难搞，因为边权是乱序的，如果暴力枚举起点走的话是 O(n2)O(n^2)O(n2) 的，但是我们发现我们肯定是贪心的走边权最小的。考虑这玩意我们可以在建树的时候求得，考虑 Kruskal 重构树表述建树这一过程。然后再树上 DP，设 f(u)f(u)f(u) 表示 uuu 子树内都经过后最小领到的前，叶子节点即为 ci+bic_{i}+b_{i}ci​+bi​，对于非叶子节点枚举从哪里最后进入出来即可，有 f(u)=min⁡v{su−sv+max⁡(cu,fv)}f(u)=\min\limits_{v}\{ s_{u}-s_{v}+\max(c_{u},f_{v})\}f(u)=vmin​{su​−sv​+max(cu​,fv​)}。其中 sus_{u}su​ 表示 uuu 为根的子树内节点的 ∑b\sum\limits b∑b，由于重构树显然是二叉树可以直接展开 min⁡\minmin，但是如果你写多叉树那我没啥好说的，时间复杂度 O(mlog⁡m+nlog⁡∣V∣)O(m\log m+n\log |V|)O(mlogm+nlog∣V∣)。
借助 Kruskal 重构树，通过合理的赋值边权我们可以满足题目中的限制，难点就是在于我们如何发掘边权所表示的意义。
 CF1628E Groceries in Meteor Town
首先看到简单路径上求经过边权最大值不难想到利用 Kruskal 重构树，查询操作就转化成了重构树上， xxx 点与所有关键点的 lca 的权值。
那么现在为题转化为如何求一个点集合的 LCA，如果你做过树上查询你可能会以为是区间 LCA 直接一个一个维护，但是显然不是这样的，这是点集不是区间。答案是点集中 dfn 最大点和 dfn 最小点的 lca，所以直接维护区间最大最小 DFN 即可。
 P4899 [IOI 2018] werewolf 狼人
我做这个题的时候那一天是血月。
上下界重构树，我们考虑建两颗重构树，A 树非根节点大于父节点，B 树非根节点小于父节点。
那么我们考虑利用性质，首先再 A 树种找到 SSS，倍增跳到 fafafa 满足最浅祖先 fa≥Lfa\ge Lfa≥L。则 SSS 可以只通过编号 ≥L\ge L≥L 的点所能到的点的集合是 fafafa 的子树内所有点的集合,令为 VsV_{s}Vs​。同理我们可以得到 TTT 只经过编号 ≤R\le R≤R 的点所能到的点的集合 VtV_{t}Vt​，问题转化为求是否有解即为这两个集合是否公共点，用 DFN 主席树求解交集即可。
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>LGV定理</title>
    <url>/posts/3fa633e8/</url>
    <content><![CDATA[ 0. 前言
你需要掌握的知识：

矩阵与矩阵运算。
行列式。

 1. 概念与应用
 1.1 概念
LGV 引理是用于解决图上不交路径计数的问题。同时也是线性代数中行列式的一个经典应用。
我们阐述一下概念。
对于一张有边权的有向无环图 GGG，定义一条路径 PPP，的权值 w(P)w(P)w(P) 为路径上所有边的边权的乘积，也就是说 w(P)=∏(u,v)∈Pval(u,v)w(P)=\prod_{(u,v)\in P} val(u,v)w(P)=∏(u,v)∈P​val(u,v)。
定义 e(u,v)e(u,v)e(u,v) 为 u→vu \to vu→v 的所有路径 PPP 的权值之和，也就是 ∑P:u→vw(P)\sum_{P:u\to v} w(P)∑P:u→v​w(P)。
定义两个大小为 nnn 的点集的子集 A,BA,BA,B，分别称之为起点集合与终点集合，则一组从 A→BA\to BA→B 的不交路径 SSS 为：SiS_iSi​ 是一条从 Ai→Bσ(S)iA_i \to B_{\sigma(S)_i}Ai​→Bσ(S)i​​。其中 σ(S)\sigma(S)σ(S) 是一个与 SSS 对应的排列，对于任何 i≠ji\neq ji=j，路径 Si,SjS_i,S_jSi​,Sj​ 不存在公共点。
而 LGV 引理说的就是，对于矩阵：
M=[e(A1,B1)e(A1,B2)…e(A1,Bn)e(A2,B1)e(A2,B2)…e(A2,Bn)⋮⋮⋱⋮e(An,B1)e(An,B2)…e(An,Bn)]M=\begin{bmatrix}
e(A_1,B_1)  &amp; e(A_1,B_2) &amp; \dots &amp; e(A_1,B_n)\\
 e(A_2,B_1) &amp; e(A_2,B_2) &amp; \dots &amp; e(A_2,B_n) \\
 \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
 e(A_n,B_1) &amp; e(A_n,B_2) &amp; \dots &amp; e(A_n,B_n)
\end{bmatrix}M=⎣⎢⎢⎢⎢⎡​e(A1​,B1​)e(A2​,B1​)⋮e(An​,B1​)​e(A1​,B2​)e(A2​,B2​)⋮e(An​,B2​)​……⋱…​e(A1​,Bn​)e(A2​,Bn​)⋮e(An​,Bn​)​⎦⎥⎥⎥⎥⎤​
有 det⁡M=∑S:A→B(−1)t(σ(S))∏i=1nw(Si)\det M=\sum_{S:A\to B} (-1)^{t(\sigma(S))} \prod_{i=1}^n w(S_i)detM=∑S:A→B​(−1)t(σ(S))∏i=1n​w(Si​)，其中 ttt 表示一个排列的逆序对数的奇偶性。
 1.2 证明
我们从排列展开公式出发，令 sgn⁡=(−1)t(σ(S))\operatorname{sgn}=(-1)^{t(\sigma(S))}sgn=(−1)t(σ(S))：
det⁡M=∑σ∈Snsgn⁡(σ)∏i=1ne(Ai,Bσ(i))\det M = \sum_{\sigma\in S_n} \operatorname{sgn}(\sigma) \prod_{i=1}^n e(A_i, B_{\sigma(i)})
detM=σ∈Sn​∑​sgn(σ)i=1∏n​e(Ai​,Bσ(i)​)
其中每个 e(Ai,Bσ(i))e(A_i, B_{\sigma(i)})e(Ai​,Bσ(i)​) 是从 AiA_iAi​ 到 Bσ(i)B_{\sigma(i)}Bσ(i)​ 的所有路径 PPP 的权值之和，即：
e(Ai,Bσ(i))=∑Pi:Ai→Bσ(i)w(Pi)e(A_i, B_{\sigma(i)}) = \sum_{P_i: A_i \to B_{\sigma(i)}} w(P_i)
e(Ai​,Bσ(i)​)=Pi​:Ai​→Bσ(i)​∑​w(Pi​)
将这个表达代入上式得：
det⁡M=∑σ∈Snsgn⁡(σ)∏i=1n(∑Pi:Ai→Bσ(i)w(Pi))\det M = \sum_{\sigma\in S_n} \operatorname{sgn}(\sigma) \prod_{i=1}^n \left( \sum_{P_i: A_i \to B_{\sigma(i)}} w(P_i) \right)
detM=σ∈Sn​∑​sgn(σ)i=1∏n​⎝⎛​Pi​:Ai​→Bσ(i)​∑​w(Pi​)⎠⎞​
将乘积与求和交换：
det⁡M=∑σ∈Snsgn⁡(σ)∑P1:A1→Bσ(1)⋯∑Pn:An→Bσ(n)∏i=1nw(Pi)\det M = \sum_{\sigma\in S_n} \operatorname{sgn}(\sigma) \sum_{P_1: A_1 \to B_{\sigma(1)}} \dots \sum_{P_n: A_n \to B_{\sigma(n)}} \prod_{i=1}^n w(P_i)
detM=σ∈Sn​∑​sgn(σ)P1​:A1​→Bσ(1)​∑​⋯Pn​:An​→Bσ(n)​∑​i=1∏n​w(Pi​)
此时每一项对应的是从 AiA_iAi​ 到 Bσ(i)B_{\sigma(i)}Bσ(i)​ 的路径组 (P1,…,Pn)(P_1, \dots, P_n)(P1​,…,Pn​)，上式可以重写为：
det⁡M=∑Ssgn⁡(σ(S))⋅w(S)\det M = \sum_{S} \operatorname{sgn}(\sigma(S)) \cdot w(S)
detM=S∑​sgn(σ(S))⋅w(S)
接下来将路径 SSS 分为两类：

若 SSS 中的所有路径两两点集不交，则称为不交路径，其对 det⁡M\det MdetM 的贡献为 sgn⁡(σ(S))⋅w(S)\operatorname{sgn}(\sigma(S)) \cdot w(S)sgn(σ(S))⋅w(S)；
若 SSS 中存在交点（即某个点被多个路径共用），我们称其为交叉路径。

我们将证明所有交叉路径系统的贡献之和为 0。
为此，我们构造一个反对称配对消去所有交叉路径系统的贡献。考虑任意一个交叉路径系统 SSS，我们从中选出编号最小的交点 xxx，并设其在路径 PiP_iPi​ 与 PjP_jPj​ 中都出现，且 i&lt;ji&lt;ji&lt;j。我们定义一个变换 ϕ\phiϕ：

将路径 PiP_iPi​ 和 PjP_jPj​ 交换它们在交点 xxx 之后的部分，构造出新的路径 Pi′,Pj′P_i&#x27;, P_j&#x27;Pi′​,Pj′​；
新的路径组 S′=(P1,…,Pi′,…,Pj′,…,Pn)S&#x27; = (P_1, \dots, P_i&#x27;, \dots, P_j&#x27;, \dots, P_n)S′=(P1​,…,Pi′​,…,Pj′​,…,Pn​)，对应的新排列 σ′\sigma&#x27;σ′ 为 σ\sigmaσ 与 (i,j)(i,j)(i,j) 交换；
由于 w(Pi′)w(Pj′)=w(Pi)w(Pj)w(P_i&#x27;)w(P_j&#x27;) = w(P_i)w(P_j)w(Pi′​)w(Pj′​)=w(Pi​)w(Pj​)，有 w(S′)=w(S)w(S&#x27;) = w(S)w(S′)=w(S)；
但 sgn⁡(σ′)=−sgn⁡(σ)\operatorname{sgn}(\sigma&#x27;) = -\operatorname{sgn}(\sigma)sgn(σ′)=−sgn(σ)。

因此，每一组交叉路径系统 SSS 与其配对路径系统 S′S&#x27;S′ 贡献相反，抵消为 0。
因此最终仅剩下所有不交路径系统的贡献，证毕。
 1.3 应用
说了这么多，由于是对不交路径组的带符号求和，所以 LGV 引理难以直接统计所有不交路径组的权值和。但是我们在实际解决问题的时候会有如下的方案：

题目就是让你求带符号的的答案。
图是特殊的图，是的不交路径的起点和终点对应是固定的，只存在一种或奇偶性相同的几种 σ(S)\sigma(S)σ(S)。
只需要检验不交路径组的存在性，考虑给边随机赋权，检查 det⁡M≠0\det M \neq 0detM=0 即可。错误概率在 1P\dfrac{1}{P}P1​，其中 PPP 为给随机赋权取模的模数。

 2. 例题
 CF348D Turtle
为数不多的几个超级模板题。首先考虑固定起始点的路径如何计算，我们可以通过 DP，求解，设 f(i,j)f(i,j)f(i,j) 表示从起始点到当前点 (i,j)(i,j)(i,j) 的方案数，显然转移：
f(i,j)←{0(i,j) 有障碍物f(i−1,j)+f(i,j−1)(i,j) 无障碍物f(i,j)\leftarrow
\begin{cases}
0 &amp; (i,j)\text{ 有障碍物} \\
f(i-1,j)+f(i,j-1) &amp; (i,j) \text{ 无障碍物}
\end{cases}
f(i,j)←{0f(i−1,j)+f(i,j−1)​(i,j) 有障碍物(i,j) 无障碍物​
将起始点初始化为 1 即可，转移是 O(n2)O(n^2)O(n2) 的，很舒服。
但是怎么求不想交路径呢？那么当然要用我们的 LGV 引理啦，毕竟方格图上的走法也可以算是一个有向无环图，而且只要我们把边权赋值为方案数就可以啦。
但是问题在于起点集合和终点集合怎么算，如果我们直接设置为 A={(1,1)},B={(n,m)}A=\{ (1,1) \},B=\{ (n,m)\}A={(1,1)},B={(n,m)} 的话那起点集合和终点集合本身两只乌龟就是重的啊，所以不能这么设置，但是我们额可以这么设置，这两只乌龟一定是一只从 (1,2)→(n−1,m)(1,2) \to (n-1,m)(1,2)→(n−1,m)，另一只是 (2,1)→(n,m−1)(2,1) \to (n,m-1)(2,1)→(n,m−1)，如果不是这么走的话显然是会相交的，那么我们的起点集合和终点集合就可以显然的设置了，就是按照上面两组进行设置，那么 2×22\times 22×2 的行列式计算如下：
∣abcd∣=ad−bc\begin{vmatrix}
 a &amp; b\\
 c &amp; d
\end{vmatrix}=ad-bc∣∣∣∣∣​ac​bd​∣∣∣∣∣​=ad−bc
但是 a,b,c,da,b,c,da,b,c,d 怎么设置呢？根据我们说的，不可能存在 (1,2)→(n,m−1),(2,1)→(n−1,m)(1,2) \to (n,m-1),(2,1)\to (n-1,m)(1,2)→(n,m−1),(2,1)→(n−1,m) 的方案，所以我们这么设置。
令 (1,2)(1,2)(1,2) 走到 (n−1,m),(n,m−1)(n-1,m),(n,m-1)(n−1,m),(n,m−1) 的路径方案数为 a,ba,ba,b，令 (2,1)(2,1)(2,1) 走到 (n−1,m),(n,m−1)(n-1,m),(n,m-1)(n−1,m),(n,m−1) 的路径方案数为 c,dc,dc,d。答案还是 ad−bcad-bcad−bc，直接算就可以了。
 P6657 LGV引理板子
还是方格图，但是这里起点集合和终点集合是给定的了。发现不存在其他起点和终点匹配的方法使得存在不交路径组，所以我们用 LGV 就能够计算出的就是答案。
而从 (a,1)→(b,n)(a,1)\to (b,n)(a,1)→(b,n) 的路径数我们是可以通过组合数来去计算的，就是 (n−1+b−ab−a)\dbinom{n-1+b-a}{b-a}(b−an−1+b−a​)，让后将这个赋值到行列式上，对行列式求值就是答案，时间复杂度为 O(m3)O(m^3)O(m3) 瓶颈在行列式求值。
放主函数的代码：
void solve()&#123;    read(n,m);    for(int i=1;i&lt;=m;i++)&#123;        read(a[i],b[i]);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        for(int j=1;j&lt;=m;j++)&#123;            if(a[i]&lt;=b[j])&#123;                mt[i][j]=getC(n-a[i]+b[j]-1,n-1);            &#125;else&#123;                mt[i][j]=0;            &#125;        &#125;    &#125;    put(HLS::solve());// 就是求行列式的函数。&#125;
 有向图哈密顿路

给你一个 nnn 个点 mmm 条边的有向图，让你找到一个 kkk 个点的路径是的路径上的点互不相同。
1≤n≤100,1≤m≤200,1≤k≤151\le n \le 100,1\le m \le 200,1\le k \le 151≤n≤100,1≤m≤200,1≤k≤15。

我没找到题，问题在于如何让路径上的点互不相同，我们需要有一种在经过重复点的时候就一定不会统计的方法。
根据行列式的性质：若行列式两行相同，行列式的值为 000。
我们考虑给每一个点赋值一个 kkk 维向量 vvv，对于一个 kkk 个点的路径 a1,a2,…,aka_1,a_2,\dots,a_ka1​,a2​,…,ak​，若 det⁡[va1va2⋮vak]=0\det \begin{bmatrix}
v_{a_1} \\
v_{a_2} \\
\vdots \\
v_{a_k}
\end{bmatrix}=0det⎣⎢⎢⎢⎢⎡​va1​​va2​​⋮vak​​​⎦⎥⎥⎥⎥⎤​=0 的话说明存在重复点，否则不存在重复点，如果我们给 vvv 随机赋权的话，根据我们前面的说法，错误率是 1MOD\dfrac{1}{MOD}MOD1​。
那么通过上面的方法，我们不需要记录我们所经过的点，只需要进行数据运算就可以了，而对于上面行列式的求值，我们可以通过定义进行。这样的话我们可以通过考虑 DP 进行计算，设 f(i,j,S)f(i,j,S)f(i,j,S) 表示考虑了前 iii 个点，第 iii 个点为 jjj 的情况下，前 iii 行行列式求值选择的排列取值集合为 SSS 的情况下前 iii 行的带符号和。
考虑转移的时候直接枚举边以及这一行选择的排列取值，最终 f(k,vi,{1,2,…,k}f(k,v_i,\{1,2,\dots,k\}f(k,vi​,{1,2,…,k} 的第一个非零的位置 viv_ivi​ 求实一个可行的终点，让后倒退求出路径即可，时间复杂度 O(mk22k)O(mk^2 2^k)O(mk22k)，没想到吧和 nnn 一点关系都没有。
 PA2021 Fiolki 2

有一张 nnn 个点 mmm 条边的有向无环图。记 f(l,r) (k&lt;l≤r≤n)f(l, r)\ (k &lt; l \le r \le n)f(l,r) (k&lt;l≤r≤n) 表示以 1∼k1 \sim k1∼k 中的点为起点，l∼rl \sim rl∼r 中的点为终点，最多能够选出多少条路径，使得任意两条路径不存在公共节点。
对于 x=0,1,…,kx = 0, 1, \ldots, kx=0,1,…,k，问有多少对 l,rl, rl,r 满足 f(l,r)=xf(l, r) = xf(l,r)=x。
n≤105,m≤106,k≤50n \le 10^5,\quad m \le 10^6,\quad k \le 50n≤105,m≤106,k≤50。

只是让我们求不想交的路径耶？我们可以考虑给边随机赋权来完整这个事，让后用 LGV 来进行检验，具体操作就是对于每一个 k&lt;i≤nk&lt;i\le nk&lt;i≤n 维护 1∼k1\sim k1∼k 到 iii 所有路径的权值和，将其看做一个 kkk 维向量。若 f(l,r)=kf(l,r)=kf(l,r)=k，根据 LGV 有就是找到 a1,a2,…,ak∈[l,r]a_1,a_2,\dots,a_k \in [l,r]a1​,a2​,…,ak​∈[l,r] 使得这 kkk 个点对应的向量排成一列构成的矩阵的行列式值不为 0。说人话就是在 [l,r][l,r][l,r] 找到 kkk 个线性无关的向量。
依次类推，有 f(l,r)≥xf(l,r)\ge xf(l,r)≥x，就意味着能够在 [l,r][l,r][l,r] 找到 xxx 个线性无关的向量，所以 f(l,r)f(l,r)f(l,r) 就是 [l,r][l,r][l,r] 的每一个点对应的向量所构成线性基的大小。
考虑这个怎么维护，先让我们不可能直接暴力的去维护不然时间复杂度就直接螺旋爆炸上天，但是我们观察性质，对于确定的 rrr，f(l,r)f(l,r)f(l,r) 的值随 lll 的减小而增大，若 f(l,r)≠f(l−1,r)f(l,r)\neq f(l-1,r)f(l,r)=f(l−1,r) 那么也就意味着 ala_lal​ 与 al+1,…ara_{l+1},\dots a_ral+1​,…ar​ 线性无关，我们可以加入线性基中。而现在问题转化为找到这些 lll 让后从小到大排序，将相邻两项的差求和就是我们的答案，而我们找 lll 可以维护时间戳线性基求得，时间复杂度为 O(mk+nk2)O(mk+nk^2)O(mk+nk2)。
 SNCPC2024 最大流
不会真跑网络流吧 www。
其实就是让你找边不交的路径，并且对 kkk 取 min⁡\minmin。首先这个 min⁡\minmin 这个很难受，我们考虑能不能通过转化把他给去掉，我们可以通过添加个点 0，让后让它向 111 连 kkk 条边，让后就可以去掉了。
但是 LGV 检验的是点不交，考虑点边转化 Trick，将点转化为边，将边转化为点，具体来时就是每一条边对应一个节点，对于一个点所有入边向出边链接带有随机权值的边（因为题目还是检验），那么 iii 点的答案就是等于 iii 的所有入边对应向量构成的线性基大小即可。
显然我给你个菊花图就炸掉了，考虑优化。
所有入边向出边连边，对每个边随机赋权，根据 LGV 的说法权值是乘起来的，那这不就是随机线性组合吗？而且我们答案要线性基求得还是线性无关的向量个数，所以对于入边我们只需要保留线性无关的 kkk 组向量解决即可，这玩意还是线性基，直接做就可以啦。
时间复杂度 O((n+m)k2)O((n+m)k^2)O((n+m)k2)。
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>LNOI2022省选串题解</title>
    <url>/posts/a88c840d/</url>
    <content><![CDATA[串串构造题，纪念自己做出来的黑串串构造。大胆猜想！小心求证。
以下定义 n=∣S∣n=|S|n=∣S∣。
我们首先根据题目中给出的第三个条件，我们来看子串 SSS 在放进 TiT_{i}Ti​ 和 Ti−1T_{i-1}Ti−1​ 的形式是怎么样的：

那么，由图不难观察到一个很明显的构造过程，也就是我们先反过来，由 [l,r][l,r][l,r] 出发，右端点每一次减小 2，左端点每一次减小 1，也就是 [l,r]→[l−1,r−2]→[l−2,r−4]…[l−x,r−2x][l,r] \to [l-1,r-2]\to [l-2,r-4] \dots [l-x,r-2x][l,r]→[l−1,r−2]→[l−2,r−4]…[l−x,r−2x]。那么有一个显然的移动下界就是在极端情况下 [l,r]=[1,n][l,r]=[1,n][l,r]=[1,n]，最多只能移动 n2\dfrac{n}{2}2n​ 次。那么现在问题在于如何使得这个移动过程能够足够移动多次，首先根据题意不难得出对于每一个 TiT_{i}Ti​ 都要保证是 SSS 的子串，而且我们还要每次从上一个 Ti−1T_{i-1}Ti−1​ 转移过来，也就是说，对全局起决定性作用的在于 T0T_{0}T0​ 的选取，我们怎么选取才能最好呢？
哎，我有一计！T0T_{0}T0​ 是子串，子串又没有说非空子串，那我选空子串，那么后面的操作相当于就是找长度为 1 的子串，找长度为 2 的子串，以此类推下去。证明当 T0T_{0}T0​ 是空串时存在最优解是显然的。
但是我们上面还有一个前后缀的性质，也就是说 TiT_{i}Ti​ 由 Ti−1T_{i-1}Ti−1​ 加一个字符过来，并且还要求是一个原字符串一个子串的前后缀，那什么情况下能满足加一个字符是子串的前后缀呢？我们从我们选取的子串下手：

只能加一个字符，那么也就是说如果 SSS 选一个前缀加一个字符放到后面拼后缀还能和原来重合？那么，也就是说，这个我们构造的串至少要在 SSS 种出现两次这样的话我们才能扩大区间，感性理解就是如果不这样的话你转移到 TiT_{i}Ti​ 前后缀都覆盖不了啊，是无法满足的，严谨证明可以考虑反证法。
那么有两个这个结论，我们找一个至少出现两次的子串 [l,r][l,r][l,r]，那么首先区间能拓展 r−l+1r-l+1r−l+1，右端点每次跳两步也就是说还有 n−r2\dfrac{n-r}{2}2n−r​，那么答案就是 r−l+1+n−r2r-l+1 + \dfrac{n-r}{2}r−l+1+2n−r​。这个我们用 SAM 和 SA 可以轻松维护的，我用 SAM 因为维护至少出现两次很简单的。
注意一下，答案下界是 n2\dfrac{n}{2}2n​，可能存在没有任何拓展的情况，所以最后结果是 max⁡(n2,ans)\max(\dfrac{n}{2},ans)max(2n​,ans)。代码其实很好写，也是我见过为数不多好写的黑题了 www。
#define ll long longusing namespace std;constexpr int MN=1e6+15;int n;ll ans;string s;struct SAM&#123;    int nxt[MN][26],fa[MN],len[MN],cnt[MN],pos[MN],mnpos[MN],tot,lst;    vector&lt;int&gt; adj[MN];    int newnode()&#123;        int cur=++tot;        mnpos[cur]=1e9;        fa[cur]=len[cur]=cnt[cur]=0;        adj[cur].clear();        memset(nxt[cur],0,sizeof(nxt[cur]));        return cur;    &#125;    void init()&#123;        tot=lst=0;        tot=lst=newnode();    &#125;    int clone(int from)&#123;        int cur=newnode();        fa[cur]=fa[from];        memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));        return cur;    &#125;    void expand(int c)&#123;        int cur=newnode();        len[cur]=len[lst]+1;        int p=lst;        while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(!p)&#123;            fa[cur]=1;        &#125;else&#123;            int q=nxt[p][c];            if(len[q]==len[p]+1)&#123;                fa[cur]=q;            &#125;else&#123;                int nq=clone(q);                len[nq]=len[p]+1;                fa[q]=fa[cur]=nq;                while(p&amp;&amp;nxt[p][c]==q) nxt[p][c]=nq,p=fa[p];            &#125;        &#125;        lst=cur;    &#125;    void inittree()&#123;        for(int i=2;i&lt;=tot;i++)&#123;            adj[fa[i]].push_back(i);        &#125;    &#125;    void dfs(int u)&#123;        for(auto v:adj[u])&#123;            dfs(v);            cnt[u]+=cnt[v];            mnpos[u]=min(mnpos[u],mnpos[v]);        &#125;        if(cnt[u]&gt;=2)&#123;            ans=max(ans,1ll*len[u]+(n-mnpos[u])/2);        &#125;    &#125;&#125;sam;void init()&#123;    sam.init();&#125;void solve()&#123;    init();    cin&gt;&gt;s;    n=s.length();    s=&quot; &quot;+s;    for(int i=1;i&lt;=n;i++)&#123;        sam.expand(s[i]-&#x27;a&#x27;);        sam.cnt[sam.lst]++;        sam.mnpos[sam.lst]=i;    &#125;    sam.inittree();    ans=n/2;    sam.dfs(1);    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>MatrixTree矩阵树定理</title>
    <url>/posts/c8836e51/</url>
    <content><![CDATA[ 0. 前言
前置知识：行列式。
我已经 500 万年没写过这个笔记了，赶紧抽空写一个。
 1. 生成树计数
 1.1 无向图不带权
我们对于无向图，定义 DGD_{G}DG​ 表示图 GGG 的度数矩阵，即：
DG(i,j)={degi(i=j)0(i≠j)D_{G}(i,j)=
\begin{cases}
\text{deg}_{i} &amp; (i=j) \\ \\
0 &amp; (i\neq j)
\end{cases}
DG​(i,j)=⎩⎪⎪⎨⎪⎪⎧​degi​0​(i=j)(i=j)​
还有邻接矩阵，这里就不解释了，不过需要注意的是如果有重边的话应该算有多少条。
同时介绍 Kirchhoff 矩阵，指的对于一个图构造出来的一个矩阵。具体定义为度数矩阵减去邻接矩阵。
矩阵树定理说的是，一个图中的生成树个数等于其 Kirchhoff 矩阵的任意一个 代数余子式的行列式，说人话就是对其矩阵任意一个 n−1×n−1n-1\times n-1n−1×n−1 的子矩阵求行列式，注意如果直接对 n×nn\times nn×n 求行列式答案为 000，因为一个图的 Kirchhoff 矩阵行列式为零，同时一个图的 Kirchhoff 矩阵的任一代数余子式的行列式相同。
模板题：SP104 HIGH - Highways - 洛谷，容斥题 P4336 [SHOI2016] 黑暗前的幻想乡 - 洛谷
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=620;int n,m,a[MN][MN];namespace HLS&#123;    int solve()&#123;        int ret=1,w=1;        for(int i=1;i&lt;=n;i++)&#123;            for(int j=i+1;j&lt;=n;j++)&#123;                while(a[i][i])&#123;                    int div=a[j][i]/a[i][i];                    for(int k=i;k&lt;=n;k++)&#123;                        a[j][k]=(a[j][k]-1ll*div*a[i][k]);                    &#125;                    swap(a[i],a[j]);                    w=-w;                &#125;                swap(a[i],a[j]);                w=-w;            &#125;        &#125;        for(int i=1;i&lt;=n;i++)&#123;            ret=1ll*a[i][i]*ret;        &#125;        ret=1ll*w*ret;        return ret;    &#125;&#125;void init()&#123;    for(int i=0;i&lt;=n;i++)&#123;        for(int j=0;j&lt;=n;j++)&#123;            a[i][j]=0;        &#125;    &#125;&#125;void solve()&#123;    cin&gt;&gt;n&gt;&gt;m;    init();    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        a[u][u]++;        a[v][v]++;        a[u][v]--;        a[v][u]--;    &#125;    n--;    cout&lt;&lt;HLS::solve()&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 1.2 无向图带权
以下推广 Matrix-Tree 定理，推广到一般情况，Matrix Tree其实求的是所有可能生成树边权之积的和。由于每条生成树都算一次，权重是度数，分摊一下就是 111，所以直接是生成树个数。
推广到带权图，假设图中边有权重 wew_{e}we​，我们希望求解加权生成树总和
，即对每棵生成树，把它包含的边权乘起来，再把所有生成树累加起来：
∑T∏e∈Twe\sum\limits_{T}\prod_{e\in T} w_{e}
T∑​e∈T∏​we​
那么我们如何修改 Kirchhoff 矩阵呢，我们如下定义加权 Kirchhoff 矩阵：

(i,i)=∑(i,j)∈Ew(i,j)(i,i)=\sum\limits_{(i,j)\in E} w(i,j)(i,i)=(i,j)∈E∑​w(i,j)。
(i,j)=−w(i,j)(i,j)=-w(i,j)(i,j)=−w(i,j)，若无边默认为 000。

然后同样的方法：去掉任意一行一列，求行列式，就可以得到结果。
P3317 [SDOI2014] 重建 - 洛谷
这道题是求刚好留下一棵生成树的概率，那么，即是求：
∑T{∏i∈Tpi∏i∉T(1−pi)}=∑T{∏i∈Tpi⋅∏i(1−pi)∏i∈T(1−pi)}=∏i=1(1−pi)∑Tpi1−pi\begin{aligned}
&amp;\qquad \sum\limits_{T} \{\prod_{i\in T} p_{i}\prod_{i\notin T} (1-p_{i})\} \\
&amp; = \sum\limits_{T} \{\prod_{i\in T} p_{i}\cdot \dfrac{\prod_{i}(1-p_{i})}{\prod_{i\in T}(1-p_{i})}\} \\
&amp; =\prod_{i=1} (1-p_{i})\sum\limits_{T} \dfrac{p_{i}}{1-p_{i}}
\end{aligned}
​T∑​{i∈T∏​pi​i∈/T∏​(1−pi​)}=T∑​{i∈T∏​pi​⋅∏i∈T​(1−pi​)∏i​(1−pi​)​}=i=1∏​(1−pi​)T∑​1−pi​pi​​​
直接赋权即可，一个点的度数就是所有以它为端点的边的边权和。
#include&lt;bits/stdc++.h&gt;#define db long doubleusing namespace std;constexpr signed MN=55;constexpr db eps=1e-8;int n,m;db a[MN][MN],ret=1;namespace HLS&#123;    db solve()&#123;        db ret=1,w=1;        for(signed i=1;i&lt;=n;i++)&#123;            for(signed j=i+1;j&lt;=n;j++)&#123;                    db div=a[j][i]/a[i][i];                    for(signed k=i;k&lt;=n;k++)&#123;                        a[j][k]=(a[j][k]-div*a[i][k]);                    &#125;              &#125;        &#125;        for(signed i=1;i&lt;=n;i++)&#123;            ret=a[i][i]*ret;        &#125;        return ret;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            cin&gt;&gt;a[i][j];        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            if(fabs(a[i][j])&lt;eps)&#123;                a[i][j]=eps;            &#125;            if(fabs(1.0-a[i][j])&lt;eps)&#123;                a[i][j]=1.0-eps;            &#125;            if(i&lt;j) ret*=1.0-a[i][j];            a[i][j]=a[i][j]/(1.0-a[i][j]);         &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        a[i][i]=0;        for(int j=1;j&lt;=n;j++)&#123;            if(i^j) a[i][i]-=a[i][j];        &#125;    &#125;    n--;    cout&lt;&lt;fixed&lt;&lt;setprecision(6)&lt;&lt;fabs(HLS::solve()*ret);&#125;
 1.3 有向图版本
现在这个矩阵需要特殊定义，我们这里邻接矩阵的意义同有向图邻接矩阵，不妨设为 AAA。
那么如果你要求的是外向树，那么矩阵就是：
M(i,j)={∑k≠iw(k→i)(i=j)−w(j→i)(i≠j)M(i,j)=
\begin{cases}
\sum\limits_{k\neq i}w(k\to i) &amp; (i=j) \\ \\
-w(j\to i) &amp; (i\neq j)
\end{cases}M(i,j)=⎩⎪⎪⎪⎨⎪⎪⎪⎧​k=i∑​w(k→i)−w(j→i)​(i=j)(i=j)​
即到该点的边权总和。
若是内向树，则为：
M(i,j)={∑k≠iw(i→k)(i=j)−w(i→j)(i≠j)M(i,j)=
\begin{cases}
\sum\limits_{k\neq i}w(i\to k) &amp; (i=j) \\ \\
-w(i\to j) &amp; (i\neq j)
\end{cases}M(i,j)=⎩⎪⎪⎪⎨⎪⎪⎪⎧​k=i∑​w(i→k)−w(i→j)​(i=j)(i=j)​
即从从该点出发的边权总和(出)。此外,既然是有向的,那么就需要指定根。在有向树的时候需要理解为指定根,结论是 : 去掉哪一行就是那一个元素为根。
例题：P4455 [CQOI2018] 社交网络 - 洛谷，有向图内向树 1 为根，代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=620,MOD=1e4+7;int n,m,t,a[MN][MN];namespace HLS&#123;    int solve()&#123;        int ret=1,w=1;        for(int i=1;i&lt;=n;i++)&#123;            for(int j=i+1;j&lt;=n;j++)&#123;                while(a[i][i])&#123;                    int div=a[j][i]/a[i][i];                    for(int k=i;k&lt;=n;k++)&#123;                        a[j][k]=(a[j][k]-1ll*div*a[i][k]%MOD+MOD)%MOD;                    &#125;                    swap(a[i],a[j]);                    w=-w;                &#125;                swap(a[i],a[j]);                w=-w;            &#125;        &#125;        for(int i=1;i&lt;=n;i++)&#123;            ret=1ll*a[i][i]*ret%MOD;        &#125;        ret=1ll*w*ret;        return (ret+MOD)%MOD;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    n--;    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        --u,--v;        a[u][v]=(a[u][v]-1+MOD)%MOD;        a[u][u]=(a[u][u]+1)%MOD;    &#125;    cout&lt;&lt;HLS::solve();    return 0;&#125;
 1.4 无向带权与有向带权
P6178 【模板】Matrix-Tree 定理 - 洛谷
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=620,MOD=1e9+7;int n,m,t,a[MN][MN];namespace HLS&#123;    int solve()&#123;        int ret=1,w=1;        for(int i=1;i&lt;=n;i++)&#123;            for(int j=i+1;j&lt;=n;j++)&#123;                while(a[i][i])&#123;                    int div=a[j][i]/a[i][i];                    for(int k=i;k&lt;=n;k++)&#123;                        a[j][k]=(a[j][k]-1ll*div*a[i][k]%MOD+MOD)%MOD;                    &#125;                    swap(a[i],a[j]);                    w=-w;                &#125;                swap(a[i],a[j]);                w=-w;            &#125;        &#125;        for(int i=1;i&lt;=n;i++)&#123;            ret=1ll*a[i][i]*ret%MOD;        &#125;        ret=1ll*w*ret;        return (ret+MOD)%MOD;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;t;    n--;    for(int i=1;i&lt;=m;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        --u,--v;        if(!t)&#123;            a[u][v]=(a[u][v]-w+MOD)%MOD;            a[v][u]=(a[v][u]-w+MOD)%MOD;            a[u][u]=(a[u][u]+w+MOD)%MOD;            a[v][v]=(a[v][v]+w+MOD)%MOD;        &#125;else&#123;            a[v][v]=(a[v][v]+w)%MOD;            a[v][u]=(a[v][u]-w+MOD)%MOD;        &#125;    &#125;    cout&lt;&lt;HLS::solve();    return 0;&#125;
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>NOI2025_机器人</title>
    <url>/posts/5152bd6c/</url>
    <content><![CDATA[不是，近 5 年 NOI 从来没考过绿吧，不会吧？
形式化题面如下：
给定一个有向图，包含 nnn 个节点和 mmm 条有向边。边有长度。对于每个节点 xxx，其出边被编号为 1→dx1\to d_{x}1→dx​（dxd_{x}dx​ 是出边数量）。从 111 号点出发，初始有一个变量 p=1p=1p=1，按以下规则移动：

若当前位于节点 xxx 且 p≤dxp\le d_{x}p≤dx​，则走 xxx 的第 ppp 条边，移动到相邻节点 yyy。花费为边的长度。
修改参数 ppp：

若 p&lt;kp&lt;kp&lt;k，则令 p←p+1p\leftarrow p+1p←p+1，花费为 vpv_{p}vp​。
若 p&gt;1p&gt;1p&gt;1，则令 p←p−1p\leftarrow p-1p←p−1，花费为 wpw_{p}wp​。



求 1→i1\to i1→i 的最小花费，若无法到达输出 −1-1−1。
一眼分层图，题目转化为建 kkk 层的有向图，每次跳不同层要花费规则上指定的代价，求单源最短路跑 Dijkstra。但是空间复杂度是 O(nk)O(nk)O(nk)，且时间复杂度为 O(nklog⁡nk)O(nk\log nk)O(nklognk)，无法通过。
我们设分层图状态为 (u,p)(u,p)(u,p) 表示在第 uuu 点，参数为 ppp。
考虑优化，首先一个关键观察就是当 dx&lt;pd_{x}&lt;pdx​&lt;p 的时候是没有任何卵用的，(u,p)(u,p)(u,p) 是无效状态。我们没必要建这么多图，考虑每一层就建 dxd_xdx​ 层就可以啦。
接下来还有一个很难受的过程就是修改参数，考虑这个怎么优化，花费和 ppp 有关，一个不难观察到的地方每次增减量是 111，考虑前缀和优化修改参数这一过程，这样复杂度从 O(k)→O(1)O(k)\to O(1)O(k)→O(1)。这一部分我们可以通过 map 或哈希表实现，时间复杂度 O(nlog⁡nlog⁡k)→O(nlog⁡n)O(n \log n \log k)\to O(n \log n)O(nlognlogk)→O(nlogn)。
代码数据出来补一下？
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>OI大技巧</title>
    <url>/posts/a3f4a75/</url>
    <content><![CDATA[
  
  
    
      
      
        您好, 这里需要密码.
      
    
  

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>P3441——MET_Subway题解</title>
    <url>/posts/17e083a8/</url>
    <content><![CDATA[形式化题面如下：

给定一棵有 nnn 个节点的无向树和一个整数 kkk，选出最多 kkk 条不分叉的路径（即简单链），使得这些路径覆盖的不同节点数尽可能多。输出最多能覆盖的节点数。

DP 显然不太好，考虑贪心，那么贪心尽量让链长。考虑直径一定作为答案的一部分出现，而剩下的就是直径上的分支，分支跨直径配对成路径。考虑这个如何配对，其实就是不同链的叶子两两配对，考虑以直径一端点为根，长链剖分加排序（链长大到小）取 2L−12L-12L−1 个叶子即可。
#include&lt;bits/stdc++.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e6+1520;int n,L,rt,ftot,ans;pir lvf[MN];bool vis[MN];int hd[MN],nxt[MN&lt;&lt;1],to[MN&lt;&lt;1],tot;void add(int u,int v)&#123;to[++tot]=v,nxt[tot]=hd[u],hd[u]=tot;&#125;namespace ZJTree&#123;    struct Node&#123;int u,fa,len;&#125;;    int bfs(int st)&#123;        queue&lt;Node&gt; q;        int ans1=-1e9,ans2=1;        q.push(&#123;st,0,0&#125;);        while(!q.empty())&#123;            auto [u,fa,w]=q.front();q.pop();            if(w&gt;ans1) ans1=w,ans2=u;            for(int i=hd[u];i;i=nxt[i])&#123;                int v=to[i];                if(v==fa) continue;                q.push(&#123;v,u,w+1&#125;);            &#125;        &#125;        return ans2;    &#125;&#125;namespace Tree&#123;    int dep[MN],fa[MN],mxdep[MN],htop[MN],len[MN],hson[MN];    void dfs1(int u,int pre)&#123;        fa[u]=pre;        dep[u]=mxdep[u]=dep[pre]+1;        for(int i=hd[u];i;i=nxt[i])&#123;            int v=to[i];            if(v==pre) continue;            dfs1(v,u);            if(mxdep[u]&lt;mxdep[v]) mxdep[u]=mxdep[v],hson[u]=v;        &#125;        len[u]=mxdep[u]-dep[u]+1;    &#125;    void dfs2(int u,int ltop)&#123;        htop[u]=ltop;        if(!hson[u])&#123;lvf[++ftot]=pir(len[htop[u]],u);return;&#125;        dfs2(hson[u],ltop);        for(int i=hd[u];i;i=nxt[i])&#123;            int v=to[i];            if(v==fa[u]||v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;&#125;using namespace Tree;bool cmp(pir x,pir y)&#123;return x.first&gt;y.first;&#125;int main()&#123;    read(n,L);    for(int i=1,u,v;i&lt;n;i++) read(u,v),add(u,v),add(v,u);    rt=ZJTree::bfs(1);    dfs1(rt,0);    dfs2(rt,rt);    sort(lvf+1,lvf+1+ftot,cmp);    for(int i=1;i&lt;=(L&lt;&lt;1)-1;i++)&#123;        if(i==1) vis[rt]=1,ans+=len[rt];        else&#123;            int p=lvf[i].second;            while(!vis[htop[p]]) vis[htop[p]]=1,ans+=len[htop[p]],p=fa[htop[p]];        &#125;    &#125;    put(ans);    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P3783_天才黑客题解</title>
    <url>/posts/905428b3/</url>
    <content><![CDATA[我不是来刷字符串的吗怎么给我干到这里来了
Trie 树神仙题。
形式化题意可以看其他题解的。
首先这个字典树的边权没有任何卵用，因为题目中已经给出边上的 did_{i}di​ 了。
其次这个题一眼最短时间，说人话就是最短路，考虑 Dijkstra 求最短路，因为这里 SPFA 显然已死（你真的要卡 O(nm)O(nm)O(nm)？）。问题转化为如何取去建图，根据题意，通过一条边的边权是如下构成的：
w(u,v)=c(u,v)+LCP⁡(dnow,di)w_{(u,v)} = c_{(u,v)} + \operatorname{LCP}(d_{now}, d_{i})
w(u,v)​=c(u,v)​+LCP(dnow​,di​)
不难注意到题目中慷慨的给我们了字典树，根据字典树上的性质，任意两个点之间的 LCA 节点的深度大小就是这两点的所构成字符串的最长公共前缀长度，那么边权转化为：
w(u,v)=c(u,v)+dep{LCA⁡(dnow,di}w_{(u,v)} = c_{(u,v)} + dep\left\{\operatorname{LCA}(d_{now}, d_{i}\right\}
w(u,v)​=c(u,v)​+dep{LCA(dnow​,di​}
但是这里面有一个棘手的地方就是这个 dnowd_{now}dnow​，因为如果我们真的要在 Dijkstra 上跑的话这个 dnowd_nowdn​ow 是不太好处理的。考虑题目的性质，注意到题目中的点几乎没有任何卵用，因为所有信息都在有向图的边上，那么我们考虑怎么从边上下手。考虑点边互换，将边拆成入点和出点，连边 in→outin \to outin→out，边权为 cec_{e}ce​。让后考虑这个 LCA 怎么处理，其实很简单，我们对于第一个边的出点，我们向第二个边的入点连上边权为两个边上的 LCA 权，即 dep{LCA⁡(d(u,v),d(v,t))}dep\left\{ \operatorname{LCA}(d_{(u,v)},d_{(v,t)}) \right\}dep{LCA(d(u,v)​,d(v,t)​)}。
注意到节点 111 向哪里走都是无代价的，所以对于所有 1→a1 \to a1→a 的边，我们建超级源点 SSS，让 S→aS \to aS→a，边权为 000 即可。
让后输出最短路长度的时候，答案即为 min⁡be=idisout\min\limits_{b_{e}=i} dis_{out}be​=imin​disout​，正确性是显然的。
写完交上去，恭喜你 MLE+TLE。为什么？因为边数最高可到达 O(m2)O(m^2)O(m2) 啊，这个时候又要开始优化建图了（悲）。
首先原来的 in→outin \to outin→out 显然是不能动的，我们考虑对 LCA⁡\operatorname{LCA}LCA 上下手，注意到我们对于 LCA⁡\operatorname{LCA}LCA 上都是一个一个连边的，而 LCA⁡\operatorname{LCA}LCA 对于大多数对节点是相同的，这是什么，虚树啊！我们考虑虚树的大小能否支持我们操作，不妨设 S={di∣bi=u,ai=u}S=\left\{ d_{i}| b_{i}=u,a_{i}=u \right\}S={di​∣bi​=u,ai​=u}，那么这些边的边权只能是 SSS 中任意两点 LCA 的深度，根据虚树特性理论，SSS，中任意两点的 LCA 总共只有 O(∣S∣)O(|S|)O(∣S∣) 个，对于所有点，∑u∣Su∣=m\sum\limits_{u} |S_u|=mu∑​∣Su​∣=m，边复杂度 O(m)O(m)O(m)，可以接受。
我们考虑把 LCA 这个点拿出来建虚点，在子树中的节点连一个 LCA 的虚点，让后在从这个虚点连向另外一个虚点，让后在利用虚树进行建边，但是这样边数是 O(n)O(n)O(n) 的，总边数还是 O(n2)O(n^2)O(n2) 的，还是会被卡，考虑怎么优化。
注意到，我们实际上连边都是在子树中的节点连一个 LCA 的虚点，让后在从这个虚点连向另外一个虚点，考虑这个怎么优化。子树的性质，DFN连续。那么，问题转化为 DFS 序上的区间向点连边，点向另外一个连续区间连边，这是什么，线段树优化建图啊！让后就做完了，时间复杂度因为连边是 O(log⁡n)O(\log n)O(logn) 的，所以总复杂度是 O(nlog⁡2m)O(n \log^2 m)O(nlog2m)。
能不能再给力一点啊？
上述过程我们是在暴力枚举 LCA 的，事实上，如果两点间连了一堆的边，但是只有代价最小的边是有用的，剩下都是没太大啥用的，连了也不影响。
我们先把 SSS 集合求出来，连边的话我们从 [1,i][1,i][1,i] 的出点向 [i+1,t][i+1,t][i+1,t] 入点，[i+1,t][i+1,t][i+1,t] 出点向 [1,i][1,i][1,i] 入点连边，其中 t=∣S∣t=|S|t=∣S∣，这个可以用线段树也可以用神秘的前缀后缀优化建图来做。让后根据上面所说的，只有代价最小的边有用，也就是说对于一个子树区间，只有 min⁡x,ydep[lca⁡(x,y)]\min_{x,y} dep[ \operatorname{lca}(x,y)]minx,y​dep[lca(x,y)] 才有用，我们考虑这个代价最小的边怎么连，注意到每次都是某个前缀向后缀连边，或者后缀向前缀连边，为什么，你思考上面线段树的做法。那么，我们建立四个数组：前缀入点、前缀出点、后缀入点、后缀出点。这样的建边是 O(1)O(1)O(1) 的，时间复杂度是 O(nlog⁡m)O(n \log m)O(nlogm)。
代码为了易懂（同时也是我自己码风 www），一些代码是封装的好进行辨认。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e6+15,MLOG=20;struct Edge&#123;    int v,w;&#125;;struct EDGE&#123;    int a,b,c,d;&#125;e[MN];int n,m,K,S,ans[MN],hlca[MN],ntot,prein[MN],preout[MN],sufin[MN],sufout[MN];vector&lt;int&gt; out[MN],in[MN];vector&lt;Edge&gt; adj[MN];vector&lt;pir&gt; vt; // 这是集合 Snamespace Trie&#123;    vector&lt;int&gt; g[MN];    int fa[MN][30],dep[MN],dfn[MN],dfntot;    void triedfs(int u,int pre)&#123;        dfn[u]=++dfntot;        fa[u][0]=pre;        dep[u]=dep[pre]+1;        for(int i=1;i&lt;=MLOG;i++)&#123;            fa[u][i]=fa[fa[u][i-1]][i-1];        &#125;        for(auto v:g[u])&#123;            triedfs(v,u);        &#125;    &#125;    int lca(int x,int y)&#123;        if(dep[x]&gt;dep[y]) swap(x,y);        for(int i=MLOG;i&gt;=0;i--)&#123;            if(dep[fa[y][i]]&gt;=dep[x]) y=fa[y][i];        &#125;        if(x==y) return x;        for(int k=MLOG;k&gt;=0;k--)&#123;            if(fa[x][k]!=fa[y][k])&#123;                x=fa[x][k],y=fa[y][k];            &#125;        &#125;        return fa[x][0];    &#125;&#125;using namespace Trie;namespace Dijkstra&#123;    int dis[MN];    bool vis[MN];    void dijk(int st)&#123;        memset(dis,0x3f,sizeof(dis));        memset(vis,0,sizeof(vis));        priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt; q;        dis[st]=0;        q.push(pir(0,st));        while(!q.empty())&#123;            int u=q.top().second;            q.pop();            if(vis[u]) continue;            vis[u]=1;            for(auto e:adj[u])&#123;                int v=e.v;                if(dis[v]&gt;dis[u]+e.w)&#123;                    dis[v]=dis[u]+e.w;                    q.push(pir(dis[v],v));                &#125;            &#125;        &#125;    &#125;&#125;using namespace Dijkstra;bool cmp(pir x,pir y)&#123;    return dfn[x.first]&lt;dfn[y.first];&#125;void clear()&#123;    S=MN-3;    ntot=dfntot=0;    memset(dfn,0,sizeof(dfn));    memset(dep,0,sizeof(dep));    memset(fa,0,sizeof(fa));    for(int i=0;i&lt;MN;i++)&#123;        in[i].clear();        out[i].clear();        g[i].clear();        adj[i].clear();    &#125;&#125;void solve()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;K;    clear();    ntot=m&lt;&lt;1;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;e[i].a&gt;&gt;e[i].b&gt;&gt;e[i].c&gt;&gt;e[i].d;        out[e[i].a].push_back(i);        in[e[i].b].push_back(i);    &#125;    for(int i=1;i&lt;K;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        g[u].push_back(v);    &#125;    triedfs(1,0);    for(int i=1;i&lt;=m;i++)&#123;        adj[i].push_back(&#123;i+m,e[i].c&#125;);        if(e[i].a==1) adj[S].push_back(&#123;i,0&#125;);    &#125;        // 以上都是常规建边    for(int i=1;i&lt;=n;i++)&#123;        vt.clear();        for(auto p:in[i]) vt.push_back(pir(e[p].d,p+m));        for(auto p:out[i]) vt.push_back(pir(e[p].d,p));        sort(vt.begin(),vt.end(),cmp);        for(int j=0;j&lt;vt.size();j++)&#123; //新建前缀后缀节点            prein[j]=++ntot;            preout[j]=++ntot;            sufin[j]=++ntot;            sufout[j]=++ntot;        &#125;        for(int j=0;j+1&lt;vt.size();j++)&#123;            hlca[j]=lca(vt[j].first,vt[j+1].first); // 求出 dfn 排序后的任意两个节点的LCA            adj[prein[j+1]].push_back(&#123;prein[j],0&#125;); // 前缀后缀初始化建图            adj[preout[j]].push_back(&#123;preout[j+1],0&#125;);            adj[sufin[j]].push_back(&#123;sufin[j+1],0&#125;);            adj[sufout[j+1]].push_back(&#123;sufout[j],0&#125;);        &#125;        for(int j=0;j&lt;vt.size();j++)&#123;            // 前缀建图要分类，别建炸缸了            if(vt[j].second&lt;=m)&#123;                adj[sufin[j]].push_back(&#123;vt[j].second,0&#125;);                adj[prein[j]].push_back(&#123;vt[j].second,0&#125;);            &#125;            else&#123;                adj[vt[j].second].push_back(&#123;sufout[j],0&#125;);                adj[vt[j].second].push_back(&#123;preout[j],0&#125;);            &#125;        &#125;        for(int j=0;j+1&lt;vt.size();j++)&#123;            // 连边，这里dep-1是因为根节点dep=1，而lcp是根节点到            // 当前节点的距离，dep[rt]=1，所以要-1            adj[sufout[j+1]].push_back(&#123;prein[j], dep[hlca[j]]-1&#125;);            adj[preout[j]].push_back(&#123;sufin[j+1], dep[hlca[j]]-1&#125;);        &#125;    &#125;    dijk(S);    memset(ans,0x3f,sizeof(ans));    for(int i=1;i&lt;=m;i++)&#123;        // 暴力枚举        ans[e[i].b]=min(ans[e[i].b],dis[i+m]);    &#125;    for(int i=2;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P5289皮配题解</title>
    <url>/posts/ea6060be/</url>
    <content><![CDATA[题面过于复杂，有一个显然的想法就是让导师们去找学生，设 f(i,j,k,p)f(i,j,k,p)f(i,j,k,p) 表示四个导师选的人数状态下的方案数，转移判断满不满足题目中所给的派系和阵营限制即可，时间复杂度 O(nm4)O(nm^4)O(nm4)，不难发现只需要确定三个即可，时间复杂度 O(nm3)O(nm^3)O(nm3)。然后就不会了。
观察这个 DP 及其难以优化，因为如果我们缺任何一个信息都无法描述完整的子问题，而且复杂度要求的可是 O(nm)O(nm)O(nm)，你只知道一个信息那么肯定啥也导出不了啊。我们考虑发掘几个性质：

确定一个派系和一个阵营可以唯一确定一位导师。
题目中 ban 导师的相当于不选钦定的派系和阵营。

上述性质启示我们让每一个学生去确定它们的派系和阵营，而不是导师去确定学生。但是还有我们的 “坏” 学生，不喜欢选的。我们先丢掉它们，先考虑 k=0k=0k=0 的部分分。
有一个显然的 DP 就是 f(i,j)f(i,j)f(i,j) 表示 iii 个蓝阵营的人，jjj 个鸭阵营的人的方案数，剩余两个可以由这两个状态唯一表示出来，时间复杂度 O(nm2)O(nm^2)O(nm2)，仍无法通过。正解启示 O(nm)O(nm)O(nm)，考虑进一步发掘性质：

题目中学生来自的城市限制，和学校限制是互相独立互不冲突的。

这个性质启发我们分离上面状态设计中的 i,ji,ji,j。那么不妨设 f(i)f(i)f(i) 表示蓝阵营有 iii 个人的方案数，g(i)g(i)g(i) 表示鸭阵营有 iii 个人的方案数，两个答案可以通过乘法原理分别算出来之后乘起来即可，时间复杂度 O(nm)O(nm)O(nm)。
现在考虑 k&gt;0k&gt;0k&gt;0，一个重要的观察是 k≤30k\le 30k≤30。状压、枚举？都不对。我们上面的计算答案过程中体现了乘法原理的思想，也就是说我们也可以分离 “坏学生” 和 “好学生”，好学生单独做，坏学生单独做，最后乘起来即可。
坏学生的限制怎么处理，我们肯定不能用 O(nm)O(nm)O(nm) 的算法了，这个算法肯定是无法处理我们的限制的。回看我们之前 O(nm2)O(nm^2)O(nm2) 的解法，这个就能够很好的处理性质，因为状态能够表示所有派系阵营选择人数，我们可以用这个算法处理坏学生就可以啦。时间复杂度做的话是 O(k2sm)O(k^2sm)O(k2sm) 的。
那么时间复杂度就是 O(nm+k2sm)O(nm+k^2 sm)O(nm+k2sm)。
总结：

我们在设计状态的时候，应当尽量个限制紧密贴合。在优化 DP 的时候我们要考虑我们计算贡献具体需要什么信息，我们需要什么信息就足够了，去掉冗余的无用信息。
题目可能会故意引导你走向死路，如果一个方向想不通，不妨正难则反或换一种方法想，这里体现的是正难则反的思路。

#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2520,MOD=998244353;int F[MN][MN],G[MN][MN],f[MN],g[MN],h[MN],s[MN],b[MN],sumb[MN],sums,n,c,c0,c1,d0,d1,C,K,D,ans;bool hc[MN];void init()&#123;    memset(F,0,sizeof(F));    memset(G,0,sizeof(G));    memset(f,0,sizeof(f));    memset(g,0,sizeof(g));    ans=C=D=0; sums=0;    for(int i=1;i&lt;=n;i++)&#123;        h[i]=-1;        sumb[i]=0;        hc[i]=false;    &#125;&#125;void solve()&#123;    cin&gt;&gt;n&gt;&gt;c&gt;&gt;c0&gt;&gt;c1&gt;&gt;d0&gt;&gt;d1;    init();    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;b[i]&gt;&gt;s[i];        sums+=s[i];        sumb[b[i]]+=s[i];    &#125;    cin&gt;&gt;K;    for(int i=1;i&lt;=K;i++)&#123;        int x;cin&gt;&gt;x&gt;&gt;h[x];        hc[b[x]]=true;    &#125;    f[0]=1;    for(int i=1;i&lt;=c;i++) if(!hc[i]&amp;&amp;sumb[i])&#123;        for(int j=c0;j&gt;=sumb[i];j--) f[j]=(f[j]+f[j-sumb[i]])%MOD;    &#125;    for(int i=1;i&lt;=c0;i++) f[i]=(f[i-1]+f[i])%MOD;    g[0]=1;    for(int i=1;i&lt;=n;i++) if(h[i]==-1)&#123;        for(int j=d0;j&gt;=s[i];j--) g[j]=(g[j]+g[j-s[i]])%MOD;    &#125;    for(int i=1;i&lt;=d0;i++) g[i]=(g[i-1]+g[i])%MOD;    F[0][0]=1;    for(int ct=1;ct&lt;=c;ct++) if(hc[ct])&#123;        C+=sumb[ct]; C=min(C,c0);        for(int i=0;i&lt;=C;i++) for(int j=0;j&lt;=D;j++) G[i][j]=F[i][j];        for(int x=1;x&lt;=n;x++) if(h[x]!=-1&amp;&amp;b[x]==ct)&#123;            int t=s[x]; D+=t; D=min(D,d0);            if(h[x]==1)&#123;                 for(int i=0;i&lt;=C;i++)&#123;for(int j=D;j&gt;=t;j--) F[i][j]=F[i][j-t]; for(int j=0;j&lt;t;j++) F[i][j]=0;&#125;            &#125;            if(h[x]&gt;=2)&#123;                 for(int i=0;i&lt;=C;i++) for(int j=D;j&gt;=t;j--) F[i][j]=(F[i][j]+F[i][j-t])%MOD;            &#125;            if(h[x]==3)&#123;                 for(int i=0;i&lt;=C;i++)&#123;for(int j=D;j&gt;=t;j--) G[i][j]=G[i][j-t]; for(int j=0;j&lt;t;j++) G[i][j]=0;&#125;            &#125;            if(h[x]&lt;=1)&#123;                 for(int i=0;i&lt;=C;i++) for(int j=D;j&gt;=t;j--) G[i][j]=(G[i][j]+G[i][j-t])%MOD;            &#125;        &#125;        int t=sumb[ct];        if(t&gt;0)&#123;            for(int i=C;i&gt;=t;i--) for(int j=0;j&lt;=D;j++) F[i][j]=F[i-t][j];            for(int i=0;i&lt;t;i++) for(int j=0;j&lt;=D;j++) F[i][j]=0;        &#125;        for(int i=0;i&lt;=C;i++) for(int j=0;j&lt;=D;j++) F[i][j]=(F[i][j]+G[i][j])%MOD;    &#125;    for(int i=0;i&lt;=C;i++) for(int j=0;j&lt;=D;j++)&#123;        int l1=max(0ll,sums-c1-i),r1=c0-i; if(l1&gt;r1) continue;        int l2=max(0ll,sums-d1-j),r2=d0-j; if(l2&gt;r2) continue;        int ret1=f[r1],ret2=g[r2];        if(l1) ret1=(ret1-f[l1-1]+MOD)%MOD;        if(l2) ret2=(ret2-g[l2-1]+MOD)%MOD;        ans=(ans+ret1*ret2%MOD*F[i][j])%MOD;    &#125;    cout&lt;&lt;(ans+MOD)%MOD&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    int T;cin&gt;&gt;T;while(T--) solve();    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P7214治疗计划</title>
    <url>/posts/d30abee3/</url>
    <content><![CDATA[把未感染和感染抽象为 0/1，那么原问题可以转化为初始有一个全为 111 的序列，可以在特定时间进行一次区间覆盖操作（有代价），111 会向左右扩散，问能不能将整个序列全部覆盖为 0 且使得操作代价最小。
对于选择区间进行覆盖的问题，这一类经典问题有一种状态设计就是设 f(i)f(i)f(i) 表示将 [1,i][1,i][1,i] 这个前缀进行覆盖的最小代价。但是问题在于这样转移是 O(nm)O(nm)O(nm) 的不太好搞，考虑这个 mmm 的瓶颈就是在于我们需要知道每一个覆盖区间右端点在哪里。考虑切换一下 dp 状态，设 f(i)f(i)f(i) 表示将 [1,ri][1,r_i][1,ri​] 覆盖的最小代价，转移通过 ttt 的偏序关系进行转移：
f(i)←f(j)+cirj−li+1≥∣ti−tj∣\begin{aligned}f(i) &amp; \leftarrow f(j)+c_i &amp; r_j -l_i+1 \ge |t_i -t_j| \end{aligned}
f(i)​←f(j)+ci​​rj​−li​+1≥∣ti​−tj​∣​
时间复杂度还是 O(nm)O(nm)O(nm)，无敌了。而且还自带两个偏序关系更是逆天。但是观察这个 DP 是一个类似于最短路形式的转移（说人话就是转移代价只和目标的代价有关），考虑用 Dijkstra 优化这个 DP。让后绝对值可以通过对 ttt 排序去掉，对于转移可以用线段树优化这个最小值转移，势能分析有时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
这个题目有一个巨大的卡阻就是在于 DP 容易选择会以时间作为主体，这样的话你无论怎么都无法优化掉时间这一维。一开始想的就是 f(i,j)f(i,j)f(i,j) 添加了时间 jjj 这一个维度，但是发现这个枚举时间反而成为了瓶颈。这个时候，我们需要分析，我们知道什么就够了。分析下来 jjj 反而可以从转移中天然的去掉，这样我们就做到了优化 DP 的过程。
#include&lt;bits/stdc++.h&gt;#include &lt;queue&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e5+15,INF=1e18;struct Node&#123;    int l,r,c,t;&#125;a[MN];int n,m,f[MN],ans=INF;bool vis[MN];priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt; q;struct Segment&#123;    #define ls p&lt;&lt;1    #define rs p&lt;&lt;1|1    struct Node&#123;        int l,r,mn[2];    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].mn[0]=min(t[ls].mn[0],t[rs].mn[0]);        t[p].mn[1]=min(t[ls].mn[1],t[rs].mn[1]);    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        t[p].mn[0]=t[p].mn[1]=INF;        if(l==r) return;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);    &#125;    void modify(int p,int pos,int x,int y)&#123;        if(t[p].l==t[p].r)&#123;            t[p].mn[0]=x-y;            t[p].mn[1]=x+y;            return;        &#125;        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=pos) modify(ls,pos,x,y);        else modify(rs,pos,x,y);        pushup(p);    &#125;    void update(int p,int fl,int fr,int op,int v,int w)&#123;        if(t[p].mn[op]&gt;v) return;        if(t[p].l==t[p].r)&#123;            f[t[p].l]=w+a[t[p].l].c;            q.push(pir(f[t[p].l],t[p].l));            t[p].mn[0]=t[p].mn[1]=INF;            return;        &#125;        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) update(ls,fl,fr,op,v,w);        if(mid&lt;fr) update(rs,fl,fr,op,v,w);        pushup(p);    &#125;    #undef ls    #undef rs&#125;sg;bool cmp(Node x,Node y)&#123;    return x.t&lt;y.t;&#125;void dijkstra()&#123;    memset(f,0x3f,sizeof(f));    for(int i=1;i&lt;=m;i++)&#123;        if(a[i].l==1)&#123;            f[i]=a[i].c;            q.push(pir(f[i],i));            sg.modify(1, i, INF, 0);        &#125;else sg.modify(1, i, a[i].l, a[i].t);    &#125;    while(!q.empty())&#123;        auto fr=q.top();        q.pop();        int u=fr.second;        if(vis[u]) continue;        vis[u]=1;        sg.update(1,1,u-1,0,a[u].r-a[u].t+1,f[u]);        sg.update(1,u+1,m,1,a[u].r+a[u].t+1,f[u]);    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;a[i].t&gt;&gt;a[i].l&gt;&gt;a[i].r&gt;&gt;a[i].c;    &#125;    sort(a+1,a+1+m,cmp);    sg.build(1,1,m);    dijkstra();    for(int i=1;i&lt;=m;i++)&#123;        if(a[i].r==n)&#123;            ans=min(ans,f[i]);        &#125;    &#125;    if(ans&gt;=INF) cout&lt;&lt;-1;    else cout&lt;&lt;ans;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P9804_Skwarki题解</title>
    <url>/posts/156c0b37/</url>
    <content><![CDATA[可能更洛谷的阅读体验
好题，写一篇题解记录一下。
首先考虑计数 DP，但是直接做发现不太好做，我们思考能否对删除操作进行进一步转化成好的条件取做。
对于原题目的限制，即只要一个数左右两侧一旦有一个大的就会被删，既有位置限制和数值限制。一步很妙的转化的就是将这个思想转成笛卡尔树，那么删除操作就是在笛卡尔树上删有儿子的点。
我们不妨设 gug_{u}gu​ 表示删空 uuu 子树（包括 uuu 号点）的所需次数，因为题意表明删除操作是同时进行的，不难有如下转移：
gu=max⁡{gls,grs,min⁡(gls,grs)+1}g_{u}=\max\left\{ g_{\text{ls}},g_{\text{rs}},\min(g_{\text{ls}},g_{\text{rs}})+1 \right\}
gu​=max{gls​,grs​,min(gls​,grs​)+1}
其中 ls 表示左儿子，rs 表示右儿子，注意在没有左儿子和右儿子的时候要特判。
方程表明如下情况：

gls,grsg_{\text{ls}},g_{\text{rs}}gls​,grs​：因为操作是并行的，我们可以直接对左右儿子删除操作取 max⁡\maxmax 即可。
某一子树删除完毕后，花一次操作删根节点 uuu 让后把剩下子树接上去。

注意到删除最多删除树的一半节点，也就是当删除操作数量 k≤log⁡(n)k\le \log(n)k≤log(n) 时才可能有解。
验证考虑分类讨论，讨论左右子树操作次数相同和不同的情况即可简明验证。不难发现的一点是答案一定是全局的最大值，并且一定作为叶子节点出现。
接下来我们考虑如何把它搬到计数 DP 上，真的在笛卡尔树上 DP 显然是不现实的，因为树的结构会改变。
我们利用笛卡尔树的性质：我们设一个区间 [l,r][l,r][l,r] 最大值的位置为 pospospos，发现可以把区间分成 [l,pos][l,pos][l,pos]和 [pos,r][pos,r][pos,r] 两个区间，并且两个区间互不影响，也就是说我左边怎么乱搞放数也不会影响右边的区间。这个时候全局最大值作为区间的端点出现。

我们利用笛卡尔树结构的特点，设 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示 iii 个元素的排列，恰好 jjj 次删空，全局最大值是否在区间的端点。
对于 f(i,j,0)f(i,j,0)f(i,j,0) 的转移，根据我们上面所述的笛卡尔树的节点，我们需要枚举区间的最大值的位置来进行转移，对于每个位置 kkk 在分配左儿子的方案有 (i−1k−1)\binom{i-1}{k-1}(k−1i−1​) 种方案给乘起来，左儿子 f(k−1,l,0)f(k-1,l,0)f(k−1,l,0) 右儿子 f(i−k,r,0)f(i-k,r,0)f(i−k,r,0)，其中 l,rl,rl,r 是枚举儿子区间最大值的位置，转移即可。
考虑 f(i,j,1)f(i,j,1)f(i,j,1) 的转移，我们不考虑区间端点到底在哪里，因为排列的对称性可以完全统计答案，那么转移只需统计左儿子或者右儿子任一出现最大值的方案数即可，再乘上 (i−1k−1)\binom{i-1}{k-1}(k−1i−1​) 即可。
转移的 jjj 需要通过上面的 ggg 单独计算，答案统计仍枚举最大值转移即可，见代码，时间复杂度 O(n2k2)O(n^{2}k^{2})O(n2k2)。
注意到 kkk 最大为 log⁡(n)\log(n)log(n)，那么时间复杂度就是 O(n2log⁡2n)O(n^2 \log^{2} n)O(n2log2n)，这个复杂度下会被卡常，需要减少取模操作。注意到转移方程可以前缀和优化，那么时间复杂度即为 O(n2log⁡n)O(n^{2} \log n)O(n2logn)，这里就不用关心了。
不同于一些连续段 DP，这种转移的技巧叫做枚举最大值转移，实质就是上面所提到的在笛卡尔树上排列的 DP 结构，这种题类型很少见，但是我可以推荐一道题供大家练习：CF1580B。
#include&lt;bits/stdc++.h&gt;#define int __int128using namespace std;constexpr int MN=1520;int f[MN][MN][2],pw[MN],inv[MN],n,K,nj,MOD;template&lt;typename type&gt;inline type read(type &amp;x)&#123;    x=0;bool flag(0);char ch=getchar();    while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();    while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();    return flag?x=-x:x;&#125;template&lt;typename type&gt;inline void write(type x)&#123;    x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;    static short Stack[50],top(0);    do Stack[++top]=x%10,x/=10;while(x);    while(top) putchar(Stack[top--]|48);&#125;int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++) pw[i]=pw[i-1]*i%MOD;    inv[MN-1]=ksm(pw[MN-1],MOD-2);    for(int i=MN-2;i&gt;=0;i--)&#123;        inv[i]=inv[i+1]*(i+1)%MOD;    &#125;&#125;int getC(int a,int b)&#123;    if(a&lt;b) return 0;    return pw[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;signed main()&#123;    read(n),read(K),read(MOD);    if(K&gt;__lg(n)+1)&#123;        cout&lt;&lt;0;        return 0;    &#125;    init();    f[0][0][0]=f[0][0][1]=1;    for(int i=1;i&lt;n;i++)&#123;        for(int j=1;j&lt;=i;j++)&#123;            for(int l=0;l&lt;=K;l++)&#123;                for(int r=0;r&lt;=K;r++)&#123;                    // l和r枚举两个孩子区间最大值位置                    nj=(l==r)?l+1:max(l,r);// 小 g 的凭借                    f[i][nj][0]=(f[i][nj][0]+f[j-1][l][0]*f[i-j][r][0]*getC(i-1,j-1)%MOD)%MOD;                    nj=max(l,r+1);                    f[i][nj][1]=(f[i][nj][1]+f[j-1][l][1]*f[i-j][r][0]%MOD*getC(i-1,j-1)%MOD)%MOD;                &#125;            &#125;        &#125;    &#125;    int ans=0;    for(int i=1;i&lt;=n;i++)&#123;        for(int l=0;l&lt;=K;l++)&#123;            for(int r=0;r&lt;=K;r++)&#123;                if(max(l,r)==K)&#123;                    // 根据方程枚举区间拼接，可以看上面图理解                    ans=(ans+(f[i-1][l][1]*f[n-i][r][1]%MOD*getC(n-1,i-1)%MOD))%MOD;                &#125;            &#125;        &#125;    &#125;    write(ans);    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>SAM后缀自动机学习笔记</title>
    <url>/posts/94c0669/</url>
    <content><![CDATA[ 0.前言
后缀自动机，在字符串算法中居于一种万能的地位，其本体代码编写较简单，优美的 O(n)O(n)O(n) 构建复杂度，是一类极其有用但难以真正理解的字符串后缀结构。笔者投入了大约一周的时间来学习，现在进行总结复习，看看能不能悟到一些新的东西。
同时后缀自动机本身的难度（10 级）决定了理解较难，笔者同时也是这样的感受。我在编写第一二三章节的时候会尽量用图来解释，尽量减少繁杂的符号化语言。必要的也不会省略。
后缀自动机在做习题的时候，需要有非常扎实的 DS 基础以及面向对象程序设计思想，不然在编写的时候就会炸掉（不然大纲为什么要有这个程序设计思想）。
一些基本约定：

本文章默认字符串下标从 111 开始。
我们用打字机字体表示字符串的内容，如：s=wjyppm1403s=\texttt{wjyppm1403}s=wjyppm1403。
拼接：s+ts+ts+t 表示将 ttt 拼接 sss 后。
字符集：即构成字符串中字符的集合。
空串：不含任何字符的字符串称为空串。
子串：在 sss 开头或末尾删去若干字符得到的字符串称作为 sss 的子串，sss 本身和空串也是 sss 的子串。我们定义 s[l,r]s[l,r]s[l,r] 表示 l→rl \to rl→r 上所有字符链接而成子串。
匹配：称 ttt 匹配 sss 当且仅当 ttt 在 sss 中出现。
字符串长度：我们用 ∣s∣|s|∣s∣ 来表示 sss 的长度。

前后缀：

前缀：在 sss 末尾删除若干字符得到的字符串称作 sss 的前缀，记为 preprepre。
后缀：在 sss 开头删除若干字符得到的字符串称作 sss 的后缀，记为 sufsufsuf。
最长公共前缀：LCP⁡(s,t)\operatorname{LCP}(s,t)LCP(s,t)，表示 s,ts,ts,t 的最长公共前缀，即最长的 uuu 使得 uuu 为 s,ts,ts,t 的前缀。最长公共后缀同理，我们称为 LCS⁡(s,t)\operatorname{LCS}(s,t)LCS(s,t)。LCP 的长度格式为：∣LCP⁡(s,t)∣|\operatorname{LCP}(s,t)|∣LCP(s,t)∣。
字典序：定义空字符小于任何字符。称 sss 的 字典序 小于 ttt 当且仅当去掉 LCP⁡(s,t)\operatorname{LCP}(s,t)LCP(s,t) 后，sss 的第一个字符小于 ttt 的第一个字符。等价于以第 iii 个字符作为第 iii 关键字比较。

我们先从概念讲起。
 1. 自动机
自动机，在 OI 中一般我们涉及的是有限状态自动机（DFA），它拥有有限数量的状态，每个状态代表不同的意义，每个状态可以通过输入自动机指令（严谨来说就是字符），让自动机切换到其他的状态。任意时刻状态机只能处在一个状态。
而有限状态机可以表示为一个有向图：

从图中看出来一个信竞复读机（人类的本质是？）一共包含 5 个状态：学信竟，学 whk，吃吃饭，睡睡觉，摸摸鱼。每种带有箭头的连线，表示可以从当前状态切换到其他的状态，以及切换的条件。
我们列个转移表格：




学信竟
学 whk
吃吃饭
睡睡觉
摸摸鱼




学信竟


去机房

摆烂时间到


学 whk
信竟时间到


回去午睡



吃吃饭
去食堂
去教室





睡睡觉

回教室
被吵醒




摸摸鱼



回家




表格中左侧第一列为当前状态。
表格中上方第一行为切换的下一个状态。
表格中每行从左到右为状态切换的条件(状态 A 能不能切换到状态B)。
举例：

学 whk -&gt; 学信竟：条件（信竟时间到）。
学信竟 -&gt; 摸摸鱼：条件（摸鱼时间到）。
摸摸鱼 -&gt; 睡睡觉：条件（回家）。

一个自动机，我们应当还有起始状态，在本图中我们的起始状态是 “睡睡觉”。（不准通宵！）
那为啥叫自动呢，是因为只要输入符号和转移规则确定，状态变化是自动的，自动机可以自己通过设定好的路线（即有向图的边权）来进行转移。自动机的工作方式和流程图类似，但是不同的是自动机每一个节点都是一个判定节点，只是一个单纯的状态而非任务。
我们借用 Oi-Wiki 的例子，例如完成「判断一个二进制数是不是偶数」的自动机如下：

从起始结点开始，从高到低接受这个数的二进制序列，然后看最终停在哪里。如果最终停在红圈结点，则是偶数，否则不是。
而自动机的实质就是：状态集合（点）+ 转移规则（边）。
在竞赛中的应用我们有 AC 自动机，后缀自动机，DP 套 DP 等。
严谨的定义可以看 Oi-Wiki 的讲解，这里不再深入研究：传送门
 2. 后缀自动机
 2.1 概念
后缀自动机（SAM）是能够存储和识别一个字符串 SSS 的所有后缀的自动机。
正如我们上面所提到的自动机的定义，后缀自动机也是一个自动机，把节点看作状态，节点之间连的有向边是状态的转移。我们有一个初始状态 ststst，从 ststst 通过有向边到达其他所有节点，其中有一些状态是终止状态（即自动机到达这个状态后不会在转移）。任意一条从 ststst 出发到达某个终止状态所经过路径上的字符集合是 SSS 的一个子串。不同的路径代表不同的子串，这些路径与 SSS 的子串一一对应，不多也不少。
这么说有点复杂，读者应该知道 Trie 吧，字典树其实也是一个自动机，我们看看字典树的形状，我们借用 OI-Wiki 的图：

那我们回看上面的自动机表示图，你会发现两者十分相似，事实上 Trie 本身也是一个自动机。而我们把字符串所有后缀子串通过字典树的方法建立的一颗树，我们叫做后缀 Trie，后缀 Trie 也可以看作一种简单的后缀自动机：

如上是 S=abcbcS=\texttt{abcbc}S=abcbc 的后缀 Trie，其中绿色节点表示终止节点。算上跟节点需要共 13 个节点，比较浪费空间，原因是因为做了重复存储，如蓝色虚线内圈起来的两个子串是重复的，那么有没有什么更省空间的结构呢？后缀自动机的结构就是我们想要的结构！
SAM 中除了上面的定义，还有一个额外条件：结点数最少。关键就在于如何把上面的图给压缩，压缩点重复的地方。而 SAM 将压缩做到极致，做到 O(n)O(n)O(n) 的节点规模。那么怎么压缩成结点数最少呢？我们把上面的结构用 SAM 的结构表示：

我们把上面后缀 Trie 重复的部分给合并起来，就能够得到上面的一张图。上面的图是一张 DAG，它不仅能表示后缀，还能表示 SSS 的所有子串。任意从初始状态 000 开始的路径，如果我们将路径上的所有转移的标号写下来，都会形成 sss 的一个子串。而每个子串都对应从初始状态开始的某条路径。到达某个状态的路径可能不止一条，在图中也是有表现的，因此我们说一个状态对应一些字符串的集合，这个集合中的字符串分别对应着这些路径。
那么如何得到这个 DAG，这个节点数量是 O(n)O(n)O(n) 的吗。
我尝试建立这个 DAG，每一次我们都尝试添加一个字符，我们从 S=aS=\texttt{a}S=a 开始，每次在上一次的末尾添加一个新的节点

这个 DAG 有多少节点？显然每一次加入节点只会增加 O(1)O(1)O(1) 级别的点数，至少有 n+1n+1n+1 个点，但是实际上我们建 SAM 的点数会出现冲突的情况，这个时候会复制节点，但是最多复制一次，所有实际上最多也只会有 2n2n2n 个节点。
SAM 的每一个节点都对应的是原字符串 sss 的某个子串，读者看图应能自行领会，接下来我们给出几个小定义。

substr⁡(p)\operatorname{substr}(p)substr(p)：表示状态 ppp 所有子串的集合。
shorest⁡(p)\operatorname{shorest}(p)shorest(p)：表示状态 ppp 所有子串长度最短的那一个。
longest⁡(p)\operatorname{longest}(p)longest(p)：表示状态 ppp 所有子串长度最长的那一个。
minlen⁡(p)\operatorname{minlen}(p)minlen(p)：表示状态 ppp 所有子串长度最短的那一个的长度。
len⁡(p)\operatorname{len}(p)len(p)：表示状态 ppp 所有子串长度最长的那一个的长度。

 2.2 Endpos 等价类
endpos 等价类是 SAM 中关键的地方，通过它我们可以高效地进行建图。
我们定义 endpos⁡(t)\operatorname{endpos}(t)endpos(t) 表示字符串 ttt 在 sss 中所有出现的结束位置的集合，例如当 s=&quot;abcbc&quot;s=\texttt{&quot;abcbc&quot;}s=&quot;abcbc&quot; 的时候，endpos⁡(&quot;bc&quot;)={3,5}\operatorname{endpos}(\texttt{&quot;bc&quot;})=\left\{ 3,5\right\}endpos(&quot;bc&quot;)={3,5}，因为 &quot;bc&quot;\texttt{&quot;bc&quot;}&quot;bc&quot; 出现在 sss 的第 3,53,53,5 位置。
我们把 sss 的所有子串的 endpos⁡\operatorname{endpos}endpos 都列出来，有：



子串：
a
b
c
ab
bc
cb
abc
bcb
cbc
abcb
bcbc
abcbc




endpos⁡\operatorname{endpos}endpos
1
2,4
3,5
2
3,5
4
3
4
5
4
5
5



我们定义空串 ∅\varnothing∅ 的 endpos⁡={1,2,3,4,5}\operatorname{endpos}=\left\{ 1,2,3,4,5 \right\}endpos={1,2,3,4,5} 我们按照 endpos 排序如下：



子串
∅\varnothing∅
a
ab
b
abc
bc,c
abcb,bcb,cb
abcbc,bcbc,cbc




endpos⁡\operatorname{endpos}endpos
1,2,3,4,5
1
2
2,4
3
3,5
4
5



我们把 endpos 相等的称之为等价类，如 &quot;c&quot;,&quot;bc&quot;\texttt{&quot;c&quot;},\texttt{&quot;bc&quot;}&quot;c&quot;,&quot;bc&quot; 的enpos 等于 {3,5}\left\{ 3,5 \right\}{3,5} 是等价类。
一个很有趣的事实就是，这样每一个等价类都对应 SAM 的一个状态，读者可以通过 SAM 的图来理解：

接下来我们来阐述 Endpos 等价类所具有的一些特殊性质，endpos 等价类的性质体现的是后缀之间的包含关系。
以下证明来自 Oi-Wiki：

引理 1：同一个等价类中较短子串是较长子串的后缀。

证明是显然成立的，通过定义感性理解：字符串 ttt 在 sss 中所有出现的结束位置的集合。若结束位置相同，那么必然从这个结束位置向左拓展，必然是后缀。

引理 2：对于两个非空子串 u,wu,wu,w，假设 ∣u∣≤∣w∣|u| \le |w|∣u∣≤∣w∣。那么，要么 endpos(u)⁡∩endpos(w)⁡=∅\operatorname{endpos(u)} \cap \operatorname{endpos(w)}=\varnothingendpos(u)∩endpos(w)=∅，要么 endpos⁡(u)⊆endpos⁡(w)\operatorname{endpos}(u) \subseteq \operatorname{endpos}(w)endpos(u)⊆endpos(w)，后者成立当且仅当 uuu 是 www 的后缀。

如果集合 endpos⁡(u)\operatorname{endpos}(u)endpos(u) 与 endpos⁡(w)\operatorname{endpos}(w)endpos(w) 有至少一个公共元素，那么由于字符串 uuu 与 www 在相同位置结束，uuu 是 www 的一个后缀。所以在每次 www 出现的位置，子串 uuu 也会出现。所以 endpos⁡(w)⊆endpos⁡(u)\operatorname{endpos}(w)\subseteq \operatorname{endpos}(u)endpos(w)⊆endpos(u)。

引理 3：同一个等价类中子串长度不等，且依次递增 1，覆盖了从最短到最长的子串的区间。即同一个状态对应的子串的长度各不相同，而且是连续的若干自然数，其中较短的总是较长的子串的后缀。

如果等价类中只包含一个子串，引理显然成立。现在我们来讨论子串元素个数大于 111 的等价类。
由引理 1，endpos⁡\operatorname{endpos}endpos 相同的两个不同字符串中，必定一长一短，且较短者总是较长者的真后缀。也就是说，等价类中没有等长的字符串。
记 www 为等价类中最长的字符串，uuu 为等价类中最短的字符串。由引理 1，字符串 uuu 是字符串 www 的真后缀。现在考虑长度在区间 [∣u∣,∣w∣][\left|u\right|,\left|w\right|][∣u∣,∣w∣] 中的 www 的任意后缀。容易看出，这个后缀也在同一等价类中，因为这个后缀只能在字符串 sss 中以 www 的一个后缀的形式存在（这是因为较短的后缀 uuu 在 sss 中只以 www 的后缀的形式存在）。因此，由引理 1，这个后缀和字符串 www 的 endpos⁡\operatorname{endpos}endpos 相同。
 2.3 Parent Tree
根据上面 3 个引理，我们知道 endpos 等价类中的子串是具有包含关系，而 SAM 中的节点（或称作状态）就是一个等价类，这样我们通过包含关系把普通后缀树的臃肿给压缩了。
引理 1 和 3 表示了同一个等价类的包含关系，且长度连续，是一个状态就可以表示的。而引理 2 表示状态时如何进行转移的，若 endpos⁡(v)⊆endpos⁡(u)\operatorname{endpos}(v)\subseteq \operatorname{endpos}(u)endpos(v)⊆endpos(u) 我们定义转移方向从 u→vu \to vu→v，即 vvv 是 uuu 的父节点，这里不理解为什么要让大集合向小集合连边可以先了解，后面我们会细说。
下面我们通过 S=&quot;abcbc&quot;S=\texttt{&quot;abcbc&quot;}S=&quot;abcbc&quot; 来建立一颗 SAM。初始状态 t0t_{0}t0​ 是空集 ∅\varnothing∅，每一个节点是一个状态，表示一个 endpos 等价类。这棵树只有 8 个点，少于后缀树的 13 个点，我们把这个树称作为母树，即 Parent 树。

这里借用的是 Oi-Wiki 的图，其中 Parent 树中每一个节点我们选取最长字符串来代表状态。我们把表格复制一下列到下面供参考：



子串
∅\varnothing∅
a
ab
b
abc
bc,c
abcb,bcb,cb
abcbc,bcbc,cbc




endpos⁡\operatorname{endpos}endpos
1,2,3,4,5
1
2
2,4
3
3,5
4
5



Parent 树能够完整表达所有子串，有 5 个叶子节点，而 5 个叶子节点对应的endpos 正好是 1 到 5 的完整位置，从根到一个叶子节点的路径上，包含了以这个位置为终点的所有后缀。如最右边的路径。
Parent 树和 AC 自动机的 Fail 树及其相似，如果你知道什么是 Fail 树的话，可以把 Parent 树看作为 Fail 树的压缩版。
但是这里的 Parent 树并不实用，因为我们 SAM 这要这么建立的话那么对于每一个节点我们要存一堆字符串，空间复杂度会爆炸。如果我们通过路径表示子串，像 Trie 树一样多好，让每一条独立的路径对应一个独立的子串，这样即好添加节点，也可以操作啦。而 SAM 通过用路径表示子串来进行的。
我们根据上面的图不难发现 SAM 和 Parent 树及其相似，但是怎么从 Parent 树转化到 SAM 呢？
 2.4 后缀链接
后缀链接是我们将 SAM 和 Parent 树之间建立的一个桥梁，事实上，构建 SAM 的过程和母树是息息相关的。
考虑 SAM 上的一个不是根的节点 vvv，它的后缀链接（link）定义为它上层的一个节点 uuu，其中 uuu 的等价类所包含的子串也是  所包含的子串的后缀。其实就是上文 Parent 树上每个点的父亲。其作用就是将两个不同节点的连续子串连接起来，如下图的母树补充，vvv 的最短子串长度等于 uuu 的最长字串长度加 1，它们是相邻的两个后缀。

这图糊的已经没救了。
我们再补充几个例子：
endpos(&quot;a&quot;)={1}\mathrm{endpos}(\texttt{&quot;a&quot;}) = \{1\}
endpos(&quot;a&quot;)={1}
endpos(&quot;ab&quot;)={2}endpos(&quot;abcb&quot;, &quot;bcb&quot;, &quot;cb&quot;)={4}⊊endpos(&quot;b&quot;)={2,4}\begin{aligned}
\mathrm{endpos}(\texttt{&quot;ab&quot;}) = \{2\} \\
\mathrm{endpos}(\texttt{&quot;abcb&quot;, &quot;bcb&quot;, &quot;cb&quot;}) = \{4\} \\
\end{aligned}
\subsetneq
\mathrm{endpos}(\texttt{&quot;b&quot;}) = \{2, 4\} endpos(&quot;ab&quot;)={2}endpos(&quot;abcb&quot;, &quot;bcb&quot;, &quot;cb&quot;)={4}​⊊endpos(&quot;b&quot;)={2,4}
endpos(&quot;abc&quot;)={3}endpos(&quot;abcbc&quot;, &quot;bcbc&quot;, &quot;cbc&quot;)={5}⊊endpos(&quot;bc&quot;, &quot;c&quot;)={3,5}\begin{aligned}
\mathrm{endpos}(\texttt{&quot;abc&quot;}) = \{3\} \\
\mathrm{endpos}(\texttt{&quot;abcbc&quot;, &quot;bcbc&quot;, &quot;cbc&quot;}) = \{5\} \\
\end{aligned}
\subsetneq
\mathrm{endpos}(\texttt{&quot;bc&quot;, &quot;c&quot;}) = \{3, 5\}endpos(&quot;abc&quot;)={3}endpos(&quot;abcbc&quot;, &quot;bcbc&quot;, &quot;cbc&quot;)={5}​⊊endpos(&quot;bc&quot;, &quot;c&quot;)={3,5}
每个节点有且仅有一个后缀链接，沿着后缀链接往上走对应的后缀长度会连续变短，最后到达根，。即，一条从根出发到某个节点的后缀链，表达了一个完整的后缀组合，这是母树的本质。后缀链接构成的树本质上是 endpos⁡\operatorname{endpos}endpos 集合构成的一棵树。我们从小集合往大集合建边我们充分利用了 endpos 集合中长度单调递增 1 的性质，并且使得具有上面后缀链的性质。
类似于 AC 自动机的甜蜜组合 Trie+Fail，我们 SAM 就是把转移图和 Parent 树给融合到一起的究极形态。
 2.5 构建 SAM
构建的核心思想就是我们前面提到过的增量发，我们在 s[1,i−1]s[1,i-1]s[1,i−1] 的基础上的 SAM 进行更新，从而得到 s[1,i]s[1,i]s[1,i] 的 SAM。构建 SAM 只需要 3 个步骤：

打开 SAM。
插一个字符。
关上 SAM。

冰箱梗，读者不难看出 SAM 的构建是在线算法，我们可以逐个加入字符串中的每个字符，并且在每一步中对应地维护 SAM。
建立 SAM 的关键在于：

起点和终点之间的边代表在当前的字符串后添加一个字符。
从根到达图中任意路径形成的子串都是 SSS 中的一个子串。
要保证每个点的所有字串属于一个 endpos 等价类。
要符合 Parent 树的父子关系。

我们这里先给出代码实现与算法流程，让后再逐步说明原理。
一开始我们钦定 SAM 中有一个根节点 t0t_{0}t0​，编号就是 0，定义 len⁡(t0)=0,link⁡(t0)=−1\operatorname{len}(t_{0})=0,\operatorname{link}(t_{0})=-1len(t0​)=0,link(t0​)=−1。
让后我们考虑添加一个字符 ccc 拓展 SAM。

令 lstlstlst 为添加 ccc 之前整个字符串 SSS 所对应的节点（即上一个所更新的节点）。
创建一个新的状态，并将 len⁡(cur)=len⁡(lst)+1\operatorname{len}(cur)=\operatorname{len}(lst)+1len(cur)=len(lst)+1。
从 lstlstlst 开始遍历遍历后缀链接，如果当前结点 vvv 没有标记字符 ccc 的出边，创建一条 v→curv\to curv→cur 的边，标记为 ccc。
如果遍历到了 t0t_{0}t0​，令 link⁡(cur)=0\operatorname{link}(cur)=0link(cur)=0，跳到第 8 步。
如果当前结点 vvv 已经有了标记字符 ccc 的出边，停止遍历，并把这个结点标记为 ppp，标记 ppp 沿着标记字符 ccc 的出边到达的点为 qqq。
如果 len⁡(p)+1=len⁡(q)\operatorname{len}(p)+1=\operatorname{len}(q)len(p)+1=len(q)，令 link⁡(cur)=q\operatorname{link}(cur)=qlink(cur)=q，跳到第 8 步。
否则，复制状态 qqq 到一个新的状态里 nqnqnq（包括 link 与它在 DAG 上的出边），将 len⁡(nq)=len⁡(p)+1\operatorname{len}(nq)=\operatorname{len}(p)+1len(nq)=len(p)+1。赋值之后在令 link⁡(q)=nq,link⁡(cur)=nq\operatorname{link}(q)=nq,\operatorname{link}(cur)=nqlink(q)=nq,link(cur)=nq。从 ppp 遍历后缀链接，设当前遍历到的点为 vvv，若 vvv 有标记为 ccc 的出边且 v→qv\to qv→q，则重定向这条边为 v→nqv \to nqv→nq。若 vvv 没有标记为 ccc 的出边或者 vvv 的标记为 ccc 的出边所到达的点不是 qqq ，停止遍历，转 8。
令 lst=curlst=curlst=cur，结束。

代码实现如下：
int newnode()&#123;    int cur=++tot;    memset(nxt[cur],0,sizeof(nxt[cur]));    return cur;&#125;int clone(int from)&#123;    int cur=++tot;    fa[cur]=fa[from];    memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));    return cur;&#125;void extend(int c)&#123;    int cur=newnode(); //步骤1    len[cur]=len[lst]+1;//步骤2    int p=lst;    while(p!=-1&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];//步骤3    if(p==-1) fa[cur]=0;//步骤4    else&#123;        int q=nxt[p][c];//步骤5        if(len[q]==len[p]+1) fa[cur]=q;//步骤6        else&#123;//步骤7            int nq=clone(q);            len[nq]=len[p]+1;            fa[q]=fa[cur]=nq;            while(p!=-1&amp;&amp;nxt[p][c]==q) nxt[p][c]=nq,p=fa[p];        &#125;    &#125;    lst=cur;//步骤8&#125;
关于每一步的解释，大家可以去看后缀自动机(SAM)奶妈式教程 - ZTer 的教程，这里就不再详细展开了，以防篇幅过长。
实现代码如下：
struct SAM&#123;    int nxt[MN][26],fa[MN],len[MN],tot,lst;    vector&lt;int&gt; adj[MN];    void init()&#123;        tot=0;        lst=0;        fa[0]=-1;        len[0]=0;        memset(nxt[0],0,sizeof(nxt[0]));        cnt_init[0]=0;    &#125;    int newnode()&#123;        int cur=++tot;        memset(nxt[cur],0,sizeof(nxt[cur]));        return cur;    &#125;    int clone(int from)&#123;        int cur=++tot;        fa[cur]=fa[from];        memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));        return cur;    &#125;    void extend(int c)&#123;        int cur=newnode();        len[cur]=len[lst]+1;        int p=lst;        while(p!=-1&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(p==-1) fa[cur]=0;        else&#123;            int q=nxt[p][c];            if(len[q]==len[p]+1) fa[cur]=q;            else&#123;                int nq=clone(q);                len[nq]=len[p]+1;                while(p!=-1&amp;&amp;nxt[p][c]==q) nxt[p][c]=nq,p=fa[p];                fa[q]=fa[cur]=nq;            &#125;        &#125;        lst=cur;    &#125;    void inittree()&#123;// 构建 link 树        for(int i=0;i&lt;=tot;i++)&#123;            adj[i].clear();            cnt[i]=-1;        &#125;        for(int i=1;i&lt;=tot;i++)&#123;            adj[fa[i]].push_back(i);        &#125;    &#125;&#125;sam;
 3. 广义后缀自动机
这里讲的是在线做法，因为在线做法只需要在原先的板子上更改一下就可以了。
广义后缀自动机是后缀自动机的升级版，可以同时表示多个字符串所有字串集合的数据结构。
而假的在线构建方法及其简单，就是插入完一个字符串后把 lastlastlast 指针指向根节点，接着插就可以了，但是这样构建的 SAM 虽然能用，但是并不满足前面我们所提过的最小结构。具体来说，有以下两种情况：

一个等价类被拆成若干个节点，子串信息被分散。
出现空节点。

注意到上面的节点的问题在于重复的前缀会被拆分或者重复创建新节点。我们可以通过在 expand 函数中添加特判，重复的前缀会被特判处理到，这样我们就可以对了。
以下是 expand 代码：
int extend(int c,int lst)&#123;    if(nxt[lst][c]&amp;&amp;len[nxt[lst][c]]==len[lst]+1) return nxt[lst][c]; // / 如果节点已经存在，且 len 值相对应，即连续转移，则直接转移。    int cur=newnode(),p=lst,flag=0,q,nq;    len[cur]=len[p]+1;    while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];    if(!p)&#123;        fa[cur]=1;    &#125;else&#123;        q=nxt[p][c];        if(len[q]==len[p]+1)&#123;            fa[cur]=q;        &#125;else&#123;            if(p==lst) flag=1,cur=0,tot--;            nq=clone(q);            len[nq]=len[p]+1;            fa[q]=fa[cur]=nq;            while(p&amp;&amp;nxt[p][c]==q)&#123;                nxt[p][c]=nq;                p=fa[p];            &#125;        &#125;    &#125;    return flag?nq:cur; //// 如果 len[las][it] 存在，则 cur 是空壳，返回 nq 即可&#125;
上面的方法本质就是对匹配串建出 trie 后进行 dfs 构建 SAM。
 4. 常用技巧与结论
 求本质不同子串个数
根据 SAM 的性质，每一个字串对应的是唯一一个状态，那么答案就是 len⁡(p)−len⁡(fap)\operatorname{len}(p)-\operatorname{len}(fa_{p})len(p)−len(fap​)。其中 fapfa_{p}fap​ 表示 link 树上 ppp 状态的父亲。
 线段树合并维护 endpos 集合。
有一些题目我们需要知道 endpos 集合内的内容具体是什么，以刻画每个子串在字符串中所有出现位置的信息。
根据上面所提到的，endpos 集合构建出来的树就是 link 树。为此，我们可以通过在 link 树上进行线段树合并的方式可以得到每个状态的 endpos 集合。
同时注意，线段树合并会破坏原有线段树的结构，如果我们需要保留每一个节点的 endpos 集合的话，我们线段树合并的形式应当是新建节点的方式而不是在原有结构直接复制的方式。
 快速定位一个子串的对应状态
给定区间 [l,r][l,r][l,r]，求 s[l,r]s_{[l,r]}s[l,r]​ 在 SAM 上对应的状态，在构建 SAM 时候像 AC 自动机一样预处理 s[1,i]s_{[1,i]}s[1,i]​ 所表示的状态 posipos_iposi​，我们从 posrpos_rposr​ 上倍增二分找到第一个 len≥r−l+1len \ge r-l+1len≥r−l+1 的状态，这个状态就是我们所求的状态。
 桶排确定 dfs 顺序
link 树上父亲的 len 值一定小于儿子的，但编号小的不一定 len 也小！考虑对于所有结点按照 len 值从大到小进行桶排序，让后按照顺序合并每个状态及其父亲，效果等同于 link 树自底向上合并信息的过程。
 5. 实战演练
 P3804 【模板】后缀自动机 (SAM)
答案就是 ∑∣endpos⁡(p)∣≥2len⁡(p)×∣endpos⁡(p)∣\sum\limits_{|\operatorname{endpos}(p)|\ge 2} \operatorname{len}(p)\times |\operatorname{endpos}(p)|∣endpos(p)∣≥2∑​len(p)×∣endpos(p)∣，求出 endpos 集合大小即可，具体怎么求可以看代码：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=3e6+15;int n;ll ans;string s;struct SAM&#123;    int nxt[MN][26],fa[MN],len[MN],cnt[MN],tot,lst;    int cnt_init[MN];    vector&lt;int&gt; adj[MN];    void init()&#123;        tot=0;        lst=0;        fa[0]=-1;        len[0]=0;        memset(nxt[0],0,sizeof(nxt[0]));        cnt_init[0]=0;    &#125;    int newnode()&#123;        int cur=++tot;        cnt_init[cur]=1;        memset(nxt[cur],0,sizeof(nxt[cur]));        return cur;    &#125;    int clone(int from)&#123;        int cur=++tot;        fa[cur]=fa[from];        cnt_init[cur]=0;        memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));        return cur;    &#125;    void extend(int c)&#123;        int cur=newnode();        len[cur]=len[lst]+1;        int p=lst;        while(p!=-1&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(p==-1) fa[cur]=0;        else&#123;            int q=nxt[p][c];            if(len[q]==len[p]+1) fa[cur]=q;            else&#123;                int nq=clone(q);                len[nq]=len[p]+1;                while(p!=-1&amp;&amp;nxt[p][c]==q) nxt[p][c]=nq,p=fa[p];                fa[q]=fa[cur]=nq;            &#125;        &#125;        lst=cur;    &#125;    void inittree()&#123;        for(int i=0;i&lt;=tot;i++)&#123;            adj[i].clear();            cnt[i]=-1;        &#125;        for(int i=1;i&lt;=tot;i++)&#123;            adj[fa[i]].push_back(i);        &#125;    &#125;    int dfs(int u)&#123;        if(cnt[u]!=-1) return cnt[u];        int sum=cnt_init[u];        for(auto v:adj[u])&#123;            sum+=dfs(v);        &#125;        cnt[u]=sum;        if(cnt[u]!=1)&#123;            ans=max(ans,1ll*cnt[u]*len[u]);        &#125;        return cnt[u];    &#125;&#125;sam;int main()&#123;    cin&gt;&gt;s;    n=s.length();    s=&quot; &quot;+s;    sam.init();    for(int i=1;i&lt;=n;i++)&#123;        sam.extend(s[i]-&#x27;a&#x27;);    &#125;    sam.inittree();    sam.dfs(0);    cout&lt;&lt;ans;    return 0;&#125;
 P6139 【模板】广义后缀自动机（广义 SAM）
本质不同子串个数我们已经提到过了，这里不再叙述。
直接放个板子：
struct gySAM&#123;    int nxt[MN][26],fa[MN],pos[MN],len[MN],tot;    vector&lt;int&gt; adj[MN];    void init()&#123;        for(int i=0;i&lt;=tot;i++)&#123;            adj[i].clear();            fa[i]=pos[i]=len[i]=0;            memset(nxt[i],0,sizeof(nxt[i]));        &#125;        tot=1;    &#125;    gySAM()&#123;        init();    &#125;    int newnode()&#123;        int cur=++tot;        memset(nxt[cur],0,sizeof(nxt[cur]));        return cur;    &#125;    int clone(int from)&#123;        int cur=++tot;        fa[cur]=fa[from];        memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));        return cur;    &#125;    int extend(int c,int lst)&#123;        if(nxt[lst][c]&amp;&amp;len[nxt[lst][c]]==len[lst]+1) return nxt[lst][c];        int cur=newnode(),p=lst,flag=0,q,nq;        len[cur]=len[p]+1;        while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(!p)&#123;            fa[cur]=1;        &#125;else&#123;            q=nxt[p][c];            if(len[q]==len[p]+1)&#123;                fa[cur]=q;            &#125;else&#123;                if(p==lst) flag=1,cur=0,tot--;                nq=clone(q);                len[nq]=len[p]+1;                fa[q]=fa[cur]=nq;                while(p&amp;&amp;nxt[p][c]==q)&#123;                    nxt[p][c]=nq;                    p=fa[p];                &#125;            &#125;        &#125;        return flag?nq:cur;    &#125;    void inittree()&#123;        for(int i=2;i&lt;=tot;i++)&#123;            adj[fa[i]].push_back(i);        &#125;    &#125;    void insert(string s)&#123;        int len=s.length(),lst=1;        s=&quot; &quot;+s;        for(int i=1;i&lt;=len;i++)&#123;            lst=extend(s[i]-&#x27;a&#x27;,lst);        &#125;    &#125;&#125;sam;
 P4070 [SDOI2016]生成魔咒
答案就是 len⁡(p)−len⁡(fap)\operatorname{len}(p)-\operatorname{len}(fa_{p})len(p)−len(fap​)。其中 fapfa_{p}fap​ 表示 link 树上 ppp 状态的父亲。
void extend(int c)&#123;    int cur=++tot;    len[cur]=len[lst]+1;    cnt_init[cur]=1;    nxt[cur].clear();    int p=lst;    while(p!=-1&amp;&amp;!nxt[p][c])&#123;        nxt[p][c]=cur;        p=fa[p];    &#125;    if(p==-1) fa[cur]=0;    else&#123;        int q=nxt[p][c];        if(len[q]==len[p]+1)&#123;            fa[cur]=q;        &#125;        else&#123;            int nq=++tot;            len[nq]=len[p]+1;            nxt[nq]=nxt[q];            fa[nq]=fa[q];            cnt_init[nq]=0;            while(p!=-1&amp;&amp;nxt[p][c]==q)&#123;                nxt[p][c]=nq;                p=fa[p];            &#125;            fa[q]=fa[cur]=nq;        &#125;    &#125;    lst=cur;    ans+=len[cur]-len[fa[cur]];&#125;
其中 cnt_init 没有任何用，只是复制板子复制上的。
 P4022 [CTSC2012]熟悉的文章
典。
战术二分答案 midmidmid，问题转化为判断这个 LLL 是否可行，考虑 DP。设 fif_{i}fi​ 表示文章 iii 前缀最长符合限制的匹配长度，有转移方程：
fi=max⁡{fj+i−(j+1)+1,fi−1}j∈[i−mxlen(i),i−mid]\begin{aligned}f_{i} &amp; =\max \{ f_{j}+i-(j+1)+1,f_{i-1} \} &amp; j \in [i-mxlen(i),i-mid]\end{aligned}
fi​​=max{fj​+i−(j+1)+1,fi−1​}​j∈[i−mxlen(i),i−mid]​
其中 mxlenmxlenmxlen 表示以 iii 为结尾的字符串出现在模板串中的最长长度，用 SAM 类似于 LCS 的方法即可。
转移是 O(n2)O(n^2)O(n2) 的，可以通过单调队列优化成 O(n)O(n)O(n)。时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
#include &lt;bits/stdc++.h&gt;using namespace std;constexpr int MN = 5e5 + 15;int n, m, len, f[MN], ql, qr, q[MN], L[MN];struct SAM &#123;    int nxt[MN][3], fa[MN], cnt[MN], len[MN], cnt_init[MN], tot, lst;    void init() &#123;        tot = lst = 0;        fa[0] = -1;        len[0] = 0;        memset(nxt[0], 0, sizeof(nxt[0]));        cnt_init[0] = 0;    &#125;    void find(string s, int slen) &#123;        int p = 0, now = 0;        for (int i = 0; i &lt; slen; i++) &#123;            int x = s[i] - &#x27;0&#x27;;            if (x &lt; 0 || x &gt; 1) continue;            if (nxt[p][x]) &#123;                now++;                p = nxt[p][x];            &#125; else &#123;                for (; p != -1 &amp;&amp; !nxt[p][x]; p = fa[p]);                if (p == -1) p = 0, now = 0;                else now = len[p] + 1, p = nxt[p][x];            &#125;            L[i + 1] = now;        &#125;    &#125;    void extend(int c) &#123;        int cur = ++tot;        len[cur] = len[lst] + 1;        cnt_init[cur] = 1;        memset(nxt[cur], 0, sizeof(nxt[cur]));        int p = lst;        while (p != -1 &amp;&amp; !nxt[p][c]) &#123;            nxt[p][c] = cur;            p = fa[p];        &#125;        if (p == -1) &#123;            fa[cur] = 0;        &#125; else &#123;            int q = nxt[p][c];            if (len[q] == len[p] + 1) &#123;                fa[cur] = q;            &#125; else &#123;                int nq = ++tot;                len[nq] = len[p] + 1;                memcpy(nxt[nq], nxt[q], sizeof(nxt[q]));                fa[nq] = fa[q];                cnt_init[nq] = 0;                while (p != -1 &amp;&amp; nxt[p][c] == q) &#123;                    nxt[p][c] = nq;                    p = fa[p];                &#125;                fa[q] = fa[cur] = nq;            &#125;        &#125;        lst = cur;    &#125;&#125; sam;bool check(int mid) &#123;    int ql = 0, qr = -1;    for (int i = 0; i &lt;= mid - 1; i++) f[i] = 0;    for (int i = mid; i &lt;= len; i++) &#123;        f[i] = f[i - 1];        while (ql &lt;= qr &amp;&amp; (f[i - mid] - (i - mid)) &gt; (f[q[qr]] - q[qr])) qr--;        q[++qr] = i - mid;        while (ql &lt;= qr &amp;&amp; q[ql] &lt; (i - L[i])) ql++;        if (ql &lt;= qr) f[i] = max(f[i], f[q[ql]] - q[ql] + i);    &#125;    return f[len] * 10 &gt;= len * 9;&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m;    sam.init();    for (int i = 1; i &lt;= m; i++) &#123;        string s;        cin &gt;&gt; s;        for (auto c : s) &#123;            sam.extend(c - &#x27;0&#x27;);        &#125;        sam.extend(2);     &#125;    for (int i = 1; i &lt;= n; i++) &#123;        string s;        cin &gt;&gt; s;        len = s.length();        sam.find(s, len);        int l = 1, r = len+1;        while (l + 1 &lt; r) &#123;            int mid = (l + r) &gt;&gt; 1;            if (check(mid)) &#123;                l = mid;            &#125; else &#123;                r = mid;            &#125;        &#125;        cout &lt;&lt; l &lt;&lt; &#x27;\n&#x27;;    &#125;    return 0;&#125;
 SP8093 JZPGYZ - Sevenk Love Oimaster
重要结论，SAM 上暴力跳链是 O(nn)O(n\sqrt{n})O(nn​) 的，下面是证明：
设一个串长度为 LLL，那么覆盖 L2L^2L2 的路径长度；同时又有SAM一个节点最多被覆盖后缀树上儿子个数次，因此这个上限是 ∣S∣|S|∣S∣（SAM大小）
那么跳链的复杂度就是 min⁡(L2,∣S∣)=L⋅min⁡(L,∣S∣L)\min(L^2,|S|)=L\cdot \min(L,\dfrac{|S|}{L})min(L2,∣S∣)=L⋅min(L,L∣S∣​) 的，由均值不等式不难得出不超过 S\sqrt{S}S​。
把所有串丢进广义SAM，对每一个节点打标记，记录组后一次它暴力跳到的串的编号。如果已经相同就不跳了。对于每一个询问，沿着转移边走，走到终止节点的覆盖次数即为答案。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=5e6+15;struct Query&#123;    int l,r,id;&#125;;int n,m,pre[MN],ans[MN];vector&lt;int&gt; adj[MN];vector&lt;int&gt; col[MN];vector&lt;Query&gt; qry;struct gySAM&#123;    int nxt[MN][26],fa[MN],pos[MN],len[MN],cnt[MN],tot;    int cnt_init[MN];    void init()&#123;        for(int i=0;i&lt;=tot;i++) adj[i].clear();        tot=1; // 初始状态设为1        fa[1]=-1;        len[1]=0;        memset(nxt[1],0,sizeof(nxt[1]));        cnt_init[1]=0;    &#125;    int extend(int c,int lst)&#123;        if(nxt[lst][c] &amp;&amp; len[nxt[lst][c]] == len[lst]+1) return nxt[lst][c];        int cur=++tot;        len[cur]=len[lst]+1;        cnt_init[cur]=1;        memset(nxt[cur],0,sizeof(nxt[cur]));        int p=lst;        while(p != -1 &amp;&amp; !nxt[p][c])&#123;            nxt[p][c]=cur;            p=fa[p];        &#125;        if(p == -1) fa[cur]=1; // 初始状态是1        else&#123;            int q=nxt[p][c];            if(len[q] == len[p]+1) fa[cur]=q;            else&#123;                int nq=++tot;                len[nq]=len[p]+1;                memcpy(nxt[nq],nxt[q],sizeof(nxt[q]));                fa[nq]=fa[q];                cnt_init[nq]=0;                while(p != -1 &amp;&amp; nxt[p][c]==q)&#123;                    nxt[p][c]=nq;                    p=fa[p];                &#125;                fa[q]=fa[cur]=nq;            &#125;        &#125;        return cur;    &#125;    void inittree()&#123;        for(int i=0;i&lt;=tot;i++) adj[i].clear();        for(int i=2;i&lt;=tot;i++) adj[fa[i]].push_back(i);    &#125;&#125;sam;struct BIT&#123;    int t[MN];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void modify(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;&#125;bit;namespace Tree&#123;    int siz[MN],dfn[MN],id[MN],dtot;    void dfs(int u,int pre)&#123;        dfn[u]=++dtot;        id[dtot]=u;        siz[u]=1;        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs(v,u);            siz[u]+=siz[v];        &#125;    &#125;&#125;using namespace Tree;bool cmp(Query x,Query y)&#123;    return x.r&lt;y.r;&#125;int main()&#123;    sam.init();    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        int lst=1; // 初始状态设为1        for(auto c:s)&#123;            lst=sam.extend(c-&#x27;a&#x27;,lst);            col[lst].push_back(i);        &#125;    &#125;    sam.inittree();    dtot=0;    dfs(1,-1); // DFS根节点设为1    for(int i=1;i&lt;=m;i++)&#123;        string s;        cin&gt;&gt;s;        int p=1; // 初始状态设为1        for(auto c:s)&#123;            p=sam.nxt[p][c-&#x27;a&#x27;];            if(!p) break;        &#125;        if(p)&#123;            qry.push_back(&#123;dfn[p],dfn[p]+siz[p]-1,i&#125;);        &#125;    &#125;    sort(qry.begin(),qry.end(),cmp);    int current_p=1; // 维护全局的current_p    for(auto q:qry)&#123;        while(current_p &lt;= q.r)&#123;            int u=id[current_p];            for(auto c:col[u])&#123;                if(pre[c]) bit.modify(pre[c],-1);                bit.modify(current_p,1);                pre[c]=current_p;            &#125;            current_p++;        &#125;        ans[q.id]=bit.query(q.r)-bit.query(q.l-1);    &#125;    for(int i=1;i&lt;=m;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 P3649 [APIO2014] 回文串
首先建 SAM，让后跑 manacher，一旦出现回文串我们就放到 SAM 上查询。
现在问题转化为快速查询一个字串的出现次数，用上面我们提到的技巧倍增二分即可，时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
也有纯 SAM 的，但是理解过于复杂，看不懂 www。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=6e5+15;int n,m,r[MN],poss[MN];long long ans;int pre[20][MN];char p[MN];string s;struct SAM&#123;    int nxt[MN][26],len[MN],c[MN],cnt[MN],id[MN],pos[MN],fa[MN],tot,lst;    void init()&#123;        tot=lst=1;    &#125;    int newnode()&#123;        int cur=++tot;        memset(nxt[cur],0,sizeof(nxt[cur]));        return cur;    &#125;    int clone(int from)&#123;        int cur=newnode();        fa[cur]=fa[from];        memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));        return cur;    &#125;    void expand(int c)&#123;        int cur=newnode();        len[cur]=len[lst]+1;        cnt[cur]=1;        int p=lst;        while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(!p)&#123;            fa[cur]=1;        &#125;else&#123;            int q=nxt[p][c];            if(len[q]==len[p]+1)&#123;                fa[cur]=q;            &#125;else&#123;                int nq=clone(q);                len[nq]=len[p]+1;                fa[cur]=fa[q]=nq;                while(p&amp;&amp;nxt[p][c]==q)&#123;                    nxt[p][c]=nq,p=fa[p];                &#125;            &#125;        &#125;        lst=cur;    &#125;    void getcnt()&#123;        for(int i=1;i&lt;=tot;i++) c[len[i]]++;        for(int i=1;i&lt;=n;i++) c[i]+=c[i-1];        for(int i=1;i&lt;=tot;i++) id[c[len[i]]--]=i;        for(int i=tot;i&gt;=1;i--)&#123;            cnt[fa[id[i]]]+=cnt[id[i]];        &#125;    &#125;    void initst()&#123;        for(int i=1;i&lt;=tot;i++) pre[0][i]=fa[i];        for(int i=1;i&lt;20;i++)&#123;            for(int j=1;j&lt;=tot;j++)&#123;                pre[i][j]=pre[i-1][pre[i-1][j]];            &#125;        &#125;    &#125;    void find(int l,int r)&#123;        if(l&lt;1||r&gt;n) return;        int slen=r-l+1,now=pos[r];        for(int i=19;i&gt;=0;i--)&#123;            if(pre[i][now]&amp;&amp;len[pre[i][now]]&gt;=slen) now=pre[i][now];        &#125;        ans=max(ans,1ll*cnt[now]*(r-l+1));    &#125;    &#125;sam;void manacher()&#123;    p[++m]=&#x27;@&#x27;;    for(int i=1;i&lt;=n;i++)&#123;        p[++m]=&#x27;#&#x27;;        p[++m]=s[i];        poss[m]=i;    &#125;    p[++m]=&#x27;#&#x27;,p[++m]=&#x27;$&#x27;;    int pos=0,mx=0;    for(int i=1;i&lt;=m;i++)&#123;        if(i&lt;mx) r[i]=min(mx-i,r[pos*2-i]);        else r[i]=1;        sam.find(poss[i-r[i]+2],poss[i+r[i]-2]);        while(p[i-r[i]]==p[i+r[i]])&#123;            r[i]++;            sam.find(poss[i-r[i]+2],poss[i+r[i]-2]);        &#125;        if(i+r[i]&gt;mx)&#123;            mx=i+r[i],pos=i;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;s;    sam.init();    n=s.length();    s=&quot; &quot;+s;    for(int i=1;i&lt;=n;i++)&#123;        sam.expand(s[i]-&#x27;a&#x27;);        sam.pos[i]=sam.lst;    &#125;    sam.initst();    sam.getcnt();    manacher();    cout&lt;&lt;ans;    return 0;&#125;
 P5546 [POI 2000] 公共串
战术建立广义 SAM，所有串的最长公共子串长度肯定不会超过最短的那个串，所以可以拿最短的那个串建机，然后把其他串放到上面匹配，让后记录每一个点经过的最小值，让后答案就是节点最小值的最大值。
 CF1037H Security
战术建立 SAM，对于每个询问串，我们要在原串中求出一个字典序最小的串，使得其字典序比他大。考虑在 SAM 的 DAG 转移图上贪心从小到大选取点走，同时还需要利用线段树合并来判断当前字符串是否作为 [l,r][l,r][l,r] 的子串出现过，时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
Submission #327862208 - Codeforces
 CF700E Cool Slogans
神仙结论题。
link 树有一个结论，若 ppp 是 qqq 的祖先，则状态 ppp 所表示的子串集合在 longest⁡(q)\operatorname{longest}(q)longest(q) 中出现次数与出现位置相同。
既然都这么说了，考虑建立 SAM，在 link 树上从根向下进行 dp，设 fif_{i}fi​ 表示到节点 iii 时最大值。
如果一个父节点的子串在子节点的子串中出现了至少两次，则转移时 fff 加一，否则不变。
考虑如何判断至少出现两次，根据我们上面的结论，出现次数与出现位置相同。考虑设此时节点为 xxx，那么找到 xxx 对应的 endpos 中任意一个位置 pospospos，则 pospospos 的子串一定在 link 树父亲节点出现了一次，那么我们只需要在 [pos−len(x)+len(fax),pos−1][pos-len(x)+len(fa_{x}),pos-1][pos−len(x)+len(fax​),pos−1] 中出现即可，用线段树合并可以轻松解决，时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
Submission #327902686
 UVA1673 数字子串的和 str2int 
建立广义后缀自动机，让后现在问题是计数，考虑 link 树上计数 DP。
设 fif_{i}fi​ 表示 SAM 上点 iii 代表的转台结尾的数字之和，gig_{i}gi​ 表示不同的数字数目。
有转移：
gy=∑nxt[x][c]=ygxg_{y}=\sum\limits_{nxt[x][c]=y} g_{x}
gy​=nxt[x][c]=y∑​gx​
fy∑nxt[x][c]=yfx×10+gx×cf_{y}\sum\limits_{nxt[x][c]=y} f_{x}\times 10+g_{x}\times c
fy​nxt[x][c]=y∑​fx​×10+gx​×c
初始化 f[1]=0,g[1]=1f[1]=0,g[1]=1f[1]=0,g[1]=1，答案即为 ∑fi\sum\limits f_{i}∑fi​。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15,MOD=2012;int n,f[MN],g[MN];struct gySAM&#123;    int nxt[MN][26],c[MN],id[MN],fa[MN],len[MN],mxl,tot;    vector&lt;int&gt; adj[MN];    void init()&#123;        for(int i=0;i&lt;=tot;i++)&#123;            adj[i].clear();            fa[i]=g[i]=f[i]=len[i]=c[i]=id[i]=0;            memset(nxt[i],0,sizeof(nxt[i]));        &#125;        tot=1;        mxl=0;        g[1]=1;    &#125;    gySAM()&#123;        init();    &#125;    int newnode()&#123;        int cur=++tot;        f[cur]=g[cur]=0;        memset(nxt[cur],0,sizeof(nxt[cur]));        return cur;    &#125;    int clone(int from)&#123;        int cur=newnode();        fa[cur]=fa[from];        memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));        return cur;    &#125;    int extend(int c,int lst)&#123;        if(nxt[lst][c]&amp;&amp;len[nxt[lst][c]]==len[lst]+1) return nxt[lst][c];        int cur=newnode(),p=lst,flag=0,q,nq;        len[cur]=len[p]+1;        while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(!p)&#123;            fa[cur]=1;        &#125;else&#123;            q=nxt[p][c];            if(len[q]==len[p]+1)&#123;                fa[cur]=q;            &#125;else&#123;                if(p==lst) flag=1,cur=0,tot--;                nq=clone(q);                len[nq]=len[p]+1;                fa[q]=fa[cur]=nq;                while(p&amp;&amp;nxt[p][c]==q)&#123;                    nxt[p][c]=nq;                    p=fa[p];                &#125;            &#125;        &#125;        return flag?nq:cur;    &#125;    void insert(string s)&#123;        int len=s.length(),lst=1;        s=&quot; &quot;+s;        mxl=max(mxl,len);        for(int i=1;i&lt;=len;i++)&#123;            lst=extend(s[i]-&#x27;0&#x27;,lst);        &#125;    &#125;    void initc()&#123;		for(int i=1; i&lt;=tot; ++i) c[len[i]]++;		for(int i=0; i&lt;=mxl; ++i) c[i]=0;		for(int i=1; i&lt;=tot; ++i) c[len[i]]++;		for(int i=1; i&lt;=mxl; ++i) c[i]+=c[i-1];		for(int i=1; i&lt;=tot; ++i) id[c[len[i]]--]=i;        &#125;    void solve()&#123;        for(int i=1;i&lt;=tot;i++)&#123;            int u=id[i];            cerr&lt;&lt;u&lt;&lt;&quot; &quot;;            for(int j=0;j&lt;10;j++)&#123;                if((u==1&amp;&amp;!j)||!nxt[u][j]) continue;                (f[nxt[u][j]]+=g[u]*j+f[u]*10)%=MOD;                (g[nxt[u][j]]+=g[u])%=MOD;            &#125;        &#125;    &#125;&#125;sam;void solve()&#123;    sam.init();    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        sam.insert(s);    &#125;    sam.initc();    sam.solve();    int ans=0;    for(int i=1;i&lt;=sam.tot;i++) (ans+=f[i])%=MOD;    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    while(cin&gt;&gt;n)&#123;        solve();    &#125;    return 0;&#125;
 CF666E Forensic Examination
SAM 技巧大集合。首先考虑建出 s,tis,t_{i}s,ti​ 的广义 SAM，目标是查询 SSS 的子串在模板串区间的哪个串里出现次数最多。由于查询的是一个区间次数，考虑线段树合并维护，让后子串查询状态可以用倍增二分的技巧跳到对应状态在线段树上查询最大值就可以了。时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
Submission #327723329 - Codeforces
 P5576 [CmdOI2019] 口头禅 - 洛谷
command_block 题解
做法 3 好写，真的。
 P8368 [LNOI2022] 串 - 洛谷
题解：P8368 [LNOI2022] 串 - 洛谷专栏 我的题解不是因为我不想复制，篇幅过长。
 6. 后言
留一点练习题：

轻重子树分治：P4482 [BJWC2018] Border 的四种求法 - 洛谷
后缀树优化建图：P5284 [十二省联考 2019] 字符串问题 - 洛谷
线段树合并：P4770 [NOI2018] 你的名字 - 洛谷
LCT 在 link 树的应用（不会的可以用 ODT）：P6292 区间本质不同子串个数 - 洛谷
性质套 SAM：P3346 [ZJOI2015]诸神眷顾的幻想乡
第 kkk 小：P3975 [TJOI2015]弦论

 参考

罗勇军的《算法竞赛》
常见字符串算法 II：自动机相关 - qAlex_Weiq
zzctommy的后缀自动机练习记录
后缀自动机学习笔记 | Menci’s OI Blog
Oi-Wiki
后缀自动机练习记录 - zzctommy - 博客园
command_block 题解
神秘的物质

]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>SOSDP高维前缀和</title>
    <url>/posts/ff3126df/</url>
    <content><![CDATA[ 0. 前言
前置知识：

状压 DP。

 1. 概念与介绍
SOSDP，翻译过来就叫做子集和 DP，又称作高维前缀和，用来解决一些涉及子集和计算的问题。
我们通过一道例题来进行引入：

给你一个含 2n2^n2n 的集合 SSS，对于所有的 i∈[0,2n−1]i\in [0,2^n-1]i∈[0,2n−1]，求解 ∑j⊂isj\sum_{j\subset i}s_j∑j⊂i​sj​。

有一个显然的想法是模拟即可 O(4n)O(4^n)O(4n)，但是显然我们可以通过枚举子集轻松做到 O(3n)O(3^n)O(3n)，还能不能可以更优？
上面枚举子集的方法我们看有没有什么问题，我们发现当一个状态的二进制位上有 kkk 个 0，那么它将在其他状态的带的时候被访问 2k−12^k-12k−1 次，存在许多重复且无用的计算，原因是因为我们每一个对应的 sis_isi​ 没有和状态建立起对应的练习，而是直接暴力枚举子集，我们需要添加另一个状态来避免上述的重复计算。
我们考虑状态的设计与添加，设状态 S(sta)={x∣x⊂sta}S(sta)=\{ x|x \subset sta\}S(sta)={x∣x⊂sta}。上述的语句其实就是表明这些集合存在许多相交的部分，现在我们需要把这个集合划分为不相交的组。
设状态 S(sta,i)={s∣s⊂sta,sta⊕x&lt;2i+1}S(sta,i)=\{ s|s\subset sta,sta \oplus x&lt; 2^{i+1} \}S(sta,i)={s∣s⊂sta,sta⊕x&lt;2i+1}。我们将二进制位数从 0 开始从低位向高维表示，那么集合 S(sta,i)S(sta,i)S(sta,i) 表示的就是只有第 iii 位以及更低位与 stastasta 不同的 xxx 的集合。
我们尝试将 stastasta 与 xxx 建立起来联系，那么有如下的分类讨论：

stastasta 第 iii 位为 0：显而易见的，stastasta 与 xxx 的第 iii 位均为 0。因此 xxx 仅有 0∼i−10\sim i-10∼i−1 位和 stastasta 不同，那么就有 S(sta,i)=S(sta,i−1)S(sta,i)=S(sta,i-1)S(sta,i)=S(sta,i−1)。
stastasta 第 iii 位为 1：

若 xxx 的对应位置为 0，那么就是 S(sta⊕2i,i−1)S(sta\oplus 2^i,i-1)S(sta⊕2i,i−1)。
若 xxx 的对应位置为 1，那么就是 S(sta,i−1)S(sta,i-1)S(sta,i−1)。



下图描述了如何将 S(sta,i)S(sta,i)S(sta,i) 集合相互关联。任何集合 S(sta,i)S(sta,i)S(sta,i) 的元素都是其子树中的叶子。红色前缀表示的这一部分对其所有子结点都是公共的，而黑色部分允许不同。

实现了这些关系之后，我们可以很容易地写出相应的动态规划。
for(int sta=0;sta&lt;(1&lt;&lt;N);sta++)&#123;    dp[sta][-1]=A[sta];// 叶结点	for(int i=0;i&lt;N;i++)	&#123;		if(sta&amp;(1&lt;&lt;i))			dp[sta][i]=dp[sta][i-1]+dp[sta^(1&lt;&lt;i)][i-1];		else dp[sta][i]=dp[sta][i-1];	&#125;	F[sta]=dp[sta][N-1];&#125;
注意到空间过于无敌，考虑滚动数组：
for(int i=0;i&lt;(1&lt;&lt;N);i++)	F[i]=A[i];for(int i=0;i&lt;N;i++)	for(int sta=(1&lt;&lt;N)-1;sta&gt;=0;sta--)	    if(sta&amp;(1&lt;&lt;i))			F[sta]+=F[sta^(1&lt;&lt;i)];
注意到这里其实可以正序枚举，但是养成好习惯吧以后写倒序的。
时间复杂度为 O(n⋅2n)O(n\cdot 2^n)O(n⋅2n)。
上面代码所求的是子集和，其实 SOSDP 还可以求超集和。具体的，设数组 f[mask]f[mask]f[mask] 表示每个集合 mask 的初始值，定义：
g[S]=∑T⊇Sf[T]g[S] = \sum_{T \supseteq S} f[T]
g[S]=T⊇S∑​f[T]
我们要求的是所有包含 SSS 的超集的和。
考虑每一位从低到高处理，对于第 iii 位：


如果当前集合 mask 不含第 iii 位：

就可以加上 含第 iii 位的集合的贡献（即 mask | (1 &lt;&lt; i)）。



这相当于枚举所有包含 mask 的超集。
代码如下：
for(int i=0;i&lt;(1&lt;&lt;n);i++) g[i]=f[i];for(int i=0;i&lt;n;i++)    for(int mask=0;mask&lt;(1&lt;&lt;n);mask++)        if((mask&gt;&gt;i&amp;1)==0)            g[mask]+=g[mask|(1&lt;&lt;i)];
另一种实现：
for(int i=0;i&lt;N;i++)	for(int sta=(1&lt;&lt;N)-1;sta&gt;=0;sta--)	    if(!(sta&amp;(1&lt;&lt;i)))			F[sta]+=F[sta^(1&lt;&lt;i)];
其实超集和其实相当于就是反过来的子集求和，子集和变化相当于就是从小集合转移到大集合，而超集和变化相当于从大集合转移到小集合。
 2.例题
 CF165E
SOSDP 模板题。
二进制下与为 0 就是二进制位全部都不一样，那么取反之后就是二进制位完全相同的集合或这个集合的子集即可，通过 SOSDP 即可解决。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=23,MK=2e6+15;int n,a[MK],f[1&lt;&lt;MN];int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        f[a[i]]=a[i];    &#125;    for(int i=0;i&lt;22;i++)&#123;        for(int j=0;j&lt;(1&lt;&lt;22);j++)&#123;            if((j&gt;&gt;i&amp;1)&amp;&amp;f[j^(1&lt;&lt;i)])&#123;                f[j]=f[j^1&lt;&lt;i];            &#125;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        int x=((1&lt;&lt;22)-1)^a[i];        cout&lt;&lt;(f[x]?f[x]:-1)&lt;&lt;&quot; &quot;;    &#125;    return 0;&#125;
 arc100c
考虑 i∣j≤ki|j\le ki∣j≤k 实际上就是两个数在二进制表示下 1 位置的集合为 kkk 表示集合的子集。
注意到我们只需要这个子集的最大值和次大值即可，考虑 SOSDP 维护最大值和次大值的值，转移的时候后合并需要考虑最大值和次大值而变化。答案就是子集的前缀最大值，时间复杂度 O(n⋅2n)O(n\cdot 2^n)O(n⋅2n)。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=20,INF=1e9;int n,ans;pir a[1&lt;&lt;MN];pir mergep(pir x,pir y)&#123;    pir ret;    if(x.first&lt;y.first) swap(x,y);    ret=x;    if(y.first&gt;ret.second) ret.second=y.first;    return ret;&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=0;i&lt;(1&lt;&lt;n);i++)&#123;        int x;        cin&gt;&gt;x;        a[i]=pir(x,-INF);    &#125;    for(int i=0;i&lt;n;i++)&#123;        for(int s=0;s&lt;(1&lt;&lt;n);s++)&#123;            if((s&gt;&gt;i)&amp;1)&#123;                a[s]=mergep(a[s],a[s^(1&lt;&lt;i)]);            &#125;        &#125;    &#125;    for(int i=1;i&lt;(1&lt;&lt;n);i++)&#123;        ans=max(ans,a[i].first+a[i].second);        cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 CF1208F
有没有感觉这个题和上面的题差不太多，但是这里有了个与操作。但其实不太对，因为上面的问题是限制，这里的问题是求值。
注意到或运算的性质，即只要有一个二进制位为 1 那么这个位数贡献的答案就是定死的，启发我们枚举或的数，这样我们只需要解决后的的与操作了。
考虑如何让答案最大，注意到二进制的与或等操作在每一位都是独立的，启发我们按位贪心，既然是最大，考虑从高位到低位贪心。如果有两个数他们的与在这一位为 1，那么最后的答案中一定有这一位。
我那么我们逐位考虑，并且考虑是否有两个在右边的数他们 “与” 的结果为当前答案的超集即可，有的话答案直接加上这一位。
用 SOSDP 求解即可。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=22;int n,mn[1&lt;&lt;MN],ans;struct NodeMX&#123;    int fir,sec;    friend NodeMX operator +(const NodeMX &amp;x,const NodeMX &amp;y)&#123;        int xmx=x.fir,ymx=y.fir;        if(xmx&lt;ymx) swap(xmx,ymx);        return (NodeMX)&#123;xmx,max(&#123;ymx,x.sec,y.sec&#125;)&#125;;    &#125;&#125;mx[1&lt;&lt;MN];signed main()&#123;    memset(mn,0x3f,sizeof(mn));    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        int x;        cin&gt;&gt;x;        mx[x]=mx[x]+(NodeMX)&#123;i,0&#125;;        mn[x]=min(mn[x],i);    &#125;    for(int i=0;i&lt;21;i++)&#123;        for(int j=(1&lt;&lt;21)-1;j&gt;=0;j--)&#123;            if(!(j&amp;(1&lt;&lt;i)))&#123;                mx[j]=mx[j]+mx[j^(1&lt;&lt;i)];                mn[j]=min(mn[j],mn[j^(1&lt;&lt;i)]);            &#125;        &#125;    &#125;    for(int i=20;i&gt;=0;i--)&#123;        int now=ans|(1&lt;&lt;i);        bool flag=0;        for(int j=now;;j=(j-1)&amp;now)&#123;            if(mn[j]&lt;mx[now^j].sec) flag=1;            if(flag||!j) break;        &#125;        if(flag) ans=now;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 P6422
注意到 m≤20m\le 20m≤20，启发我们进行状压。转化为选若干个数使它们按位或为全集。
设 f(i,S)f(i,S)f(i,S) 表示目前到第 iii 个箱子，至少放了一次玩具构成的集合为 SSS 的方案书，转移枚举选或者不选，显然超时。
考虑优化，注意到我们一开始的只需要让他们按位或Wie全集就可以了，但是按位或如果直接算贡献的话会算重，考虑容斥。
设 fif_ifi​ 表示选取若干个箱子或起来为状态 iii 的方案数，设 gig_igi​ 表示选取若干个数火起来为状态 iii 的子集的方案数。显然，设 cnticnt_icnti​ 表示 iii 有 cnticnt_icnti​ 个子集，那么 gi=2cntig_i=2^{cnt_i}gi​=2cnti​。求解 fif_ifi​ 可以考虑乘上容斥系数即可了，系数见代码即可，时间复杂度 O(n+m⋅2m)O(n+m\cdot 2^m)O(n+m⋅2m)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=22,MM=1e6+15,MOD=1e9+7;int n,m,ans,f[1&lt;&lt;MN],pw2[MM];void initpw()&#123;    pw2[0]=1;    for(int i=1;i&lt;MM;i++)&#123;        pw2[i]=pw2[i-1]*2%MOD;    &#125;&#125;signed main()&#123;    initpw();    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        int k,st=(1&lt;&lt;m)-1;        cin&gt;&gt;k;        while(k--)&#123;            int x;            cin&gt;&gt;x;            st^=(1&lt;&lt;(x-1));        &#125;        f[st]++;    &#125;    for(int i=0;i&lt;21;i++)&#123;        for(int j=0;j&lt;(1&lt;&lt;21);j++)&#123;            if((j&gt;&gt;i)&amp;1)&#123;                (f[j^(1&lt;&lt;i)]+=f[j])%=MOD;            &#125;        &#125;    &#125;    for(int i=0;i&lt;(1&lt;&lt;m);i++)&#123;        int cnt=__builtin_popcountll(i);        if(cnt&amp;1)&#123;            ans=(ans-pw2[f[i]]+MOD)%MOD;        &#125;        else ans=(ans+pw2[f[i]])%MOD;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>SP7363_Tree_Sum题解</title>
    <url>/posts/18e18e77/</url>
    <content><![CDATA[好题，话说我写黑题题解是不是有点飘了 www。
众所周知，第二类斯特林数有一个如下的性质：
mn=∑i=0n{ni}×i!×(mi)m^n=\sum\limits_{i=0}^n \begin{Bmatrix} n \\ i \end{Bmatrix}\times i! \times \binom{m}{i}
mn=i=0∑n​{ni​}×i!×(im​)
更众所周知的是，杨辉三角递推式：
(nm)=(n−1m)+(n−1m−1)\binom{n}{m}=\binom{n-1}{m}+\binom{n-1}{m-1}
(mn​)=(mn−1​)+(m−1n−1​)
原题的答案求的是：
ansx=∑i=1n(dis(x,i))kans_{x}=\sum\limits_{i=1}^n (dis(x,i))^k
ansx​=i=1∑n​(dis(x,i))k
其中 ansxans_xansx​ 表示在以 xxx 为根节点的情况下的答案，注意到选取的 xxx 不同所对应的答案不同，这启示我们进行类似于换根 DP 的计算（是不是有点太超前了）。
我们利用上面的公式变换一下：
ansx=∑i=1n(dis(x,i))k=∑i=1n∑j=0k{kj}×j!×(dis(x,i)j)=∑j=0k{kj}×j!∑i=1n(dis(x,i)j)\begin{aligned}
ans_{x} &amp; =\sum\limits_{i=1}^n (dis(x,i))^k \\

&amp; = \sum_{i=1}^n \sum_{j=0}^{k} \begin{Bmatrix} k \\ j \end{Bmatrix}\times j! \times \binom{dis(x,i)}{j} \\

&amp; = \sum_{j=0}^{k} \begin{Bmatrix} k \\ j \end{Bmatrix}\times j! \sum_{i=1}^n   \binom{dis(x,i)}{j}

\end{aligned}
ansx​​=i=1∑n​(dis(x,i))k=i=1∑n​j=0∑k​{kj​}×j!×(jdis(x,i)​)=j=0∑k​{kj​}×j!i=1∑n​(jdis(x,i)​)​
注意到前面可以暴力处理，瓶颈在于后面，考虑如何快速求后面的式子。
我们不妨考虑树形 DP 和换根 DP 计算（还真是换根耶），设 f(i,j)f(i,j)f(i,j) 表示以 iii 及其子树内，(dis(x,i)j)\dbinom{dis(x,i)}{j}(jdis(x,i)​) 的总和，考虑转移方程推导。
考虑转移，转移由孩子节点转移过来，而根节点求的为 ∑v∈sub(u)(dis(u,v)j)\sum\limits_{v\in sub(u)} \binom{dis(u,v)}{j}v∈sub(u)∑​(jdis(u,v)​)，转化为求 ∑x∈son(u)∑v∈sub(u)(dis(x,v)+1j)\sum\limits_{x\in son(u)} \sum\limits_{v\in sub(u)} \binom{dis(x,v)+1}{j}x∈son(u)∑​v∈sub(u)∑​(jdis(x,v)+1​)，用上面提到的组合数递推式即可解得：
f(u,j)=∑v∈son(u)f(v,j)+f(v,j−1)f(u,j)=\sum_{v\in son(u)} f(v,j)+f(v,j-1)
f(u,j)=v∈son(u)∑​f(v,j)+f(v,j−1)
求解完之后考虑换根，我们不妨设为 g(i,j)g(i,j)g(i,j)。换根的式子推导过于繁杂，这里篇幅限制，感兴趣可以看其他的题解，方程如下：
g(u,j)=g(fa,j)+g(fa,j−1)−2×f(u,j−1)−f(u,j−2)g(u,j)=g(fa,j)+g(fa,j-1)-2\times f(u,j-1)-f(u,j-2)
g(u,j)=g(fa,j)+g(fa,j−1)−2×f(u,j−1)−f(u,j−2)
预处理斯特林数和阶乘即可，时间复杂度 O(nk+k2)O(nk+k^2)O(nk+k2)。
多测太难受了啊：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e4+15,MK=26,MOD=1e9+7;int f[MN][MK],s[MK][MK],pw[MK],n,K;vector&lt;int&gt; adj[MN];void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MK;i++) pw[i]=pw[i-1]*i%MOD;    s[0][0]=1;    for(int i=1;i&lt;MK;i++)&#123;        for(int j=1;j&lt;=i;j++)&#123;            s[i][j]=(s[i-1][j-1]+j*s[i-1][j]%MOD)%MOD;        &#125;    &#125;&#125;void dfs1(int u,int pre)&#123;    f[u][0]=f[u][1]=1;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs1(v,u);        f[u][0]=(f[u][0]+f[v][0])%MOD;        for(int i=1;i&lt;=K;i++)&#123;            f[u][i]=(f[u][i]+f[v][i]+f[v][i-1])%MOD;        &#125;    &#125;&#125;void dfs2(int u,int pre)&#123;    if(pre)&#123;        for(int i=K;i&gt;=0;i--)&#123;            f[u][i]=f[pre][i];            if(i&gt;0)&#123;                f[u][i]=(f[u][i]+f[pre][i-1])%MOD;                f[u][i]=(f[u][i]-f[u][i-1]*2+MOD)%MOD;            &#125;            if(i&gt;1) f[u][i]=(f[u][i]-f[u][i-2]+MOD)%MOD;        &#125;    &#125;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs2(v,u);    &#125;&#125;void clear()&#123;    memset(f,0,sizeof(f));    for(int i=1;i&lt;=n;i++) adj[i].clear();&#125;void solve()&#123;    clear();    cin&gt;&gt;n&gt;&gt;K;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        u++,v++;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs1(1,0);    dfs2(1,0);    for(int i=1;i&lt;=n;i++)&#123;        int ans=0;        for(int j=0;j&lt;=K;j++)&#123;            ans=(ans+f[i][j]*pw[j]%MOD*s[K][j]%MOD)%MOD;        &#125;        cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;    &#125;    cout&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    ios::sync_with_stdio(0);    init();    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>SP21132题解</title>
    <url>/posts/37bc7e0d/</url>
    <content><![CDATA[怎么没有 SAM 版本的，我来补一发 www。
SAM 直接找回文串不太好找，考虑用 Manacher 找回文串，一旦有回文串我们就去 SAM 上查询。闲杂问题转化为查询 S[l,r]S[l,r]S[l,r] 在原串中出现多少次。首先我们得找到 s[l,r]s[l,r]s[l,r] 在 SAM 上对应的节点，这个问题是经典技巧，首先我们预处理 sss 每一个位置 sis_{i}si​ 对应的 SAM 节点，记为 posipos_{i}posi​，让后我们每一次查询 S[l,r]S[l,r]S[l,r] 从 posrpos_rposr​ 开始在 Link 树往上跳，直到跳到第一个位置 kkk 使得 lenk&lt;r−l+1len_{k}&lt; r-l+1lenk​&lt;r−l+1，此时 kkk 代表的就是 s[l,r]s[l,r]s[l,r] 对应的节点。
我们得到节点了，还有一个问题出现多少次，我们在 SAM 插入字符的时候维护一个 cntcntcnt 表示当前节点是否是子串节点，让后在 Link 树上从下往上合并（加），让后答案就是 cntk×(r−l+1)cnt_{k}\times (r-l+1)cntk​×(r−l+1) 取 max⁡\maxmax 岂可。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,m,r[MN],poss[MN];long long ans;int pre[31][MN];char p[MN];string s;struct SAM&#123;    int nxt[MN][26],len[MN],c[MN],cnt[MN],id[MN],pos[MN],fa[MN],tot,lst;    void init()&#123;        tot=lst=1;    &#125;    int newnode()&#123;        int cur=++tot;        memset(nxt[cur],0,sizeof(nxt[cur]));        return cur;    &#125;    int clone(int from)&#123;        int cur=newnode();        fa[cur]=fa[from];        memcpy(nxt[cur],nxt[from],sizeof(nxt[from]));        return cur;    &#125;    void expand(int c)&#123;        int cur=newnode();        len[cur]=len[lst]+1;        cnt[cur]=1;        int p=lst;        while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(!p)&#123;            fa[cur]=1;        &#125;else&#123;            int q=nxt[p][c];            if(len[q]==len[p]+1)&#123;                fa[cur]=q;            &#125;else&#123;                int nq=clone(q);                len[nq]=len[p]+1;                fa[cur]=fa[q]=nq;                while(p&amp;&amp;nxt[p][c]==q)&#123;                    nxt[p][c]=nq,p=fa[p];                &#125;            &#125;        &#125;        lst=cur;    &#125;    void getsiz()&#123;        for(int i=1;i&lt;=tot;i++) c[len[i]]++;        for(int i=1;i&lt;=n;i++) c[i]+=c[i-1];        for(int i=1;i&lt;=tot;i++) id[c[len[i]]--]=i;        for(int i=tot;i&gt;=1;i--)&#123;            cnt[fa[id[i]]]+=cnt[id[i]];        &#125;    &#125;    void initst()&#123;        for(int i=1;i&lt;=tot;i++) pre[0][i]=fa[i];        for(int i=1;i&lt;=30;i++)&#123;            for(int j=1;j&lt;=tot;j++)&#123;                pre[i][j]=pre[i-1][pre[i-1][j]];            &#125;        &#125;    &#125;    void find(int l,int r)&#123;        if(l&lt;1||r&gt;n) return;        int slen=r-l+1,now=pos[r];        for(int i=30;i&gt;=0;i--)&#123;            if(pre[i][now]&amp;&amp;len[pre[i][now]]&gt;=slen) now=pre[i][now];        &#125;        ans=max(ans,1ll*cnt[now]*(r-l+1));    &#125;    &#125;sam;void manacher()&#123;    p[++m]=&#x27;@&#x27;;    for(int i=1;i&lt;=n;i++)&#123;        p[++m]=&#x27;#&#x27;;        p[++m]=s[i];        poss[m]=i;    &#125;    p[++m]=&#x27;#&#x27;,p[++m]=&#x27;$&#x27;;    int pos=0,mx=0;    for(int i=1;i&lt;=m;i++)&#123;        if(i&lt;mx) r[i]=min(mx-i,r[pos*2-i]);        else r[i]=1;        sam.find(poss[i-r[i]+2],poss[i+r[i]-2]);        while(p[i-r[i]]==p[i+r[i]])&#123;            r[i]++;            sam.find(poss[i-r[i]+2],poss[i+r[i]-2]);        &#125;        if(i+r[i]&gt;mx)&#123;            mx=i+r[i],pos=i;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;s;    sam.init();    n=s.length();    s=&quot; &quot;+s;    for(int i=1;i&lt;=n;i++)&#123;        sam.expand(s[i]-&#x27;a&#x27;);        sam.pos[i]=sam.lst;    &#125;    sam.initst();    sam.getsiz();    manacher();    cout&lt;&lt;ans;    return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA10829_L-GapSubstrings题解</title>
    <url>/posts/751079ec/</url>
    <content><![CDATA[形式化题面如下：

多组测试数据 TTT，给出一个字符串 sss，求多少个相距为 ggg 的子串是相同的。
1≤T≤10,1≤g≤10,1≤s≤5×1041\le T \le 10,1\le g \le 10,1\le s \le 5\times 10^41≤T≤10,1≤g≤10,1≤s≤5×104

看到子串，并且要 O(nlog⁡n)O(n \log n)O(nlogn)，首先想到的就是 SA 和 SAM。
让后如果你做过 P1117 [NOI2016] 优秀的拆分的话，你会发现这个题和那个题很相似，都是在统计子串，不过这里有了距离限制。
我们考虑枚举子串长度 LLL，设第一段起始点为 lll，那么第一段范围为 [l,l+L−1][l,l+L-1][l,l+L−1]。第二段起始点 rrr 就是 r=l+L+gr=l+L+gr=l+L+g，同理 [r,r+L−1][r,r+L-1][r,r+L−1]。那么它们什么时候才能够作为子串相同呢，这里有一个结论就是它们两端的 LCS（最长公共后缀） 与 LCP（最长公共前缀）的长度和（注意算重两个端点要减一）大于等于我们枚举的长度，也就是 LCS⁡(l,r)+LCP⁡(l,r)−1≥L\operatorname{LCS}(l,r)+\operatorname{LCP}(l,r)-1\ge LLCS(l,r)+LCP(l,r)−1≥L。那么我们可以枚举起始点 lll，rrr 可以 O(1)O(1)O(1) 算出来，利用 SA 或 SAM 能够 O(1)→O(log⁡n)O(1)\to O(\log n)O(1)→O(logn) 查出它们的 LCS 和 LCP。
我们考虑怎么优化，注意到我们实际上就是在拿一个长为 LLL 的滑块在去滑，如果 [l,l+L−1][l,l+L-1][l,l+L−1] 可以的话，那么我们在枚举 [l+1,l+L−1][l+1,l+L-1][l+1,l+L−1] 实际上是没必要的，因为 LCS⁡(l,r)+LCP⁡(l,r)−1≥L\operatorname{LCS}(l,r)+\operatorname{LCP}(l,r)-1\ge LLCS(l,r)+LCP(l,r)−1≥L 一但合法，若等于 LLL 那么说明 LCS 和 LCP 恰好碰到一起，就是 1 个，而一旦重合，那么说明这个字符串区间我们可以向后拓展几位也是合法的，那么最多能拓展多少呢？每一次向后拓展 LCS 与 LCP 都会减一，那么最多只能拓展 LCS⁡(l,r)+LCP⁡(l,r)−1−L+1\operatorname{LCS}(l,r)+\operatorname{LCP}(l,r)-1-L+1LCS(l,r)+LCP(l,r)−1−L+1 次，原题目只让我们统计合法的个数，所以一个滑块的答案是可以 O(1)O(1)O(1) 算出来的。
这样的话，我们可以直接跳到 l+Ll+Ll+L 开始枚举，这种方法相当于将字符串分成了 ∣s∣L\dfrac{|s|}{L}L∣s∣​ 的块，根据调和级数原理 ：
∣s∣1+∣s∣2+⋯+∣s∣∣s∣=∣s∣×(11+12+⋯+1∣s∣)≈O(nlog⁡n)\dfrac{|s|}{1}+\dfrac{|s|}{2}+\dots+\dfrac{|s|}{|s|}=|s|\times(\dfrac{1}{1}+\dfrac{1}{2}+\dots+\dfrac{1}{|s|})\approx O(n \log n)
1∣s∣​+2∣s∣​+⋯+∣s∣∣s∣​=∣s∣×(11​+21​+⋯+∣s∣1​)≈O(nlogn)
那么时间复杂度就是 O(nlog⁡n)O(n \log n)O(nlogn)，对于 SA 可以做到 O(nlog⁡n)O(n \log n)O(nlogn) 预处理 LCP，SAM 预处理就是两个 endpos 集合在 link 树上的 LCA，可以做到 O(nlog⁡n)O(n \log n)O(nlogn) 预处理，O(1)→O(log⁡n)O(1) \to O(\log n)O(1)→O(logn) 查询 LCA，时间复杂度为 O(nlog⁡n)→O(nlog⁡2n)O(n \log  n)\to O(n \log^2 n)O(nlogn)→O(nlog2n)。
这种技巧是对字符串的分块思想。如果题目中出现一些构造字符串循环构成的问题，我们可以不妨考虑枚举这个循环的长度 LLL，让后按照 LLL 将字符串划分关键点分块（即按照 LLL 的倍数分块）利用分块和字符串的重复性质，将看似全局的问题局部化解决。对应到后缀数组上就是对相邻两块的块进行 LCP 和 LCS 查询。
文尾推销自己万字全家桶：后缀数组全家桶-从哈希乱搞到入门 - 洛谷专栏。
SAM 实现如下，用树刨求 LCA 时间复杂度 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=5e5+15;int n,g,casetot;string s;struct SAM&#123;    int nxt[MN][26],len[MN],pos[MN],fa[MN],tot,lst;    int siz[MN],dep[MN],hson[MN],htop[MN];    vector&lt;int&gt; adj[MN];    void init()&#123;        for(int i=0;i&lt;=tot;i++)&#123;            adj[i].clear();            len[i]=fa[i]=0;            siz[i]=dep[i]=hson[i]=htop[i]=0;            memset(nxt[i],0,sizeof(nxt[i]));        &#125;        tot=lst=1;    &#125;    void expand(int c,int id)&#123;        int cur=++tot;        len[cur]=len[lst]+1;        pos[id]=cur;        int p=lst;        while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(!p)&#123;            fa[cur]=1;        &#125;else&#123;            int q=nxt[p][c];            if(len[q]==len[p]+1)&#123;                fa[cur]=q;            &#125;else&#123;                int nq=++tot;                len[nq]=len[p]+1;                fa[nq]=fa[q];                memcpy(nxt[nq],nxt[q],sizeof(nxt[q]));                fa[cur]=fa[q]=nq;                while(p&amp;&amp;nxt[p][c]==q) nxt[p][c]=nq,p=fa[p];            &#125;        &#125;        lst=cur;    &#125;    void dfs1(int u,int pre)&#123;        siz[u]=1;        dep[u]=dep[pre]+1;        for(auto v:adj[u])&#123;            dfs1(v,u);            siz[u]+=siz[v];            if(!hson[u]||siz[hson[u]]&lt;siz[v]) hson[u]=v;        &#125;    &#125;    void dfs2(int u,int ltop)&#123;        htop[u]=ltop;        if(!hson[u]) return;        dfs2(hson[u],ltop);        for(auto v:adj[u])&#123;            if(v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;    void inittree()&#123;        for(int i=2;i&lt;=tot;i++)&#123;            adj[fa[i]].push_back(i);        &#125;        dfs1(1,0);        dfs2(1,1);    &#125;    int lca(int x,int y)&#123;        while(htop[x]!=htop[y])&#123;            if(dep[htop[x]]&lt;dep[htop[y]]) swap(x,y);            x=fa[htop[x]];        &#125;        return dep[x]&lt;dep[y]?x:y;    &#125;    int lcs(int x,int y)&#123;        x=pos[x],y=pos[y];        return len[lca(x,y)];    &#125;&#125;sam1,sam2;void solve()&#123;    sam1.init();    sam2.init();    cin&gt;&gt;g&gt;&gt;s;    n=s.length();    s=&quot; &quot;+s;    for(int i=1;i&lt;=n;i++)&#123;        sam1.expand(s[i]-&#x27;a&#x27;,i);    &#125;    for(int i=n;i&gt;=1;i--)&#123;        sam2.expand(s[i]-&#x27;a&#x27;,i);    &#125;    sam1.inittree();    sam2.inittree();    int ans=0;    for(int j=1;j&lt;=(n-g)&gt;&gt;1;j++)&#123;        for(int i=1;i+j+g&lt;=n;i+=j)&#123;            int l=i,r=i+j+g;            int lcs=min(sam1.lcs(l,r),j),lcp=min(sam2.lcs(l,r),j);            int len=lcs+lcp-1;            if(len&gt;=j) ans+=len-j+1;        &#125;    &#125;    cout&lt;&lt;&quot;Case &quot;&lt;&lt;++casetot&lt;&lt;&quot;: &quot;&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA11090题解</title>
    <url>/posts/488f899b/</url>
    <content><![CDATA[本题就是大名鼎鼎的最优比率环的问题。
我们不难注意到，平均值就是如下：
x‾=∑cicnt\overline{x}=\frac{\sum c_i}{cnt}
x=cnt∑ci​​
其中 cntcntcnt 代表点个数，而 cic_{i}ci​ 代表权值和。
学过分数规划的想必已经秒了，没事我们一步一步推。
根据题意有：
ans→∑cicnt≥x‾=∑ci≥x‾×cnt=∑ci−x‾×cnt≥0=∑(ci−x‾)≥0=∑(x‾−ci)≤0\begin{aligned}

ans &amp; \rightarrow \frac{\sum c_i}{cnt} \ge \overline{x} \\

&amp; =\sum c_i \ge \overline{x} \times cnt \\

&amp; =\sum c_{i} - \overline{x} \times cnt \ge 0 \\

&amp; = \sum (c_{i} - \overline{x}) \ge 0 \\ 

&amp; = \sum (\overline{x}- c_{i}) \le 0

\end{aligned}
ans​→cnt∑ci​​≥x=∑ci​≥x×cnt=∑ci​−x×cnt≥0=∑(ci​−x)≥0=∑(x−ci​)≤0​
这是什么，负环？我们把边权改成 mid−cimid-c_{i}mid−ci​ 不就是在让我们找一个环使得权值为负数，这不就是负环吗。
根据上面的不等式，我们不难看出我们需要二分这个 x‾\overline{x}x。我们用 SPFA 来判断负环，若有负环我们将 x‾\overline{x}x 调小，否则调大，这样就满足题意了。
接下来是代码时间，但是这里需要有几点注意：

BFS 的 SPFA 会炸，请使用 DFS 版本的 SPFA，详情见代码。
double 精度不够，请使用 long double。
时刻注意精度问题！
最后结果要输出 l+r2\dfrac{l+r}{2}2l+r​，不然会被 hack 精度（没错 long double 还是不够）。

代码通过 uDebug 上所有 hack，同时讨论区内个人 hack 也通过，感谢 hack 提供者们的贡献。也欢迎来 hack 我代码 www。
#include&lt;bits/stdc++.h&gt;#define double long doubleusing namespace std;constexpr int MN=55;constexpr double eps=1e-10;struct Edge&#123;    int v;    double w;&#125;;int n,m,tot;double l,r,dis[MN];bool vis[MN];vector&lt;Edge&gt; adj[MN];int cmp(double x,double y)&#123;    if(fabs(x-y)&lt;eps) return 0;    if(x&gt;y) return 1;    return -1;&#125;bool dfs(int u,double k)&#123;    vis[u]=1;    for(auto e:adj[u])&#123;        int v=e.v;        auto w=e.w;        if(dis[v]&gt;dis[u]+w-k)&#123;            dis[v]=dis[u]+w-k;            if(vis[v]||dfs(v,k))&#123;                return vis[u]=0,1;            &#125;        &#125;    &#125;    return vis[u]=0;&#125;bool check(double k)&#123;    memset(dis,0,sizeof(dis));    for(int i=1;i&lt;=n;i++)&#123;        if(dfs(i,k)) return 1;    &#125;    return 0;&#125;void init()&#123;    for(int i=1;i&lt;=n;i++) adj[i].clear(),vis[i]=0;&#125;void solve()&#123;    init();    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        double w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        adj[u].push_back(&#123;v,w&#125;);    &#125;    l=0,r=1e9;    while(r-l&gt;eps)&#123;        double mid=(l+r)/2;        if(check(mid)) r=mid;        else l=mid;    &#125;    if(cmp(l,1e9)==0) cout&lt;&lt;&quot;No cycle found.\n&quot;;    else cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;(l+r)/2&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        cout&lt;&lt;&quot;Case #&quot;&lt;&lt;++tot&lt;&lt;&quot;: &quot;;        solve();    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA12369题解</title>
    <url>/posts/d68d5922/</url>
    <content><![CDATA[带限制的期望我们一般喜欢用 DP 来解决，因为这样能够更好的处理相邻之间的限制。其实一般说来好多期望都是通过 DP 来解决，而一小部分是直接能够算出概率求得。
观察题目总共 444 个限制，同时还有大小王的灵活使用。不难有状态 f(a,b,c,d,e,f)f(a,b,c,d,e,f)f(a,b,c,d,e,f)，表示用了 aaa 个黑桃，bbb 个红桃，ccc 个梅花，ddd 个方块，小王状态 eee，大王状态 fff。其中大小王状态格式为：000 为未使用，1→31\rightarrow 31→3 为当作黑桃，红桃，梅花，方块。
不妨设已经用过的牌数量为 sumsumsum，显然 sum=a+b+c+d+[e≠0]+[f≠0]sum=a+b+c+d+[e\neq 0]+[f \neq 0]sum=a+b+c+d+[e=0]+[f=0]。对于一个状态合法，即满足 a,b,c,d≤13,sum≤54a,b,c,d\le 13,sum \le 54a,b,c,d≤13,sum≤54。考虑转移方程，有如下情况：

黑桃：抽中的概率为 13−a54−sum\dfrac{13-a}{54-sum}54−sum13−a​，那么期望即为 13−a54−sum+f(a+1,b,c,d,e,f)\dfrac{13-a}{54-sum}+f(a+1,b,c,d,e,f)54−sum13−a​+f(a+1,b,c,d,e,f)。
红桃：抽中的概率为 13−b54−sum\dfrac{13-b}{54-sum}54−sum13−b​，那么期望即为 13−b54−sum+f(a,b+1,c,d,e,f)\dfrac{13-b}{54-sum}+f(a,b+1,c,d,e,f)54−sum13−b​+f(a,b+1,c,d,e,f)。
梅花：抽中的概率为 13−c54−sum\dfrac{13-c}{54-sum}54−sum13−c​，那么期望即为 13−c54−sum+f(a,b,c+1,d,e,f)\dfrac{13-c}{54-sum}+f(a,b,c+1,d,e,f)54−sum13−c​+f(a,b,c+1,d,e,f)。
方块：抽中的概率为 13−d54−sum\dfrac{13-d}{54-sum}54−sum13−d​，那么期望即为 13−d54−sum+f(a,b,c,d+1,e,f)\dfrac{13-d}{54-sum}+f(a,b,c,d+1,e,f)54−sum13−d​+f(a,b,c,d+1,e,f)。
小王：这里有点不同，能抽中小王当且仅当 [e=0][e=0][e=0] 成立，那么成立时概率即为 154−sum\dfrac{1}{54-sum}54−sum1​，考虑如何转移，题面中已经说明会选择期望最小的的来转移，那么期望即为 154−sum×min⁡i=11≤i≤4f(a,b,c,d,i,f)\dfrac{1}{54-sum}\times \min_{i=1}^{1\le i \le 4} f(a,b,c,d,i,f)54−sum1​×mini=11≤i≤4​f(a,b,c,d,i,f)。
大王：同上推导，当且仅当 [f=0][f=0][f=0] 成立，即 154−sum×min⁡i=11≤i≤4f(a,b,c,d,e,i)\dfrac{1}{54-sum}\times \min_{i=1}^{1\le i \le 4} f(a,b,c,d,e,i)54−sum1​×mini=11≤i≤4​f(a,b,c,d,e,i)。

最后加起来即可。我们转移的顺序一般从终止状态开始计算，而起始作为目标，因为在很多情况下，终止状态有很多，而起始是唯一的。所以一般期望 DP 我们会采取倒推的手段，区别于概率 DP 的正推。
注意到状态转移太过于难受，我们考虑记忆化搜索的方式实现，这样起码好些不坐牢，故代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=25;constexpr double INF=1e18;int A,B,C,D;bool vis[MN][MN][MN][MN][5][5];double dp[MN][MN][MN][MN][5][5];double dfs(int a,int b,int c,int d,int e,int f)&#123;    if(vis[a][b][c][d][e][f]) return dp[a][b][c][d][e][f];    vis[a][b][c][d][e][f]=1;    int sum=a+b+c+d+(e!=0)+(f!=0);    double val=0;    if(a&gt;13||b&gt;13||c&gt;13||d&gt;13||sum&gt;54)&#123;        dp[a][b][c][d][e][f]=INF;        return dp[a][b][c][d][e][f];    &#125;    if(a+(e==1)+(f==1)&gt;=A&amp;&amp;b+(e==2)+(f==2)&gt;=B&amp;&amp;c+(e==3)+(f==3)&gt;=C&amp;&amp;d+(e==4)+(f==4)&gt;=D) dp[a][b][c][d][e][f]=0;    else&#123;        val+=(13.0-a)/(54.0-sum)*dfs(a+1,b,c,d,e,f);        val+=(13.0-b)/(54.0-sum)*dfs(a,b+1,c,d,e,f);        val+=(13.0-c)/(54.0-sum)*dfs(a,b,c+1,d,e,f);        val+=(13.0-d)/(54.0-sum)*dfs(a,b,c,d+1,e,f);        if(e==0)&#123;            double minn=INF;            for(int i=1;i&lt;=4;i++) minn=min(minn,dfs(a,b,c,d,i,f));            val+=1.0/(54.0-sum)*minn;        &#125;        if(f==0)&#123;            double minn=INF;            for(int i=1;i&lt;=4;i++) minn=min(minn,dfs(a,b,c,d,e,i));            val+=1.0/(54.0-sum)*minn;        &#125;        dp[a][b][c][d][e][f]=val+1.0;    &#125;    return dp[a][b][c][d][e][f];&#125;void solve()&#123;    cin&gt;&gt;A&gt;&gt;B&gt;&gt;C&gt;&gt;D;    memset(dp,0,sizeof(dp));    memset(vis,0,sizeof(vis));    dfs(0,0,0,0,0,0);    if(dp[0][0][0][0][0][0]&gt;54) cout&lt;&lt;&quot;-1.000\n&quot;;    else cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;dp[0][0][0][0][0][0]&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    int T,cnt=0;    cin&gt;&gt;T;    while(T--)&#123;        cout&lt;&lt;&quot;Case &quot;&lt;&lt;++cnt&lt;&lt;&quot;: &quot;;        solve();    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>abc423题解</title>
    <url>/posts/9dc41a00/</url>
    <content><![CDATA[省流：ABCDEF，G 感觉有点难了而且慢速选手无法完成 www，rk280。
 A,B,C
略去，不过这里需要特别提醒一下 C 题，显然有结论，就是我们锁上门后显然不会再打开，否则一定不优，开操作和闭操作各自至多进行一次。要能够把所有门都变为锁状态的充要条件是：在完成所有开操作之后，仍然处于打开状态的锁的编号集合必须是形如 {i∣X≤i≤Y}\{i\mid X\le i\le Y\}{i∣X≤i≤Y} 的一个连续区间（并满足 X≤R,;R−1≤YX\le R,;R-1\le YX≤R,;R−1≤Y）。令 Li=0L_i=0Li​=0 的最小下标为 xxx、最大下标为 yyy。当 x≤R−1x\le R-1x≤R−1 时，只需进行使得门 x,x+1,…,R−1x,x+1,\dots,R-1x,x+1,…,R−1 的钥匙全部打开的操作；当 y≥Ry\ge Ry≥R 时，只需进行使得门 R,R+1,…,yR,R+1,\dots,yR,R+1,…,y 的钥匙全部打开的操作，也可以暴力模拟，时间复杂度 O(n)O(n)O(n)。
 D
用一个堆维护当前在餐馆内的人，模拟即可，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3e5+15;struct Node&#123;    int a,b,c,id;&#125;a[MN];struct PNode&#123;    int a,b,c,id,tim;    PNode(Node x,int t)&#123;        a=x.a,b=x.b,c=x.c,id=x.id,tim=t;    &#125;    friend bool operator&gt;(const PNode &amp;x,const PNode &amp;y)&#123;        return x.tim&gt;y.tim;    &#125;&#125;;int n,K,T,pcnt,ans[MN];priority_queue&lt;PNode,vector&lt;PNode&gt;,greater&lt;PNode&gt;&gt; q;bool cmp(Node x,Node y)&#123;    return x.a&lt;y.a;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;K;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i].a&gt;&gt;a[i].b&gt;&gt;a[i].c;        a[i].id=i;    &#125;    sort(a+1,a+1+n,cmp);    ans[a[1].id]=a[1].a;    T=a[1].a;    pcnt=a[1].c;    q.push(PNode(a[1],T+a[1].b));    for(int i=2;i&lt;=n;i++)&#123;        if(pcnt+a[i].c&gt;K)&#123;            while(!q.empty()&amp;&amp;pcnt+a[i].c&gt;K)&#123;                auto tp=q.top();                q.pop();                T=tp.tim;                pcnt-=tp.c;            &#125;            T=max(T,a[i].a);            ans[a[i].id]=T;            pcnt+=a[i].c;            q.push(PNode(a[i],T+a[i].b));        &#125;else&#123;            pcnt+=a[i].c;            T=max(T,a[i].a);            ans[a[i].id]=T;            q.push(PNode(a[i],T+a[i].b));        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 E
显然的想法就是历史和线段树加扫描线，属于子区间计数的经典应用。
不过显然这是求和，考虑贡献法将贡献拆到每一个位置上，考虑 [L,R][L,R][L,R] 的区间内有多少个子区间可以让 aia_{i}ai​ 贡献上，答案是 (R−i+1)(i−L+1)(R-i+1)(i-L+1)(R−i+1)(i−L+1) 次，故答案就是对于 [L,R][L,R][L,R] 区间求 ∑i∈[L,R](R−i+1)(i−L+1)ai\sum\limits_{i\in [L,R]} (R-i+1)(i-L+1)a_{i}i∈[L,R]∑​(R−i+1)(i−L+1)ai​ 即可，注意到显然可以拆开，拆开后会出现 i2aii^2 a_{i}i2ai​、iaiia_{i}iai​ 和 aia_{i}ai​ 这三项的前缀和，维护即可，时间复杂度 O(n)O(n)O(n)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e5+15;int sumx[MN],sumy[MN],sumz[MN],a[MN],n,q;signed main()&#123;    cin&gt;&gt;n&gt;&gt;q;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        sumx[i]=a[i];        sumy[i]=i*a[i];        sumz[i]=i*i*a[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        sumx[i]+=sumx[i-1];        sumy[i]+=sumy[i-1];        sumz[i]+=sumz[i-1];    &#125;    while(q--)&#123;        int l,r;        cin&gt;&gt;l&gt;&gt;r;        int X = sumx[r]-sumx[l-1];        int Y = sumy[r]-sumy[l-1];        int Z = sumz[r]-sumz[l-1];        cout &lt;&lt; (l+r)*Y+(r-l+1)*X-l*r*X-Z &lt;&lt; &#x27;\n&#x27;;    &#125;    return 0;&#125;
 F
正着直接状压枚举很难，因为可能会算重很多。正难则反容斥，直接状压加二项式反演。不妨设 fkf_{k}fk​ 表示恰好有 kkk 个物种同时爆发的年份数，gkg_{k}gk​ 表示至少有 kkk 个物种同时爆发的年份数，显然有二项式反演公式：
gk=∑i=kn(ik)fi⇔fk=∑i=kn(−1)i−k(ik)gig_{k}=\sum\limits_{i=k} ^n \binom{i}{k} f_{i} \Leftrightarrow f_{k}=\sum\limits_{i=k}^n (-1)^{i-k} \binom{i}{k} g_{i}
gk​=i=k∑n​(ki​)fi​⇔fk​=i=k∑n​(−1)i−k(ki​)gi​
其中 nnn 就是题目中的物种上限。现在问题转化为至少怎么求。首先由于 n≤20n\le 20n≤20 不难想到状压，然后是这个至少怎么解决呢？当然！我们可以转为钦定，我们钦定的年份必须选择，然后计算选取它们至少有多少个年份合法即可！具体的我们可以枚举非空子集 SSS，然后计算其 lcm⁡\operatorname{lcm}lcm 即最小公倍数，若 lcm⁡≤y\operatorname{lcm}\le ylcm≤y，则所有是 lcm⁡\operatorname{lcm}lcm 的倍数的年份都至少包含 SSS 中枚举的蝉，那么有多少个倍数呢，答案就是 ⌊Ylcm⁡(S)⌋\lfloor \dfrac{Y}{\operatorname{lcm}(S)} \rfloor⌊lcm(S)Y​⌋，然后根据上面的公式反演容斥一下即可，时间复杂度为 O(n2n)O(n2^n )O(n2n)。
话说为什么我预处理组合数炸了非要让我现算呢？还有记得开 __int128。
同时这里说明，二项式反演公式描述的是至少与恰好之间的关系，与具体 fff 与 ggg 如何计算无任何关系，只要满足上面的公式就可以。
#include&lt;bits/stdc++.h&gt;#define int long long#define lint __int128using namespace std;constexpr int MN=25;int n,m;lint a[MN],ans,Y,pw[MN],inv[MN];signed main()&#123;    read(n,m,Y);    for(int i=0;i&lt;n;i++)&#123;        read(a[i]);    &#125;    for(int s=1;s&lt;(1&lt;&lt;n);s++)&#123;        int cnt1=__builtin_popcountll(s);        lint ret=1;        bool flag=0;        for(int i=0;i&lt;n;i++)&#123;            if((s&gt;&gt;i)&amp;1)&#123;                ret = lcm(ret,a[i]); //新c++版本默认有 lcm和gcd函数                if(ret&gt;Y)&#123;                    flag=1;                    break;                &#125;            &#125;        &#125;        if(flag) continue;        int res=Y/ret;        if(cnt1 &gt;= m) &#123;            int C=1;            for(int i=0;i&lt;m;i++)&#123;                C=C*(cnt1-i)/(i+1);// C(cnt1, m)            &#125;            if((cnt1-m)%2) res=-res;            ans+=C*res;        &#125;    &#125;    put(ans);    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>agc056b题解</title>
    <url>/posts/500326e7/</url>
    <content><![CDATA[ 正解
首先在分析问题的时候不难发现操作的一个性质就是同一个 xix_ixi​ 对应多个所谓的 p[l,r]p_{[l,r]}p[l,r]​ 序列。
对于这种操作对应多个序列不好计数的限制，一般情况下我们有下面两种思路

探究一下什么序列能够被得到，而不是从操作序列的角度设计 DP 状态。
若硬是从操作序列入手，我们可以通过给操作附上某种特定的顺序，让每一个序列都附上一个唯一的代表元，而这个代表元就是我们需要分题目去设计的。

如果你从第一个思路想的话你会很快陷入瓶颈，不建议自行尝试不然你会很痛苦。
我们从第二个思路入手，那么我们要对操作序列确定一个顺序，使得我们的决策可以唯一化。
考虑用插入法，我们可以从大到小钦定每一个值的位置，就是倒着遍历 n,n−1,n−2,…,2,1n,n-1,n-2,\dots,2,1n,n−1,n−2,…,2,1,。每一次我们把对应的值插到当前最左端的位置。
通过这种方式，我们可以将问题从对 xxx 计数变为对上面合法构造的排列 ppp 进行计数。
考虑如果 DP，注意到每一次操作都是涉及的是 max⁡\maxmax 操作，不妨考虑利用大根堆笛卡尔树的形态进行刻画，笛卡尔树一个很好的特性就是形态是确定的而不是变化的。
那么原题目中的最大值位置 xix_ixi​ 能够产生贡献的区间一定是一个排列上的连续区间，对应到笛卡尔树上就是笛卡尔树的一个子树。那么现在问题转化为对笛卡尔树形态计数，考虑枚举最大值 DP，设 f(l,r,k)f(l,r,k)f(l,r,k) 表示当前枚举的最大值位置在大于等于 kkk 的范围，管辖的子树区间为 [l,r][l,r][l,r] 的笛卡尔树形态数量。
转移显然可以考虑递归处理 [l,k−1],[k+1,r][l,k-1],[k+1,r][l,k−1],[k+1,r]，或者从 f[l,r,k+1]f[l,r,k+1]f[l,r,k+1] 传递过来，对于 f(k+1,r,∗)f(k+1,r,*)f(k+1,r,∗) 的这个第三维是好说的，就是 k+1k+1k+1。但是 f(l,k−1,∗)f(l,k-1,*)f(l,k−1,∗) 是比较难以确定的，因为我们不好确定这个范围。
这里有一个结论，设 k′k&#x27;k′ 表示 [l,k−1][l,k-1][l,k−1] 最大值的位置，那么 [l,r][l,r][l,r] 合法的充要条件是：[l,k−1],[k+1,r][l,k-1],[k+1,r][l,k−1],[k+1,r] 是合法的，并且不能存在一个 l≤li≤k′≤k≤ri≤rl\le l_i \le k&#x27; \le k \le r_i \le rl≤li​≤k′≤k≤ri​≤r。
必要性是显然的，假设不存在 l≤li≤k′≤k≤ri≤rl\le l_i \le k&#x27; \le k \le r_i \le rl≤li​≤k′≤k≤ri​≤r 的话那么我直接把最大值钦定为 k′k&#x27;k′ 也是合法的。考虑证明充分性，如果存在 l≤li≤k′≤k≤ri≤rl\le l_i \le k&#x27; \le k \le r_i \le rl≤li​≤k′≤k≤ri​≤r，那么根据前提条件左区间合法性可以知道把最大值钦定在 k′k&#x27;k′ 的左边都是不合法的，而如果把最大值钦定在 [k′,k)[k&#x27;,k)[k′,k) 中某个位置，那么 xi≠kx_i \neq kxi​=k 了，所以最左端和发位置就是 kkk 了，证毕。
那么我们可以预处理 g(l,r,k)g(l,r,k)g(l,r,k) 表示 [l,r][l,r][l,r] 最大值在 kkk 的时候，[l,k−1][l,k-1][l,k−1] 的最大值位置最小是多少，预处理是 O(n3)O(n^3)O(n3) 的，转移可以做到 O(1)O(1)O(1)，时间复杂度为 O(n3)O(n^3)O(n3)。
提交记录
 反思
这个题还是比较好的，我们在遇见这种操作序列出现多个对应一个的时候，我们要找出的就是那个序列对应的唯一代表元。通过将结果与唯一的操作序列对应起来，从而设计出无重复的 DP。

探究一下什么序列能够被得到，而不是从操作序列的角度设计 DP 状态。
若硬是从操作序列入手，我们可以通过给操作附上某种特定的顺序，让每一个序列都附上一个唯一的代表元，而这个代表元就是我们需要分题目去设计的。

笛卡尔树形态特别适合这种计数思想，尤其是当最大值反复横跳的时候考虑笛卡尔树会有奇效，其实笛卡尔树上的 DP，就是所谓的枚举最大值转移。
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>bitset大肘子</title>
    <url>/posts/39b8edbd/</url>
    <content><![CDATA[ 0. 前言
//整数，string和char数组可以强制类型转换成bitset//不支持迭代器//类似string，可以存入unordered_set/map，可以用cin/cout输入输出//转化为整数时0为最低位，转化为字符串时顺序与原先顺序相同，输出时从高位到低位输出bitset&lt;N&gt;b;//定义初始值全为0的bitset，N为整型常量bitset&lt;N&gt;b(x);//用无符号整型x初始化bitset，不超过unsigned long long范围bitset&lt;N&gt;b(s);//用s初始化b，s可以是basic_string类型或bitset类型，若为basic_string类型则s中只能包含&#x27;0&#x27;或&#x27;1&#x27;bitset&lt;N&gt;b(s,p);//用s从p位置开始到末尾初始化b，此处s只能为basic_string类型，下同bitset&lt;N&gt;b(s,p,n);//用s从p开始的n个数初始化b，p和n都是整数b=b2,b==b2,b!=b2;//b赋值为b2，b与b2是否相等，是否不等b&amp;b2,b|b2,b^b2,b&lt;&lt;n,b&gt;&gt;n,~b;//位运算，返回bitset类型b&amp;=b2,b|=b2,b^=b2,b&lt;&lt;=n,b&gt;&gt;=n;//位运算赋值b[p],b.test(p);//下标访问。test会检查越界抛出异常，但返回为右值不能修改b.flip(p),b.set(p),b.set(p,x),b.reset(p);//取反第p位，第p位设为1，第p位设为x，第p位设为0，O(1)b.flip(),b.set(),b.reset();//所有位取反，所有位设为1，所有位设为0，O(n/w)b.to_ulong(),b.to_ullong();//分别返回unsigned long和unsigned long long类型，表示将bitset转为整数，to_ullong需要C++11b.to_string();//bitset转字符串b.size(),b.any(),b.none(),b.all();//b的大小，是否存在1，是否全为0，是否全为1，all需要C++11，复杂度均为O(1)b.count();//b中1的个数，O(n/w)b._Find_first(),b._Find_next(p);//返回b中第一个1的位置，返回b中p以后不含p第一个1的位置，若不存在返回b的大小，O(n/w)
bitset 的原理实际上就是将 www 个 bool 压到一个整形变量中，每次操作我们同时对 www 个 bool 操作，使时间常数除以 www，通常 www 等于 32 或 64，取决于你是 32 位还是 64 位。
同时显然可以优化空间。
 1. DP
bitset 可以优化可行性 DP，也就是值为 0/10/10/1 的 DP，这一类中最常见的就是背包问题。
 CF1239E Turtle
首先考虑给定矩阵，如何刻画乌龟的路径，有性质：乌龟走的一定是第一行从开头的一段的连续路径，然后下去走到头。故设 preipre_{i}prei​ 表示第一行的前缀和，sufisuf_{i}sufi​ 表示第二行的后缀和。那么答案就是 max⁡i{prei+sufi+1}\max_{i}\{pre_{i}+suf_{i+1}\}maxi​{prei​+sufi+1​}。
考虑重排操作有没有什么性质，有一个贪心的想法，我们让第一行从小到大排序，第二行从大到小排序，这样列列操作一定是最优的，证明考虑从逆序对入手进行反证法即可。然后问题转化为行行之间刻画，可以考虑利用 DP 进行计算，但是代价计算是 max⁡i{prei+sufi+1}\max_{i}\{pre_{i}+suf_{i+1}\}maxi​{prei​+sufi+1​}。我们没法进行转移啊！
考虑简化代价，我们考虑排序的会对乌龟的决策带来什么决策，关键性质：乌龟要么在开头就往下走然后走完第二行，要么走完第一行然后往下走走到终点。
那么代价可以简化成：a(1,1)+a(2,n)+max⁡{∑i=2na(1,i),∑i=1n−1a(2,i)}a(1,1)+a(2,n)+\max\{\sum\limits_{i=2}^{n}a(1,i),\sum\limits_{i=1}^{n-1} a(2,i)\}a(1,1)+a(2,n)+max{i=2∑n​a(1,i),i=1∑n−1​a(2,i)}。前面是固定的，后面是不固定的。直接飞上去 DP 进行决策：设 f(i,j,k)f(i,j,k)f(i,j,k) 表示考虑到第 iii 个数，第一行一共选了 jjj 个数，选出数的总和 kkk 是否可能。最后让总和尽可能对半分即可。
注意到这个是可行化 DP，但是值域和 nnn 极小，可以用 bitset 优化，时间复杂度 O(1wn2∑a)O(\dfrac{1}{w}n^2 \sum\limits a)O(w1​n2∑a)。
 CF1481F AB Tree
注意到答案很奇怪，写个暴力（自从那个构造之后就有写暴力发现性质）发现答案上界在最大深度和最大深度加 111 之间徘徊。
考虑分析最优解构造，注意到答案和深度有关。考虑按层构造，每一层我们尽量填入相同的字符，设出现次数较大的字符为 ccc，因为要降低对儿子的影响，所以把非叶节点填入颜色 ccc，设 mmm 为未填写的字符，因为非叶节点的出现次数 ≤m2\le \dfrac{m}{2}≤2m​，而 c≥m2c\ge \dfrac{m}{2}c≥2m​，所以一定能填满，然后把 ccc 填入这一层的叶节点，剩下的就只有另一种颜色的，填入到其它点中，不难发现只有当前层会多一种不同的字符。
那么现在问题转化为能不能每一层都能填写相同字符,若可行输出用 DP 求解答案并输出方案，否则贪心按照上述方法构造即可。
不难发现这个 DP 可以当作背包 DP，把每一层的节点数量当作物品，那么这就是一个多重背包可行性问题。直接做是 O(n2)O(n^2)O(n2) 的，但是发现物品种类数最多 O(n)O(\sqrt{n})O(n​) 级别的（。可以通过 bitset 加二进制分组优化到 O(nnw)O(\dfrac{n\sqrt{n}}{w})O(wnn​​)，输出方案可以加个回溯也是 ok 的。
我写的是 O(nn)O(n\sqrt{n})O(nn​) 的神秘完全背包做法：题解：CF1481F AB Tree - 洛谷专栏
 2. 矩阵乘法
当矩阵乘法取值只有 0 或 1 时，考虑 bitset 优化：
 CF576D
又是特殊限制，我们还是设 DP。
设 f(i,j)f(i,j)f(i,j) 表示在第 iii 个点，在走过的边数为 jjj 的情况下是否能够到达（取值为 0 或 1），由 j−1j-1j−1 可以转移过来，并且矩阵味很重，转移是或的关系，可以考虑矩阵优化。
考虑无解的情况怎么做，不妨假设 1 号节点边都可以走，如果都可以走的情况下还是到不了那就 GG。
我们根据操作手册，发现在第五步就炸了，因为每一次 did_idi​ 的更新都需要重新设置转移矩阵，考虑根据 did_idi​ 的变化量进行快速幂，每一次中断跑多源 BFS 更新答案，让后就做完了。
我们不难发现 fff 的取值只有 0 或 1，可以利用  bitset 优化，写的时候如下：
struct Matrix&#123;    bitset&lt;MN&gt; mat[MN];    Matrix(int x=0)&#123;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                mat[i][j]=0;            &#125;        &#125;        if(!x) return;        for(int i=0;i&lt;MN;i++) mat[i][i]=x;    &#125;    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int k=0;k&lt;MN;k++)&#123;                if(mat[i][k])&#123;// 把j省去了                    ret.mat[i]|=x.mat[k];                &#125;            &#125;        &#125;        return ret;    &#125;&#125;;
 3. 异或方程组
异或方程组就是模 2 意义下的线性方程组，所有未知数取值为 0 或 1，已知条件形如若干个未知数异或值为 0 或 1。
bitset 可以优化高斯消元，时间复杂度 O(n3w)O(\dfrac{n^3}{w})O(wn3​)。
和一般的高斯消元一样从前到后依次消每一列。
bitset&lt;MN&gt; bit[MN];int gauss(int n,int m)&#123;    int ans=-1;    for(int i=1;i&lt;=n;i++)&#123;        int cur=i;        while(cur&lt;=m&amp;&amp;!bit[cur].test(i))&#123;            cur++;        &#125;        if(cur&gt;m) return 0;        ans=max(ans,cur);        if(cur!=i) swap(bit[cur],bit[i]);        for(int j=1;j&lt;=m;j++)&#123;            if(i!=j&amp;&amp;bit[j].test(i))&#123;                bit[j]^=bit[i];            &#125;        &#125;    &#125;    return ans;&#125;
P2447 [SDOI2010] 外星千足虫 - 洛谷
 4. 字符串匹配
bitset 可以在 O(nmw)O(\dfrac{nm}{w})O(wnm​) 的时间复杂度内求解字符串匹配，在 m 较小时比 kmp 更优秀，而且支持带修，具体的我们维护每个字符在哪些位置上出现过，记 iii 字符出现在 bib_{i}bi​ 集合的位置，现有匹配串 ststst，维护当前仍然合法的起始点集合 pospospos，则有 pos=pos∧(bsti&gt;&gt;i)pos=pos \land (b_{st_i}&gt;&gt;i)pos=pos∧(bsti​​&gt;&gt;i)。
 CF914F Substrings in a String
bitset 好神秘！
对 26 个字母各开一个 bitset，存这个字母出现的位置。
对于询问，新建一个 bitset。从前到后枚举询问串的每个位置 yi​，和这个字母对应的 bitset 右移 i 位取 and。
最终得到的 bitset 中 1 的个数即为询问串在原串出现次数。
 P4465 [国家集训队] JZPSTR
bitset，bitset，bitset！
虽然标程是分块加 SAM， 但是显然大家都不喜欢这么毒瘤的。注意到插入删除询问次数独立的都很少，并且字符集很少，考虑 bitset。我们维护每个字符在哪些位置上出现过，记 iii 字符出现在 bib_{i}bi​ 集合的位置，现有匹配串 ststst，维护当前仍然合法的起始点集合 pospospos，则有 pos=pos∧(bsti&gt;&gt;i)pos=pos \land (b_{st_i}&gt;&gt;i)pos=pos∧(bsti​​&gt;&gt;i)。
讲完了就好说了，强两个操作显然可以用位运算暴力，第二个就用我们上面的操作，时间复杂度是 O(nTw+nlw)O(\dfrac{nT}{w}+\dfrac{nl}{w})O(wnT​+wnl​) 其中 l=max⁡ilen⁡(zi)l=\max\limits_{i} \operatorname{len}(z_{i})l=imax​len(zi​)。
轻松最优解第二位，不知道第一位如何做到？
 5. 与莫队结合
bitset 常用于常规数据结构难以维护的的判定、统计问题，而莫队可以维护常规数据结构难以维护的区间信息。把两者结合起来使用可以同时利用两者的优势。
 P5355 [Ynoi Easy Round 2017] 由乃的玉米田
bitset 神秘密！
首先飞一个莫队上去，考虑加法操作如何解决，显然只要存在 x+y=kx+y=kx+y=k 即可满足，而题目只要求可行性而非要求个数，故考虑 bitset 维护值域数是否出现，那么加法操作就是 (s1&amp;(s1&lt;&lt;qry[i].x)).any()，其中 s1s1s1 表示值域维护。
然后考虑减法，显然减法可以维护一个 105−x10^5 -x105−x 的 bitset，设为 s2s2s2，那么判断方法就是：(s1&amp;(s2&gt;&gt;(1e5-qry[i].x))).any()。然后考虑乘法，枚举约数 O(nn)O(n\sqrt{n})O(nn​) 做。问题在于除法很难维护，考虑根号分治，&gt;n&gt;\sqrt{n}&gt;n​ 的暴力找。但是问题在于 ≤n\le \sqrt{n}≤n​ 怎么做？
先将询问按左端点降序排列。然后取一个指针，一开始指向 nnn。若当前询问的左端点为 lll，则将 [l,j][l,j][l,j] 上所有元素的贡献插入树状数组中，并使 j=l−1j=l-1j=l−1，完成后直接在树状数组上获取当前询问的答案，时间复杂度 O(nmax⁡iailog⁡n)O(n \sqrt{\max_i a_i}\log n )O(nmaxi​ai​​logn)，直接做即可。
 6. 维护连通性
bitset 常用于维护有向图连通性（无向图直接并查集就行）。，在正反图上跑一个 bitset 统计可达性就可以简单做到 O(n2w)O(\dfrac{n^2}{w})O(wn2​)。
P2881 [USACO07MAR] Ranking the Cows G - 洛谷
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>manacher算法</title>
    <url>/posts/517465e0/</url>
    <content><![CDATA[ 1.Manacher马拉车算法介绍
Manacher算法，又称马拉车算法。用于计算字符串每一个位置为对称中心的回文串长度，即可以用来查询一个长度为nnn的最长回文字串。他的时间复杂度是O(n)O(n)O(n)。是该情景中效率最高的（你不遍历整个字符串咋求出来）
回文串就是从头读到尾部和从尾部读到头都一样的字符串，例如“abbba”。一个回文串是镜像对称的，也就是说他反转之后也是和原串相同的，我们就是依靠这个性质来跑出马拉车算法的。
回文串有两种，一种是奇数的串，就是字符个数有奇数个。一种是偶数的串，例如“abba”就是一个。对于奇数的传，我们可以发现他的对称中心就是中间的‘b’，但是偶数的串呢。他就有2个对称中心，一个是第二个字符‘b’，一个是第三个字符‘b’（门前有两颗树，一颗是B树，另一个也是B树）
总之偶数的回文串对称中心有2个。
 2.暴力法求解
不是说讲马拉车吗？怎么先给我讲暴力法啦？
其实马拉车就是暴力法的改进。所以我们先讲讲暴力法如何求解。
我会枚举！，每次选一个点让后判断是不是回文串！
O(n3)O(n^3)O(n3)
我会优化！我们考虑到上述加粗的，一个回文串是镜像对称的，也就是说我们可以枚举中心，让后向左右两边拓展。例如以“abc”来说，以b为中心，a≠ca\ne ca=c，所以直接结束！
时间复杂度O(n2)O(n^2)O(n2)
写起来差不多就是核心这个循环，其中p[i]p[i]p[i]表示回文半径
while (s[i+p[i]+1]==s[i-p[i]-1])&#123;//+1和-1是向外拓展一格	p[i]++;&#125;
我们仔细思考一下为什么效率低，可以发现我们每次枚举端点都会扫一遍字符串，在最坏的情况下这个字符串里面有许多的回文串，而且都很长，效率近乎降至O(n2)O(n^2)O(n2)，所以马拉车就是利用上面镜像的性质，减少了重复检查。
 3.马拉车算法核心
这里引用Lstdo的博客图
首先我们设maxlmaxlmaxl和maxrmaxrmaxr跟别表示目前找到的回文串左端点最左的位置和右端点最右的位置，pospospos表示这个回文串的对称中心。
回到回文串，回文串的性质是镜像对称，也就是我们可以得出一个重要的性质回文的镜像也是回文。

例如上图，如果jjj处有一个回文字串，黄色部分完全一致，那么对称过去iii处也就肯定有一个回文字串。我们可以很简单的求出来jjj的位置就是pos⋅2−ipos\cdot 2-ipos⋅2−i的，也就是说我们可以直接把p[j]p[j]p[j]的值赋给p[i]p[i]p[i]…吗？
处理时，问题并没有那么的简单，这里我们将一一列举。

最普通的情况，这种情况就是上面的情况，我们就直接赋值即可。
如下，如果发现我们直接赋值的话，那么肯定会超过maxrmaxrmaxr

那就不能直接赋值，这个时候我们要尽可能缩在区间内，所以我们要和j−maxlj-maxlj−maxl和maxr−imaxr-imaxr−i取minminmin。
当iii在右端点的后面

这没办法啦，只能暴力扩展啦。

综上：

如果i&lt;maxri&lt;maxri&lt;maxr,就更新pip_ipi​
暴力拓展
更新maxrmaxrmaxr和pospospos
这就是马拉车，十分甚至九分的简单

等会！你这个我数了（不是哥们），是奇数串！那如果是偶数串呢？
我们不得不说这确实是一个问题，中心为一个字符或两个编码十分的麻烦。我们这里运用一个小技巧，就是在SSS的每一个字符左右插入一个不属于SSS的字符，比如说’#'，把“abcba”变成“#a#b#c#b#a#”，中心字符还是c，如果是偶数串，那么“abba”变为“#a#b#b#a#”唉这不就变成奇数串，中心就是两个b中间夹的“#”。但是还有一个问题，会越界啊。这个时候我们可以在开头和结尾各加上2个不同的字符，比如说“$”和“&amp;”，这样就变成了 ” $#a#b#c#b#a#&amp; “在暴力拓展的时候就不会越界了。
代码如下
// TODO：学麻辣烫车#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;const int MN=1.1*1e7+15;string s1,s;int p[MN*2];//这里一定要开2倍！void change()&#123;//直接用pushback怎么说，stl的魅力    s.push_back(&#x27;$&#x27;);    s.push_back(&#x27;#&#x27;);    for(int i=0;i&lt;s1.length();i++)&#123;        s.push_back(s1[i]);        s.push_back(&#x27;#&#x27;);    &#125;    s.push_back(&#x27;&amp;&#x27;);&#125;void manacher()&#123;    int r=0,c;    for(int i=1;i&lt;s.length();i++)&#123;        if(i&lt;r)&#123;//将两种情况合并            p[i]=min(p[c*2-i],p[c]+c-i);        &#125;        while (s[i+p[i]+1]==s[i-p[i]-1])        &#123;//暴力扩展，注意加一和减一是向外拓展            p[i]++;        &#125;        if(p[i]+i&gt;r)&#123;//如果超范围啦，直接就更新r和c变为当前节点的回文串            r=p[i]+i;            c=i;        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;s1;    change();    // cout&lt;&lt;s&lt;&lt;endl;    manacher();    int ans=0;    for(int i=0;i&lt;s.length();i++)&#123;        ans=max(ans,p[i]);    &#125;    // for(int i=0;i&lt;s.length();i++)&#123;    //     cout&lt;&lt;p[i]&lt;&lt;&quot; &quot;;    // &#125;    // cout&lt;&lt;endl;    cout&lt;&lt;ans;    return 0;&#125;
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title>prufer序列</title>
    <url>/posts/bee84f80/</url>
    <content><![CDATA[ 0. 前言
邦邦卡邦！又学会了新的双射方式！这次是关于树的双射内容！
 1. 定义与构建
 1.1 定义
prufer 序列，又叫做 prüfer 序列，因为键盘平时不太好打出来 ü 所以一般叫做 prufer 序列。他的作用就是可以将一个有标号的 nnn 个点的树映射成一个由 n−2n-2n−2 个在 [1,n][1,n][1,n] 范围内的数所组成的序列，同时这个序列也会唯一对应一个树。也就是说，prufer 序列和树结构构成双射。
 1.2 构建
钦定 nnn 为树的根节点，因为这个树我没有说这是有根树，所以不会影响。
每次选择编号最小的叶子结点并删掉它，再把它的父亲的编号加入序列中。重复此操作，直到树上只有两个点为止。显然，这两个点中必有一个是编号最大的点 nnn。为什么是两个点呢？假设我们再进行一次操作，那么进入序列的必然是 nnn。这是没有意义的操作。而如果我们进行了这次操作，末尾不为 nnn 的 prufer 序列将失去对应一个树的优秀性质。
以下是一个 n=7n=7n=7 的例子：

最终的序列就是 {2,2,3,3,2}\{2,2,3,3,2\}{2,2,3,3,2}。
 1.3 还原
那么可以看得出来，经过此操作，每个树都对应了一个 prufer 序列。如果我么能从 prufer 序列还原出树，那么就证明了树和 prufer 序列是一一对应的。
prufer 序列有一个性质如下：

树上每个点的度数等于在 prufer 序列上出现的次数加 111。

这个性质很好想，因为度数要么来自儿子要么来自父亲贡献，没删掉一个儿子，这个点就会在 prufer 序列上出现一次。而众所周知的是树上一个节点有且仅有一个父亲，所以出现次数加 111 就是度数。而对于根节点为 nnn 则不一样，它在 prufer 序列中出现的次数为它的儿子数减 111，即它的度数减 111。
有了这个性质，我们就可以得知没有出现在 prüfer 序列上的点，一定是叶子结点。
这样我们轻易就能得到树上最小的叶子结点的编号，就是没有在 prüfer 序列上出现的点。我们将这个叶子结点与 prüfer 序列上的第一个数连边，然后删除这个点和 prüfer 序列上的第一个数。如果将编号大于该叶子结点的编号减一，我们就得到了一个长度为 n−3n-3n−3 的 prüfer 序列，对应一个大小为 n−1n-1n−1 的树。因此可以使用同样的方法重复操作，再把最后剩下的点连向 nnn，就可以得到原树。
以下为 {2,2,3,3,2}\{2,2,3,3,2\}{2,2,3,3,2} 的构造：

度数：dg[1,7]={1,4,3,1,1,1,1}dg[1,7]=\{1,4,3,1,1,1,1\}dg[1,7]={1,4,3,1,1,1,1}。
取出 111，令 1→21\to 21→2，dg[1,7]={0,3,3,1,1,1,1}dg[1,7]=\{0,3,3,1,1,1,1\}dg[1,7]={0,3,3,1,1,1,1}。
取出 444，令 4→24\to 24→2，dg[1,7]={0,2,3,0,1,1,1}dg[1,7]=\{0,2,3,0,1,1,1\}dg[1,7]={0,2,3,0,1,1,1}。
取出 555，令 5→35\to 35→3，dg[1,7]={0,2,2,0,0,1,1}dg[1,7]=\{0,2,2,0,0,1,1\}dg[1,7]={0,2,2,0,0,1,1}。
取出 666，令 6→36\to 36→3，dg[1,7]={0,2,1,0,0,0,1}dg[1,7]=\{0,2,1,0,0,0,1\}dg[1,7]={0,2,1,0,0,0,1}。
取出 333，令 3→23\to 23→2，dg[1,7]={0,1,0,0,0,0,1}dg[1,7]=\{0,1,0,0,0,0,1\}dg[1,7]={0,1,0,0,0,0,1}。
prufer 序列遍历完，还剩下 n=7n=7n=7 和 222 号点，连接即可。

总连边：
1 24 25 36 33 27 2
可以自行验证，有结果：

故证明成立。
 1.4 线性时间做到构造与还原
显然可以使用堆做到 O(nlog⁡n)O(n\log n)O(nlogn) 的复杂度，但其实有更优的做法。
维护一个下标 ppp，初始值为最小的叶结点编号。重复以下操作：

删除编号为 ppp 的结点，并检查是否使其父亲成为叶结点。
设其父亲的编号为 xxx。先将 xxx 加入序列。若 xxx 成为了新的叶子结点，判断其与 ppp 的大小关系。若 x&lt;px&lt;px&lt;p，则立即删除 xxx，然后重复判断 xxx 的父亲；否则不管。
使 ppp 自增，直到 ppp 指向一个叶子结点为止。

因为每条边最多被访问一次（在删点的时候访问父亲），指针最多遍历每个点一次，所以复杂度是 O(n)O(n)O(n) 的。
这有点像可删堆的操作，可以结合理解。
对于还原类似，用同样的方法寻找编号最小的叶结点删除即可。
以下为 P6086 【模板】Prüfer 序列 的代码：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e6+15;int fa[MN],dg[MN],p[MN],n,m,ans;void TtoP()&#123;    for(int i=1;i&lt;n;i++)&#123;        cin&gt;&gt;fa[i];        dg[fa[i]]++;    &#125;    for(int i=1,x,j=1;i&lt;=n-2;i++,j++)&#123;        while(dg[j]) j++;        p[i]=fa[x=j];        while(i&lt;=n-2&amp;&amp;!--dg[p[i]]&amp;&amp;p[i]&lt;j)&#123;            p[++i]=fa[x=fa[x]];        &#125;    &#125;    for(int i=1;i&lt;=n-2;i++)&#123;        ans^=1ll*i*p[i];    &#125;&#125;void PtoT()&#123;    for(int i=1;i&lt;=n-2;i++)&#123;        cin&gt;&gt;p[i];        dg[p[i]]++;        p[n-1]=n;    &#125;    for(int i=1,x,j=1;i&lt;=n-1;i++,j++)&#123;        while(dg[j]) j++;        fa[x=j]=p[i];        while(i&lt;=n-1&amp;&amp;!--dg[p[i]]&amp;&amp;p[i]&lt;j) fa[x=fa[x]]=p[++i];    &#125;    for(int i=1;i&lt;=n-1;i++)&#123;        ans^=1ll*i*fa[i];    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    if(m==1)&#123;        TtoP();    &#125;else PtoT();    cout&lt;&lt;ans;    return 0;&#125;
 1.5 性质总结
说了这么多，我们来总结几个关键的性质来辅助做题。

Prufer 序列与树构成唯一双射，在计数问题中对一般树计数可以考虑直接对 prufer 序列计数。
树上每个点的度数等于在 prufer 序列上出现的次数加 111。
所有没在序列里出现过的点，一定是树中的叶子。
对于完全图 KnK_{n}Kn​ 有 nn−2n^{n-2}nn−2 颗生成树。（任意一个长度为 n−2n-2n−2 的值域 [1,n][1,n][1,n] 的序列计数）

我们对第四个结论进行推广：

nnn 个点形成有 kkk 颗树的有标号无根树森林，使得给定的 kkk 个点两两不属于同一棵树，此时的方案总数为 k⋅nn−k−1k\cdot n^{n-k-1}k⋅nn−k−1。
指定点度数的生成树方案为 (n−2)!∏i=1n(di−1)\dfrac{(n-2)!}{\prod_{i=1}^n (d_{i}-1)}∏i=1n​(di​−1)(n−2)!​。
若 nnn 个点已经被连成大小为 {si}i=1k\{s_{i}\}_{i=1}^k{si​}i=1k​ 的 kkk 个连通块，则在这些连通块之间加边构成生成树的方案数为 nk−2∏i=1ksin^{k-2}\prod_{i=1}^k s_{i}nk−2∏i=1k​si​。

推广 1 的证明：给定 nnn 个点和 kkk 个指定点，两两不在同一棵树的无根森林数：

每个指定点作为不同树的根，有根森林数 n n−kn^{\,n-k}nn−k。
无根森林对应有根森林，每棵树根可选择 kkk 种，调整得到：

k⋅n n−k−1.k \cdot n^{\,n-k-1}.
k⋅nn−k−1.
推广 2 的证明：指定 nnn 点度数 {di}\{d_i\}{di​} 的生成树数：

Prüfer 序列长度 n−2n-2n−2。
每点 viv_ivi​ 出现 di−1d_i-1di​−1 次。
多重排列计数：

(n−2)!∏i=1n(di−1)!.\frac{(n-2)!}{\prod_{i=1}^n (d_i-1)!}.
∏i=1n​(di​−1)!(n−2)!​.
推广 3 在后面例题会证明。
 2. 例题
 推广 2 P2290
显然。
 推广 3 CF156D Clues
设 sis_{i}si​ 为第 iii 个连通块的点数，did_{i}di​ 表示连通块在树上的度数。
那么有 Prufer 序列方案数：
(k−2)!(d1−1)!(d2−1)!…(dn−1)!\dfrac{(k-2)!}{(d_{1}-1)!(d_{2}-1)!\dots (d_{n}-1)!}
(d1​−1)!(d2​−1)!…(dn​−1)!(k−2)!​
而一个连通块连接边的方案为 ∏i=1ksidi\prod_{i=1}^k s_{i}^{d_{i}}∏i=1k​sidi​​。那么总方案数枚举 did_{i}di​乘起来即为：
∑di&gt;1,∑i=1kdi=2k−2(k−2)!(d1−1)!(d2−1)!…(dn−1)!∏i=1ksidi\sum\limits_{d_{i}&gt;1,\sum\limits_{i=1}^k d_{i}=2k-2}\dfrac{(k-2)!}{(d_{1}-1)!(d_{2}-1)!\dots (d_{n}-1)!} \prod_{i=1}^k s_{i}^{d_{i}}
di​&gt;1,i=1∑k​di​=2k−2∑​(d1​−1)!(d2​−1)!…(dn​−1)!(k−2)!​i=1∏k​sidi​​
设 ei=di−1e_{i}=d_{i}-1ei​=di​−1，有
∑ei&gt;0,∑i=1kei=k−2(k−2)!e1!e2!…ek!∏i=1ksiei+1\sum\limits_{e_{i}&gt;0,\sum\limits_{i=1}^k e_{i}=k-2}\dfrac{(k-2)!}{e_{1}!e_{2}!\dots e_{k}!} \prod_{i=1}^k s_{i}^{e_{i}+1}
ei​&gt;0,i=1∑k​ei​=k−2∑​e1​!e2​!…ek​!(k−2)!​i=1∏k​siei​+1​
考虑多元二项式定理：
(x1+⋯+xm)p=∑ci≥0,∑i=1mci=p(pc1,c2,⋯ ,cm)⋅∏i=1mxici(x_1 + \dots + x_m)^p = \sum_{c_i \ge 0,\sum_{i=1}^m c_i = p}\binom{p}{c_1, c_2, \cdots ,c_m}\cdot \prod_{i=1}^m{x_i}^{c_i}
(x1​+⋯+xm​)p=ci​≥0,∑i=1m​ci​=p∑​(c1​,c2​,⋯,cm​p​)⋅i=1∏m​xi​ci​
原式变为：
(s1+s2+⋯+sk)k−2⋅∏i=1ksi(s_1+s_2+\cdots+s_k)^{k-2}\cdot\prod_{i=1}^ks_i
(s1​+s2​+⋯+sk​)k−2⋅i=1∏k​si​
即：
nk−2⋅∏i=1ksin^{k-2}\cdot\prod_{i=1}^ks_i
nk−2⋅i=1∏k​si​
 P2624 [HNOI2008] 明明的烦恼
只给了一些点的度数，对于给定度数点的排列方案数也是可以算出来的，记 sum=∑i=1n(di−1)sum=\sum\limits_{i=1}^n (d_{i}-1)sum=i=1∑n​(di​−1)，令 cntcntcnt 表示已知度数的点的个数。那么由上述推论 2 有：
(n−2sum)×sum!∏i=1cnt(di−1)\binom{n-2}{sum}\times \frac{sum!}{\prod_{i=1}^{cnt} (d_{i}-1)}
(sumn−2​)×∏i=1cnt​(di​−1)sum!​
然后剩下的 n−cntn-cntn−cnt 个数任意插在 (n−sum−2)(n-sum-2)(n−sum−2) 的位置上即可，即 (n−cnt)n−sum−2(n-cnt)^{n-sum-2}(n−cnt)n−sum−2。答案就是乘起来即可，但是不给模数是有什么心事吗？我直接 python 喵了。
 CF917D Stranger Trees
等会，题面这个图还有题目背景，莫非是？

咳咳，回到正题，首先看到 “恰好” 直接哈气。用二项式反演反演成至少，有：gk=∑i=kn(ik)fi⇔fk=∑i=kn(−1)i−k(ik)gig_{k}=\sum\limits_{i=k} ^n \binom{i}{k} f_{i} \Leftrightarrow f_{k}=\sum\limits_{i=k}^n (-1)^{i-k} \binom{i}{k} g_{i}gk​=i=k∑n​(ki​)fi​⇔fk​=i=k∑n​(−1)i−k(ki​)gi​。其中 fff 为答案，ggg 为至少 kkk 条边相同的方案数。
然后考虑 ggg 怎么算，发现这玩意我们把钦定的 iii 条边断开，会形成 n−in-in−i 个连通块，而这些连通块都是独立树计数的。根据 Prufer 定理有任意连边方案数：
nm−2∏i=1msin^{m-2}\prod_{i=1}^m s_{i}
nm−2i=1∏m​si​
mmm 为连通块个数，其中 sis_{i}si​ 还是连通块大小。
然后考虑如何快速计算，发现如果直接做因为边不确定状压直接爆炸。数据范围 O(n3)O(n^3)O(n3)，考虑发掘性质。
我们考虑把 gkg_{k}gk​ 的组合意义拆分，前式子可以随便计算，而后面却要求我们快速不用状压计算。考虑 DP，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示 iii 子树内，分成了 jjj 个连通块，当前 iii 所在连通块大小为 kkk 的方案数。时间复杂度 O(n3)O(n^3)O(n3) 可以 O(1)O(1)O(1) 转移但是我认为是 O(n4)→O(n5)O(n^4)\to O(n^5)O(n4)→O(n5) 就很难泵。
但是我们显然有更好的做法，考虑我们只是在计算 ∏i=1msi\prod_{i=1}^m s_{i}∏i=1m​si​，考虑复杂度瓶颈就是在于这个 kkk 这一维度让我们的优化没有前途。考虑切换组合意义，发现 ∏i=1msi\prod_{i=1}^m s_{i}∏i=1m​si​ 的本质就是给每个连通块内部任意定根的方案数，把根是否确定放进状态中即可。
那么这很好考虑设 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示 iii 子树内，分成了 jjj 个连通块，iii 所在连通块是否定根的方案数，转移用背包对子树合并即可，时间复杂度 O(n2)O(n^2)O(n2)。
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>zxy思维题乱做</title>
    <url>/posts/e46562f0/</url>
    <content><![CDATA[有很大一部分来自于 zxy，课件等，一般都是很强的 Trick。
 7和8月
 CF1476F
考虑 DP，设 f(i)f(i)f(i) 表示前 iii 个灯可以点亮的最长前缀，有转移：

iii 朝右，若 f(i−1)≥if(i-1)\ge if(i−1)≥i，则 f(i)=max⁡(f(i−1),i+pi)f(i)=\max(f(i-1),i+p_i )f(i)=max(f(i−1),i+pi​)，若 f(i−1)&lt;if(i-1)&lt;if(i−1)&lt;i，则 f(i)=f(i−1)f(i)=f(i-1)f(i)=f(i−1)。
iii 朝左：不难发现只要将前缀覆盖到 i−pii-p_ii−pi​ 即可就行，设 jjj 为第一个 f(j)≥i−pif(j)\ge i-p_if(j)≥i−pi​ 的位置，那么 [j+1,i−1][j+1,i-1][j+1,i−1] 的位置都可以朝右，那么 f(i)=max⁡k=j+1i−1k+pkf(i)=\max\limits_{k=j+1}^{i-1}k+p_kf(i)=k=j+1maxi−1​k+pk​，可以二分 jjj 加 ST 表查出 max⁡[j+1,i−1]\max [j+1,i-1]max[j+1,i−1]。

反思：当我们要 DP 点覆盖的问题的时候，我们可以考虑覆盖一段前缀的形式。同时设计 DP 状态的时候一定要时刻考虑最小状态设计原则。
 HDU6157 The Karting
权值是负的！不能贪心，直接 DP。
但是状态怎么设计呢？考虑记录路径，但是显然会算重一堆。我们可以只考虑断电，让后用前缀和记录回路的贡献。
用 DP 来处理端点，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示前 iii 个点中，选出 jjj 个端点，其中从左往右的端点比从右往左的端点多了 kkk 个（k≥0k\ge 0k≥0），转移考虑当前点的贡献，一共四种情况：

不选这个点：f(i,j,k)←f(i−1,j,k)f(i,j,k)\leftarrow f(i-1,j,k)f(i,j,k)←f(i−1,j,k)；
选这个点但是只经过：f(i,j,k)←f(i−1,j−1,k)f(i,j,k)\leftarrow f(i-1,j-1,k)f(i,j,k)←f(i−1,j−1,k)；
选了这个点从左往右的端点：f(i,j,k)=←f(i−1,j−1.k−1)+a0−2×sif(i,j,k)=\leftarrow f(i-1,j-1.k-1)+a_0 -2\times s_if(i,j,k)=←f(i−1,j−1.k−1)+a0​−2×si​；
选了这个点从右往左的端点：$f(i,j,k)\leftarrow f(i-1,j-1,k+1) + a_0 + 2\times s_i $。

因为要走回去，那么答案就是 f(n,m,0)f(n,m,0)f(n,m,0)，时间复杂度 O(n3)O(n^3)O(n3)。
反思：对于匹配的问题，我们可以拆解贡献到匹配点，考虑到某一个匹配点时候带着贡献和需要匹配的记号转移，这样就能够保证转移的顺序性。
 P6944 Gem Island
好题！
直接飞上去 DP 直接爆炸。考虑分析性质，首先这个过程过于庞大，我们可以分析末状态的性质。先看看对于一种最终状态 a1,a2,…,ana_1,a_2,\dots,a_na1​,a2​,…,an​ 其发生的方案数，可以分为两个部分：

将 ddd 天分给 nnn 个人，钦定这 ddd 天是谁的手上的宝石数增加了：

∏i=1n(d−∑j=1i−1(aj−1)ai−1)=d!∏i=1n(ai−1)!\prod_{i=1}^n \binom{d-\sum_{j=1}^{i-1} (a_j -1)}{a_i-1}=\frac{d!}{\prod_{i=1}^n (a_i-1)!}
i=1∏n​(ai​−1d−∑j=1i−1​(aj​−1)​)=∏i=1n​(ai​−1)!d!​

对于每一天，计算当钦定的人手上宝石数增加的方案数，有：

∏i=1n(ai−1)!\prod_{i=1}^n (a_i -1)!
i=1∏n​(ai​−1)!
不
那么我可以直接 DP 求方案数啦，但是问题在于我怎么求方案中前 rrr 大的 aia_iai​ 和呢？有一种 DP 方法，叫搭楼梯的 dp 方法。
通俗易懂的，我们要用 DP 维护下面的东西：
***********************************************************
设 f(i,j)f(i,j)f(i,j) 表示当前最高的楼梯有 iii 列，楼梯里头 * 的总数为 jjj 的方案数，上面这个东西就是 f(3,59)f(3,59)f(3,59) 的一种方案。
转移很简单，考虑转移的时候在最高层加入一行，枚举这行里头有 kkk 个 *，让后从现有的 jjj 列里头选 kkk 列放到最左边，让后在这 kkk 行上面各加上一个 * 就是一种转移了。比如说上面的例子，枚举 k=2k=2k=2 的时候可以转移到 f(2,61)f(2,61)f(2,61)，转移系数为 (32)\binom{3}{2}(23​)，转移后的形态可以这么表示：
**          &lt;--- 新增的行***********************************************************
这种类似搭楼梯的逐层构造 DP，本质是对所有 “列高单调” 的状态等权枚举，将每一层的结构直接拆分贡献，凡是这类问题：

对象可以抽象为高度具有单调性的多列；
每一层的新增元素对目标量的贡献是可局部计算的（只依赖这一层的列数 kkk，而不依赖更复杂的全局信息）

那么我们就可以用这种转移做前 kkk 大（或小）的期望，总和，分布等。
回到本题，我们把宝石对应成 *，让后每一列对应一个人就可以啦。计算前 kkk 大的方案也就转化为了前 kkk 列的 * 的和，由于我们每次加入一行的那些列，不难观察出一定就是前 kkk 大的列，而且一次局部贡献只加入一个 *，所以可以直接计算。具体的，我们设 g(i,j)g(i,j)g(i,j) 表示当前维护前 iii 大，一共有 jjj 个宝石中所有方案数前 kkk 大的和，有转移：
g(i,j)=∑k=imin⁡(n,i)(g(k,j−i)+min⁡(i,r)×f(k,j−i))×(ki)g(i,j)=\sum_{k=i}^{\min(n,i)} (g(k,j-i) +\min(i,r) \times f(k,j-i))\times \binom{k}{i}
g(i,j)=k=i∑min(n,i)​(g(k,j−i)+min(i,r)×f(k,j−i))×(ik​)
其中 rrr 就是题目中所要的前 kkk 大。
答案就是 ∑i=1ng(i,d)∑i=1nf(i,d)\dfrac{\sum_{i=1}^n g(i,d)}{\sum_{i=1}^n f(i,d)}∑i=1n​f(i,d)∑i=1n​g(i,d)​。
反思：
对于这种多过程的题目，如果过程难以维护，我们可以考虑末状态有没有什么特殊性质。
学到了新的转移( •̀ ω •́ )y
哎我发现你过一段时间回来看这个题发现有些新的收获( •̀ ω •́ )y。
 CF1442
想 DP，但是发现太难了耶。因为操作过于难了，并不是 DP 过于难了。
我们考虑如何简化这个问题，发掘以下性质。首先不难发现所有连在一起的同颜色的点可以一起删。也就是缩点。
让后怎么做？先从简单情况入手，把万能的灰点暂时禁言。让后考虑树是一条链的情况怎么做，因为没有灰点且已经缩点的情况下，这个链一定是黑白相见的，设链长为 lenlenlen，那么答案就是 ⌊len2⌋+1\lfloor \dfrac{len}{2} \rfloor+1⌊2len​⌋+1，贪心策略是将出现次数较多的颜色删掉，让后剩下的连通块逐个删掉就可以了。
接着考虑树不是一条链的时候怎么做，发现上面的策略好像不太好去拓展，且有些情况下不是最优解。考虑再发掘一种策略，有一种策略：从最外层（度数为 111）把同色点一层一层删掉，设 lenlenlen 为直径，那么次数就是 ⌊len2⌋+1\lfloor\dfrac{len}{2} \rfloor+1⌊2len​⌋+1。不难发现这个策略更优，可以用势能分析得出。
接着考虑有灰点的情况，问题可以转化为我们给每一个灰点选择一种颜色，使得再次所点后直径长度最短。这种情况需要我们进行 dp 了。设 f(u,i)f(u,i)f(u,i) 表示 uuu 颜色为 iii 的最长链，g(u,i)g(u,i)g(u,i) 表示 uuu 颜色为 iii，经过 uuu 的最长路径，转移的时候把子树 vvv 合并上来：
g(u,i)←max⁡{g(u,i),min⁡(f(u,i)+f(v,j)+(i≠j))}g(u,i)\leftarrow\max\{ g(u,i),\min(f(u,i)+f(v,j)+(i\neq j)) \}
g(u,i)←max{g(u,i),min(f(u,i)+f(v,j)+(i=j))}
f(u,i)←max⁡{f(u,i),min⁡(f(v,j)+(i≠j))}f(u,i)\leftarrow \max \{ f(u,i),\min(f(v,j)+(i\neq j)) \}
f(u,i)←max{f(u,i),min(f(v,j)+(i=j))}
r=max⁡{min⁡(g(u,i))}r=\max\{\min(g(u,i))\}r=max{min(g(u,i))}，时间复杂度 O(n)O(n)O(n)。
反思：在分析问题的时候，我们通过发掘性质让我们的 dp 有的放矢。从简单问题入手，一步步发掘真相，类似于侦探的过程，这种是常见的思维技巧。
 CF1517F Reunion
直接统计十分困难，考虑转化问题，不难发现可以把问题转化为统计半径 ≥r\ge r≥r 的园的个数。但是如果你对这个进行计数 DP 的话你会发现这个极其容易算重，因为这个是存在问题。
我们考虑存在问题能不能转化为限制问题，这是计数问题中一个常用的思维技巧。不难转化为对于所有黑点周围 ≤r\le r≤r 点的并集不是所有点，这个问题是一个染色问题，我们可以进行 dp。考虑状态中记录黑点往上覆盖的最远距离，或者是子树内最深的还没有被覆盖的点。这两个信息只有一个有效，因为如果子树内有没有被覆盖的点，设点 xxx 能覆盖这个点，那么点 xxx 的覆盖范围一定是子树内黑点往上覆盖范围的超集。
考虑设 f(u,i)f(u,i)f(u,i) 表示子树 uuu 内，i≥0i\ge 0i≥0 则表明子树内黑点网上覆盖的最远距离是 iii，i&lt;0i&lt;0i&lt;0 则表示子树内最深没被覆盖点的深度为 i+1i+1i+1，转移要分讨四种情况，时间复杂度 O(n3)O(n^3)O(n3)。
反思：计数问题中所有限制问题优于存在限制问题。预计那这种会算重的存在性问题想一想能不能转化为限制性问题。
 CF1368H1
一个显然的想法是建出来网络流的图，即 SSS 连蓝色接口，红色接口连 TTT，矩形内的所有点也建出来，向四周连容量为 111 的无向边，然后对原图跑最大流就是答案。
显然会炸掉，考虑不能跑最大流，那怎么办，利用最大流最小割定理，我们可以把原命题转化为求最小割，转化一下就是把矩阵的所有点染蓝或者染红（代表最后和起点还是和终点联通），求所有染色方案下的最小端点异色边数。
考虑 DP，发现直接 DP 没太大啥用。考虑发掘性质，我们发现如果考虑整张图都是红色的情况下，那么割就是蓝色点数，现在问欧体转化为我们要把矩形中一些点改成蓝色使得割最小。那么有一个想法就是改点一定要挨着边界，让后要改要么改一整行要么改一整列。
那么有结论：最优染色方案一定是一整行或一整列颜色相同。对行 DP，翻转矩阵后对列再 DP 就可以了，时间复杂度 O(n)O(n)O(n)。
反思：从高复杂度算法开始，一步一步进行优化，这个和从简单问题推广到更难的问题一样。
最大流问题如果无法优化可以转化为最小割问题。手算最小割属于是一个常见套路。
 acg009c
区间 DP，设 f(i,0/1)f(i,0/1)f(i,0/1) 表示考虑到 iii 个，第 iii 划分到 A 或 B 的方案数。转移的话考虑 0→1,1→00\to 1,1 \to 00→1,1→0 即可，但是要满足两个性质：

区间内部满足条件。
区间两端满足条件。

让后发现第一个的决策集合是一个 [1,i][1,i][1,i] 的一个后缀，第 2 个是一个前缀。用前缀和维护，第一个用分段 for 处理，第二个双指针。
 CF573D
好题，但是田忌赛马。
有一个显然的想法就就是二分图带权最大匹配(或网络流），但是时间复杂度是 O(n3)O(n^3)O(n3) 及其难受，考虑 DP 但直接 DP 十分困难，考虑发掘一些性质。
利用贪心思想，先对 www 和 hhh 进行从小到大的排序，一个基本思想就是对应位置的相乘，用调整法不难证明这是最优决策，但是本题目中存在第 iii 个人不能骑自己的马，所以最优解可能不会取到。
考虑到这个限制只是限制自己不能骑自己的马，合理猜测 iii 位置匹配马的决策是一个范围，有结论：匹配范围为 [i−2,i+2][i-2,i+2][i−2,i+2]。证明考虑反证法，设 iii 的禁止匹配位置为 baniban_{i}bani​。那么反证法，假设如果在这个以外的范围选，那么最多向前会造成两次 (i,i−1)(i,i-1)(i,i−1) 无法匹配，自行画图发现这种情况最劣情况下也只会在 i−2i-2i−2 的情况形成匹配。
借用 _sys 的图：

完美匹配至少有三个红线和黑线相交整法不难证明如果两条线相交那么交换这两个匹配会得到更优的解。
让后考虑交换的过程，我们如果前 iii 个人和前 iii 匹马匹配完全，那么存在 k&lt;3k&lt;3k&lt;3，使得 [i,i+k][i,i+k][i,i+k] 这区间内的人和马匹配，可以用反证法证明。
故，设 fif_{i}fi​ 表示前 iii 个人和前 iii 匹马完成匹配的最大全职，所以从 fi−3,fi−2,fi−1f_{i-3},f_{i-2},f_{i-1}fi−3​,fi−2​,fi−1​ 转移过来即可，同时改成矩阵方式维护 DP 做动态 DP 即可，时间复杂度 O(27nlog⁡n)O(27n \log n)O(27nlogn)，其中 272727 是矩阵带来的常数。
提交记录
反思：限制过松的题目，我们可以通过强化限制使得题目范围的解缩小，让题目简化。
 AGC009E
我太拉了，还是看 大佬 的题解吧。
反思：在具有强烈过程性的题目可以往结果的方向猜性质，观察性质的时候可以观察操作是否具有什么特殊性质，例如本题的 kkk 叉树。
 CF1481E 还有 abc201F
不难发现每本书最多移动一次，移动多次一定是不优的。
把每本书的状态定义为 0/1 表示移动或不移动，枚举这本书的状态，如果以最后一本不动书为界限，那么前面的书那么前面的书如果属于同一种类，那么一定同时移动或者同时不移动，否则这本不动书就会使他们不能相聚。
所以我们枚举最后一本不动书，它后面的数一定要动，现在要决策它前面的书，其实就是选出来书种类的区间不能相交，那设 f(i)f(i)f(i) 表示前 iii 本书中最大的不动书个数，预处理每本书左端点 lil_ili​ 和右端点 rir_iri​ 以及出现次数 cnticnt_icnti​ 就简单了。
反思：状态设计如果没有思路，可以尝试使用枚举法来设计状态，有助于思考。
同类型的题：abc201f
 CF1474F
头脑风暴！
注意到 xxx 对答案一点用都没有，因为我们求的是长度，光一个 ddd 就能够确定答案了。
发现最长严格上升子序列的性质不太好刻画，我们考虑这个添加数的操作过程能不能以一种形式来表现出来。注意到每一个数具体取值只和最后一个数的变化有关，而且变化是连续的，考虑给它拍到二维平面上，横轴按照每一次添加一个数划分时间，纵轴为最后一个值的具体取值，原操作在二维平面上表现的是斜率为 1 或 -1 的一堆直线，如下图，红点表示一次插入操作的：

最长严格上升子序列的性质就很好刻画了，因为根据图来看其实就是最低点和最高点的极差就是我们的长度（因为斜率为 ±1\pm 1±1）。让后我们考虑这个子序列个数怎么解决。发现直接 DP 求解答案十分困难，考虑发掘性质，首先不难发现一个性质：一个段不可能贡献超过一种答案，即一个点不可能成为最低点或最高点。
这个性质有什么用呢，也就是说，我们可以统计对段的答案进行贡献统计。然而注意到段数极小（数据范围 nnn），值域极大，有一个强烈的矩阵味道，但是我到现在连状态都没设计耶？
最长严格上升子序列可能从任意值拼过来，考虑在状态中加上这一个，设 f(i,j)f(i,j)f(i,j) 表示目前计算到第 iii 段，末尾值为 jjj 的方案数，哎这矩阵味道对了，转移：
f(i,j)=∑k=0if(k,j−1)f(i,j)=\sum\limits_{k=0}^i f(k,j-1)
f(i,j)=k=0∑i​f(k,j−1)
矩阵快速幂优化，时间复杂度 O(n4log⁡∣V∣)O(n^4 \log |V|)O(n4log∣V∣)。
Submission #333002703
反思：状态设计中需要是可考虑当前状态能否刻画子问题，不要受限于定居思维。
 CF1463F
容易发现以最优解应是以某一循环节重复多次的形式。
考虑对循环节求解，发现数 iii 的躯体取值仅和前 max⁡(x,y)\max(x,y)max(x,y) 个数的选取情况有关，注意到 max⁡(x,y)≤22\max(x,y)\le 22max(x,y)≤22，考虑状压。因为循环节选取情况一样，所以我们只用遍历第一个循环节的数进行状压。
令 g=max⁡(x,y)g=\max(x,y)g=max(x,y)，全集为 UUU。设 f(i,S)f(i,S)f(i,S) 表示在第 iii 个点，前 ggg 个数选取状态为 SSS 的最优解。
记 ttt 表示 iii 不选的选取状态，那么有转移 f(i,t)=max⁡{f(i,t),f(i−1,s)}f(i,t)=\max\{ f(i,t),f(i-1,s) \}f(i,t)=max{f(i,t),f(i−1,s)}。
若选，则要满足 i−x,i−yi-x,i-yi−x,i−y 没有被选，那么有 f(i,t+1)=max⁡{f(i,t+1),f(i−1,s)+val(i)}f(i,t+1)=\max\{ f(i,t+1),f(i-1,s)+val(i)\}f(i,t+1)=max{f(i,t+1),f(i−1,s)+val(i)}。
其中 val(i)val(i)val(i) 表示 iii 能产生的贡献，具体的：若 L=x+yL=x+yL=x+y，那么原串可以被分为多个长度为 LLL 的循环节，个数不妨设为 numnumnum 个，和最后的 n mod Ln \bmod LnmodL 的遗留串，不妨设长度为 L′L&#x27;L′。
若 i≤L′i\le L&#x27;i≤L′，那么 val(i)=num+1val(i)=num+1val(i)=num+1，反之则为 numnumnum，故可以直接做。
MLE 了记得滚动数组。
反思：若状态转移过大的时候，考虑找规律，矩阵快速幂，或者找循环节。
 Cf1188D
题目要求的就是求：
min⁡x≥0∑cnt1(x+max⁡a−ai)\min_{x\ge 0} \sum cnt1(x+\max a-a_i)
x≥0min​∑cnt1(x+maxa−ai​)
其中 cnt1cnt1cnt1 表示二进制位中 1 的个数，为了方便不妨令 ai←max⁡a−aia_i \leftarrow \max a-a_iai​←maxa−ai​。
考虑如何求解这个式子，我们考虑按位规划，我们考虑以下信息：

xxx 在这一位规划的代价。
所有 aia_iai​ 在这一位的出现情况。
aia_iai​ 是否在之前的规划中出现过进位。

如果我们直接暴力状压进位的话，时间复杂度是 O(n2n)O(n2^n)O(n2n)，及其难受，但是，我们考虑到如果只保留前 i−1i-1i−1 位，越大的 aia_iai​ 约有可能进位，如果我们把所有 aia_iai​ 排序后，那么发现进位的一定是 aaa 的一个前缀。故设 f(i,j)f(i,j)f(i,j) 表示考虑到第 iii 位，有 jjj 个数发生仅为的最小代价，时间房租啊都 O(nlog⁡nlog⁡∣a∣)O(n\log n \log |a|)O(nlognlog∣a∣)。
反思：我们在 dp 优化过程中可以考虑只保留我们需要计算代价相关的状态，这是一个常见的 dp 优化方式。
 CF1539E
首先答案可以抽象为 0/1 相间的串，进一步，可以把答案看作 0 一段，1 一段的串。
如果说，我们答案串里面有一串 0，区间在 [l,r][l,r][l,r]，那么这一段给出的每一个数一定满足：

al,i≤ki≤bl,ia_{l,i}\le k_i \le b_{l,i}al,i​≤ki​≤bl,i​
ar,i≤kl−1≤br,ia_{r,i}\le k_{l-1} \le b_{r,i}ar,i​≤kl−1​≤br,i​

考虑到操作对后续有影响，而对前面没有影响，考虑倒着确定每一个数，倒着扫。维护 0 一段 1 一段的合法区间，每扫一个位置看看上面第二个条件是否满足，如果可以就转移。对于转移是否合法可以用布尔加与运算维护。时间复杂度 O(n)O(n)O(n)。
反思：对于答案是 01 交错的题目，要有把答案切成许多全 1 或全 0 串的思路。对于值要满足后面会出现的限制条件，可以考虑倒着扫。
 CF375E
注意到红色位置没有一丁点用，而且交换操作是很难记录的。注意到黑点总数是固定的，而且交换时任意位置进行交换，不妨考虑让子树内钦定放了几个黑点。
但是这个转化还没有解决 ≤x\le x≤x 的问题，可以满足子树内（不包括 uuu）的点满足条件，这么设计状态是可以的，但是如果包括 uuu 了就得直到谁给 uuu 产生贡献。如果第三维度加上距离 xxx 不好确定，因为贡献不唯一，但是如果我们钦定谁能解决 uuu 的问题的话那么问题就很好做了。
即，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示 iii 子树内放 jjj 个黑点，用 kkk 点解决 iii 点距离的问题。满足的最小代价。
转移考虑枚举第三维这个点具体是什么，从儿子合并上来，有分类讨论：

若儿子 vvv 第三维 k′=kk&#x27;=kk′=k：那么有 f(i,j+j′,k)←f(i,j,k)+f(v,j′,k)f(i,j+j&#x27;,k)\leftarrow f(i,j,k)+f(v,j&#x27;,k)f(i,j+j′,k)←f(i,j,k)+f(v,j′,k)
若儿子 vvv 第三维 k′≠kk&#x27; \neq kk′=k：考虑到父亲肯定不会选儿子 vvv 子树内的点，孩子也不会选子树外的，证明可以考虑调整法。 那么我们合并完 f(i,j+j′.k)f(i,j+j&#x27;.k)f(i,j+j′.k) 之后直接找到对于每个 vvv 子树内 k′k&#x27;k′ 对应最小的 f(v,j′,k′)f(v,j&#x27;,k&#x27;)f(v,j′,k′) 转移即可，时间复杂度 O(n3)O(n^3)O(n3)。

反思：问题前后相互影响的时候，或者操作是全局的，可以尝试把操作部分定义到局部变量里面跟翻遍我们去处理。
卡空间，用 short 即可：
提交记录
 P5289 皮配
题面过于复杂，有一个显然的想法就是让导师们去找学生，设 f(i,j,k,p)f(i,j,k,p)f(i,j,k,p) 表示四个导师选的人数状态下的方案数，转移判断满不满足题目中所给的派系和阵营限制即可，时间复杂度 O(nm4)O(nm^4)O(nm4)，不难发现只需要确定三个即可，时间复杂度 O(nm3)O(nm^3)O(nm3)。然后就不会了。
观察这个 DP 及其难以优化，因为如果我们缺任何一个信息都无法描述完整的子问题，而且复杂度要求的可是 O(nm)O(nm)O(nm)，你只知道一个信息那么肯定啥也导出不了啊。我们考虑发掘几个性质：

确定一个派系和一个阵营可以唯一确定一位导师。
题目中 ban 导师的相当于不选钦定的派系和阵营。

上述性质启示我们让每一个学生去确定它们的派系和阵营，而不是导师去确定学生。但是还有我们的 “坏” 学生，不喜欢选的。我们先丢掉它们，先考虑 k=0k=0k=0 的部分分。
有一个显然的 DP 就是 f(i,j)f(i,j)f(i,j) 表示 iii 个蓝阵营的人，jjj 个鸭阵营的人的方案数，剩余两个可以由这两个状态唯一表示出来，时间复杂度 O(nm2)O(nm^2)O(nm2)，仍无法通过。正解启示 O(nm)O(nm)O(nm)，考虑进一步发掘性质：

题目中学生来自的城市限制，和学校限制是互相独立互不冲突的。

这个性质启发我们分离上面状态设计中的 i,ji,ji,j。那么不妨设 f(i)f(i)f(i) 表示蓝阵营有 iii 个人的方案数，g(i)g(i)g(i) 表示鸭阵营有 iii 个人的方案数，两个答案可以通过乘法原理分别算出来之后乘起来即可，时间复杂度 O(nm)O(nm)O(nm)。
现在考虑 k&gt;0k&gt;0k&gt;0，一个重要的观察是 k≤30k\le 30k≤30。状压、枚举？都不对。我们上面的计算答案过程中体现了乘法原理的思想，也就是说我们也可以分离 “坏学生” 和 “好学生”，好学生单独做，坏学生单独做，最后乘起来即可。
坏学生的限制怎么处理，我们肯定不能用 O(nm)O(nm)O(nm) 的算法了，这个算法肯定是无法处理我们的限制的。回看我们之前 O(nm2)O(nm^2)O(nm2) 的解法，这个就能够很好的处理性质，因为状态能够表示所有派系阵营选择人数，我们可以用这个算法处理坏学生就可以啦。时间复杂度做的话是 O(k2sm)O(k^2sm)O(k2sm) 的。
那么时间复杂度就是 O(nm+k2sm)O(nm+k^2 sm)O(nm+k2sm)。
总结：

我们在设计状态的时候，应当尽量个限制紧密贴合。在优化 DP 的时候我们要考虑我们计算贡献具体需要什么信息，我们需要什么信息就足够了，去掉冗余的无用信息。
题目可能会故意引导你走向死路，如果一个方向想不通，不妨正难则反或换一种方法想，这里体现的是正难则反的思路。

 P7214 治疗计划
把未感染和感染抽象为 0/1，那么原问题可以转化为初始有一个全为 111 的序列，可以在特定时间进行一次区间覆盖操作（有代价），111 会向左右扩散，问能不能将整个序列全部覆盖为 0 且使得操作代价最小。
对于选择区间进行覆盖的问题，这一类经典问题有一种状态设计就是设 f(i)f(i)f(i) 表示将 [1,i][1,i][1,i] 这个前缀进行覆盖的最小代价。但是问题在于这样转移是 O(nm)O(nm)O(nm) 的不太好搞，考虑这个 mmm 的瓶颈就是在于我们需要知道每一个覆盖区间右端点在哪里。考虑切换一下 dp 状态，设 f(i)f(i)f(i) 表示将 [1,ri][1,r_i][1,ri​] 覆盖的最小代价，转移通过 ttt 的偏序关系进行转移：
f(i)←f(j)+cirj−li+1≥∣ti−tj∣\begin{aligned}f(i) &amp; \leftarrow f(j)+c_i &amp; r_j -l_i+1 \ge |t_i -t_j| \end{aligned}
f(i)​←f(j)+ci​​rj​−li​+1≥∣ti​−tj​∣​
时间复杂度还是 O(nm)O(nm)O(nm)，无敌了。而且还自带两个偏序关系更是逆天。但是观察这个 DP 是一个类似于最短路形式的转移（说人话就是转移代价只和目标的代价有关），考虑用 Dijkstra 优化这个 DP。让后绝对值可以通过对 ttt 排序去掉，对于转移可以用线段树优化这个最小值转移，势能分析有时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
总结：
这个题目有一个巨大的卡阻就是在于 DP 容易选择会以时间作为主体，这样的话你无论怎么都无法优化掉时间这一维。一开始想的就是 f(i,j)f(i,j)f(i,j) 添加了时间 jjj 这一个维度，但是发现这个枚举时间反而成为了瓶颈。这个时候，我们需要分析，我们知道什么就够了。分析下来 jjj 反而可以从转移中天然的去掉，这样我们就做到了优化 DP 的过程。
 CF553E
考虑倒着 DP，设 f(i,j)f(i,j)f(i,j) 表示第 iii 个点走到 nnn，当前时间为 jjj 的期望。有转移：
f(u,j)=min⁡v∈son(i){∑kf(v,j+k)⋅pu,k}+wif(u,j)=\min_{v\in son(i)} \{ \sum_{k} f(v,j+k)\cdot p_{u,k} \}+w_i
f(u,j)=v∈son(i)min​{k∑​f(v,j+k)⋅pu,k​}+wi​
末状态 f(u,i)=dis(u,n)+x,i&gt;tf(u,i)=dis(u,n)+x,i&gt;tf(u,i)=dis(u,n)+x,i&gt;t，f(n,i)=0,i≤tf(n,i)=0,i\le tf(n,i)=0,i≤t
时间复杂度 O(nt2)O(nt^2)O(nt2)，无法通过，考虑优化，发现一堆优化板子都套不上去，但是发现 FFT 可以套上去。考虑 FFT 优化，但是注意到这个玩意差卷积不能卷因为这玩意是半在线的。考虑分治 FFT，但是对什么进行分治呢？考虑分析转移方程，注意到方程中时间的转移时具有顺序的，可以进行 CDQ。不妨对时间一维分治。
具体的，记 g(u,v),jg_{(u,v),j}g(u,v),j​ 来表示 ∑k=1tp(u,v),k×f(v,j+k)\sum_{k=1}^t p_{(u,v),k} \times f(v,j+k)∑k=1t​p(u,v),k​×f(v,j+k)，用 f→gf \to gf→g，在分治底层计算出 f(u,j)=min⁡v∈son(i){∑kf(v,j+k)⋅pu,k}+wif(u,j)=\min_{v\in son(i)} \{ \sum_{k} f(v,j+k)\cdot p_{u,k} \}+w_if(u,j)=minv∈son(i)​{∑k​f(v,j+k)⋅pu,k​}+wi​，时间复杂度 O(mtlog⁡2t)O(mt\log^2 t)O(mtlog2t)。
好消息是又学会了一个科技。
反思：DP 优化不仅仅可以从状态优化和一类特殊的转移优化，也可以通过转移的顺序进行优化。
 P3226 集合选数
纯纯构造题，首先 1≤n≤201\le n \le 201≤n≤20 可以通过状压枚举子集做到 O(3n)O(3^n)O(3n)，通过高位前缀和有 O(n2n)O(n2^n)O(n2n)。当然这都不是重点，问题是 n≤105n\le 10^5n≤105。
考虑分析性质，先简化问题，从只有 2x2x2x 的性质。考虑转化模型，让 x→2xx\to 2xx→2x 连边。那么分析图性质不难发现图形成了一条一条的链，那么原命题相当于在上面求解独立集。
接着考虑 3x3x3x 的性质，让 x→3xx\to 3xx→3x，发现图转化为了如下的形态：

那么不难发现图形成了网格图的结构，但原命题相当于还是在上面求解独立集问题。分析这个网格图，发现行数大约为 log⁡2n\log_{2} nlog2​n，列数大约为 log⁡3n\log_{3} nlog3​n，数量极小。考虑状压求解独立集即可。设 f(i,S)f(i,S)f(i,S) 表示考虑到第 iii 行，一行选取数状态为 SSS。预处理合法状态转移即可。
总结：
我们可以通过图论等模型来对题目性质进行进一步转化，同时从简单问题出发，一步一步添加限制也是一个思维角度，在添加限制的过程中会发现一些奇妙的性质。
 CF830D
这玩意好像直接 DP 求发现我们无法确定这个转移顺序和 DP 主体，有可能是路径长度或者树本身。考虑从这个图发掘一些性质，手摸几个小深度的不难发现一些小性质（仅对正解有启示作用）：

一定存在经过所有点的路径（即哈密顿路径），且路径起点终点一定是叶子，这个路径一定算入答案中。
kkk 树的两个孩子由 k−1k-1k−1 树构成，同理 k−1k-1k−1 两个孩子由 k−2k-2k−2 树构成 ，以此类推。
路径可以看作一条有向链。

由于仅对正解起启示作用，故不给详细证明。性质 1 的证明可以归纳法证明，由叶子到叶子的哈密顿路径可在每个父节点处用左右子树的哈密顿路径路递归拼接得到，因此总能存在经过所有顶点的简单路径。
同时结合性质 2，任一节点的子树在哈密顿路径中必须整体连续出现，且路径端点必是叶子，因此全局路径只能自底向上由叶子路径块依次合并成更大的块，否则无法覆盖所有组合且会漏算。启示我们 DP 的主体以树为主体而非路径长度，顺序为自底向上合并。
让后设 f(i)f(i)f(i) 表示 iii 树的贡献，但是发现合并贡献的时候不知道信息，考虑添加一维 jjj 表示有 jjj 条路径链的方案数。转移如下：
f(i,j)←{f(i−1,k)⋅f(i−1,j−k)不算根f(i−1,k)⋅f(i−1,j−k−1)算根f(i−1,k)⋅f(i−1,j−k)⋅2k根合并一条f(i−1,k)⋅f(i−1,j−k+1)⋅k(k+1)根合并两条f(i,j) \leftarrow
\begin{cases}
f(i-1,k)\cdot f(i-1,j-k) &amp; \text{不算根} \\
f(i-1,k)\cdot f(i-1,j-k-1) &amp; \text{算根} \\
f(i-1,k)\cdot f(i-1,j-k) \cdot 2k &amp; \text{根合并一条} \\
f(i-1,k)\cdot f(i-1,j-k+1) \cdot k(k+1) &amp; \text{根合并两条} \\
\end{cases}
f(i,j)←⎩⎪⎪⎪⎪⎨⎪⎪⎪⎪⎧​f(i−1,k)⋅f(i−1,j−k)f(i−1,k)⋅f(i−1,j−k−1)f(i−1,k)⋅f(i−1,j−k)⋅2kf(i−1,k)⋅f(i−1,j−k+1)⋅k(k+1)​不算根算根根合并一条根合并两条​
时间复杂度 O(n3)O(n^3)O(n3)。
提交记录
总结：
DP 顺序和方案顺序是不一样的，这道题通过类似于自底向上的合并顺序将若干条（有向）路径合并到一起。
有的时候不好确定 DP 主体和顺序的时候，可以考虑发掘一些小性质，通过小性质将不合法的转移顺序排除。
路径问题可以看作几个有向链的合并过程。
 gym102538H
这道题和上面一样，也是路径计数问题并且考虑的是有向链的合并过程。
首先考虑转移顺序，分析性质发现：

成环的部分一定是 1[ai]1[a_i]1[ai​] 所覆盖的。
环可以拆成两个有向链。

考虑 DP，首先对 aia_iai​ 排序从小到大覆盖区间，简化问题。每次增量一个左部的点，然后考虑它连出去的两条边，达到的效果就是合并两条路径。
设 f(i,j)f(i,j)f(i,j) 表示当前考虑前 iii 个点，形成了 jjj 条路径，转移有两个：

添加 ai−ai−1a_i -a_{i-1}ai​−ai−1​ 个右部单点：f(i,j)=∑k=0ai−ai−1f(i−1,j−k)⋅(ai−ai−1k)f(i,j)=\sum_{k=0}^{a_i-a_{i-1}} f(i-1,j-k) \cdot \binom{a_i-a_{i-1}}{k}f(i,j)=∑k=0ai​−ai−1​​f(i−1,j−k)⋅(kai​−ai−1​​)。
取两条路径合并：f(i,j)=f(i,j+1)×j(j+1)f(i,j)=f(i,j+1)\times j(j+1)f(i,j)=f(i,j+1)×j(j+1)。

时间复杂度 O(n2)O(n^2)O(n2)。
总结：上面两道题给我们了对路径计数问题的一种新看法：有向链的分散与合并。DP 的顺序和方案顺序可能并不一致。
 CF235D
首先很难发现这玩意就是让你求概率而并非期望，因为递归次数可以分配到每个点上，权值为 1，所以答案就是概率求和。
让后考虑概率怎么求，先定义概率是什么，我们发现如果一个点 uuu 要想给另一个点 vvv 组合，即选取点 uuu 为点分治中心，中心与 vvv 联通的概率。贡献的话，那么必须要保证 u→vu \to vu→v 的路径上必须没有点被删，即 uuu 是第一个被删的。大胆猜想概率就是 1dis(u,v)\dfrac{1}{dis(u,v)}dis(u,v)1​，考虑证明用归纳法证明：

若直接删除 uuu，概率就是 1n\dfrac{1}{n}n1​。
若没有删除，那么贡献必须保证删除点之后 u,vu,vu,v 联通。删除一个点的概率为 n−dis(u,v)n\dfrac{n-dis(u,v)}{n}nn−dis(u,v)​，子图内概率为 1dis(u,v)\dfrac{1}{dis(u,v)}dis(u,v)1​，故这种情况概率是 n−dis(u,v)n⋅dis(u,v)\dfrac{n-dis(u,v)}{n \cdot dis(u,v)}n⋅dis(u,v)n−dis(u,v)​

不难发现加起来就是 1dis(u,v)\dfrac{1}{dis(u,v)}dis(u,v)1​，暴力枚举点对时间复杂度 O(n2log⁡n)O(n^2 \log n)O(n2logn)。
考虑放到基环树上怎么做，发现这个 disdisdis 会出现环上两个路径的问题，概率上这两个路径的权重是等价的。考虑如何同时统计两个环上路径的概率，发现很难统计会算重。正难则反，考虑不遍历环，我们直接容斥，设两个路径长度分别为 x,yx,yx,y，令 u,vu,vu,v 到自己树根的距离为 dis(u),dis(v)dis(u),dis(v)dis(u),dis(v)，那么容斥就是 1dis(u)+dis(v)+x+1dis(u)+dis(v)+y−1dis(u)+dis(v)+x+y\dfrac{1}{dis(u)+dis(v)+x}+\dfrac{1}{dis(u)+dis(v)+y}-\dfrac{1}{dis(u)+dis(v)+x+y}dis(u)+dis(v)+x1​+dis(u)+dis(v)+y1​−dis(u)+dis(v)+x+y1​，即多算了两个路径都联通的贡献，时间复杂度 O(n2log⁡n)O(n^2 \log n)O(n2logn)。
总结：
合理利用期望的线性性，要分清是求期望还是概率，别一上去发现求的是概率就搞笑了。
从简单往难推是一个合理的思考思路。
 CF1608F
有一个显然的想法就是状压所有我们选过的数，发现时间复杂度是 O(n2nlog⁡∣V∣)O(n2^n \log |V|)O(n2nlog∣V∣)，及其难泵，考虑分析 mex 运算的性质。

当前 aia_iai​ 选的数比 mex 大，mex 取值不变，同理选的小，不过我们不考虑小的情况从小到大选。
每个位置 mex 的取值是具有限制的。是一个值域范围。

我们考虑我们的状态设计，我么需要在规划完前缀 iii 的时候得到它的 mex，也就是我们的状态必须有这两个维度。除此之外我们还需要所有大于 mex 的值才能让我们转移 mex，但是这不又回到了状压了吗？
我们考虑寻找大于 mex 的等价性，如果我们在一个数对 mex 产生贡献的时候再去计算的话就可以啦。设 f(i,j,k)f(i,j,k)f(i,j,k)，表示目前到第 iii 个，大于 mex 的数为 jjj 个，但是我们未确定这些数，mex 为 kkk 的方案数。

ai&lt;ka_i &lt; kai​&lt;k，对 mexmexmex 不会造成影响：f(i+1,j,k)←f(i,j,k)⋅kf(i+1,j,k) \leftarrow f(i,j,k) \cdot kf(i+1,j,k)←f(i,j,k)⋅k
ai&gt;ka_i &gt; kai​&gt;k，对 mexmexmex 不会造成影响，但是要考虑它是归入已有的未确定的值中：
f(i+1,j,k)←f(i,j,k)⋅jf(i+1,j,k) \leftarrow f(i,j,k) \cdot jf(i+1,j,k)←f(i,j,k)⋅j；
还是新增一种未确定的值：
f(i+1,j+1,k)←f(i,j,k)f(i+1,j+1,k) \leftarrow f(i,j,k)f(i+1,j+1,k)←f(i,j,k)
ai=ka_i = kai​=k，我们改变 mexmexmex 变成 ttt（t&gt;kt &gt; kt&gt;k），那么需要用卡未确定的值来填补 (k,t)(k,t)(k,t) 的这一段，
方案数就是排列数 Ajk−t−1:f(i+1,j−(t−k−1),t)←f(i,j,k)⋅j!(j−(k−t−1))!A^{k-t-1}_j: f(i+1,j-(t-k-1),t) \leftarrow f(i,j,k) \cdot \frac{j!}{(j-(k-t-1))!}Ajk−t−1​:f(i+1,j−(t−k−1),t)←f(i,j,k)⋅(j−(k−t−1))!j!​

时间复杂度 O(n2k2)O(n^2 k^2)O(n2k2)，考虑优化，我们把最后一种转移优化一下，把状态偏移：f′(i,j+k,k)=f(i,j,k)f&#x27;(i,j+k,k)=f(i,j,k)f′(i,j+k,k)=f(i,j,k)，最后一种转移可以对第三维做前缀和，其他转移同下：
f′(i+1,j,k)←j⋅f′(i,j,k)f′(i+1,j+1,k)←f′(i,j,k)f′(i+1,j+1,t)←f′(i,j,k)⋅(j−k)!(j−t)!f&#x27;(i+1,j,k) \leftarrow j\cdot f&#x27;(i,j,k) \\
f&#x27;(i+1,j+1,k)  \leftarrow f&#x27;(i,j,k) \\
f&#x27;(i+1,j+1,t)  \leftarrow f&#x27;(i,j,k)\cdot\frac{(j-k)!}{(j-t)!}
f′(i+1,j,k)←j⋅f′(i,j,k)f′(i+1,j+1,k)←f′(i,j,k)f′(i+1,j+1,t)←f′(i,j,k)⋅(j−t)!(j−k)!​
时间复杂度 O(n2k)O(n^2 k)O(n2k)。
总结：

能需要根据限制的特性，提前或延迟确定一些元素的过程。

 HDU 6566
有一个 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示 iii 子树内权重和为 jjj，当前点选不选的最大权值。时间复杂度 O(Tnm2)O(Tnm^2)O(Tnm2) 无法通过。考虑优化，我们用 dfs 序转移来进行优化，但是发现 dfs 序从 i→i+1i\to i+1i→i+1 的时候进行转移，若 i+1i+1i+1 对应的节点在 iii 对应的节点的上方时，就可能不知道 i+1i+1i+1 选取的情况，而且暴力状压是不行的。
发掘性质，dfn 相邻的点的移动轨迹一定是往上跳若干步然后往下走一步（这个性质很有用），官方题解告诉我们先进行轻重链剖分 然后划定 dfs 序的时候最后遍历重儿子 这样你在 i→i+1i\to i+1i→i+1 的时候会直接跳过上面的一段重链，我们发现对于每个点只需要记录每个重链的链底就好了，由轻重子树剖分性质不难有状压状态数为 O(2log⁡n)=O(n)O(2^{\log n})=O(n)O(2logn)=O(n)。
设 f(i,S,j)f(i,S,j)f(i,S,j) 表示考虑到 dfn 为 iii 的点，当前根的链底的点状态为 SSS，已经用了容量为 jjj，转移可以写成 O(1)O(1)O(1)，时间复杂度 O(n2m)O(n^2m)O(n2m)。
反思：头一次见树形 DP 还可以转到 DFS 序上进行操作，属于是切换了转移顺序。发现就是如果你切换转移顺序可以利用切换至后带来的特殊性质，使得状态是可以减小。
 P7213
这题真是无敌了，想 30 分钟结果连状态都没设出来。
直接 DP 发现没有什么好玩意，考虑发掘一些性质，发现性质是真 dmt 的难找：

序列 A 所代表的末状态 hhh 所构成的集合其取值一定是一个 [1,n][1,n][1,n] 的排列。
震柱子从 2 到 1 一定是值域从大到小震。
操作造成贡献是对值域上位置最靠后的值操作。

由上面三个操作可以一个操作的导出：从值域上从大到小，我们将两个位置位置靠前的减。发现这个没有什么前途因为我试了 www。
考虑性质都是从位置靠后的值操作，有一个操作直接导出就是位置从后往前扫，维护当前值最后一个出现的位置，如果没有出现过，就维护不变，否则减 1。
让后发现每一次都要执行这个操作，如何做到 O(n)O(n)O(n) 而不是 O(n2)O(n^2)O(n2) 操作，发现如果当前柱子之后有高度为 1∼h1\sim h1∼h 的柱子各一根，那么当前柱子及之前的柱子，如果高度 ≤h\le h≤h，都会被直接震没。
发现这个玩意及其有用，我们考虑在这个上面 DP，借鉴 CF1608F 的思路，设 f(i,j)f(i,j)f(i,j) 表示进行到第 iii 个，取出集合最大值为 jjj 的方案数。
方便转移，我们需要设定几个参数：

cnt0cnt0cnt0：表示后 i−1i-1i−1 钦定消失的数量。
cnt1cnt1cnt1：表示后 i−1i-1i−1 钦定存在的数量。

此外需要区分一下同样高度的两个柱子（比如染色）以便转移，最终答案就需要除掉 2n2^n2n。
分类讨论：

如果 iii 钦定消失，那么 jjj 不变，从 f(i−1,j)f(i-1,j)f(i−1,j) 转移，此时有 2j2j2j 个可用高度，而 jjj 个给了取出集合，还有 cnt0cnt0cnt0 个已经钦定，那么系数就是 j−cnt0j-cnt0j−cnt0。
如果 iii 钦定保留，我们同样考虑它的 hhh 取值：

如果 hi&gt;j+1h_{i}&gt;j+1hi​&gt;j+1，我们只能稍后进行确定，从 f(i−1,j)f(i-1,j)f(i−1,j) 转移系数为 1。
若 hi=j+1h_{i}=j+1hi​=j+1，有些标准柱的高度还未确定，所以我们需要考虑接起来之后的高度阈值。我们枚举一个最大值 kkk，此时从 f(i,k)→f(i−1,j)f(i,k)\to f(i-1,j)f(i,k)→f(i−1,j)，计算系数有：

选定位置 (cnt1−jk−j−1)\dbinom{cnt1-j}{k-j-1}(k−j−1cnt1−j​)。
确定当前长度 (k−j+1)(k-j+1)(k−j+1)。
考虑 k−j+1k-j+1k−j+1 的形成方案数，令其为 ggg。
乘起来即可。





现在考虑 ggg 的转移，我们枚举最后产生的高度 jjj，那么有：

h≤j−1h\le j-1h≤j−1 和 h&gt;j+1h&gt; j+1h&gt;j+1，显然不会互相产生影响。这部分的系数为 gj−1×gi−jg_{j-1}\times g_{i-j}gj−1​×gi−j​。
h≤j−1h\le j-1h≤j−1 和 h≥j+1h\ge j+1h≥j+1，排列总方案数 (i−1j−1)\dbinom{i-1}{j-1}(j−1i−1​)。
考虑 jjj 的方案数，共 2(i−j+1)2(i-j+1)2(i−j+1) 个高度可以选择，但是 i−ji-ji−j 已经被选了，所以还剩下 (i−j+2)(i-j+2)(i−j+2) 种方案。
转移乘起来即可，时间复杂度 O(n3)O(n^3)O(n3)。

总结：
这个题实在是太复杂了，即运用到 CF1608F 的延后确定值的思想，又有许多的特殊性质，这个题提取出的精华就是这种延后确定值和钦定值的思想。
 P2048 [NOI2010] 超级钢琴
不难发现答案要求的就是前 kkk 大。
先考虑 k=1k=1k=1 如何做，有一种做法先前缀和，让后固定左端点 lll，那么其对应的右端点区间就是 [l+L,l+R][l+L,l+R][l+L,l+R]，用 ST 表查这个区间对应的最大值前缀和就可以取到多大就可以了。对每一个 lll 做一遍时间复杂度是 O(nlog⁡n+n)O(n\log n+n)O(nlogn+n)，瓶颈在 ST 表预处理。
接着考虑 k&gt;1k&gt;1k&gt;1 如何做，考虑求前 kkk 大的一个经典技巧：用堆维护状态，但要保证堆内情况能做到不重不漏遍历所有情况。
发现每一个左端点对应唯一一个大根堆（以前缀和权值）笛卡尔树，我们可以考虑类似于遍历笛卡尔树的过程进行操作。具体的，先遍历所有 lll，都做一遍 k=1k=1k=1 的操作，让后设定状态 (l,L,R,val,pos)(l,L,R,val,pos)(l,L,R,val,pos) 表示左端点在 lll，管辖区间为 [l+L,l+R][l+L,l+R][l+L,l+R]，当前状态点最大权值为 valvalval，决策取在 pospospos 这个右端点。把所有左端点的答案丢进以 valvalval 决策的大根堆，让后取出堆顶，记录答案，让后类似笛卡尔树一样，把这个以 pospospos 劈开成 [L,pos−1],[pos+1,R][L,pos-1],[pos+1,R][L,pos−1],[pos+1,R]，重新求 valvalval 加入堆里面，重复做 kkk 次即可。
大部分题解的做法可以归类到笛卡尔树的结构，但是我在课上说这个大概是一车人没听懂。
总结：前 kkk 大/小 的权值可以通过用堆来维护状态，但是我们在用堆来进行维护的时候要做到不重不漏的遍历所有情况，状态的设计是一个重要思路。
 CF1060F Shrinking Tree
这题状态涉及真有点巧妙和困难吧？
直接飞上去树形 DP，发现坠机了。考虑发掘一些性质能够，首先规划一个复杂度目标是 O(n4)O(n^4)O(n4)。

根不固定，答案一定和子树大小有关。
u→vu\to vu→v 进行边缩点操作，不妨最后得到的点为 uuu，那么 vvv 的儿子会全部接到 uuu，产生新的限制。
操作是全局的，如果我们无法确定子问题操作顺序的话我们无法确定合理的 DP 顺序。

先确定 DP 主体，我们要对断边的顺序进行概率 DP，将这些概率求和之后除掉 (n−1)!(n-1)!(n−1)! 就可以啦。
让后解决性质带来的问题，对于第一个性质（问题）的解决，我们可以考虑通过枚举法枚举树根给他固定下来，让后钦定这个点是我们最后缩点剩下的点，让后在进行 DP。
发现第二个性质和第三个性质是绑定在一起的，因为如果我们不知道操作顺序的话我们也无法知道缩点之后产生了多少新的限制。先考虑第二个性质，断边之后会带来新的限制，我们可以规划到 vvv 的子问题，就是单独考虑 vvv 的时候这些边不能让 vvv 被消掉。
而对于第三个性质，有一个 Trick：全局操作可以将操作设进局部状态内。具体的，这里的新限制一定是在删除 (u,v)(u,v)(u,v) 这条边之后产生的，我们状态中需要记录操作的时刻。设 f(i,j)f(i,j)f(i,j) 表示 iii 子树内，删除顺序中后 jjj 条边不让 iii 点被消掉的概率。同时记 ggg 表示只考虑子树 vvv 和边 (u,v)(u,v)(u,v) 的概率。
转移考虑枚举 (u,v)(u,v)(u,v) 断开的时间 j′j&#x27;j′：

若 j′≤jj&#x27;\le jj′≤j：那么我们必须要乘上 12\dfrac{1}{2}21​ 的概率，后面的 j−1j-1j−1 条边需要改接到 uuu 上。转移就是 gj←12⋅f(v,j′−1)g_{j}\leftarrow \dfrac{1}{2}\cdot f(v,j&#x27;-1)gj​←21​⋅f(v,j′−1)。
若 j&gt;j‘j&gt;j‘j&gt;j‘，那么 (u,v)(u,v)(u,v) 和我们没关系，这条边会提前断开，但是仍然需要考虑那些改接到 uuu 上的边，所以 gj←f(v,j)g_{j}\leftarrow f(v,j)gj​←f(v,j)。

求出辅助 ggg 之后我们可以背包得到新的 fuf_{u}fu​。因为我们还需要规划断边的顺序，而子树间的断边是互不影响的，所以可以直接用组合数计算方案数，保证考虑到的边和没考虑到的边之间的顺序即可：
fu,i+j′←fu,i⋅gj⋅(i+ji)⋅(sizu−i−1+sizv−jsizv−j)f&#x27;_{u,i+j}\leftarrow f_{u,i}\cdot g_j\cdot{i+j\choose i}\cdot{siz_u-i-1+siz_v-j\choose siz_v-j}
fu,i+j′​←fu,i​⋅gj​⋅(ii+j​)⋅(sizv​−jsizu​−i−1+sizv​−j​)
答案就是 f(i,n−1)(n−1)!\dfrac{f(i,n-1)}{(n-1)!}(n−1)!f(i,n−1)​，时间复杂度 O(n4)→O(n3)O(n^4)\to O(n^3)O(n4)→O(n3)，优化是前缀和优化。
总结：
全局操作可以通过转化例如本题的记录时间转化到局部状态内部。
对于变量我们可以通过枚举法帮助我们进行决策，同时寻找状态之间的不动点。
寻找子问题最重要的是找状态之间的相似性，所谓相似性的含义就是信息记录在子问题中的一部分的占比，本题目中我们通过构造不动色这一相似性来让我们的子问题可以刻画。
 WC2022杂题选讲 stars
为什么我搜不到题啊？

一颗星星可以抽象成 kkk 维空间中的一个整点。称若干星星构成的集合 SSS 是奇妙的，当且仅当在 kkk 维空间中的整点 PPP，PPP 与 SSS 中的每颗星星存在至少有一维坐标相同。
有一个长度为 nnn 的星星序列 AAA，请你求出所有奇妙子区间的个数之和。
1≤n≤105,1≤k≤51 \le n \le 10^5, 1 \le k \le 51≤n≤105,1≤k≤5

触发敏感词 “存在”，联想到 CF1517F 战败经历直接哈气转限制问题。首先 kkk 很小，可以暴力枚举法来确定我们坐标的相同的限制。
有了这个思路，我们来判断 SSS 中集合是否是奇妙的。我们首先把 S0S_{0}S0​ 拿出来，暴力枚举我们钦定的第一个相同的位置。让后接着往后遍历，遇到一个不符合相同的，就在暴力枚举一个，一直往后做直到方案可行即可。
发现上述的过程就是在枚举一个 ppp 的排列，按照这个排列钦定即可（也可以不用全部都用），让后我们要把他搬到计数上，首先发现排列数级别在 O(5!)O(5!)O(5!)，数量 120 极小，可以直接加进 DP 状态内。
倒着扫更方便我们处理，设 f(i,S)f(i,S)f(i,S) 表示我们扫到第 iii 个，钦定顺序为 SSS 的情况下，最远能拓展的距离。发现直接转移是十分困难的。
写出转移需要强大的观察能力，我们可以观察子问题之间的相似性来进行转移，我们考虑 f(i,S)f(i,S)f(i,S) 和 f(i+1,S′)f(i+1,S&#x27;)f(i+1,S′)，其中 S′S&#x27;S′ 为去掉 S0S_{0}S0​ 的排列。只是对于 f(i+1,S′)f(i+1,S&#x27;)f(i+1,S′) 第一个需要新增元素但是可以被 S0S_{0}S0​ 解决的位置是不需要新增的，我们可以让 S0S_{0}S0​ 去解决，所以我们把 S0S_{0}S0​ 插入到当前最后一个锦囊的下一个位置就得到了 i+1i+1i+1 的等效子问题，也就是对于以后的影响都等效地传递下去了。
时间复杂度 O(nk⋅k!)O(nk\cdot k!)O(nk⋅k!)。
总结：
发现之前 DP 的做法顺序有一定的问题，我自己在做 DP 的问题在发掘完性质后就直接开始设置状态，我们在这些过程中融入了一个看似缺失的步骤：寻找子问题。

状态是对子问题的抽象描述，而子问题是状态所对应的具体计算问题。

为什么说是抽象地描述，前面我们所一直重复提及的 “最优最简状态” 的状态优化，就是在设出状态后要通过一系列的抽象化将状态变得简洁且更易计算。而我们状态的抽象化的前提是你的抽象化能够完整导出整个子问题才可以。
那么如何刻画子问题，需要把已经被当前处理的影响“消除”或封装好，让子问题状态只包含“未来的必需信息”，不受当前操作遗留的后效影响。我们将其简称为：“消除后效性”。
而寻找子问题最重要的是找状态之间的相似性。所谓相似性的含义就是信息记录在子问题中的一部分的占比，相似性越大你写转移就越容易，换句话说就是两个状态在未来计算中共享的“信息/行为”比例。
意义在于：高相似性可以让转移方程更统一、简洁，相似性越大你写转移就越容易，而低相似性转移方程复杂、需要处理很多特例。这也就是为什么转移方程有的时候及其难写，根本原因就是在于相似性程度低，状态太细，信息的共性没有利用，未来影响无法统一处理。
这需要强大的观察力和性质分析来分析这个相似性。
回到本题，为什么我们无法写出来转移方程，因为我们没有发现相似性。等效子问题就是一个关键相似性，等效子问题把复杂的状态差异“折叠”掉，只保留对未来影响的核心信息。
于是可以总结一个关键操作：当某个元素的决策影响很远，但 DP 每次只能一步更新时，通过找到一个当前问题的等效子问题，可以把这个远程影响一次性传递给下一步，实现高效转移。
求&quot;满足某种条件的子串/子序列&quot;的长度和、个数。
若无思路可以先考虑如何判断合法，再试图通过 DP 求得答案。
收获的地方就是在于遇到转移方程难写的时候，我究竟应该干什么了。还有等效子问题的优化方法。
 CF1439D INOI Final Contests
我们是对 a,ba,ba,b 进行计数，发现没有空位的情况下是十分好做的，思路就是把人分配到空位置里。但是有空位的情况下就不太好做了，但是借鉴之前的思路，将位置分配给人。
设 f(i,j)f(i,j)f(i,j) 表示考虑 iii 个位置，jjj 个人情况下的贡献，同时需要方案数方便进行转移，设为 g(i,j)g(i,j)g(i,j)，定义同前。转移考虑分类讨论，有两种情况：i&gt;ji&gt;ji&gt;j 和 i=ji=ji=j。即有空位和无空位：

i&gt;ji&gt;ji&gt;j：有一个想法就是我们可以通过空位划分子问题，考虑边缘的空位是限制最小的，枚举空位 kkk，划分为 i−k−1i-k-1i−k−1 和 kkk 的子问题。有转移：

g(i,j)=g(i−1,j)+∑k&gt;0g(i−k−1,j−k)g(k,k)⋅(jk)g(i,j)=g(i-1,j)+\sum\limits_{k&gt;0} g(i-k-1,j-k)g(k,k)\cdot \binom{j}{k}
g(i,j)=g(i−1,j)+k&gt;0∑​g(i−k−1,j−k)g(k,k)⋅(kj​)
f(i,j)=f(i−1,j)+∑k&gt;0(g(i−k−1,j−k)⋅f(k,k)+g(k,k)+f(i−k−1,j−k))⋅(jk)f(i,j)=f(i-1,j)+\sum\limits_{k&gt;0} (g(i-k-1,j-k)\cdot f(k,k)+g(k,k)+f(i-k-1,j-k))\cdot \binom{j}{k}
f(i,j)=f(i−1,j)+k&gt;0∑​(g(i−k−1,j−k)⋅f(k,k)+g(k,k)+f(i−k−1,j−k))⋅(kj​)

i=ji=ji=j：这个时候就不能套用上面的做法，但是我们枚举最后一个人的最终位置 jjj，同时通过这个划分为两个子问题，令 sum(x)=∑i=1xi=x(x+1)2sum(x)=\sum\limits_{i=1}^x i=\dfrac{x(x+1)}{2}sum(x)=i=1∑x​i=2x(x+1)​，有：

g(i,i)=(i+1)∑j=1ig(j−1,j−1)⋅g(i−j,i−j)⋅(i−1j−1)g(i,i)=(i+1)\sum\limits_{j=1}^i g(j-1,j-1)\cdot g(i-j,i-j) \cdot\binom{i-1}{j-1}
g(i,i)=(i+1)j=1∑i​g(j−1,j−1)⋅g(i−j,i−j)⋅(j−1i−1​)
f(i,i)←∑j=1i(sum(i−j)+sum(j))⋅g(j−1,j−1)⋅g(i−j,i−j)⋅(i−1j−1)\begin{aligned}f(i,i)\leftarrow  \sum\limits_{j=1}^i (sum(i-j)+sum(j))\cdot g(j-1,j-1)\cdot g(i-j,i-j) \cdot \binom{i-1}{j-1} \end{aligned}
f(i,i)←j=1∑i​(sum(i−j)+sum(j))⋅g(j−1,j−1)⋅g(i−j,i−j)⋅(j−1i−1​)​
f(i,i)←(i+1)∑j=1if(j−1,j−1)⋅g(i−j,i−j)+f(i−j,i−j)⋅g(j−1,j−1)⋅(i−1j−1)\begin{aligned}f(i,i)\leftarrow  (i+1) \sum\limits_{j=1}^i  f(j-1,j-1)\cdot g(i-j,i-j)+f(i-j,i-j)\cdot g(j-1,j-1) \cdot \binom{i-1}{j-1} \end{aligned}
f(i,i)←(i+1)j=1∑i​f(j−1,j−1)⋅g(i−j,i−j)+f(i−j,i−j)⋅g(j−1,j−1)⋅(j−1i−1​)​
时间复杂度 O(n3)O(n^3)O(n3)。
总结：
这道题就是枚举法划分子问题的巅峰神作之一，总和运用枚举法划分子问题。本题目就是通过限制设置分界线，将一个子问题划分为两个子问题，最后是转移的时候选限制最小的方式转移。突然发现枚举最大值 DP 这玩意和这个极其类似，通过枚举最大值划分子问题。
 CF461E Appleman and a Game
神仙题，不是思路神仙，而是带来的收获很神仙。
先考虑我们直到 sss 的情况下如何求最小，一个显然的想法就是建出 SAM，让后把 sss 丢到 SAMSAMSAM 匹配，如果新加入字符使得当前状态不是子串，直接回到根节点，让后添加 1 的操作（SAM 能表示 ttt 的所有子串）。
让后我们对 sss 计数，当然也可以这么做，设 f(i,j)f(i,j)f(i,j) 表示当前进行到第 iii 个字符，SAM 自动机状态在 jjj 的最小方案数。转移枚举新插入的字符 ccc，让后考虑状态 jjj 的变化。时间复杂度 O(n∣t∣)O(n|t|)O(n∣t∣) 直接爆炸，考虑优化。
发现及其难以优化，因为这玩意瓶颈就是在于枚举字符了，于是，我们使用刚刚学到的新技巧：“大步小步转移”
那么什么是大步小步转移呢？

小步：每次转移只做最细粒度的一步，比如一次只加一个字符、只处理一个元素、只走一步图边。小步适于考虑转移，但是可能会消耗更多时间
大步：一次转移跨过多步，把若干个“小步”打包成一个“段”直接跳过去。例如矩阵快速幂，倍增优化 DP。大步常常会很复杂，但是可能起到加速的效果。

我们尝试增大转移跨度，我们考虑操作次数为 kkk 的时候，能解决长度 xxx 以内的所有字符串，这个 xxx 最大时多少。
我们发现这个玩意毕竟和原命题不太类似，但是我们可以通过二分答案 kkk，若 x&lt;nx&lt;nx&lt;n 则 kkk 合法，最后的答案就是 k+1k+1k+1。
虑这个新问题怎么设计状态，一次操作对应着一段字符串，要满足相邻两个字符串之间不能产生 ttt 的子串，充要条件就是前面一个字符串在末尾添加上下一个字符串的第一个字符不能是 ttt 的子串。
这说明我们只需要记录开头一段的第一个字符，设 f(i,c)f(i,c)f(i,c) 表示 iii 次操作，开头段的第一个字符是 ccc。能构造出来的字符串最短时 f(i,c)+1f(i,c)+1f(i,c)+1，设 g(c,d)g(c,d)g(c,d) 表示字符 ccc 开头，末尾为 ddd 之后就不再是子串 的最短子串。那么转移拼一段上去：
f(i,c)=min⁡dg(c,d)+f(i−1,d)f(i,c)=\min_{d}g(c,d)+f(i-1,d)
f(i,c)=dmin​g(c,d)+f(i−1,d)
通过矩阵快速幂加倍增二分可以做到 O(∣t∣2+log⁡n∣t∣)O(|t|^2+\log n |t|)O(∣t∣2+logn∣t∣)。
总结：
移的大步小步。小步适于考虑转移，但是可能会消耗更多时间；大步常常会很复杂，但是可能起到加速的效果。我们经常先用小步确定规则，再用大步优化效率。在大步小步之间切换，才能写出合适的转移。
 CF559E Gerald and Path
wc，这题 3 个解法简直就是层层递进，一步一步接近真相。
这题完全有必要我单独写一篇题解。
 解法 1
我们发现这个线段既可以向左延申，也可以向右延申。但是有一个问题就是重复被覆盖的，我们不能把他计入贡献，例如下面三种情况：

两个线段 i,ji,ji,j 不交。
线段 i,ji,ji,j 只交一部分。
iii 把 jjj 完全包含。

由于这道题覆盖多次只计入单次贡献，所以转移顺序不能混乱。
先把状态设出来，发现长度延申只和处于最右端的线段决策有关，故设 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示前 iii 个线段，右端点最靠右的线段是 jjj，朝向为左或右，所得到的最大覆盖长度。
考虑转移，转移我们要从状态向后拓展，考虑下一个产生贡献的线段 kkk，新增的贡献长度为 min⁡(lenk,rk−rj)\min(len_{k},r_{k}-r_{j})min(lenk​,rk​−rj​)（它最多能延伸自己长度，但若它和前面线段有重叠，只能算到不重叠的部分）而中间线段 [i+1,k−1][i+1,k-1][i+1,k−1] 的处理，如果这些线段如果完全在 kkk 的范围内，我们钦定它们方向让它们被覆盖，相当于忽略它们的贡献。  ——这步是本题的关键：否则你会担心“是不是算少了”。但实际上算少不会影响正确性，因为最优解一定会被统计到；而乱算反而会导致重复覆盖。
转移时间复杂度 O(n3)O(n^3)O(n3)。
总结：思考转移顺序是十分重要的，在覆盖 / DP 问题里，很多时候覆盖多次只算一次，或 顺序影响贡献。如果顺序乱了反而会把贡献重复统计，所以要设计合适的转移顺序。
忽略思想是转移顺序中的一个重要一环，同时也可以将一些不优解算入答案，只要不影响最终答案即可。
 解法 2
大家还记得 Lantern 把，那么覆盖一段前缀的设计。
这里我们先把 ai−bi,ai,ai+bia_{i}-b_{i},a_{i},a_{i}+b_{i}ai​−bi​,ai​,ai​+bi​ 这些位置都离散化，考虑最终点亮的情况一定是若干个不交的段。转移的关键就变成了判定段是否合法，用 Lantern 的方法求出 g(l,r)g(l,r)g(l,r) 表示用点 [l,r][l,r][l,r] 之间的线段是否能够覆盖 [l,r][l,r][l,r] 这些点，用 fif_{i}fi​ 表示前 iii 个点的答案，有转移：
fi=max⁡(fj−1+si−sj)f_{i}=\max(f_{j-1}+s_{i}-s_{j})
fi​=max(fj−1​+si​−sj​)
转移条件 gj,ig_{j,i}gj,i​ 为真，时间复杂度 O(n2log⁡n)O(n^2 \log n)O(n2logn)。
总结：思考最后答案的形式，可能会帮助你把最优化问题转化为判定问题。寻找子问题要考虑消除后面操作的影响。
 解法 3
既然覆盖条件不好求，正难则反，直接计算不被覆盖的区间付出代价，现在目标变为用尽量少的“代价边”覆盖所有点。
设 f(i,j)f(i,j)f(i,j) 表示用前 iii 个点的线段覆盖前缀长度 jjj 的最小代价。
如果线段向右覆盖：
f(i,ri)←f(i−1,k),i≤k&lt;rif(i,r_{i})\leftarrow f(i-1,k),i\le k &lt; r_{i}
f(i,ri​)←f(i−1,k),i≤k&lt;ri​
如果线段向左覆盖，需要加一个 g(i,j)g(i,j)g(i,j) 表示第 iii 条线段向左倒。通过前缀最小值优化转移。
另外还要加上使用“代价边”的情况：
f(i,i)←f(i−1,i−1)+(pi−pi−1)f(i,i)\leftarrow f(i-1,i-1)+(p_{i}-p_{i-1})
f(i,i)←f(i−1,i−1)+(pi​−pi−1​)
时间复杂度 O(n2)O(n^2)O(n2)。
 【UER #6】逃跑
答案求的是 DxDxDx，可以写作 E(x2)−E2(x)E(x^2) -E^2 (x)E(x2)−E2(x)，用线性性拆括号即可做到，这个 xxx 就是我们新经过的点数，而 x2x^2x2 表示两两配对。
考虑预处理 g(i,x,y)g(i,x,y)g(i,x,y) 表示过了 iii 的时间走到 (x,y)(x,y)(x,y) 的期望，可以 O(n3)O(n^3)O(n3) 简单递推，这个玩意是基础我们先求才能地推出其他东西。同时令 pwi=(w1+w2+w3+w4)ipw_{i}=(w_{1}+w_{2}+w_{3}+w_{4})^ipwi​=(w1​+w2​+w3​+w4​)i。
考虑求解 E(x)E(x)E(x) 需要我们求单点对期望的贡献，而且是对每个时间都要求值，考虑设 f(i)f(i)f(i) 表示第 iii 时间新经过 (x,y)(x,y)(x,y) 的期望求和，有转移：
f(i)=pwi−∑j=1i−1f(j)⋅g(i−j,0,0)f(i)=pw_{i}-\sum\limits_{j=1}^{i-1} f(j)\cdot g(i-j,0,0)
f(i)=pwi​−j=1∑i−1​f(j)⋅g(i−j,0,0)
而 E(x)E(x)E(x) 就是：
E(x)=∑i=0nf(i)⋅pwn−iE(x)=\sum\limits_{i=0}^n f(i) \cdot pw_{n-i}
E(x)=i=0∑n​f(i)⋅pwn−i​
接着考虑 E(x2)E(x^2)E(x2)，我们要处理点对之间的贡献，设 h(i,x,y)h(i,x,y)h(i,x,y) 表示时间 iii 内对所有坐标 (a,b)→(a+x,b+y)(a,b)\to (a+x,b+y)(a,b)→(a+x,b+y) 的方案数，转移考虑容斥原理，总的方案数是先第一次走到 (a,b)(a,b)(a,b)，然后任意走到 (a+x,b+y)(a+x,b+y)(a+x,b+y)。需要减去经过 (a+x,b+y)→(a,b)→(a+x,b+y)(a+x,b+y)\to (a,b) \to (a+x,b+y)(a+x,b+y)→(a,b)→(a+x,b+y) 的方案和完成目标后在原地打转的方案。总转移方程：
h(i,x,y)=∑j=0i−1f(j)⋅g(i−j,x,y)−h(j,−x,−y)⋅g(i−j,x,y)−h(j,x,y)⋅g(i−j,0,0)h(i,x,y)=\sum\limits_{j=0}^{i-1} f(j)\cdot g(i-j,x,y)-h(j,-x,-y)\cdot g(i-j,x,y)-h(j,x,y)\cdot g(i-j,0,0)
h(i,x,y)=j=0∑i−1​f(j)⋅g(i−j,x,y)−h(j,−x,−y)⋅g(i−j,x,y)−h(j,x,y)⋅g(i−j,0,0)
因为我们按照顺序计算的贡献，直接求和求出来的是 E((x2))E(\binom{x}{2})E((2x​))，那么求答案可以这么写：
E(x2)=E(x)+2∑h(i,x,y)⋅pw(n−i)E(x^2)=E(x)+2\sum\limits h(i,x,y)\cdot pw(n-i)
E(x2)=E(x)+2∑h(i,x,y)⋅pw(n−i)
总结：正难则反是一个重要的技巧，通过正难则反，减去的东西就规约到了子问题。
而本题状态定义相当于将等价类定义到了状态中，大大减少了不必要的状态，这是因为它们的总方案易于计算，而容斥的方式是本质相同的，最后的答案也只需要求和，所以可以压缩在一起。这种涉及等价类的状态我们可以学习，这一类题也同样在皮配出现，寻找等价类是就是找它们的共同点。
 P1721 [NOI2016] 国王饮水记
直接 DP 发现不会转移难泵了。
考虑发掘性质：

hi&lt;h1h_{i}&lt; h_{1}hi​&lt;h1​ 不会贡献答案，显然可以去掉不会影响答案。
一个水站最多会被除 h1h_{1}h1​ 之外合并一次。
若操作次数管够，一定是将 hhh 从小到大，一个一个和 h1h_{1}h1​ 进行操作。

我们发现第三个性质很 ok 啊，我们考虑给它拓展有拓展次数的情况，那么我们观察样例解释发现他们会通过把一些数取平均数后，然后和 111 整体操作。
那么就好说了，我们有一个策略，就是如果有操作次数的情况下，我们将这个 hhh 从小到大，让后我们将它们划分为几段，让后我们一个一个和 111 进行操作。这其中要满足段数单调不增。
现在可以 DP 了，设 f(i,j)f(i,j)f(i,j) 表示进行到前 iii 个，划分了 jjj 段，h1h_{1}h1​ 的最大取值。转移枚举下一个划段：
f(i,j)←f(k,j−1)+∑p=k+1ihpi−k+1f(i,j)\leftarrow \dfrac{f(k,j-1)+\sum\limits_{p=k+1}^i h_{p}}{i-k+1}
f(i,j)←i−k+1f(k,j−1)+p=k+1∑i​hp​​
转移是 O(n3p)O(n^3 p)O(n3p)，可以通过前缀和优化，设 sumhi=∑i=1ihisumh_{i}=\sum\limits_{i=1}^i h_{i}sumhi​=i=1∑i​hi​，有：
f(i,j)←f(k,j−1)+sumhi−sumhki−k+1f(i,j)\leftarrow \dfrac{f(k,j-1)+sumh_{i}-sumh_k}{i-k+1}
f(i,j)←i−k+1f(k,j−1)+sumhi​−sumhk​​
时间复杂度 O(n3)O(n^3)O(n3)，考虑优化，这个分式有点奇怪，考虑变形：
f(i,j)←sumhi−(sumhk−f(k,j−1))i−(k−1)f(i,j)\leftarrow \dfrac{sumh_{i}-(sumh_{k}-f(k,j-1))}{i-(k-1)}
f(i,j)←i−(k−1)sumhi​−(sumhk​−f(k,j−1))​
这是一个不是很典型斜率优化，考虑把转移的含义看成最大化斜率。具体的，平面有一堆 (i−1,si−f(i,j−1))(i-1,s_{i}-f(i,j-1))(i−1,si​−f(i,j−1)) 的转移点，要求 (i,si)(i,s_{i})(i,si​) 到选定转移点连成直线的斜率最大。
我们要维护的是转移点的下凸包，可以用单调队列优化至 O(n2p)O(n^2p)O(n2p)。
最后的分数需要发现非 111 的段只有 O(log⁡n)O(\log n)O(logn) 个，也就是说我们只需要 dp 大概 14 层即可，后面的的拿单个补齐，层数很少的时候 dp 可以直接用 double，让后得到转移点之后用高精度计算即可，时间复杂度 O(nlog⁡n+np)O(n\log n+np)O(nlogn+np)。
总结：这种是不常见的斜率优化式子，是要求我们变形出斜率的形式，来去维护凸包。
 2025牛客多校第一场（模拟赛T2）

分析性质，发现这个切割可以看作一个树形结构，将区间树选择一个地方劈开，让后会分裂为左右子树，而左右子树也可以继续递归直到叶子，而叶子我们是直到答案的就是 0。启示我们进行类似于区间 dp 的操作
设 f(l,r)f(l,r)f(l,r) 表示将 [l,r][l,r][l,r] 整段切开的最小代价，设 g(l,r)g(l,r)g(l,r) 表示 [l,r][l,r][l,r] 切第一刀的决策点在哪里，转移枚举分界点通过 g(l,r)g(l,r)g(l,r) 转移满足限制即可，时间复杂度 O(n3)O(n^3)O(n3)。
很遗憾，这是错的，只有 20 分，为什么？因为我们的状态无法满足题目的限制，放到树上相当于就是父节点的不平衡值大于等于子区间所有不平衡值，但是我们 DP 在计算过程中低代价方案可能被剪掉（即本来有代价更大，但是满足限制但是因为 DP 没有记录导致错误），导致有解的方案输出无解。
故设 f(l,r,k)f(l,r,k)f(l,r,k) 表示 [l,r][l,r][l,r] 但是分割点在 kkk 的阈值 DDD 和最小代价（二元组）。
转移考虑先枚举切点 kkk，左右和 L=sum(l,k),R=sum(k+1,r)L=sum(l,k),R=sum(k+1,r)L=sum(l,k),R=sum(k+1,r)，那么不平衡度就是 D=∣L−R∣D=|L-R|D=∣L−R∣，代价就是 cost=min⁡(L,R)⋅⌈log⁡2D⌉cost=\min(L,R)\cdot \lceil \log_{2}D\rceilcost=min(L,R)⋅⌈log2​D⌉。
转移即为：
f(l,r)←(D,ask{f(l,k),D}+ask{f(k+1,r),D}+C)f(l,r)\leftarrow (D,\text{ask}\{f(l,k),D\}+\text{ask}\{f(k+1,r),D\}+C)
f(l,r)←(D,ask{f(l,k),D}+ask{f(k+1,r),D}+C)
其中 ask\text{ask}ask 表示一个函数，支持查询区间 [l,r][l,r][l,r] 能在最大不平衡 ≤D\le D≤D 的条件下实现的最小总代价。可以通过前缀 min⁡\minmin 加二分实现。
时间复杂度 O(n3log⁡n)O(n^3 \log n)O(n3logn)。
总结：
在设计状态的时候，要考虑情况完全，要保证设计的状态能够导出整个子问题。本题错点不再子问题寻找，而是在于状态的设计出了锅。以后 DP 转移一定要列全，跟着 OI BIG Trick 的步骤一步一步做。
 P11085 [ROI 2019] 学生座位
考虑发掘性质：


将学生按升高排序之后相邻两个配对最优。


把课桌升序排序之后按顺序分给学生最优。


性质 2 是很有用的，但是后面再说。
既然这么说了，我们可以把 mmm 组同学相邻同学绑到一起，一共一组最多 O(n)O(n)O(n) 块。而计算课桌的代价的时候因为课桌升序排序之后按顺序分给学生最优，可以通过单调性双指针，时间复杂度 O(nm+mk)O(nm+mk)O(nm+mk)，无法通过。
我们没有很好的利用单调性，第二个代表决策单调性，每次求第 midmidmid 的最优匹配点，然后左右的决策点范围是 [ql,mid],[mid,qr][ql,mid],[mid,qr][ql,mid],[mid,qr]，用 CDQ 分治容易有 O((k+nm)log⁡m)O((k+nm)\log m)O((k+nm)logm)。
 CF1562E Rescue Niwen!
2500* 没做出来。
考虑最长上升子序列有什么性质，遥想当年 DIV3 模拟赛 LIS 的一个解法：维护末尾元素的转移。这里我们同样的，维护结尾子串的转移。但是还不能进行 DP，考虑发掘性质：

对于子串，字典序大小有 s[i,j]&lt;s[i,j+1]s[i,j]&lt;s[i,j+1]s[i,j]&lt;s[i,j+1]。也就是说一旦选取 s[i,j]s[i,j]s[i,j]，那么 s[i,j+1],s[i,j+2],…,s[i,n]s[i,j+1],s[i,j+2],\dots,s[i,n]s[i,j+1],s[i,j+2],…,s[i,n] 一定会被选。证明考虑反证法，我证明了 5 万年。

这个性质很有用，考虑直接对末尾进行 DP，设 f(i)f(i)f(i) 表示结尾为 [i,n][i,n][i,n] 的子串的最长上升子序列，转移考虑枚举新后缀 jjj，求它们之间的最长公共前缀 lcplcplcp，只要 si+lcp&gt;sj+lcps_{i+lcp}&gt;s_{j+lcp}si+lcp​&gt;sj+lcp​ 即可转移，转移方程如下：
fi=(n−i+1)+max⁡1≤j&lt;i{fj−lcp(i,j)}f_{i}=(n-i+1)+\max_{1\le j &lt;i} \{ f_{j}-\text{lcp}(i,j) \}
fi​=(n−i+1)+1≤j&lt;imax​{fj​−lcp(i,j)}
时间复杂度 O(n2)O(n^2)O(n2)。
总结：
考虑有效状态又多了一种思路：只求出跟答案相关的 dp 值即可，只用于转移的 dp 值可以考虑其性质。
 CF708E Student’s Camp
这个题好像每太那么多的性质，那么直接 DP 发掘性质吧。设 f(i,j,l,r)f(i,j,l,r)f(i,j,l,r) 表示 iii 天过去了，第 jjj 行，[l,r][l,r][l,r] 还在的概率。但是我们发现我们都钦定第 jjj 行谁还联通，不如大胆一点，直接把天数去掉！设 f(i,l,r)f(i,l,r)f(i,l,r) 表示第 iii 行，[l,r][l,r][l,r] 还在并且前 i−1i-1i−1 行还联通的概率。
然后考虑转移，发现转移有些困难，但是在这之前我们需要预处理一个玩意 gig_{i}gi​ 表示一行掉了 iii 个格子的概率，这个玩意可以 O(1)O(1)O(1) 做：
gi=(ki)pi(1−p)k−ig_{i}=\binom{k}{i}p^i (1-p)^{k-i}
gi​=(ik​)pi(1−p)k−i
然后回到主题转移，发现转移时真的困难，因为转移的时候我们需要保证 i−1i-1i−1 连通，正难则反，考虑容斥减去不连通的方案数。
f(i,l,r)=gl−1⋅gm−r⋅(∑l′≤r′f(i−1,l′,r′)−∑l′≤r′&lt;lf(i−1,l′,r′)−∑r&lt;l′≤r′f(i−1,l′,r′))f(i,l,r)=g_{l-1}\cdot g_{m-r} \cdot (\sum\limits_{l&#x27;\le r&#x27;}f(i-1,l&#x27;,r&#x27;)-\sum\limits_{l&#x27;\le r&#x27; &lt; l}f(i-1,l&#x27;,r&#x27;)-\sum\limits_{r&lt;l&#x27;\le r&#x27;}f(i-1,l&#x27;,r&#x27;))
f(i,l,r)=gl−1​⋅gm−r​⋅(l′≤r′∑​f(i−1,l′,r′)−l′≤r′&lt;l∑​f(i−1,l′,r′)−r&lt;l′≤r′∑​f(i−1,l′,r′))
不难后面的东西可以前缀和优化，令：
F(i)=∑l′≤r′f(i−1,l′,r′)L(i,x)=∑l′≤r′&lt;xf(i−1,l′,r′)R(i,x)=∑x&lt;l′≤r′f(i−1,l′,r′)\begin{aligned}F(i)&amp;=\sum\limits_{l&#x27;\le r&#x27;}f(i-1,l&#x27;,r&#x27;)\\L(i,x)&amp;=\sum_{l&#x27;\leq r&#x27;&lt;x}f(i-1,l&#x27;,r&#x27;)\\R(i,x)&amp;=\sum_{x&lt;l&#x27;\leq r&#x27;} f(i-1,l&#x27;,r&#x27;) \end{aligned}
F(i)L(i,x)R(i,x)​=l′≤r′∑​f(i−1,l′,r′)=l′≤r′&lt;x∑​f(i−1,l′,r′)=x&lt;l′≤r′∑​f(i−1,l′,r′)​
优化即可时间复杂度 O(n3)O(n^3)O(n3)，然后就不会优化了。
事实上当然是可以的啦，考虑后面的求和式子，一个关键观察式子只和求和有关而没有其他的式子，考虑以这个突破口，考虑到答案只需要整体求和，我们可以把状态也定义成和式。设 S(i,r)=∑l≤rf(i,l,r)S(i,r)=\sum\limits_{l\le r}f(i,l,r)S(i,r)=l≤r∑​f(i,l,r)，考虑写出这个和式的转移：
S(i,r)=∑lgl−1gm−r⋅(F(i−1)−L(i−1,l)−R(i−1,r))S(i,r)=\sum\limits_{l}g_{l-1}g_{m-r}\cdot (F(i-1)-L(i-1,l)-R(i-1,r)) 
S(i,r)=l∑​gl−1​gm−r​⋅(F(i−1)−L(i−1,l)−R(i−1,r))
把 rrr 有关的部分提出来有：
S(i,r)=gm−r⋅{(F(i−1)−R(i−1,r))⋅∑l≤rgl−1−∑l≤rgl−1⋅L(i−1,l)}S(i,r)=g_{m-r}\cdot\{(F(i-1)-R(i-1,r))\cdot \sum\limits_{l\le r} g_{l-1}-\sum\limits_{l\le r}g_{l-1}\cdot L(i-1,l)\}
S(i,r)=gm−r​⋅{(F(i−1)−R(i−1,r))⋅l≤r∑​gl−1​−l≤r∑​gl−1​⋅L(i−1,l)}
用前缀和维护 ∑l≤rgl−1\sum\limits_{l\le r} g_{l-1}l≤r∑​gl−1​ 和 ∑l≤rgl−1⋅L(i−1,l)\sum\limits_{l\le r} g_{l-1} \cdot L(i-1,l)l≤r∑​gl−1​⋅L(i−1,l) 即可，而 RRR 的计算可以用对称性用 LLL 计算，这是因为左右是等价的，所以翻折之后对应的值是相等的。
时间复杂度 O(n2)O(n^2)O(n2)。
总结：
这里给出了 DP 的一种的新的优化方式，如果 DP 式子只和求和有关，我们可以将状态定义为和式来进行计算。
 ARC160FCount Sorted Arrays
邦邦卡邦！学会了新的排列双射方式！
一个新的排列双射方式就是将排列 PPP 拆成 nnn 个 0/1 串 C1,…,CnC_{1},\dots,C_{n}C1​,…,Cn​，其中 Ci,j=[Pj≥i]C_{i,j}=[P_{j}\ge i]Ci,j​=[Pj​≥i]，那么 PPP 与 CCC 构成双射。而一个排列合法当且仅当分成的每个 01 序列最后操作完都是有序的。
同时分析题目的操作，因为逆序对数最多是 O(n)O(n)O(n) 个，所以交换最多也只能是 O(n2)O(n^2)O(n2) 级别的。
我们回到这题，我们考虑让 Cx,jC_{x,j}Cx,j​，其中 xxx 从 n,n−1,…,1n,n-1,\dots,1n,n−1,…,1 一次下降，每降一次阈值，就恰好有一个位置 iii（值等于当前的 xxx）从 0 变成 1。因此得到的 01 串序列是：

起点：全 0（可以看作 x=n+1x=n+1x=n+1）
每一步把某个坐标从 0 翻到 1
终点：全 1（x=1x=1x=1)

这正是一条在 {0,1}n\{ 0,1\}^n{0,1}n 上 “只增不减” 的单调路径。
并且“哪一个坐标在第 ttt 步被翻到 1”，恰好是“值为第 ttt 大的元素所在的位置”。
故每个排列对应一条唯一的单调路径，双射成功！问题转化为格路计数问题！时间复杂度 O(q2n)O(q2^n)O(q2n)，同时操作数是 O(n2)O(n^2)O(n2) 级别的也是可以特判的，只有存在至少一个 01 排序后还有 pu&gt;Pvp_{u}&gt; P_{v}pu​&gt;Pv​​ 时 (u,v)(u,v)(u,v) 操作才是有必要的。
更新操作必要性状态即可，时间复杂度 O(n32n)O(n^3 2^n)O(n32n)。
总结：
计数问题当我们无从下手，我们可以借助一些已有的知识与原命题构成双射。简化问题。
 CF1387B2 Village (Maximum)
发现这个就是点之间进行配对，有一个 Trick 就是将点对之间贡献分摊到边的贡献上。我们考虑边的贡献，也即是这条边究竟被经过了多少次，这个次数有一个显然的上界就是 2×min⁡(sizu,sizv)2\times \min(siz_{u},siz_{v})2×min(sizu​,sizv​)，其中 sizsizsiz 表示子树大小。
考虑如何构造使得经过次数最大，考虑式子 2×min⁡(sizu,sizv)2\times \min(siz_{u},siz_{v})2×min(sizu​,sizv​) 与取 min⁡\minmin 有关，也就是说我们应当尽量让这个 min⁡\minmin 大。考虑这个 min⁡\minmin 上界是多少，有 sizu+sizv=nsiz_{u}+siz_{v}=nsizu​+sizv​=n 不难证明 min⁡\minmin 上界就是 ⌊n2⌋\lfloor \dfrac{n}{2}\rfloor⌊2n​⌋。这个上界什么时候取到，当然就是在树的重心。
考虑以树的重心为根，下面挂的子树大小都不超过 n2\dfrac{n}{2}2n​。那么子树里面的点贪心策略一定是跨子树配对，故我们可以将所有节点按照 DFS 序后，第 iii 个节点配对 (i+n2−1) mod n+1\left(i+\dfrac{n}{2}-1\right)\bmod n +1(i+2n​−1)modn+1 个节点即可在另一个子树配对，时间复杂度 O(n)O(n)O(n)。
总结：这道题的一个小 Trick 的就是将点对贡献分摊到边上，同时我们在最大化链的长度的时候要尽量跨子树。同时这个循环移位配对也是很好的思想。
 CF516D Drazil and Morning Exercise
首先我们分析 fff 怎么求，不难想到这个 fff 一定和直径有关，那么 fff 其实就是到直径两点中最长距离的那一个，证明利用直径为最长链的性质即可证明。
然后考虑 O(qn2)O(qn^2)O(qn2) 怎么做，有一个显然的想法就是暴力枚举最小值，固定的点，让后从这个最小值的点向外进行拓展，直到拓展到 xxx 的限制。
然后考虑如何优化这一过程，我们发现瓶颈首先在于枚举最小值，考虑优化这一步骤，我们发现最小的 min⁡f\min fminf 一定在直径上取到，考虑直径上取 min⁡f\min fminf 的点为根作为树。这个树有一个性质就是从当前点往下走，fff 单调不降。也就是说从该点到祖先的链上 fff 具有单调性，我们可以在遍历这个树的时候维护祖先链，然后二分查找连通块大小即可，这个玩意直接做还是 O(qn2log⁡n)O(qn^2\log n)O(qn2logn)，通过树上差分有 O(qnlog⁡n)O(qn\log n)O(qnlogn)。
总结：树上最远点问题可以转直径端点
 CF1622F Quadratic Set
平方数没看懂，换成完全平方数就看懂了。连夜将 OI BIG TRICK 中的完全平方数的性质改为平方数的性质。
性质：

∏i=1ni!=∏i=1nin−i+1\prod_{i=1}^n i!=\prod_{i=1}^n i^{n-i+1}∏i=1n​i!=∏i=1n​in−i+1，也就是说 i,ni,ni,n 不同奇偶的时候是一个完全平方数。
打表发现答案下界为 n−3n-3n−3？

我们考虑这个连乘阶乘能否分析：
∏i=12ki!=∏i=1k(2i)!⋅(2i−1)!=∏i=1k[(2i−1)!]2⋅(2i)=2k⋅k!∏i=1k[(2i−1)!]2\begin{aligned}
\prod_{i=1}^{2k} i! &amp; =\prod_{i=1}^k (2i)!\cdot (2i-1)! \\ &amp; =\prod_{i=1}^k [(2i-1)!]^2\cdot (2i) \\
&amp; =2^k \cdot k! \prod_{i=1}^k [(2i-1)!]^2
\end{aligned}
i=1∏2k​i!​=i=1∏k​(2i)!⋅(2i−1)!=i=1∏k​[(2i−1)!]2⋅(2i)=2k⋅k!i=1∏k​[(2i−1)!]2​
后面是完全平方数，考虑前面的式子。

当 nnn 为偶数，也就是说 n=2kn=2kn=2k。

当 kkk 为偶数，构造考虑将 kkk 去掉即可。
当 kkk 为奇数，构造将 2,k2,k2,k 去掉即可。


当 nnn 为奇数，把 nnn 去掉就可以变成上一种情况。

然后考虑完全平方数的性质如何满足，注意到完全平方数的本质就是质因数上次数都为偶数，注意到我们只关心就行即可，我们考虑异或哈希，设 f(x)f(x)f(x) 表示 xxx 的哈希函数，若 xxx 为质数则随机赋权，反之为质因数异或和。然后利用异或哈希模拟上述过程即可，时间复杂度 O(能过)O(\text{能过})O(能过)。
总结：
当性质不好发现的时候，考虑打表发掘性质，尤其这一类数学限制题。
当答案很小的时候，我们可以通过分类讨论，用讨论法解决问题，排除掉所有简单情况之后剩下的就是那种较复杂的情况。
 P9520 [JOISC 2022] 监狱
考虑分析性质，本题只有有无正解，考虑无解的情况：


两个囚犯路径有重合，且相向而行。


两个囚犯路径呈包含与被包含关系。


两个囚犯路径有重合，但处理不当，使其在中途相遇。


在分析第三条的处理，我们考虑一个合法的处理顺序是怎样的。囚犯们当然可以先安排一个囚犯走完他的路径，再同理安排另一个，这是因为每个囚犯的移动路径是独立的，要想判断最终情况是否合法，这要知道先后顺序，这与囚犯们谁先走完路径是无关的，故这种移动策略是合理的。
所以我们取思考囚犯的一定顺序，有性质：

如果 A 的起点在 B 的路径上，那么 A 必须比 B 先走。
如果 A 的终点在 B 的路径上，那么 B 必须比 A 先走

这表现了一个决定关系，可以利用拓扑排序判断关系是否成环，发现边数达到 m2m^2m2 级别用线段树优化建图即可。
总结：
分析只输出有无解的情况可以从什么时候会无解，让后分析无解的条件，通过条件导出问题。
 AT_agc012_eCamel and Oases
这个就不写代码，就写题解了。考虑分析性质：

一个位置能够走到的位置是是一段连续的区间。
根据贪心，每次跳都是灌满水后再跳，最多 log⁡V\log VlogV 次。

上面两个性质，问题就变成了：在每层选一个线段，将整个区间完全覆盖。其中第一层选择的线段是钦定的（因为要对每个出发点求是否有解）由于层数是 log⁡V\log VlogV 级别的可以暴力预处理和状压 DP，状态 SiS_{i}Si​ 为 1 表示第 iii
层已经选了一个线段。我们要 dp 出两个东西：LSL_SLS​ 表示状态 SSS 下，从左到右能完全覆盖的最右边位置；RSR_{S}RS​ 表示状态 SSS 下，从右到左能完全覆盖的最左边位置，转移通过预处理区间即可做到转移。
但是上述转移是要枚举状态和枚举线段的，复杂度会不会爆炸呢？不会。显然的，若第一层线段多于 log⁡v\log vlogv 个，那不可能有解，在这种情况下直接全部输出 Impossible 即可。
 CF1658F Juju and Binary String
考虑发掘性质，对于可爱度换一个定义：
cnt1cnt0+cnt1=cnt1n\dfrac{cnt1}{cnt0+cnt1}=\dfrac{cnt1}{n}
cnt0+cnt1cnt1​=ncnt1​
那么问题要求子串拼接起来后仍和整个串满足上面这个式子，而且要求分出来的段数极小。
考虑从 0/1 个数入手，发现选取子串 1 的个数和为 c=cnt1⋅mnc=\dfrac{cnt1\cdot  m}{n}c=ncnt1⋅m​，那么有 n∣cnt1⋅mn|cnt1\cdot mn∣cnt1⋅m 则无解。但这是必要条件。
搞笑的是，将原串首尾成环，必然存在长为 mmm 的子串满足条件。考虑若所有子串都大于/小于整串密度，显然不可能。若存在一个子串大于，一个子串小于，由于一个子串删头添尾之后 1 的个数增加量绝对值 ≤1\le 1≤1，所以中间必然经过一个子串密度等于原串密度。
前缀和判断答案为 1 即可，否则为 2。
总结：
把题目中的链性质转化为环，会有意想不到的性质。因为在环上，每个位置是等价的。但在链上每个位置是不等价的。
同时环上长度为 mmm 的子段和的和，每个点会贡献 mmm 次，所以答案是环上所有点的和乘 mmm。
 CF1097G Vladislav and a Great Legend
考虑发掘性质，首先把这个 kkk 次方但是 kkk 不大，套用经典技巧斯特林反演不难转化有：
∑xf(x)k=∑x∑i=1kS(k,i)⋅i!⋅(f(x)i)=∑i=1kS(k,i)⋅i⋅∑x(f(x)i)\sum_{x}f(x)^k=\sum_x\sum_{i=1}^k S(k,i)\cdot i!\cdot {f(x)\choose i}=\sum_{i=1}^k S(k,i)\cdot i\cdot \sum_x{f(x)\choose i}
x∑​f(x)k=x∑​i=1∑k​S(k,i)⋅i!⋅(if(x)​)=i=1∑k​S(k,i)⋅i⋅x∑​(if(x)​)
现在问题转化为求解 (f(x)i)\dbinom{f(x)}{i}(if(x)​)，考虑发掘性质。
首先 f(x)f(x)f(x) 是虚树的边集大小，而众所周知，唯一确定点集就可以唯一确定一颗虚树。而且虚树于 LCA 强相关，可以以 LCA 为根，其左右孩子又能划分为另一个 LCA，即另一个子问题（子问题刻画完成）。换一种角度，如果我们知道左右孩子，我们也可以通过合并左右孩子虚树得到其父亲的答案（子问题合并）。
同时回顾题目答案求解，即让我们在所有虚树的边集中选出恰好 iii 条边的方案数。考虑这个上面虚树计数是独立的，可以合并到 DP 里面做。故设 f(u,i)f(u,i)f(u,i) 表示 uuu 子树内选了 iii 条边的方案数。合并的时候两颗虚树如何合并，我们知道 uuu 选 jjj 条边的方案，vvv 选 kkk 条边的方案，那么合并相当于将 j+k=ij+k=ij+k=i 的情况相乘让后累加即可。
即转移，设 tmpitmp_{i}tmpi​ 为 f′(u,i)f&#x27;(u,i)f′(u,i) 的辅助更新数组，有：
tmpi+j←f(u,i)×f(v,j),tmpi+j+1←f(u,i)×f(v,j)tmp_{i+j}\leftarrow f(u,i)\times f(v,j),tmp_{i+j+1}\leftarrow f(u,i)\times f(v,j)
tmpi+j​←f(u,i)×f(v,j),tmpi+j+1​←f(u,i)×f(v,j)
还有一个部分是考虑点的状态，在合并完之后我们考虑算出 uuu 以内的虚树加 vvv 以内的虚树加 u,vu,vu,v 的合并虚树 即可。第一三种情况好算，第二种情况讨论一下父边的是否选即可。
所以计算答案时必须要在合并时计算（要保证我们考虑的边在点集的作用下都可以生效），这样一种方案会在点集的 LCA 处统计到。
但是时间复杂度是多少，合并边界是 min⁡(sizu,k)×min⁡(sizv,k)\min(siz_{u},k)\times \min(siz_{v},k)min(sizu​,k)×min(sizv​,k)。时间复杂度 O(nk)O(nk)O(nk)。
总结：
观察这类 kkk 的次方式子但是 kkk 不太大的时候，考虑斯特林反演。
树背包真正的复杂度是第一维大小乘上第二维大小，特别是第二维很小的情况，要时刻注意计算。
 AT_agc026_d
首先看到柱状图的形式，考虑建出广义笛卡尔树，然后在上面进行 DP。
首先将原题目的红蓝色转化为黑白色这样就能看懂，然后考虑一列染色方案有哪些：

黑白交替；
全白或全黑；

第一种方案可以直接延续或者翻转后延续，而第二种方案只能进行翻转才可以，启示在状态中分类讨论。
令 lenulen_{u}lenu​ 表示 uuu 这一段的长度，heuhe_{u}heu​ 表示 uuu 这一段的高度。
设 fuf_{u}fu​ 表示 uuu 这一段总方案数，gug_{u}gu​ 表示 uuu 这一段非 01 交错方案数，而 huh_{u}hu​ 表示 uuu 这一段 01 交错方案数。
先不考虑高度：
fu=∏v∈son(u)(gv+2hv)⋅2lenu−∑vlenvf_{u}=\prod_{v\in son(u)}(g_{v}+2h_{v})\cdot2^{len_{u}-\sum\limits_{v}len_{v}}
fu​=v∈son(u)∏​(gv​+2hv​)⋅2lenu​−v∑​lenv​
hu=2×∏v∈son(u)hvh_{u}=2\times \prod_{v\in son(u)}h_v
hu​=2×v∈son(u)∏​hv​
gu=fu−hug_{u}=f_{u}-h_{u}
gu​=fu​−hu​
再考虑高度：
hu′=hu×2heu−1h&#x27;_{u}=h_{u}\times 2^{he_{u}-1}
hu′​=hu​×2heu​−1
fu=gu+hu′f_{u}=g_{u}+h&#x27;_{u}
fu​=gu​+hu′​
f1f_{1}f1​ 即为所求，时间复杂度 O(n2)→O(nlog⁡n)O(n^2)\to O(n\log n)O(n2)→O(nlogn)。
总结：
对于柱状图和多边形一类的 DP 问题，我们可以通过笛卡尔树结构作为 DP 主体。
当限制特殊情况很少的时候，可以考虑分类套路怒，并将分类讨论的情况融入 DP 的设计中。
树形不仅有自下往上合并，也有自上往下递推的写法，这一类经常在笛卡尔树分治出现。
 P7163 [COCI 2020/2021 #2] Svjetlo
这是困难的，但也是好的，第 299 道紫。
原命题叽里咕噜可以转化为树上路径问题。有起点和终点不固定，每经过一个点就可以置反当前状态，问最短路径使得所有状态为 111。
显然考虑 DP，但是我们 DP 的顺序，考虑枚举法确定我们路径的起始点，令我们枚举的点为 rtrtrt。那么将这个枚举的点 rtrtrt 作为有根树提起来。然后考虑如何在这个有根树上进行 DP。考虑一条路径会有如下两种情况：

一个直下，一个绕一圈在回来（南下和北上）。考虑 DP 状态中我们需要融入这个状态，设 f(u,0/1,0/1)f(u,0/1,0/1)f(u,0/1,0/1) 表示 uuu 子树内都为 111，是否返回 uuu 点，当前最终状态是 0/10/10/1 的最短路径答案。
转移不太好直接转移，考虑合并子树答案，以下令 tmptmptmp 为转移临时存储更新后答案的数组，⊕\oplus⊕ 运算代表异或，转移考虑枚举最终状态 ddd，以下转移按顺序进行：
tmp(0,d)←{2+min⁡{f(u,0,d⊕1)+f(v,1,0),f(u,0,d)+f(v,1,1)+2}1+min⁡{f(u,1,d)+f(v,0,0),f(u,1,d⊕1)+f(v,0,1)+2}tmp(0,d)\leftarrow
\begin{cases}
2+\min\{f(u,0,d\oplus 1)+f(v,1,0),f(u,0,d)+f(v,1,1)+2\} \\ \\
1+\min\{f(u,1,d)+f(v,0,0),f(u,1,d\oplus 1)+f(v,0,1)+2\}
\end{cases}
tmp(0,d)←⎩⎪⎪⎨⎪⎪⎧​2+min{f(u,0,d⊕1)+f(v,1,0),f(u,0,d)+f(v,1,1)+2}1+min{f(u,1,d)+f(v,0,0),f(u,1,d⊕1)+f(v,0,1)+2}​
tmp(1,d)←2+min⁡{f(u,1,d⊕1)+f(v,1,0),f(u,1,d)+f(v,1,1)+2}tmp(1,d)\leftarrow 2+\min\{ f(u,1,d\oplus1)+f(v,1,0),f(u,1,d)+f(v,1,1)+2  \}
tmp(1,d)←2+min{f(u,1,d⊕1)+f(v,1,0),f(u,1,d)+f(v,1,1)+2}
f(u,0/1,d)←tmp(0/1,d)f(u,0/1,d)\leftarrow tmp(0/1,d)
f(u,0/1,d)←tmp(0/1,d)
以下解释转移方程。根据上面的图，我们有两种路径模式：直下和绕圈返回。贡献我们可以分摊到边的贡献，对于 tmp(0,d)tmp(0,d)tmp(0,d) 的第一部分就是在绕圈进行分讨：

常数 222 代表回路一条边经过两次，固定贡献。
f(u,0,d⊕1)+f(v,1,0)f(u,0,d\oplus 1)+f(v,1,0)f(u,0,d⊕1)+f(v,1,0)：我们把 vvv 子树当成一个完整的回路，然后我们将两端连接，由于绕了一圈 ddd 一开始就是被置反过的，所以为 d⊕1d\oplus 1d⊕1。
f(u,0,d)+f(v,1,1)+2f(u,0,d)+f(v,1,1)+2f(u,0,d)+f(v,1,1)+2：依旧是回路，但是 vvv 这里最终状态变了，因为经过路径会使得 vvv 被取反两次，为了使得贡献能够匹配上，我们要把内部在做一次回路改奇偶的操作，这个返回使得 vvv 子树内边经过 222 次。

第二部分是直下：

常数 111 代表边经过一次。
f(u,1,d)+f(v,0,0)f(u,1,d)+f(v,0,0)f(u,1,d)+f(v,0,0) 代表 uuu 需要返回而 vvv 必须要，我们两部分用路径穿起来即可。
f(u,1,d⊕1)+f(v,0,1)+2f(u,1,d\oplus 1)+f(v,0,1)+2f(u,1,d⊕1)+f(v,0,1)+2：同样是穿越，但是我们也要和上面一样来通过做一次改变奇偶性的操作来使得贡献能够匹配上。

对于 tmp(1,d)tmp(1,d)tmp(1,d) 的同理，这里不再细说，但是只用分讨回路的情况即可，因为因为要回到 uuu。
对于合并当子树已经保证全为 111 的时候可以不用合并，对答案无影响。直接做，时间复杂度 O(n2)O(n^2)O(n2)。但是注意到转移只有和式，可以通过换根 DP 来进行代替枚举法的决策。具体的，我们需要维护一个 pre,sufpre,sufpre,suf 表示前缀儿子 fff 合并后的数组和后缀 fff 合并后的数组，转移利用 preprepre 和 sufsufsuf 即可，具体见代码，时间复杂度 O(n)O(n)O(n) 但有巨大常数难泵。
总结：枚举法可以帮助我们确定决策，虽然我们可以在后面优化掉，但这是一个优秀的决策确定方式。同时对于树上路径 DP 问题（不要和点分治搞混了）可以考虑枚举起始点，然后通过换根 DP 确定。
 P6773 [NOI2020] 命运 - 洛谷
为什么上一题不是黑？我没有对这个题有意见这个题很好但是上面这个题是紫这也太炸杠了吧。
发现最近做 DP 题已经养成一个完整的流程了，这是极其好的。
首先考虑发掘性质，题目叽里咕噜看不懂，但是有几个性质挺好：

对于一个 vvv 及其配对祖先 uuu，我们只需要选择最深的 uuu 即可满足限制。
一个点 uuu 将其下属边置为 111，会影响其子树内部分点的限制，但这个限制影响当且仅当范围包含 uuu（即最深祖先仍在 uuu 上方）。这个操作一开始看见有 “存在” 我就哈气，直接就转为钦定边为 111。

第二个性质是第一个性质的推论，其本质就点明了子问题的设计，即限制影响的设计。
两个性质启示我们 DP 状态的设计应当包含这个限制影响范围。设 f(u,i)f(u,i)f(u,i) 表示 uuu 子树内限制祖先深度最远到了深度为 jjj 的祖先，其他我们都保证合法的方案数。
转移考虑一个一个子树合并，利用性质 2 我们可以枚举边权设置为为 0/10/10/1 转移。

边权为 111：我们把儿子一些不合法的情况清楚，如果比 depudep_{u}depu​ 还大那就没法解决，统计为 f′(u,i)=f(u,i)×(∑j=0depuf(v,j))f&#x27;(u,i)=f(u,i)\times (\sum\limits_{j=0}^{dep_{u}}f(v,j))f′(u,i)=f(u,i)×(j=0∑depu​​f(v,j))。
边权为 000，考虑合并并且讨论大小关系：

f′(u,i)=f(u,i)×∑j≤if(v,j)f&#x27;(u,i)=f(u,i)\times \sum\limits_{j\le i}f(v,j)f′(u,i)=f(u,i)×j≤i∑​f(v,j)；
f′(u,j)=(∑i&lt;jf(u,i))×f(v,j)f&#x27;(u,j)=(\sum\limits_{i&lt;j}f(u,i))\times f(v,j)f′(u,j)=(i&lt;j∑​f(u,i))×f(v,j)。



时间复杂度为 O(n2)O(n^2)O(n2)，但是发现转移是一个区间形式的转移，考虑用线段树优化这一过程，第一个式子是全局乘，第二个式子是前后缀乘法，可以利用线段树合并优化这一过程。时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：
本题目的精髓在于状态设计的方面，在很多带限制的树形 DP中，我们会遇到一种现象就是子树内部能解决一部分限制，但有些限制不能在当前子树内解决，只能依赖于“更高的祖先”去兜底。本题目的限制 1/21/21/2 说明的就是这一点。
所以 DP 状态不能只描述当前子树内部已经解决的情况，还必须记录子树内尚未解决、但需要祖先去兜底的“残余需求”。
这是一个经典模型，以前没记录过只在脑海中有影响，现在把他记录一下，即树形 DP 留一部分问题给祖先考虑的特征状态设计。
同时像这种具有前后缀和转移关系的 DP，我们可以通过线段树合并进行优化，另一个题用到这个技巧的就是 P5298 [PKUWC2018] Minimax - 洛谷
 Gym102798K
这玩意我是真做不出来，少一个性质都做不出来，而且关键是掐死在我不了解的地方。不过这个性质刻画真挺好的吧？

给出一个长为 nnn 的排列 ppp，现在要把这 nnn 个点按照下标顺序依次建立 BST。给定区间 [L,R][L,R][L,R]，问把 [L,R][L,R][L,R] 区间重排（顺序随意）后使得 BST 最小深度和是多少。
1≤n≤105,R−L&lt;2001\le n \le 10^5,R-L&lt;2001≤n≤105,R−L&lt;200。

接下来，你将看到看起来比较简单性质。
考虑这玩意怎么建树，BST 我看不懂，但是我换成笛卡尔树就看懂了。换成笛卡尔树就是以下标作为堆键值，以 pip_{i}pi​ 作为满足二叉搜索树的值。
然后，考虑如何刻画这个笛卡尔树，注意到这个笛卡尔树子树管辖区间从下标区间变成了值域区间。但是我们以值域区间来刻画的话发现没有什么深度和的性质。
我们考虑把它放到坐标系（没错这个我用了将近很长时间才想出来），坐标为 (pi,i)(p_{i},i)(pi​,i)，那么笛卡尔树的形态在坐标系上表现如下，以下为 p={3,1,2,5,4}p=\{3,1,2,5,4\}p={3,1,2,5,4} 的形态：

我们考虑操作，操作 [L,R][L,R][L,R] 重排就是任意交换 y∈[L,R]y\in [L,R]y∈[L,R] 这些点的 xxx 坐标。
考虑设这些点为关键点，然后我们手摸几个交换操作不难发现一个性质：

关键点所形成的极大连通块进行重排操作只改变内部的结构，而且不会相互影响，其他连通块的结构都不变。原因就是因为不改变其他点和关键点之间的偏序关系。

我们考虑借助这个来进行重排过程，我们 DP 的主体就可以对连通块进行考虑了，但是深度和怎么刻画，接下来我们就要用一个我不知道的二叉树性质：
∑i=1nsizi=∑i=1ndepi\sum\limits_{i=1}^n siz_{i}=\sum\limits_{i=1}^n dep_{i}
i=1∑n​sizi​=i=1∑n​depi​
当且仅当 deprt=1dep_{rt}=1deprt​=1，若为 000 需要额外加 nnn。
现在问题转化为最小化关键点的子树大小和，我们设连通块大小为 mmm，我们把这个连通块内接的 m+1m+1m+1 个子树全部都取出来，让后将里面所接的 m+1m+1m+1 个子树全部都取出来，然后将它们的 sizsizsiz 按照中序遍历排列成 aaa，让后次拿一个根然后把区间划分成两部分。这是区间 DP，设 f(l,r)f(l,r)f(l,r) 表示区间 [l,r][l,r][l,r] 所得最小子树和：
f(l,r)=(r−l+∑i∈[l,r]ai)+min⁡(f(l,k),f(k+1,r))f(l,r)=(r-l+\sum\limits_{i\in[l,r]}a_{i})+\min(f(l,k),f(k+1,r))
f(l,r)=(r−l+i∈[l,r]∑​ai​)+min(f(l,k),f(k+1,r))
时间复杂度 O(n+(R−L)3)O(n+(R-L)^3)O(n+(R−L)3)。
总结：
深度和学到了可以用子树和上进行规划来转化。
二叉搜索树可以转成笛卡尔树建立，这启示我们简单结构可以从复杂结构反推。
树重排规划问题联想区间 dp，因为它的枚举断点过程其实就是树枚举根的过程。
 P11364 [NOIP2024] 树上查询
人生中第 300 道洛谷上的紫！
一眼数据结构题，但是我们做题步骤也可以借鉴 DP。考虑发掘性质，首先这个 LCA*\text{LCA*}LCA* 操作如何刻画呢，考虑所有操作都是 LCA，多次涉及 LCA 考虑往虚树考虑。
然后发现这玩意其实就是 min⁡i=lr−1LCA(i,i+1)\min_{i=l}^{r-1} \text{LCA}(i,i+1)mini=lr−1​LCA(i,i+1)。证明用虚树逐渐加点就可以证明。至此，我们可以解决 B 性质，B 性质的本质就是在问上面，可以 O(nlog⁡n)O(n\log n)O(nlogn) 预处理 LCA 加线段树求得，这样我们就有了 12 分可以做啦。
接着我们考虑有了这个段如何做？考虑发掘继续发掘性质：

题目所有询问的区间都是编号连续的区间，且询问可以离线。
固定右端点，延申左端点 LCA*\text{LCA*}LCA* 单调不降。

首先定个目标时间复杂度为 O(nlog⁡2n)∼O(nlog⁡n)O(n\log^2 n)\sim O(n\log n)O(nlog2n)∼O(nlogn)。
然后根据题意模拟将询问离线下来，我们可以暴力根据 kkk 预处理询问，然后暴力处理，时间复杂度 O(n2log⁡n)O(n^2\log n)O(n2logn)，无法通过。考虑优化，发现优化不动，因为无论怎么着我们都需要把询问都提前暴力预处理出来。
正难则反，考虑反着做，但是对什么反着做？考虑我们是根据 kkk 预处理段，然后询问答案。但是我们已经有的信息就是 LCA*，能不能枚举答案，然后询问有没有长 ≥k\ge k≥k 的段呢？
这样做或许可行，先简化问题，将上面区间的性质拆为 [1,n][1,n][1,n]，但是答案很难搞，我们把这个答案拆分贡献，将贡献拆到每个点上。即这个点贡献 LCA*。
我们有长为 n−1n-1n−1 的序列，值为 LCA(i,i+1)\text{LCA}(i,i+1)LCA(i,i+1)，另一个 n−1n-1n−1 的 01 序列初始全为 0。 考虑在答案值域上从大往小扫，那么从 i←i−1i\leftarrow i-1i←i−1，就会出现几个点被设为 1，而询问要求问的是有没有 ≥k\ge k≥k 长度的极长连续段。可以通过线段树维护最大子段和或并查集来做到 O(nlog⁡2n)∼O(nlog⁡n)O(n\log^2 n)\sim O(n\log n)O(nlog2n)∼O(nlogn)。
接着考虑有了区间限制，考虑这个区间限制如何合法，，不难分讨四种情况：

l≤l′≤r′≤rl\le l&#x27;\le r&#x27;\le rl≤l′≤r′≤r；
l′&lt;l≤r′≤rl&#x27;&lt;l\le r&#x27; \le rl′&lt;l≤r′≤r；
l≤l′≤r&lt;r′l\le l&#x27; \le r &lt; r&#x27;l≤l′≤r&lt;r′；
l′&lt;l≤r≤r′l&#x27;&lt; l \le r \le r&#x27;l′&lt;l≤r≤r′。

最后一种显然合法，第一个可以拍入到其他方案，而第二个第三个需要对 l,rl,rl,r 单独计算，是一个二维偏序，可以用扫描线做，但是直接做是三维偏序，很难维护，考虑进一步发掘性质。
k≤r−l+1k\le r-l+1
k≤r−l+1
我们考虑从大到小扫描 kkk，将 [l′,r′][l&#x27;,r&#x27;][l′,r′] 的询问拆成左端点询问到 r′−k+1r&#x27;-k+1r′−k+1，右端点询问到 l′+k−1l&#x27;+k-1l′+k−1。
时间复杂度 O(nlog⁡2n)→O(nlog⁡n)O(n\log^2 n)\to O(n\log n)O(nlog2n)→O(nlogn)。
总结：
本题目作为 NOIP T4 完全合理。部分分不知道链有什么性质。
正难则反什么时候会用到，你需要考虑正着做是没有前途（即无论如何都无法简化问题），那么可以考虑正难则反。
从简单情况入手，一步一步思考。同时数据结构能离线则先考虑离线，离线能够将算法卡死在一定范围内帮助思考。
在题目多次涉及 LCA 的时候往虚树思考，利用虚树来去刻画题目的限制。
 AT_abc216_h
好题，以后看到不相交路径可以直接开始哈气了。
首先假概率，实际上 ans=不相交路径方案数2nkans=\dfrac{\text{不相交路径方案数}}{2^{nk}}ans=2nk不相交路径方案数​。
那么现在问题转化为求解上面的东西，注意到这玩意有一套成熟的东西叫做 LGV 引理。但是我们知道的是 LGV 引理是有起点和终点的，但是这里只有起点没有终点。显然不能直接做，那么回归老本行，考虑发掘性质：

k≤10k\le 10k≤10。
LGV 引理的本质就是行列式求路径计数问题，是进一步的引理推论。

首先第一个性质至关重要，由于没有不相交路径，我们可以考虑枚举终点 yyy，那么从起点走到终点的方案数简简单单就能够算出来就是 (nyi−xi)\dbinom{n}{y_{i}-x_{i}}(yi​−xi​n​)。第二个性质表明路径计数的本质逆序对计数，可以转化为以下式子：
∑ysgn(y)∏i=1k(nyi−xi)\sum\limits_{y}\text{sgn}(y)\prod_{i=1}^k\binom{n}{y_{i}-x_{i}}
y∑​sgn(y)i=1∏k​(yi​−xi​n​)
其中 sgn\text{sgn}sgn 还是行列式那个奇偶性的容斥系数。显然可以用行列式计算，但是枚举 yyy 的成本过大。
注意到 k≤10k\le 10k≤10 且值域极小，考虑状压 DP。我们主体在 yyy 的值域上进行规划。设 f(i,S)f(i,S)f(i,S) 表示目前处理到坐标 iii，目前已经状态为 SSS 的起点确定了终点的合法方案数。转移就是枚举是否有一个起点选择位置 iii 作为终点（显然合法方案不会有两个起点走到一个位置作为终点）。
枚举哪个起点选择 iii 作为终点，有转移：
f(i,S)←f(i−1,S)(不选)f(i,S)←(−1)cnt(ni−xj)f(i−1,S)(选j)\begin{aligned}
f(i,S) &amp; \leftarrow f(i-1,S) &amp; (\text{不选}) \\
f(i,S) &amp; \leftarrow (-1)^{cnt}\binom{n}{i-x_{j}}f(i-1,S) &amp; (\text{选} j)
\end{aligned}
f(i,S)f(i,S)​←f(i−1,S)←(−1)cnt(i−xj​n​)f(i−1,S)​(不选)(选j)​
答案即为 f(V,2k−1)f(V,2^k -1)f(V,2k−1)，其中 VVV 为值域，时间复杂度 O(nk2k)O(nk2^k)O(nk2k)。
总结：
路径不相交问题首选逆序对容斥，然后分为两种情况：如果终点确定那么可以套用 LGV 引理；如果数据范围小那么可以 dp 计算容斥系数。
状压 DP 当然也可以用于确定序列，这个技巧同样在确定排列插入法的时候用过，时间复杂度会贡献 O(值域)O(\text{值域})O(值域)。
 AT_arc121_f
好题，因为这个题我直接在性质就翻车了。
对于这种构造操作顺序的题和合并问题可以从叶子开始考虑。
分类讨论叶子和连边情况：

叶子为 0 且边为 AND：操作这个点会让父亲为 0，优先操作一定最优。
叶子为 0 且边为 OR：可以省略无影响。
叶子为 1 且边为 AND：可以省略无影响。
叶子为 1 且边为 OR：叶子以外的部分任意操作，最后都能合法。

除了第一种情况剩下的我们都可以无脑操作。根据上面的结论我们可以暴力讨论写50行转移方程。但是官方给出更方便的做法，设 f(i)f(i)f(i) 表示子树内不存在 1 or 的情况，gig_{i}gi​ 表示 fif_{i}fi​ 中合法情况个数。转移：

考虑边是 and 或 or，我们把 1 or 的情况除掉：f(u)←(2f(v)−g(i))⋅f(u)f(u)\leftarrow (2f(v)-g(i))\cdot f(u)f(u)←(2f(v)−g(i))⋅f(u)。
考虑是 1 and 或 0 or：g(u)←g(u)⋅f(u)g(u)\leftarrow g(u)\cdot f(u)g(u)←g(u)⋅f(u)。

答案考虑容斥原理，就是 22n−1−f(1)+g(1)2^{2n-1}-f(1)+g(1)22n−1−f(1)+g(1)。
总结：对于这种构造操作顺序的题和合并问题可以从叶子开始考虑。因为叶子是树中最灵活的部分，就像质数在数论构造中的作用。可用于保证某个相关数值“能够调整至任意一个 [l,r][l,r][l,r] 内的值”。从叶子自底向上考虑是一个很好的思路。这个是我第一次见在其他地方运用这个技巧。
 P8392 [BalticOI 2022] Uplifting Excursion (Day1)
背包好题？
考虑发掘性质，注意到本题是多重背包，但是炸杠的是背包容量过大。考虑发掘性质，注意到背包物品容量极小，但是数量极大。考虑多重背包的做法有一个叫二进制拆分的做法。看一下能不能行。
首先将所有物品都进行二进制拆分，形式会如同 siz=20+21+22+⋯+剩余大小siz=2^0 +2^1+2^2+\dots+\text{剩余大小}siz=20+21+22+⋯+剩余大小。我们考虑将这个剩余大小完整拆分到二进制，然后将物品分配到对应的二进制位。
然后从低位到高位跑背包，设 f(i,j)f(i,j)f(i,j) 表示当前考虑到数位 iii，容量为 jjj 的最大选取个数。但是注意到这样容量这一维度显然会炸掉。但是我们发现我们数位就是在容量的二进制数位上进行 DP，考虑利用 2i2^i2i 进行优化，重设状态，设 f(i,j)f(i,j)f(i,j) 表示考虑到二进制瞎数位 iii，容量为 2i×j2^i\times j2i×j 的最大选取个数。
但是如果直接做的话还是不太行，因为我们贡献是累加到 jjj 的，继续优化，考虑一个动态的状态设计（Desant 后遗症），我们到下一个数位的时候可以将上一个的数位贡献去掉，那么这样第二维的状态数量就在 O(n2)O(n^2)O(n2) 级别。时间复杂度为 O(n3log⁡n)O(n^3\log n)O(n3logn)。
总结：
总容量大，但是物品重量很小的背包，可以按二进制位考虑压缩有效状态数。这种动态的状态设计可以优化掉一维度很大的方法，是一个不太常见的优化方法，类似的题目在 P5972 [PA 2019] Desant - 洛谷 出现。
 CF1239E Turtle
一巴掌给我扇飞了，好题但是我是 zz。
首先考虑给定矩阵，如何刻画乌龟的路径，有性质：乌龟走的一定是第一行从开头的一段的连续路径，然后下去走到头。故设 preipre_{i}prei​ 表示第一行的前缀和，sufisuf_{i}sufi​ 表示第二行的后缀和。那么答案就是 max⁡i{prei+sufi+1}\max_{i}\{pre_{i}+suf_{i+1}\}maxi​{prei​+sufi+1​}。
考虑重排操作有没有什么性质，有一个贪心的想法，我们让第一行从小到大排序，第二行从大到小排序，这样列列操作一定是最优的，证明考虑从逆序对入手进行反证法即可。然后问题转化为行行之间刻画，可以考虑利用 DP 进行计算，但是代价计算是 max⁡i{prei+sufi+1}\max_{i}\{pre_{i}+suf_{i+1}\}maxi​{prei​+sufi+1​}。我们没法进行转移啊！
考虑简化代价，我们考虑排序的会对乌龟的决策带来什么决策，关键性质：乌龟要么在开头就往下走然后走完第二行，要么走完第一行然后往下走走到终点。
那么代价可以简化成：a(1,1)+a(2,n)+max⁡{∑i=2na(1,i),∑i=1n−1a(2,i)}a(1,1)+a(2,n)+\max\{\sum\limits_{i=2}^{n}a(1,i),\sum\limits_{i=1}^{n-1} a(2,i)\}a(1,1)+a(2,n)+max{i=2∑n​a(1,i),i=1∑n−1​a(2,i)}。前面是固定的，后面是不固定的。直接飞上去 DP 进行决策：设 f(i,j,k)f(i,j,k)f(i,j,k) 表示考虑到第 iii 个数，第一行一共选了 jjj 个数，选出数的总和 kkk 是否可能。最后让总和尽可能对半分即可。
注意到这个是可行化 DP，但是值域和 nnn 极小，可以用 bitset 优化，时间复杂度 O(1wn2∑a)O(\dfrac{1}{w}n^2 \sum\limits a)O(w1​n2∑a)。
总结：
本题目创飞我一点就在于简化代价计算，比如取最大值的代价可以考虑会在那些地方取得（相当于拆分贡献思想），如果代价复杂 dp 是转移不动的。
同时本题目也体现了一个背包组合的约束现象，很多时候背包会存在（隐藏的）拓扑关系，这时候的结论可能是选了小价值物品就必须选大价值物品。
 CF1481F AB Tree
很可惜我不是来这里学二进制分组加 bitset 优化多重背包。我是来这里学完全背包优化可行性多重背包的。
注意到答案很奇怪，写个暴力（自从那个构造之后就有写暴力发现性质）发现答案上界在最大深度和最大深度加 111 之间徘徊。
考虑分析最优解构造，注意到答案和深度有关。考虑按层构造，每一层我们尽量填入相同的字符，设出现次数较大的字符为 ccc，因为要降低对儿子的影响，所以把非叶节点填入颜色 ccc，设 mmm 为未填写的字符，因为非叶节点的出现次数 ≤m2\le \dfrac{m}{2}≤2m​，而 c≥m2c\ge \dfrac{m}{2}c≥2m​，所以一定能填满，然后把 ccc 填入这一层的叶节点，剩下的就只有另一种颜色的，填入到其它点中，不难发现只有当前层会多一种不同的字符。
那么现在问题转化为能不能每一层都能填写相同字符,若可行输出用 DP 求解答案并输出方案，否则贪心按照上述方法构造即可。
不难发现这个 DP 可以当作背包 DP，把每一层的节点数量当作物品，那么这就是一个多重背包可行性问题。直接做是 O(n2)O(n^2)O(n2) 的，但是发现物品种类数最多 O(n)O(\sqrt{n})O(n​) 级别的（。可以通过 bitset 加二进制分组优化到 O(nnw)O(\dfrac{n\sqrt{n}}{w})O(wnn​​)，输出方案可以加个回溯也是 ok 的。但是问题在于我不是来这里学这个的。我们换个思路，因为多重背包求解的是存在性问题，可以转化为类似完全背包的模型。
具体的我们通过背包维护剩余数量，设 f(i,j)f(i,j)f(i,j) 表示用前 iii 种物品凑出 jjj 总和 jjj。若 f(i,j)&lt;0f(i,j)&lt;0f(i,j)&lt;0 则不可能凑出。若 f(i,j)≥0f(i,j)\ge 0f(i,j)≥0 表示第 iii 种物品还剩下 f(i,j)f(i,j)f(i,j) 种没用。
转移考虑分类讨论，令当前物品重量为 www，数量为 ccc：

不使用第 kkk 种物品，当且仅当 f(i−1,j)≥0f(i-1,j)\ge 0f(i−1,j)≥0。则 f(i,j)←cf(i,j)\leftarrow cf(i,j)←c。
已经用过第 kkk 种且 j−wj-wj−w 可行。则 f(i,j)←max⁡j−w≥0f(i,j−w)−1f(i,j)\leftarrow \max\limits_{j-w\ge 0} f(i,j-w)-1f(i,j)←j−w≥0max​f(i,j−w)−1。

实现中转移需要 jjj 从小往大遍历。这种用完全背包把数量限制转化为记录剩余数目的技巧有点常见。
总结：
一类不关乎价值只关乎重量的可行化多重背包可以用完全背包把数量限制转化为记录剩余数目。将空间简化。
 P3780 [SDOI2017] 苹果树
这是什么背包？
咨询 CatGPT 有一个我没理解的题意：选取了一条节点，那么从这个节点到祖先都要取。这个性质很好，问题相当于选择从根到某个点的路径，免费选一个苹果，再做树上依赖性背包。这个点肯定是叶子，因为多选免费苹果一定更优。
然后考虑 t−h≤kt-h\le kt−h≤k 有什么用，简单变形为 t≤k+ht\le k+ht≤k+h。注意到 hhh 就是最长深度。通过枚举法我们钦定一条到叶子的链作为最长深度（显然在上面）。然后剩下的就是简单的树上依赖性背包，直接做的话时间复杂度 O(n2(n+k))O(n^2(n+k))O(n2(n+k))，无法通过。考虑优化这一过程。
首先枚举法不能丢，我们发现对每个节点都重新求答案还是太超标了。能不能利用一些共性答案，我们发现如果以这个链把子树劈开，会分成左右两边，左边和右边是独立的与链无关，可以通过树上依赖背包算出来然后合并答案到一起。具体的，类似序列上的前后缀背包合并，我们求出正 dfn 序的背包和逆 dfn 序的背包，然后把它们合并起来就可以得到答案。
求解正序背包时，我们把必须选取的点（指选某个点导致其链上的点必须选取）和随意选取的点分开。进入一个点的时候加入随意选取的点，递归时把当前背包复制给儿子，然后从儿子回溯时加入当前点。
向背包中加入随意选区的点可以用单调队列优化，而逆序把建边从大到小编号建边即可。
答案合并就是 f(u,i)+g(u,k−i)+f(u,i)+g(u,k-i)+f(u,i)+g(u,k−i)+ 当前链长度，时间复杂度 O(nk)O(nk)O(nk)。
总结：
枚举法真的很好用！可以帮助我们确定决策，最好用的一集！
这种 DFS 序的多重背包其实正式名称就叫树上依赖性背包。树上依赖性背包形如在树上选出若干个物品做背包问题，满足这些物品连通。由于 01 背包，多重背包和完全背包均可以在 O(V)O(V)O(V) 的时间内加入一个物品，O(V2)O(V^2)O(V2) 的时间内合并两个背包，所以不妨设背包类型为多重背包。是前后缀背包思想的运用。
 CF917D Stranger Trees
等会，题面这个图还有题目背景，莫非是？

咳咳，回到正题，首先看到 “恰好” 直接哈气。用二项式反演反演成至少，有：gk=∑i=kn(ik)fi⇔fk=∑i=kn(−1)i−k(ik)gig_{k}=\sum\limits_{i=k} ^n \binom{i}{k} f_{i} \Leftrightarrow f_{k}=\sum\limits_{i=k}^n (-1)^{i-k} \binom{i}{k} g_{i}gk​=i=k∑n​(ki​)fi​⇔fk​=i=k∑n​(−1)i−k(ki​)gi​。其中 fff 为答案，ggg 为至少 kkk 条边相同的方案数。
然后考虑 ggg 怎么算，发现这玩意我们把钦定的 iii 条边断开，会形成 n−in-in−i 个连通块，而这些连通块都是独立树计数的。根据 Prufer 定理有任意连边方案数：
nm−2∏i=1msin^{m-2}\prod_{i=1}^m s_{i}
nm−2i=1∏m​si​
mmm 为连通块个数，其中 sis_{i}si​ 还是连通块大小。
然后考虑如何快速计算，发现如果直接做因为边不确定状压直接爆炸。数据范围 O(n3)O(n^3)O(n3)，考虑发掘性质。
我们考虑把 gkg_{k}gk​ 的组合意义拆分，前式子可以随便计算，而后面却要求我们快速不用状压计算。考虑 DP，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示 iii 子树内，分成了 jjj 个连通块，当前 iii 所在连通块大小为 kkk 的方案数。时间复杂度 O(n3)O(n^3)O(n3) 可以 O(1)O(1)O(1) 转移但是我认为是 O(n4)→O(n5)O(n^4)\to O(n^5)O(n4)→O(n5) 就很难泵。
但是我们显然有更好的做法，考虑我们只是在计算 ∏i=1msi\prod_{i=1}^m s_{i}∏i=1m​si​，考虑复杂度瓶颈就是在于这个 kkk 这一维度让我们的优化没有前途。考虑切换组合意义，发现 ∏i=1msi\prod_{i=1}^m s_{i}∏i=1m​si​ 的本质就是给每个连通块内部任意定根的方案数，把根是否确定放进状态中即可。
那么这很好考虑设 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示 iii 子树内，分成了 jjj 个连通块，iii 所在连通块是否定根的方案数，转移用背包对子树合并即可，时间复杂度 O(n2)O(n^2)O(n2)。
总结：

当我们组合意义出现嵌套的时候，方法就是给我们的价值函数确定一个组合意义。常用的技巧是拆分法，把复杂的价值函数拆成几个可独立处理的部分，然后分别计算再合并。这个时候 dp 就需要同时完成确定局面和组合计数的功能。
当我们在对具有组合意义的价值函数进行 DP 的，如果我们发现优化不动（确定没有前途）那么我们可以考虑切换组合意义，来达到优化的效果。

 8.22 模拟赛 T3
2025 牛客多校 Ghost in the Parentheses
全场唯两个可做题。首先这个概率又是假的，直接拆成 合法方案数2∣S∣\dfrac{\text{合法方案数}}{2^{|S|}}2∣S∣合法方案数​。
首先考虑什么时候括号序列可以唯一确定，由 GF 惨痛经历我们将 ( 抽象为加 111，将 ) 抽象为减 111。
我们考虑，假如你是 Bob，你收到一个字符序列如何确定唯一？根据上面的法则，大胆猜想有一个结论：考虑去掉所有问号，我们对原序列按照上面做前缀和，记总和为 sumsumsum。当 ∣sum∣&gt;0|sum|&gt;0∣sum∣&gt;0，我们就把问号去掉一个，同时 ∣sum∣←∣sum∣−1|sum|\leftarrow|sum|-1∣sum∣←∣sum∣−1。若 ∣sum∣=0|sum|=0∣sum∣=0 但是还有问号，那么显然不唯一，否则唯一。
严谨的：定义从左到右扫描，设在位置 iii 之前（含已固定的 ?）的平衡必须取某个确定值（否则不能满足末尾为 0 或中间某个前缀非负）。若在某个时刻偏差为 d&gt;0d &gt; 0d&gt;0，则为了保证后文能回到 0，接下来至少要出现 ddd 次取 −1-1−1 的位（这些要么在已知字符里，要么必须由 ? 来承担）。若这些 −1-1−1 必须由特定位置的 ? 来提供（因为已知字符的位置和数量固定），那么这些 ? 的取法就被唯一决定；重复此论证直至结束，所有 ? 都被唯一确定。因此当贪心能把 ∣S∣|S|∣S∣ 一步步消到 0 恰好用尽所有 ? 时，没有任何 ? 是“可自由选择”的，从而合法补全唯一。
然后我们考虑这个结论怎么用？这还只是我们知道序列，但是现在不知道序列，我们思考什么时候我们能唯一确定 ?。
令 L,RL,RL,R 表示前缀左括号个数和于前缀右括号个数和。我们发现当一个某个位置前缀和为 111 的时候，那么一定是形如 合法序列+ ( 的形式。那么我们可以发现，如果我们把里面的 ( 随意改变为 ? 的话，根据上面的结论，不会影响答案，因为这些 ( 会被唯一确定，组合数 2Li2^{L_{i}}2Li​。同理于右括号，每个右边的 ) 仍然可以自由选择是否变成 ?，故一个前缀和为 111 的位置贡献是 2Li⋅2Rn−Ri2^{L_{i}}\cdot 2^{R_{n}-R_{i}}2Li​⋅2Rn​−Ri​。
通过加法原理和起来答案即可，但是会发现算重，我们算一个位置的贡献要减去下一个位置的贡献即可，时间复杂度 O(∣S∣)O(|S|)O(∣S∣)。
总结：不确定的元素可以思考其中的确定性作为突破口统计答案。
 CF1615G Maximum Adjacent Pairs
本题将不实现，原因涉及算法等级超标，但是这种建模思想和思路过程还是需要讲一下的。
考虑分析性质，首先不难观察到如下的性质：

值域 600600600 较小，对于 kkk 的限制条件计数只会算一次。
对于单个 000 的情况，可以考虑贪心的去匹配，即考虑左右两边挨的数是否已经匹配过了即可。对于多个 000 的情况，其左右两边可以根据前面所说的贪心匹配，而中间的段会单独贡献答案，可能需要特殊计算。
确定值的过程可以看作类似于二分图匹配的问题。

以后遇到这种问题，我们要出动三小只：DP，贪心，图论等其他模型建立。
考虑 DP，根据上面的性质显然有一个 DP 的想法就是设 f(i,S)f(i,S)f(i,S) 表示到了第 iii 个 000 数，当前相邻限制出现集合为 SSS。时间复杂度直接超标，考虑优化，发现这个限制是全局的，如果我们通过 DP 在构造过程中不去记录那么会不满足。容易发现 DP 是没有前途的，遂放弃。
考虑贪心，前面的性质我们已经提到过单个 000 的情况可以任意贪心，然而多个 000 是不太好去搞这种决策的，因为这个是具有后效性不太好搞，但是注意到我们是在注意确定值，而且要求恰好计数 1 次，这不就是图的匹配问题吗。
考虑图论模型，我们从这个题开始将开始大范围的凸轮联系，我们要和 DP 一样标准化做题流程。以这个题为例：
 图论模型的建立
首先我们要考虑对什么对象建立模型，即我们要选取建模主体，然后考虑用图论的意义来去表示原问题。
一般情况，我们会以题目的一个限制为基础建立模型，这一步不要被思维定势所局限，大胆去想，小心求证！
注意到我们是将 000 的值一一确定，且根据前面的相邻限制，一个值只会被计入一次，这是一个类似于二分图匹配的问题。
 图结构的分析与建立
我们思考原问题中各元素在图上的含义，一个值只贡献一次告诉我们把值建成点会好一些，同时我们把 0 也建成点，
0 的填法产生贡献相当于和对应的值匹配，我们建立边就可以决策这个过程。
更具体地可以考虑原序列上连续的一段 0，根据贪心原理只有连续段边上的 0 才会和值匹配，其他的 0 都另寻它路了，简单讨论一下：

如果连续段的长度为偶数，那么我们建立两个代表 0 的点 x,y，首先将 x,y 连一条边代表他们可以自己匹配，然后我们将 x 连向左边的值，y 连向右边的值。
如果连续段的长度为奇数，那么我们建立一个代表 0 的点 x，把它和左边的值和右边的值都连边。

 转化问题加寻找结论
如上建边，我们可以通过跑最大匹配来去解决问题，这个时候由于图显然这样建边会存在环，我们可以通过跑一般图最大匹配来去解决，然后就做完了，至于那些神秘的优化那都是后来的事情了。
总结：
这种题目属于一种难以处理的全局限制，这种全局性限制之所以难以处理就是我们无法拆分为独立的限制来去解决，以后遇到这种难以处理的全局性限制我们可以以图论的角度来去解决问题、
 CF1368G Shifting Dominoes
性质最多的一集，这是解题报告，所以会比较长且出现一些导向型但非正解的做法。
显然考虑计数，但是我们先分析性质再考虑用什么做法维护，在看题过程中不难发现如下性质：

所有骨牌最多左右上下移动一格。且一种方案有且只有两个空位。
对于移动所产生的效果的移动是连续的，以空位不断向外进行拓展。
看见方格图就哈气进行黑白染色，那么题目中删掉块所产生两个相邻的空格是黑白不同色的。
由性质 1 导出计数过程，方案是对局面的空格位置进行计数。

这些是一些基本的结论，通过性质 4 我们发现我们要将我们的计数主体放在空格上而不是方块上。
然后我们考虑一次骨牌移动到空位会产生什么影响，有图，这张图黑白染色改为了蓝红染色以作鲜明区分：

竖过来也是一样的，这种我们不好用 DP 来去解决这种空格移动，但是我们可以通过图论模型来表示这个操作！具体的就是根据上面类似的进行建边转移即可。
同时我们还能从这个图导出一些性质：

根据上面图和建边方式，不难发现一次移动两格，而我们图是黑白染色。也就是说一个空格移动所到达的点一定和这个空格同色。进一步的，也就是说黑色格子和白色格子是互相独立的。
所有点入度最多为 1。

性质 5 和 6 是非常好的性质，我们可以通过性质 5 导出独立性的结论，这样我们只需要对黑色格子和白色格子单独做一遍这个图论。而性质 6 通过和前面性质 2 结合起来能够说明本图至少是一个基环外向树。但是进一步的（显然我没想到这一点）可以发现本图不存在换，因为反证法，加入存在一个环，那么通过上面操作可以移动一圈将空格子回到原点，但是原点已经被一个骨牌覆盖了。
那么更好啦，这个图就是一个外向树森林，那么一个空格子所能转移到的都是这个森林某个树的一个子树，根据前面的性质也能导出来两个空格的移动是独立的。这是一个二维矩形问题，各个维度代表独立的格子，且到达的子树可以表示为一个 DFN 区间。那么我们可以通过扫描线求矩形面积并来解决这个问题，时间复杂度 O(nmlog⁡nm)O(nm\log nm)O(nmlognm)。
总结：
以后遇到这种矩形中类似推箱子的问题，可以把箱子的移动转化成空格的移动，建立关于空格移动路径的图。同时本题目我们通过性质 5 导出独立性的结论，将多个对象的问题可以找独立性来转化成单个对象的问题。
以后看见方格图就可以哈气染色，哈气是好习惯。
 CF1458D Flip and Reverse
不是上一个题那么多性质，我做这就很高兴。现在一个性质都没有？
这种数量相等可以借鉴检验括号序列的思路，我们将 0→−1,1→10\to -1,1\to 10→−1,1→1，那么做一个前缀和，那么操作的第一个条件数量相等就可以表示为前缀和 sumi=0sum_{i}=0sumi​=0，那么一个合法子串 s[l:r]s[l:r]s[l:r] 能够被表示的条件就是 suml=sumr=0sum_{l}=sum_{r}=0suml​=sumr​=0。然后就找不到性质了。
然而实际上我们可以通过前缀和的变化来看（差分），这种复杂的区间修改操作我们可以通过差分的思想来去解决。
我们考虑 sumsumsum 的变化，考虑按照原字符串建立一张图。对于每一个 sumsumsum 值建立一个点。例如说现在的 sumsumsum 值为 ttt, 遇到了一个 1, 然后我们从 ttt 到 t+1t+1t+1 连一条无向边。
选择一个 1 和 0 数量相等的字符串，前后的 sumsumsum 值一定相等。于是这就形成了一个环。
考虑将这个字符串取反，其实相当于从这个点绕着这个环走一圈。
然后我们要求的是这张图的最小字典序的欧拉路径。
可以考虑贪心，能向小的数走就往小数的走。
怎么判定数 t 能不能往小数 t−1 走？首先一定要有 t 到 t−1 的这条边，如果 t 有到 t+1 的边那么 t 到 t−1 的边数至少为 2 （肯定要返回 t）。时间复杂度 O(n)O(n)O(n)。
本题所考察的知识点最高难度等级为 6 级，并不算高，为欧拉路径(6)，贪心法(3)，前缀和(3)，string类与相关函数(2)，数组与数组下标(1)，cin语法scanf语句cout语句(2)，for语句(2)，难度不超过提高组所规范的难度，考察了选手图论建模的能力，实现标程极为简单。但预期绝大多数选手无法获得有效分数。
总结：
这种区间修改类的问题我们可以通过差分的思想来进行转化，区间元素和的判定问题可以把前缀和建成点，原图中的元素建成连接前缀和的边
 CF1361E James and the Chase
DFS 树经典应用。
首先考虑如何判断一个点是合法的，考虑建出 DFS 树，由于这是有向 DFS 树，那么会出现三种边：树边，横叉边，返祖边。不难发现只有横叉边只有一个不满足条件，所以只要保证 DFS 树里面没有横叉边即可。可以 O(n)O(n)O(n) 判断啦。
然后你发现复杂度是线性 log⁡\loglog 的直接爆炸，因为一次判断复杂度是 O(n)O(n)O(n)。考虑进一步发掘性质，我们无法枚举所有的点，也就是说我们只能枚举部分点，然后从这个部分点推出所有点的答案。
我们根据上面判断法则进一步推广，不妨设我们枚举的一个合法点为 rtrtrt（显然可以 O(n)O(n)O(n) 判断），那么先建立出 DFS 树，然后我们考虑一个结点 uuu 如何判断合法？
直接找充要条件显然是炸裂的，先找必要条件，首先由于是有向 DFS 树，一个点合法是能够到达所有点为前提条件的，那么它想要走出子树到达其他点显然只能靠返祖边，横叉边不行因为一开始我们枚举 rtrtrt 判断子树内没有横叉边了。
进一步限制这个从子树内走出子树外的返祖边有且仅有一条，否则 uuu 到祖先就有两种方案一定不合法。
现在考虑构造充分性，上述条件能走出子树有且仅能到达祖先点，但缺乏的条件就是到了祖先出了子树也可能也到不了其他点，或有多条路径。那么我们构造充分性，即返祖边连向的点 vvv 必须是好点，这样构造就能够保证简单路径唯一。用 set 启发式合并求出子树返祖边即可，时间复杂度 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
现在我们可以遍历一次求出所有答案啦，但是还有问题在于如果我们暴力枚举每一个点然后进行判断是否合法，求解是 O(n2+nlog⁡2n)O(n^2+n\log^2 n)O(n2+nlog2n) 的，无法承受，而且我们无法进一步优化。考虑到题目中 15n\dfrac{1}{5} n51​n 个合法点的限制，我们从这个限制入手，导出条件也就是说一个点有 15\dfrac{1}{5}51​ 的概率为关键点，45\dfrac{4}{5}54​ 的概率不是关键点，那么我们考虑随机化，随机点然后判断是否合法。那么设进行了 kkk 次随机化，那么错误概率为 (45)k(\dfrac{4}{5})^k(54​)k，当 kkk 取 100 左右时错误概率约为 2.03×10−102.03 \times 10^{-10}2.03×10−10，可以忽略不计。
总结：图论问题再判断合法性一定要主动放在 DFS 树上进行考虑。这个题有两个难点，第一个就是 DFS 树的综合利用以及判断，第二个就是这个 20% 的限制，这个 20% 是一个关键的阈值，如果达到了 20% 就能做某事，如果达不到 20% 就可能做不成某事（不是一定做不成），那么思考这件事是什么即可。
 CF901D Weighting a Tree
先从简单情况入手，首先当 m=n−1m=n-1m=n−1 的情况，也就说原图是一个 nnn 个点的树我们如何构造。这种树的构造方法一种常见的切入角度就是剖叶子。那么就有构造方法，即从叶子开始自底向上构造，要让叶子合法边的权值只有一种可能，所以最后我们能让除了根的所有点都一定合法。这样构造能够根据根是否合法直接给出解，因为显然不存在另外的边使得让不合法根能够获得点权合法。
然后我们加大难度，当 m=nm=nm=n 的时候如何构造？首先 m=nm=nm=n 原图就是一个基环树。注意到边权可以为 000，考虑断环为链，这里就是我们选环上的一点作为根 rtrtrt，然后将这个 rtrtrt 在环上所连接的一条边边权设置为 000，然后就可以按照上面的树方法做了。如果 rtrtrt 点权为 000，显然万事大吉。但是如果 rtrtrt 不为 000，那就不好说了，因为我们和上面树条件不同的地方在于我们这里有了一条可能让 rtrtrt 合法的边。
现在的情况是我们有了一个除了 rtrtrt 以外不合法的方案，现在我们尝试简化问题。首先这是一个基环树，我们可以把环上挂的子树都给删掉，只保留环，因为环上的子树答案显然是上述 m=n−1m=n-1m=n−1 的子问题，答案已经被唯一确定，所以现在我们只需要考虑环上的问题即可。我们可以通过调整法通过调整环上我们一开始赋值为 000 的边来保证合法。考虑到到现在我们都没有利用题目中的奇偶性，我们考虑利用这个奇偶性来作为我们的条件入手点。
先考虑答案如何构造，首先找必要条件，由样例 333 与 444 能够导出一个结论，环根的点权必须是偶数，否则无解，证明考虑分类讨论：

如果 rtrtrt 的点权是奇数，那就意味着它在环上无法平分，无论怎样调整  的位置，都会导致一边奇一边偶，矛盾。
如果 rtrtrt 的点权是偶数，它就能被分成两份分别放在两条路径里，这样才可能调整出合法情况。

接下来考虑充分性证明，我们考虑从这个赋值为 000 的边构成环的来考虑，考虑到偶环是没有用的，因为它无法使得修改的带你全集中在你要修改的点上，并且偶数长度导致在调整边权时符号在回到起点时相反，两个连接到根的边得到的调整是相反数，相加为 000，总结下来就是调整偶环无法改变答案。
我们再考虑奇环，如果非树边设置的权值为 xxx，那么调整非树边 xxx 会使得环根权值变化 −2x-2x−2x 或 2x2x2x，证明用在环上的距离证明即可。根据必要条件环根为偶数，所以一旦出现奇环必定有解，故如上构造即可，时间复杂度 O(n)O(n)O(n)。
当 m&gt;nm&gt;nm&gt;n 时，找出原图的一棵 dfs 树，然后把非树边的边权赋值成 0，按照 m=nm=nm=n 的方法去做，我们找出奇环，把奇环的环根当成树根建树，然后按照上述条件调整即可，时间复杂度还是 O(n)O(n)O(n)，当然你也可以任意挑出一个生成树，但是还是 DFS 树没有横叉边的爽。
总结：很多变元的构造题中，可以只考虑少部分的变元就能给出构造方案。直观上好像每个地方都能改，但实际上很多地方是“被迫的”，一旦你确定了某些关键部分，其余部分就自动唯一确定了。
 CF1019C Sergey’s problem
调整法真好用 (•ω•)
先从简单情况入手，我们先从链的情况入手，可以按这样的方法构造出点集 VVV：选取一个点 uuu，然后删除所有满足存在有向边 u→vu\to vu→v 的点 vvv，持续这个过程直到不能操作。这个操作可以进一步拓展到树，最终能拓展到 DAG。对于树的拓展是显然的，而 DAG 考虑做一次拓扑排序，按拓扑序贪心选一次即可。
考虑进一步拓展到有环的情况，但是发现很难拓展因为会出现连边的情况。考虑分析点集的性质，它满足所有点可以通过选取点一步之内走到，但是根据构造的特点，可能后选取的点向先选取的点连了边。但是考虑到两步之内走到的限制更为宽松，我们可以在此基础上调整。
注意到，我们选出点所能构成导出子图时 DAG，考虑用拓扑排序调整，对于我们选取的点 vvv，如果存在 uuu 被选取并且 u→vu\to vu→v，那么 vvv 就不用，否则必须保留。这样就不会产生冲突，且所有点都可以在两部稚嫩走到，时间复杂度 O(n)O(n)O(n)。
总结：
调整法是一个很重要的构造方法，如果存在两个需要我们构造满足的变量，我们可以先让初状态先满足一个条件，然后再调整。此时初状态的选取依然很重要。
从简单结构拓展到一般性结构是一个重要的思考方法，DAG 的思考具有一般图所没有许多性质。
 AT_joisc2016_i 電報
一会喂我好吃的，一会喂我史，为什么呢？
考虑出度全为 111 如何利用这个关键性质，既然要保证原图强连通且出度都为 111，那么经过操作后图一定是一个大环，即所有点入度为 111。同时容易证明原图除去一开始的合法情况一定是个基环树森林。
显然 DP 不好处理，考虑贪心，有一个显然的贪心就是将每个点保留权值最大的入边，其他入边贪心的删除即可。然而这样操作后会形成若干个环，我们需要将这些环接成一个大环，考虑这个具有什么贪心性质，发现环上必定会断开至少一条环边然后和其他环接起来。所以预处理非环边的最大权值，然后贪心地看替换环上哪个点最好即可。具体的，设 mxcimxc_{i}mxci​ 为所有连向 iii 边中代价最大的，crcicrc_{i}crci​ 表示不属于 iii 所在环中连向 iii 边中代价最大的。那么我们贪心的选取 mxci−crcimxc_{i}-crc_{i}mxci​−crci​ 最大的即可，时间复杂度 O(n)O(n)O(n)。
总结：本题中度数和连通性是可以互相联系，但是不同的地方在于度数是单点的限制，而连通性是整体的限制，我们考虑单点限制是比整体限制一般情况下是比较简单的，再考虑例外来修正我们的限制转化即可。
 JOISC 2015 Day2」Keys
我去这不省选集训 Day1 T1 吗，不行这一次我一定要做出来。
考虑分析性质，首先注意到每一个时间点有且仅有一名社员进行出入操作，启示对时间点之间进行分类讨论贡献与开门情况，有分类讨论，以下时间点均为 i,i+1i,i+1i,i+1 之间的分讨：

iii 出 i+1i+1i+1 出：显然让 iii 拿钥匙可以贡献。
iii 出 i+1i+1i+1 入：需要都拿钥匙。
iii 入 i+1i+1i+1 出：随便贡献。
iii 入 i+1i+1i+1 入：后者需要拿钥匙。
否则，门都会保持打开的状态，所以有没有钥匙都一定能合法。

考虑计算贡献，贡献 3 直接记录到答案中，贡献 2,4 记录在需要钥匙的那个人上，也就是这个人有钥匙就能产生贡献。贡献 1 记录在两个人之间的边上，表示两个人都有钥匙就能产生贡献。
那么问题转化为图上选点最大化贡献的问题，但是这个图有特殊限制，考虑每个点最多连出去两条边并且不会有环，所以这张图就是若干条链。我们把这条链的端点串起来，这样就变成了序列问题，就可以直接 dp 了，设 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示前 iii 个点，放了 jjj 个 key，当前第 iii 个人有还是没有钥匙，时间复杂度 O(n2)O(n^2)O(n2)。
我很好奇能否直接进行 DP？但是显然是不行的，因为上面所说了链是多条的，如果瞎进行 DP 就会出现跨链的问题。当然我们也可以对每一条链单独做，然后背包合并。但是显然做法更麻烦，但是这个做法是在你一开始没想到链是森林状直接转移出错后会导出一个最直接的做法。
总结：
贡献法也能运用到规划问题中去，还是从小处入手，考虑贡献产生的条件即可，是无条件贡献？是点限制贡献？是边限制贡献？将贡献问题用图论进行刻画也是一个常用的技巧，将总贡献拆分到点上和边上。
 CF1307F Cow and Vacation
这是黑吗？
分析性质，发现路径一定形如：a→r1→r2→⋯→rk→ba\to r_{1}\to r_{2}\to \dots \to r_{k} \to ba→r1​→r2​→⋯→rk​→b，这种形式，其中 rrr 表示关键点（休息点）。考虑如果直接暴力去 BFS 的话显然是不行的，考虑到我们只需要判断可不可以达到即可，而路径是从 aaa 到一个关键点，然后从关键点到关键点，然后从关键点到终点 bbb。
自然引出一个想法，即我们先考虑关键点是否能到达关键点，这一点我们可以对每一个关键点维护并查集，然后通过暴力 BFS 这个题目给出的半径来维护关键点之间的连通性，设半径长度为 kkk，我们要向外拓展 k2\dfrac{k}{2}2k​ 的长度拓展。
同时，上面的做法也可以合并范围内的点能否到达这个关键点也是可以的。注意到上述拓展是最多 O(n)O(n)O(n) 遍历的。
然后我们就可以判断，首先若 dis(x,y)≤kdis(x,y)\le kdis(x,y)≤k 那么就不用走关键点。否则设 rar_{a}ra​ 和 rbr_brb​ 表示 xxx 和 yyy 在路径上前进 k2\dfrac{k}{2}2k​ 的点，若 rar_ara​ 和 rbr_brb​ 联通，则可以到达，否则不行。
直接做时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)，实现上因为 mmm 有可能是奇数，这个时候只需要双倍开点技巧让 mmm 变为偶数即可。
总结：可达性转连通性是一个关键技巧。
 CF1534F2 Falling Sand (Hard Version)
 Easy Version
分析性质，发现这个沙子掉落关系具有传递性和连锁反应，考虑用图论建模表示这种情况。
考虑用单向边表示这种扰动关系，即即若 A 能扰动 B，不代表 B 能扰动 A。考虑到建完边后一定会形成若干个强连通分量，显然随便强连通分量内的任意一个沙子都是会被掉落的，考虑缩点，得到的就是一个 DAG，而 Easy Version 由于数据保证有解而且要求沙子全部掉落，那么我们可以直接选取出度为 0 的点即可。
然而上述直接暴力建边是 O(n2m2)O(n^2m^2)O(n2m2) 的，无法通过，考虑优化建边，我们考虑沙子 AAA 下落会影响那些沙子，显然上下是具有传递性的，现在我们考虑左右，我们发现可以只需要连接 AAA 左侧第一个在它下面的点和右侧第一个在它下面的点，然后根据前面我们上下保留的边可以传递，所以这样优化之后就很好了边数为 O(4nm)O(4nm)O(4nm) 级别的，总结一下：

如果这个点上方一格有点，那么连边。
如果这个点下方有点，那么连边。
找到左侧第一个在它下面的点连边。
找到右侧第一个在它下面的点连边。

然后按照上述做法做即可。
 Hard Version
我们考虑 Hard 在哪里了，即我们不再要求所有沙子全部下落，因为同一列高的下落，矮的一定下落。那么有一个贪心的想法就是我们让每一列从下往上第 aia_{i}ai​ 个下落即可，我们让这些点为关键点。但是原题目中的限制是具有传递性的，所以现在问题转化成选取一些点，从这些点出发能覆盖到这些沙子对应的点。
现在回到主体，显然我们的 Easy Version 建图是可以继承过来思考的，但是我们发现直接做是没法做的，因为我们根本不知道你选取的点是以如何形式进行覆盖的。仔细思考也思考不动，怎么办？

当感觉一个问题不可做时，可以检查一下自己转化问题的时候是不是漏了什么性质。——gyh20

考虑进一步发掘性质，只能从图发掘性质了，我们发现这个图建边每条跨列边都指向比当前高度更低的格子，且每到一个点，必定是向左向右只跳一列的，不可能出现左列关键点和右列关键点被覆盖，中间列关键点没被覆盖。
大胆猜想，一个点所能到达并覆盖的关键点是一个连续区间。证明考虑反证法，假如说不是连续区间，那么必定存在三个从左至右的点 u,v,wu,v,wu,v,w，使得 uuu 能到达 www 但是到达不了 vvv，那么根据上面建图每条跨列边都指向比当前高度更低的格子，那么可以得到 uuu 高度比 www 小，而中间必定会经过 vvv 这一列一个点 iii，因为不能解决 vvv 的限制，所以 vvv 关键点肯定高于 iii，而根据前面高度推论显然 vvv 能够到达 www。
那么问题转化为了选取若干个区间的并集是全集，可以按照区间左端点或右端点排序即可，这个问题就是去年 CSPS T2，时间复杂度 O(nmlog⁡nm)O(nm\log nm)O(nmlognm)。
总结：这题真有点牛吧，如果不同的限制具有拓扑关系，根据题目特性可能可以忽略一些限制，这种拓扑覆盖问题可以考虑在原序列上的区间覆盖性质。
当感觉一个问题不可做时，可以检查一下自己转化问题的时候是不是漏了什么性质。
 CF1270H Number of Components
考虑分析性质，但是发现分析不出来性质，我们无法从连边的入手。我们考虑连通块的性质，发现连通块有一个关键性质：一个连通块代表的是一个序列的连续区间。证明考虑反证法即可简单证明。
那么原命题就被分成了若干个块区间，如果我们暴力维护块合并和分裂是 O(n2)O(n^2)O(n2) 级别的，肯定这也不是颜色段均摊，无法优化，考虑进一步分析性质：

连通块之间互相独立，互不影响。
值域 ∣V∣≤106|V|\le 10^6∣V∣≤106，且序列上所有数保证在值域上唯一表示。

对第一个性质进一步推广，即我们考虑一个块独立的条件，即什么时候会取到一个块的新左右端点（或分界点），设分界点为 ppp，那么也就是说对于 i∈[1,p]i\in [1,p]i∈[1,p]，j∈[p+1,n]j\in [p+1,n]j∈[p+1,n] 有 ai&gt;aja_{i}&gt;a_{j}ai​&gt;aj​。由于这个序列是被分界点分解成若干个块，考虑到只需要对这些分界点计数即可刻画连通块个数。
第二个性质启示我们值域较小且数被唯一标识，有很大的指示性提示我们要在值域上规划，考虑一个分界点的条件 ai&gt;aja_{i}&gt;a_{j}ai​&gt;aj​，这是偏序问题吗？不是，我们考虑枚举一个阈值 vvv，对于序列中 ≤v\le v≤v 的设置为 000，&gt;v&gt;v&gt;v 的设置为 111，那么原命题转化为求生成 010101 序列使得形如 111…11000…00111\dots 11000\dots 00111…11000…00 的阈值个数。
考虑对于每个 vvv 我们维护生成序列 101010 相邻数对的个数，如果数对个数为 111 就是合法的答案。可以用线段树维护，对于原序列上两个位置 i,i+1i,i+1i,i+1，其中 v∈[min⁡(ai,ai+1),max⁡(ai,ai+1)−1]v\in [\min(a_{i},a_{i+1}),\max(a_{i},a_{i+1})-1]v∈[min(ai​,ai+1​),max(ai​,ai+1​)−1] 的数对个数就会增加 111。
为了方便我们设置 a0=+∞a_{0}=+\inftya0​=+∞，an+1=−∞a_{n+1}=-\inftyan+1​=−∞，因为 101010 个数至少为 111，所以我们维护最小值和最小值的数量即可，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：
这题是真的神，这种序列大小关系的处理我是第一次见，序列大小关系的处理可以转 01 序列，大于某个权值设为 1，否则设为 0，然后研究 01 序列的性质。
序列图论题的结论思考方向：图论某个量和原序列区间的联系。
维护某一个特定值的数量，思考他是否一定是最值，是的话转成维护最值和最值的数量。
 [AGC008E] Next or Nextnext
这个我是真难泵的，题解看 题解 AT2267 【Next or Nextnext】 - 洛谷专栏 的吧我还是太菜了 www。
总结：这种双图刻画限制我还是第一次见，双图策略可以帮助你充分考虑已知信息和所求，通过思考两个图之间的关系来发现问题性质。
 LOJ521 绯色 IOI 抵达
每做一道难题就要去 zxy 上找点清淡的吃。
又是构造题，树的构造先哈气考虑剖叶子。那么不难发现真是个天才的想法，因为叶子是唯一确定选择父亲的。
然后进一步发掘，由于题目每一个城市为唯一对应一个选择的点，所以一个非叶节点必须最多一个叶子，否则就不合法。
叶子的选择还好说，但是问题出在其父亲的，因为我不知道父亲可不可能选，我们考虑进一步发掘性质也发不出来什么，考虑父亲选择是很宽泛的，我们考虑能否强化限制，我们猜想叶子父亲究竟选什么，大胆猜想就是选叶子，证明考虑反证法即可。
然后就好说了，那么这两个节点的匹配方案是唯一确定的，我们把这两个节点同时删去之后得到一个新树，递归操作直到树为空即可，所以如果有解匹配方案也只有一种。这种方案我们如何考虑赋值呢，发现这个满足的是偏序关系，用拓扑排序确定顺序即可，时间复杂度 O(n)O(n)O(n)。
总结：从一些简单结论入手，然后再考虑强化结论。树的构造从叶子入手已经老 old trick 了。
当限制过松的时候，我们可以强化限制，可以只考虑少部分的变元就能给出构造方案。直观上好像每个地方都能改，但实际上很多地方是“被迫的”，一旦你确定了某些关键部分，其余部分就自动唯一确定了。
 CF798E Mike and code of a permutation
我想了 1 小时然后告诉我主席树优化建图喵了？
考虑到本题的限制都是偏序关系，我们要通过这些偏序关系来确定一个排列，这个是拓扑排序的拿手好戏。考虑用图论的建图来表示偏序关系。考虑顺序扫描中维护一个没有标记过集合 SSS。

若 ai=−1a_{i}=-1ai​=−1，对于 j∈[1,n]j\in [1,n]j∈[1,n] 且 j∉Sj\notin Sj∈/S，若 pj&lt;pip_{j}&lt;p_{i}pj​&lt;pi​ 则令 j→ij\to ij→i。
若 ai≠−1a_{i}\neq -1ai​=−1，对于 j∈[1,ai]j\in [1,a_{i}]j∈[1,ai​] 且 j∉Sj\notin Sj∈/S，若 pj&lt;pip_{j}&lt;p_{i}pj​&lt;pi​ 则令 j→ij\to ij→i。最后令 i→aii\to a_{i}i→ai​。

暴力建边加暴力拓扑的时间复杂度是 O(n2)O(n^2)O(n2)，无法承受，但是注意到这是一个动态删点加集合区间连边，可以用主席树优化建图，但我脑子没那么好所以想不到，所以先假设我不知道。
我们发现这样做是没前途的（哈？），因为直接光建图就是 O(n2)O(n^2)O(n2) 了。我们考虑维护入度，但是发现入度很难降到 O(n2)O(n^2)O(n2) 以下的复杂度进行维护。
考虑到限制是一个偏序关系，我们可以考虑不去维护入度，我们去维护最值。那么原来的拓扑排序图就不对了，但是我们可以通过建出原图的返图，让后枚举 1→n1\to n1→n，如果当前遍历到的点没有被访问过就以其为起点在反图上 dfs，最后回溯的顺序就是拓扑序。
那么这个方法一个好处就是我们只需要知道图上连出去的点是什么就可以遍历了。具体的连边情况，设 timitim_{i}timi​ 表示 iii 点被标记的时间，如果没有标记 timi=n+1tim_{i}=n+1timi​=n+1，为了方便 ai=n+1a_{i}=n+1ai​=n+1。那么正常点（即 ai≠n+1a_{i}\neq n+1ai​=n+1）有两个边：ai→ia_{i}\to iai​→i 和 i→ji\to ji→j 其中 j&lt;aij&lt;a_{i}j&lt;ai​ 且 i&lt;bji&lt;b_{j}i&lt;bj​ 即可，显然可以通过线段树优化建图。但是太麻烦了，我们不用真正维护出边，而是选出最有可能被遍历的那个点去更新它即可，我们可以转化为最值问题。具体的，对 iii 为下标建出线段树，维护 bib_{i}bi​ 的最大值，更新时找到 j∈[1,ai]j\in [1,a_{i}]j∈[1,ai​] 最大的 bjb_{j}bj​ 看是否满足 bj&gt;ib_{j}&gt;ibj​&gt;i，若满足遍历，否则无出边，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：
如果不是计数问题，那么可以考虑把维护数量转化成维护最值。 维护最值当然是好做的啦。
这种 Dijkstra 的遍历思想大有用处，即如果每个点只需要遍历一次那么维护最有可能遍历的点.
 CF827F Dirty Arkady’s Kitchen
哦我的天啊这是什么？
首先我们如何处理不能停留的限制。因为不能停留，所以要么在一条边上来回转，要么润去其他边。这对点是不好维护的，但是对边全很好维护，只需要分奇偶性记录第一次到达的时间即可，剩下奇偶性相同的时间都能到达。并且每条边能到达的时间点并在一起正好就是该点能够被到达的时间点，因而不会漏掉什么情况。
转移尝试模仿 Dijkstra，我们按照第一次走的时间优先队列，用每条边去更新目标点后面的边。
将点拆成奇偶两个点，每条边分别从奇到偶、偶到奇连两条单向边，共四条边。每个点把边按起始时间排序，加入一个边就将所有起始时间小于它结束时间的边都扔到队列里。显然之后的边不会让这些边的开始时间更优，因此可以在列表中直接删除已经加入过的边。时间复杂度 O(mlog⁡m)O(m\log m)O(mlogm)。
本题难点不在于越早到某个点越好，考虑需要较晚到某一个点通路才开放，现有快路径和慢路径，可以先通过快路径到达这个点之后再在慢路径的最后一条边上来回横跳，这样可能达到和慢路径相同的效果。
总结：在有明显的时间戳的图论问题中，动态加边扩展是一个好方法。本题其实是用动态加边解决最小到达时间的问题（你可以理解成维护连通性的常见方法），然后维护最晚到达时间来判定这条边能不能用于扩展，本质就是两种限制的拆分导出了我们使用的方法。
 P3573 [POI 2014] RAJ-Rally
还真是，每做一道难题就要去 zxy 上找点清淡的吃。
直接给你 DAG，这么好？考虑拓扑排序，那么得到拓扑序后有一删点最长路径的性质：

设删除点 xxx，那么删除点之后的最长路一定是拓扑序小于 xxx 和大于 xxx 的点路径。

可以考虑暴力预处理路径，但是枚举修改点之后就是 O(n2)O(n^2)O(n2) 的了，题目要求的复杂度 O(nlog⁡n)O(n\log n)O(nlogn) 我们只能再遍历删除点的时候进行计算。
我们可以预处理出经过每条边的路径最大值（正图和反图跑拓扑），然后类似扫描线，离开一个点的时候加入所有边到 set，询问之后删除这个点的所有边，时间复杂度 O(mlog⁡m)O(m\log m)O(mlogm)。
总结：
删点后求最短路的问题有固定套路，就是考虑有一条边一定会跨过这个点，可以拼凑出路径来。
 CF605E Intergalaxy Trips
首先战术上期望 DP，设 f(i,j)f(i,j)f(i,j) 表示？哦不对，设 f(i)f(i)f(i) 表示第 iii 个点到 nnn 的最小期望步数，有转移：
f(u)=∑v≠unf(v)⋅pu,v⋅∏f(x)&lt;f(v)(1−pu,x)(1−∏E(v)&lt;E(u)(1−pu,v))f(u)=\frac{\sum_{v\not=u}^n f(v)\cdot p_{u,v}\cdot\prod_{f(x)&lt;f(v)}(1-p_{u,x})}{(1-\prod_{E(v)&lt;E(u)}(1-p_{u,v}))}
f(u)=(1−∏E(v)&lt;E(u)​(1−pu,v​))∑v=un​f(v)⋅pu,v​⋅∏f(x)&lt;f(v)​(1−pu,x​)​
这个转移很难泵，因为高斯消元不能直接消。但是我们发现每次我们肯定确定最小的 fff 然后再去确定大的并且一旦确定之后它的值就不会再改变了。这个玩意很想 Dijkstra，考虑用 Dijkstra 的顺序来进行转移，然后每次转移找最小的 fff 转移其他节点，时间复杂度 O(n2)O(n^2)O(n2)。
总结：
如果转移的顺序是值，并且值大的不会影响值小的。那么可以用类似 dijkstra 的方法，每次取出最小值并且固定，考虑它对其他值的影响即可。
 P7516 [省选联考 2021 A/B 卷] 图函数
由于全是和式而且还带删边，但是我们只需要算所有点的总和。我们只需要考虑单个点的贡献就可以了。
但是还不是太好考虑分析性质：

u→v,v→uu\to v,v\to uu→v,v→u 由于为有向图，所以肯定在强连通分量内才能算上贡献 fff。
删点是从小到大按照编号顺序删点。

那么也就是说我们可以从强连通分量的角度来进行考虑，但是我们显然有一个问题，我们要动态维护 Tarjan 强连通分量，显然极难维护。但是我们发现删点是从小到大进行删点的，我们可以考虑 uuu 的贡献，如果我们保留 [u,n][u,n][u,n] 的点和有关边的时候，和它能够互通的 vvv 点个数，而根据第二性质我们不用考虑 [1,v)[1,v)[1,v) 的点因为已经被删除了，时间复杂度是 O(n(n+m))=O(n2+nm)O(n(n+m))=O(n^2+nm)O(n(n+m))=O(n2+nm)。
然而搞笑的是有删边，但是发现删边是一个前缀，我们可以转化为反着加边。但是搞笑的是又遇到动态 tarjan 了，显然肯定不能做。但是我们思考我们是求的是和式，可以考虑固定点 uuu 求 f(u,∗)f(u,*)f(u,∗) 的贡献，最后累加起来。然后我们思考这玩意是动态加边，我们要动态维护点的连通性，如何在不使用 Tarjan 的情况下动态维护？考虑 (u,v)(u,v)(u,v) 之间两个路径，如果我们固定点 uuu 必定是向外拓展的，我们可以考虑建出正反图，然后在这两个图上进行拓展，每次加边我们动态 bfs。果加入的这条边两个端点都访问过就没用，如果终点没有访问过就以他开始 bfs，每次把 bfs 到的边删掉，如果两个端点都没访问过就加入图中。每条边只会被删除一次，所以时间复杂度 O(n2+nm)O(n^2+nm)O(n2+nm)。
总结：当不用求出具体值，只用求总和时，考虑贡献法。动态加边还可以直接维护强连通性，对正反图动态 bfs 即可 P7516 [省选联考 2021 A/B 卷] 图函数 - 洛谷
 CF1556G Gates to Another World
真的调不出来。
首先可达性可以转化为连通性，我们考虑如何维护连通性，冰茶几维护什么？
考虑题目给的这个 2n2^n2n 个点一定有它的性质，基本上离不开几个：线段树形态，二进制位表示等。
不难发现这个点连边我们可以用完全线段树的形态来表示，其中每个左儿子和右儿子的叶子节点对应连边，同时也不难发现线段树一个点所代表的区间内部是连通的。
但是搞笑的，有了删除操作就不好做了，注意到询问可以离线，直接一个战术时光倒流，将删点改成加点。我们给每一个点打上一个删除标记 ttt 表示删除这个点的时间，如果没有删除则 t=m+1t=m+1t=m+1，然后通过线段树结构来进行优化连边。搞笑的，这样做时间复杂度是 O(n3m)O(n^3m)O(n3m) 因为我们要先把所有节点的预先建出来，但是我们没有很好的利用这个叶子节点连边和点内区间联通的性质，注意到一个&quot;叶节点&quot;（并不是真正的叶子，而是动态开点之后没有儿子的结点）中所有叶节点的行为平行，因为它们删除的时间相同，并且一定联通，所有可以把他们当成一个点来考虑。
那么这样复杂度正确，于每个非叶节点一直递归下去，直到找到两个叶子连边，这条边被删除的时间是 min⁡(tx,ty)\min(t_{x},t_{y})min(tx​,ty​)，求出所有边之后我们离线逆序加边，用并查集判断连通性即可。时空复杂度均为 O(n2m)O(n^2m)O(n2m)。
总结：
这是一个对应点优化连边问题，这个优化建图无法用常规的优化，一般的做法是用数据结构维护某个量，读入所有修改后再优化建图。
对于带修改的问题来说，可以有一个统一的固定结构来处理两点连通的时刻（边起作用的时刻）
 P7056 [NWRRC 2015] Insider’s Information
随机化过于人类智慧故不讲。
首先考虑如何判断一个三元组是否合法，有一个必要条件就是 bbb 必须比 aaa 或 ccc 先插入，否则一定不合法。
剩下的，我们还需要确定 a,b,ca,b,ca,b,c 之间的偏序关系，这种确定偏序关系的我们可以考虑利用拓扑排序来去求解。考虑先建边来表示必要条件，那么有两个：a→ba\to ba→b 和 c→bc\to bc→b，但是发现你不可能确定两次，故我们可以让 b 的入度只增加 1 即可。这个操作很不好笑。
然后我们就有了一个合法的拓扑序，至于为什么合法因为题目没有给出无解该干什么所以一定有一个合法的拓扑序。我们可以利用这个拓扑序来决定每个数是放在最左边还是最右边，考虑 (a,b,c)(a,b,c)(a,b,c) 三元组在拓扑序上会呈现 4 种情况：

(a,b,c)(a,b,c)(a,b,c)；
(a,c,b)(a,c,b)(a,c,b)；
(c,a,b)(c,a,b)(c,a,b)；
(c,b,a)(c,b,a)(c,b,a)；

考虑到后两个和前两个是对称的，我们可以对前面两个单独进行考虑。我们思考两组什么时候会产生贡献？

(a,b,c)(a,b,c)(a,b,c)：产生贡献当且仅当 bbb 在最左侧。
(a,c,b)(a,c,b)(a,c,b)：产生贡献当且仅当 ccc 在最右侧。

剩下两组也是对称的，这说明：我们只需要在将要加入第二个元素的时候考虑这个限制。实现的时候我们将拓扑排序的决策同时进行，我们分讨是作为 bbb 的限制和作为 ccc 的限制（对应 aaa 已经插入）即可统计放在最左边和最右边的贡献，放较大的即可，由于每次都是少的往大的放，满足限制至少有 ⌈m2⌉\lceil \dfrac{m}{2}\rceil⌈2m​⌉ 个，时间复杂度 O(n)O(n)O(n)。
总结：这个贡献其实很巧妙，我们首先通过拓扑排序来确定顺序，然后将三元组的限制放在单点上来去简化问题。这种操作的前提条件需要我们先拆分限制简化条件。
类似的：#2999. 「JOISC 2015 Day2」Keys - 题目 - LibreOJ
 9月
 CF1062F Upgrading Cities
拓扑排序练习题，但没有完全理解拓扑排序。
考虑这玩意就是一个可达性，你在正反图上跑一个 bitset 统计可达性就可以简单做到 O(n2w)O(\dfrac{n^2}{w})O(wn2​)，但是不用猜都知道这个做法会被卡。
考虑优化，我们需要知道一个性质就是 DAG 上的拓扑排序，队列内的点是互相不可达到的，这个证明是显然的。所以我们可以通过分类讨论，设队头为 uuu 且此时未弹出队头元素，ttt 表示已访问过的点数：

若队列大小为 111，即只有 uuu。那么显然满足第一个条件可到达的点为 n−tn-tn−t。
若队列大小为 222，即有 uuu 又有 vvv，为了满足第二个条件我们考虑遍历 vvv 的出边，若一条 v→xv\to xv→x 的出边，但 xxx 的入度为 1 则显然不合法。反之则到达点位 n−t−1n-t-1n−t−1。
若队列大小 ≥3\ge 3≥3，两个条件都不合法。

在正反图上遍历即可，时间复杂度 O(n+m)O(n+m)O(n+m)。
总结：同在队列里的点没有任何到达关系，可以通过它来筛选合法点。这个我是真不知道很搞笑。
 AT_agc036_d [AGC036D] Negative Cycle
 P5664 [CSP-S2019] Emiya 家今天的饭
哈！
这个 k2\dfrac{k}{2}2k​ 的限制很难处理，因为组合很难直接去做，考虑正难则反，我们将 ≤k2\le \dfrac{k}{2}≤2k​ 转为求解 &gt;k2&gt;\dfrac{k}{2}&gt;2k​ 的，我们发现由于 k2\dfrac{k}{2}2k​ 的 kkk 是总数，那么 &gt;k2&gt;\dfrac{k}{2}&gt;2k​ 的列有且仅有一个。
考虑枚举法确定我们的决策列，然后我们计算方案数，然后我们用总方案减去不合法方案即可。
考虑 DP 求解，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示前 iii 行，选了 jjj 个点，当前枚举列选了 kkk 个点的方案数。转移枚举即可，时间复杂度 O(n3m)O(n^3m)O(n3m) 只有 84 分。
考虑优化，发现我们的瓶颈在于第二维，先猜想第二维是否状态数量上限，发现 O(mn⋅nn)O(mn\cdot n \sqrt{n})O(mn⋅nn​) 很炫猜都不用猜，我们考虑能否去掉第二维，发现我们状态的表示只需要确定 &gt;k2&gt;\dfrac{k}{2}&gt;2k​ 的限制是否满足即可。考虑分析：
k&gt;j2→2k−j&gt;0k&gt;\dfrac{j}{2} \to 2k-j&gt;0
k&gt;2j​→2k−j&gt;0
故 DP 直接去掉第二维，然后维护差值，设 f(i,j)f(i,j)f(i,j) 表示前 iii 行差值为 jjj 的方案数即可，时间复杂度 O(n2m)O(n^2m)O(n2m)。
总结：以后看到这种具有 ≤tot2\le \dfrac{tot}{2}≤2tot​ 的限制可以思考正难则反，对 &gt;tot2&gt;\dfrac{tot}{2}&gt;2tot​ 先进行思考，因为显然 &gt;tot2&gt;\dfrac{tot}{2}&gt;2tot​ 至多出现一次。
DP 在优化状态的时候，我们不仅要思考谁是瓶颈状态，还要思考导致瓶颈的原因是什么，才能更好的进行优化和发掘性质。
 P4769 [NOI2018] 冒泡排序
众所周知的是，冒泡排序的交换次数就是排列的逆序对数。
首先不考虑字典序（即特殊性质），我们如何计算有多少个排列满足逆序对数等于 12∑i=1n∣i−pi∣\dfrac{1}{2} \sum\limits_{i=1}^n |i-p_{i}|21​i=1∑n​∣i−pi​∣。我们考虑原式子为 cnt=12∑i=1n∣i−pi∣cnt=\dfrac{1}{2} \sum\limits_{i=1}^n |i-p_{i}|cnt=21​i=1∑n​∣i−pi​∣，变形有 2⋅cnt=∑i=1n∣i−pi∣2\cdot cnt=\sum\limits_{i=1}^n |i-p_{i}|2⋅cnt=i=1∑n​∣i−pi​∣，其中后面的式子我们考虑用图论刻画，即 i→pii\to p_{i}i→pi​ 进行连边，那么 ∣i−pi∣|i-p_{i}|∣i−pi​∣ 就表示跨过的距离，那么合法当且仅当每条边穿过的格子正好对应它参与的逆序对的个数，即所有逆序对两两配对成边的端点，且没有多余交叉。
也就是说，逆序对必须两两配对，不可能出现一个位置被两个人抢走配对的情况。
等价的转化提议，即不存在三元即以上的序列满足 i&lt;j&lt;ki&lt;j&lt;ki&lt;j&lt;k 使 pi&gt;pj&gt;pkp_{i}&gt;p_{j}&gt;p_{k}pi​&gt;pj​&gt;pk​。即不存在三元即以上的下降子序列。
那么这样如何刻画呢？我们发现这玩意由于没有一元子序列这一说法，那么必定为二元下降子序列，我们用图来表示合法序列数变化这一过程：

我们发现拐点必然是当前时刻序列的最大值然后接一个较小值，然后再继续上升。
故有一个 DP，设 f(i,j)f(i,j)f(i,j) 表示前 iii 个数构成的排列最大值为 jjj 的方案数，转移为 f(i,j)=f(i−1,j)+f(i,j−1)f(i,j)=f(i-1,j)+f(i,j-1)f(i,j)=f(i−1,j)+f(i,j−1)，要求 j≤ij\le ij≤i。这玩意是搞笑的 O(n2)O(n^2)O(n2)，但是不难发现这玩意就是格路计数但是有 j≤ij\le ij≤i 的限制，可以转化为卡特兰数，可以 O(1)O(1)O(1) 计算，或者公式为 (i+ji)−(i+jj+1)\dbinom{i+j}{i}-\dbinom{i+j}{j+1}(ii+j​)−(j+1i+j​)。
现在考虑有字典序的限制，这个限制我们可以转化为至少一个位置满足 pi&gt;qip_{i}&gt; q_{i}pi​&gt;qi​，其余任意。我们考虑枚举法确定这个位置什么，我们钦定一个位置 iii，前面的和 qiq_{i}qi​ 一致，第 iii 个必须大于 pip_{i}pi​。令 mx=max⁡j=1i−1qjmx=\max_{j=1}^{i-1} q_{j}mx=maxj=1i−1​qj​，mnmnmn 为最小可以填的数。
由于我们强制钦定之后从 (1,1)→(n,n)(1,1) \to (n,n)(1,1)→(n,n) 的 fff 的计算就不再适用了，我们将其定义为从 (i,j)(i,j)(i,j) 走到 (n,n)(n,n)(n,n) 的方案数。
接下来我们考虑如何计算方案数，考虑分类讨论：

若 pi=mnp_{i}=mnpi​=mn，那么我们显然只能填写 x&gt;mxx&gt;mxx&gt;mx 的方案，即 f(i,mx+1)f(i,mx+1)f(i,mx+1)。
若 mn&lt;pi&lt;mxmn&lt;p_{i}&lt;mxmn&lt;pi​&lt;mx，显然只能填写 x&gt;mxx&gt;mxx&gt;mx，但是显然这样构成不合法排列了，故无解。
若 pi≥mxp_{i}\ge mxpi​≥mx，只需要填写一个 x&gt;pix&gt;p_{i}x&gt;pi​ 的数就可以了，即 f(i,pi+1)f(i,p_{i}+1)f(i,pi​+1)。

时间复杂度 O(n)O(n)O(n)。
总结：通过将公式转化为清晰易懂的方式，如本题的图论和坐标系表示变化。这是常用的技巧，通过不断简化问题，我们才能发掘一些好玩的性质。
同时给出了 DP 优化一种新思路，通过 DP 式子的组合意义来进行优化，有的时候可以大幅降低复杂度。
本题目放在卡特兰数是有什么心事吗？
 AT_arc139_d [ARC139D] Priority Queue 2
好练习题！
我不知道为什么我的题面是让我算期望，但是问题是等价的。

有 nnn 个数 ai∈[1,M]a_{i}\in [1,M]ai​∈[1,M]，接下来进行 kkk 次操作：随机一个值域在 [1,M][1,M][1,M] 的数加入 aaa，然后删掉第 xxx 小的数。其中 xxx 给定。
问 ∑iai\sum\limits_{i} a_{i}i∑​ai​ 的期望，对 998244353998244353998244353 取模。
1≤n,m,k≤2000,x≤n+11\le n,m,k \le 2000,x\le n+11≤n,m,k≤2000,x≤n+1。

先考虑简化问题，我们考虑值域为 {0,1}\{0,1\}{0,1} 的情况下如何去做，那么显然每一次加入是等概率随机选取 {0,1}\{0,1\}{0,1} 加入，如果 111 的个数超过 n−xn-xn−x 的话我们就要把它删掉，000 我们不用管因为答案求的是 111 的个数的期望，贡献答案的只能是 111。
由于 aia_{i}ai​ 一开始给定，选择给定，答案贡献只能由 111 贡献。故我们可以枚举 kkk 次操作一共放了多少个 111，用组合数算一下就可以了，具体的就是枚举 111 个数 jjj，答案为 ans=∑j=0k(kj)pj(1−p)k−jf(j)ans=\sum\limits_{j=0}^k \dbinom{k}{j}p^j (1-p)^{k-j}f(j)ans=j=0∑k​(jk​)pj(1−p)k−jf(j)，其中 f(j)f(j)f(j) 为：
f(j)={min⁡(T,s0+j)if s0&lt;T,max⁡(T,s0−(k−j))if s0&gt;Tf(j)=
\begin{cases}
\min(T,s_{0}+j) &amp; \text{if } s_{0}&lt;T, \\ \\
\max(T,s_{0}-(k-j)) &amp; \text{if } s_{0}&gt;T
\end{cases}
f(j)=⎩⎪⎪⎨⎪⎪⎧​min(T,s0​+j)max(T,s0​−(k−j))​if s0​&lt;T,if s0​&gt;T​
其中 TTT 为题目中给出的删除阈值，即 T=n−x+1T=n-x+1T=n−x+1。时间复杂度 O(k)O(k)O(k)。
现在考虑到值域扩大到 [1,m][1,m][1,m] 如何去做，注意到这个第 xxx 小我们只需要关心相对大小即可，我们枚举权值，序列可以转为 010101 序列，大于某个权值设为 111，否则设为 000。这样转化后的命题是等价的，因为期望具有线性性，有 E(x)=∑iP(x≥i)E(x)=\sum\limits_{i} P(x\ge i)E(x)=i∑​P(x≥i)。只需要枚举权值 t=1,2,…t=1,2,\dotst=1,2,…，将 ≥t\ge t≥t 的数设为 111，否则设为 000。将所有上述问题的答案和相加即可。只需要做 mmm 遍上述过程即可，时间复杂度 O(mk)O(mk)O(mk)。
 「JOISC 2017 Day 1」港口设施
先考虑简化问题，即我们只有一个栈的情况下什么时候合法，我们将每一个元素的入出栈时间看作一个时间区间，那么合法的充要条件就是所有区间要么包含，要么独立，不能交。
有了这个判断条件好说了，有一个性质就是由于这两个栈都是独立的，所以我们可以通过选取区间分配到两个集合中，求有多少种合法的分配方案。说人话，求出有多少种二染色方案，使得同色的线段不交。我们把区间看成点，对于相交区间 [a,b][a,b][a,b] 和 [c,d][c,d][c,d]，满足 a&lt;c&lt;b&lt;da&lt;c&lt;b&lt;da&lt;c&lt;b&lt;d，我们让 [a,b]→[c,d][a,b] \to [c,d][a,b]→[c,d] 连边，然后我们求这张图的连通块个数 kkk，由于连通块内必定是黑白交替染色，故确定一个开始色即可，一个连通块贡献 222 个方案，答案就是 2k2^k2k。
暴力连边求解是 O(n2)O(n^2)O(n2) 的，无法通过，而且问题在于这些区间点属于散点没法硬上线段树优化建图。我们考虑按右端点从小到大扫描所有线段 [a,b][a,b][a,b]，每次维护右端点更大的线段组成的集合 SSS，那么当前点连接的点必定是 SSS 中的一段连续区间（左端点在 [a,b][a,b][a,b] 中的点）。
但是发现这样做还是会 O(n2)O(n^2)O(n2) 的很搞笑，看起来很难做了。我们继续发掘性质，发现一段区间被连接后的效果是，区间中的点必然同色。所以维护 nxtinxt_{i}nxti​ 表示与 iii 同色的点最多延伸到哪里，那么修改变成暴力访问一段区间，并且把这段区间的 nxtnxtnxt 全部指向区间的右端点。这个复杂度看起来不对，但是我们通过冰茶几路径压缩的复杂度来进行分析发现这玩意是对的，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：二分图染色问题，如果需要优化连边，得到同色的性质可以缩成一个点，然后套用并查集路径压缩的时间复杂度。
 CF1396E Distance Matching
CF1387B2 Village (Maximum) 做过吧？严格加强。但是我做不出来。
对于这种构造可行解使得权值和恰好为某一值的题，一般都是先求出可以构造出来的最大和最小值，然后从某个极值按照一定方法进行连续修改。
我们考虑剖叶子来描述上下界，但是剖叶子很难确定匹配问题的选取，但是注意到贡献是树上距离。这种树上距离我们可以考虑拆分贡献法，将点对之间的贡献拆分到边上。
我们考虑一条边 (u,v)(u,v)(u,v) 的贡献，那么很容易得到一条边贡献 www 的上下界，即为 sizu mod 2≤w≤min⁡(sizu,sizv)siz_{u}\bmod 2 \le w \le \min(siz_{u},siz_{v})sizu​mod2≤w≤min(sizu​,sizv​)。即子树尽量自己内部匹配和尽量跨边匹配。
考虑到 min⁡\minmin 是难受的，有一个 Trick 就是我们可以通过取重心为根就可以去掉子树 min⁡\minmin 的式子，那么贡献上界 mxmxmx 就是 ∑u≠rtsizu\sum\limits_{u\neq rt} siz_{u}u=rt∑​sizu​ 下界 mnmnmn 是 ∑u(sizu mod 2)\sum\limits_{u} (siz_{u}\bmod 2)u∑​(sizu​mod2)。
我们考虑必要条件，由于 dis(x,y)=depx+depy−2deplca(x,y)dis(x,y)=dep_{x}+dep_{y}-2dep_{\text{lca}(x,y)}dis(x,y)=depx​+depy​−2deplca(x,y)​，更换点的匹配只会引起 lca 这一项的变化，所以无论如何边权和的奇偶性不变。所以必要条件为 mn≤k≤mxmn\le k \le mxmn≤k≤mx 且 k≡mx(mod2)k\equiv mx \pmod 2k≡mx(mod2)，我们考虑给出充分性证明，显然只能构造了 www：
考虑到边权和为 mxmxmx 我们接着调整到 kkk 的方案，开始可以把 dfn 序为 i 的点和 dfn 序为 i+n/2 的点配对，这样是能构造到 mx 的（下文称之为初方案），而且所有路径都跨过重心，我们在构造时考虑维护根为重心的这个性质，所以我们选取点数最大的子树来操作，设 y 表示最深的非叶节点：

如果 2depy&lt;mx−k2dep_{y}&lt;mx-k2depy​&lt;mx−k，我们直接拿 yyy 配对（优先儿子，可以自身），那么配对后相较于初方案的边权和会减少 2depy2dep_{y}2depy​，配对后删除这两个点，树的形态不变，我们在新树上构造出新的初方案。
如果 2depy≥mx−k2dep_{y}\ge mx-k2depy​≥mx−k，因为 dep 连续这一特点，我们找到 2depz=mx−k2dep_z=mx−k2depz​=mx−k，然后类似于上述方案配对即可，边权和会减少 2depz2dep_{z}2depz​，这说明我们找到了答案。

如果还有未匹配的点就按 CF1387B2 Village (Maximum) 的方法来构造即可，用 set 维护即可，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：
从一开始提到的本题两个，我们总结出一个构造思考路径：对于这种构造可行解使得权值和恰好为某一值的题，一般都是先求出可以构造出来的最大和最小值，然后从某个极值按照一定方法进行连续修改。
同时还能总结出，对于树上遇到 min⁡(siz)\min(siz)min(siz) 的式子的时候，可以通过取重心为根的方式来去除。
同时这是第二次对于树上路径和问题的贡献法应用。
 CF526G Spiders Evil Plan
最速通的一集。
先考虑分析性质，我们发现使用 kkk 条路径就可以覆盖一棵有 2k2k2k 的叶子的树，证明是显然的。其次，我们为了最大化路径一定会选取叶子到叶子的路径，而且一个最长的路径一定会涉及到直径，这种最长路径问题我们可以考虑往直径上面去想。我们思考，若一棵树以直径端点为根，那么树将会长这样：

我们通过这个进行分类讨论：

若 xxx 点在直径上，那么一定有一条路径选择的就是直径，剩下的通过拼凑一对黑色路径贡献，取 y−1y-1y−1 个就可以了。
若不再直径上，那么必定 xxx 在直径延申出的一条分支（图中的黑线）上，那么从分支一端（xxx 子树中最深点）为起点走到直径后拐弯往更远的直径端点走，剩下的继续拼凑更长链。

通过反证法和前面的路径不难证明上述就是最优方案，但是问题在于上面这玩意光是叶子到叶子的匹配是 O(n2)O(n^2)O(n2) 的无法通过。考虑到这个最优方案有什么性质，注意到直径的最远一端必定作为答案出现。考虑枚举法，说人话就是枚举作为答案选取的直径端点，然后以其为根建树。
接下来我们需要求除直径以外的最长链，考虑到除直径以外的最长链必定为：黑段 -&gt; 部分直径 -&gt; 黑段。
由于直径显然是必选的，所以直径不会贡献答案，我们只需要两两配对最长黑段就可以了，由于使用 kkk 条路径就可以覆盖一棵有 2k2k2k 的叶子的树，直径贡献 222 个叶子，我们只需要求前 2y−22y-22y−2 长的支链配对就可以了，怎么求，用长链剖分。
哎不对啊，xxx 的限制呢？考虑答案，如果在直径上就结束了。如果不再直径上那么方案必然为 xxx 子树中最深一点 -&gt; 黑段 -&gt; 部分直径 -&gt; 黑段（若 y=1y=1y=1 则为直径端点），我们只需要将选取支链集合中贡献最小的替换掉即可。
直接做，时间复杂度是 O((n+q)log⁡n)O((n+q)\log n)O((n+q)logn)。
总结：
边权和贡献最大问题可以往长链剖分这个角度考虑，如果是路径问题可以通过 2k 个叶子的构造性结论转化成最长链问题（前提是需要定根），同时以直径端点就可以通过上面的思维模型来辅助思考。
 P5327 [ZJOI2019] 语言
第 75 黑。
好题？
考虑树是一条链是怎么做，我们可以维护每个点为左端点最远覆盖到的右端点，用线段树求区间最大值然后把所有位置的贡献求个和即可。
考虑暴力的 40 分怎么拿？显然 O(nm)O(nm)O(nm) 的暴力对每一个点维护 set，然后 O(n2)O(n^2)O(n2) 的对于每一个点计算向外搜子树内能拓展到的点，设其数量为 numinum_{i}numi​，那么答案就是 ∑unumu\sum\limits_{u}num_{u}u∑​numu​。很好，现在你有 60 分了。
然后怎么拓展，考虑到我们不能暴力向外拓展，我们能不能将链的做法和暴力结合起来？考虑到路径必然是树上连续点集所构成的，所以一个点能到达的所有点恰好构成一棵生成树（即一个连通块）。
我们考虑这个生成树如何构造，发现如果路径 s→ts\to ts→t 包含点 uuu ，s,ts,ts,t 则是 uuu 的两个极远点。而 uuu 的生成树则是连通所有 uuu 的极远点的最小生成树。
肯定不能真的去求这个生成树，能否巧妙地计算出生成树大小？考虑点集 SSS，我们加入一个点 uuu，那么最深的 LCA(u,v)\text{LCA}(u,v)LCA(u,v)，其中 v∈Sv\in Sv∈S。那么 uuu 的贡献就是 depu−depLCAdep_{u}-dep_{\text{LCA}}depu​−depLCA​，这玩意很像虚树，有一个 Trick 就是将所有点按照 DFN 排序之后 lca=lca(u,lst)lca=lca(u,lst)lca=lca(u,lst)，其中 lstlstlst 表示上一个加入的点。注意第一个加入点的贡献并不是它的深度，而应该减去最上面联通点的深度，所以可以先记贡献为 depxdep_{x}depx​，最后再减去 deplcadep_{lca}deplca​，这里的 lcalcalca 是指的所有点的 LCA。
剩下一个问题，如何取出经过了这个点的路径，由于只需要计算一次答案，考虑树上差分即可，即在端点加入路径贡献，LCA 以及 falcafa_{lca}falca​ 处删除贡献。
加入点的问题可以用线段树维护，线段树的下标需要按 dfn 排序，上传的时候减去左儿子最右边的点和右儿子最左边的点的 lca 的深度即可，然后线段树是支持标记合并的，所以写个线段树合并就行了，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：
要快速计算虚树的大小时，可以考虑下标为 dfn 序的线段树来维护。
 Ridiculous Netizens - HDU 6643
This is the true 好题！
首先你会想到用树形背包来做，但是问题在于如果你直接设置为 f(u,i)f(u,i)f(u,i) 表示为 uuu 子树内乘积为 iii 的方案数，但是直接做会出现两个问题：

你无法保证你选取的方案子树是连通的。
在不考虑乘积的情况下，你的合并是 O(mm)O(m\sqrt{m})O(mm​) 的，因为你要枚举约数。

先保证状态是 O(nm)O(nm)O(nm)，然后我们考虑把第一点解决掉，第一点的问题就是在于我们一般树形背包是自底向上合并的，但是这样可能中途就会断掉。转化思路，我们可以确定一个子树的根，然后从根自上向下贡献答案，说人话就是我们可以把原命题转化为一个单点加入问题，选取一个点就说明必须选它的父亲。这玩意是在 DFN 序上 dp 的过程，因为 dfn 特性，子树 dfn 序连续，考虑在 dfn 上进行 DP。但是显然实际实现肯定不能直接暴力求出 dfn 序，设 f(u,i)f(u,i)f(u,i) 表示 uuu 内加入点的构成的子树，乘积为 iii 的方案数，转移首先自上向下贡献 www，然后递归完子树后用儿子的答案更新当前点的答案即可。时间复杂度是 O(nm)O(nm)O(nm) 的。
然后考虑第二个情况，我们不考虑乘积暴力合并是 O(mm)O(m\sqrt{m})O(mm​) 的，我们的目标是要优化到 O(nm)O(n\sqrt{m})O(nm​) 的状态。看起来很难做，考虑发掘性质，注意到我们枚举约数中使得 i←i+1i\leftarrow i+1i←i+1 的时候，所管辖的区间有很多重叠的部分，同时又注意不到，⌊xnm⌋=⌊xnm⌋\lfloor \dfrac{x}{nm} \rfloor=\lfloor \dfrac{\dfrac{x}{n}}{m} \rfloor⌊nmx​⌋=⌊mnx​​⌋，可以用整除可以把 mmm 整除 iii 的值定义到状态里面。根据整除分块状态数变成 O(m)O(\sqrt{m})O(m​)，根据结论值相同在以后的转移方法也相同所以正确性得到保证。
但是这是无根树，每个根的过程是相对独立的所以不能一遍求出，且合并子树是 O(nm)O(n\sqrt{m})O(nm​)，但是插入点是 O(m)O(\sqrt{m})O(m​) 的可以承受，考虑点分治减少子树大小，即可优化到 O(nmlog⁡n)O(n\sqrt{m}\log n)O(nm​logn)。
总结：不支持合并的树上问题可以考虑转成 dfn 序上 dp，同时这种等价类的优化方法我也是第二次？见了，通过整除分块让状态数大幅减少（整除值相同的划分为等价类）。根独立的 dp 问题可以考虑用点分治优化，原理就是缩小子树中的需要考虑节点数。
 CF611H New Year and Forgotten Tree
nm 就给我给位数是吧。
考虑到这玩意实际上是给边分配点，同时不难观察到同位数的点它们是等价的，因为都要分配同位数的点。
考虑到同位数之间的边是容易的，因为我们可以显然把同色的点缩成一个块，但是不同位数连边是困难确定的，所以我们首先确定不同位数连边。我们考虑枚举法，钦定颜色代表点把这些代表点做生成树，剩下的点接在这些代表点上，这是因为如果存在解，那么就存在其他点之连接代表点的解。证明可以用反证法和调整法证明。
因为颜色数极小，可以考虑枚举 Prufer 序列来确定代表点之间的生成树，然后把每个颜色的点放在一起考虑，边 (i,j)(i,j)(i,j) 可以通过和颜色 j 关键点的连边解决一个颜色 i 中的点，也可以通过和颜色 i 关键点连边解决一个颜色 j 中的点。这玩意是一个二分图完美匹配问题，可以通过网络流或 Hall 定理来判断是否合法并构造最优解。
总结：这个细节不在于观察到等价，而是在于钦定代表点这个环节，对于还原树的问题中，可以分步还原，也就是先还原特殊点的结构，再还原整体的结构。
 CF1984F Reconstruction
这玩意前后缀和，首先我们先思考一个确定的序列什么能够判断合法。首先这个前缀和和后缀和太难受了，我们考虑转换成统一的，不妨令 preprepre 为前缀和 sufsufsuf 为后缀和，那么显然 sufi=pren−prei−1suf_{i}=pre_{n}-pre_{i-1}sufi​=pren​−prei−1​。只要不出现 ∣prei+k−prei∣&gt;k⋅m|pre_{i+k}-pre_{i}|&gt;k\cdot m∣prei+k​−prei​∣&gt;k⋅m 即可，对于这个的贡献是相邻两项所贡献的，可以对相邻两项分类讨论 4 种情况即可。考虑强化限制，只要我们知道 prenpre_{n}pren​ 的情况下我们就可以通过 DP 求出满足限制的方案，时间复杂度 O(n)O(n)O(n)。
考虑我们不知道 prenpre_{n}pren​ 的情况下怎么办，这种情况我们需要知道能够唯一确定 prenpre_{n}pren​ 的信息，注意到令 a0=an+1=0a_{0}=a_{n+1}=0a0​=an+1​=0，S0=PS_{0}=\texttt{P}S0​=P，Sn+1=SS_{n+1}=\texttt{S}Sn+1​=S 之后，任意意一个 PS 子串都可以决定 prenpre_{n}pren​，而显然至少存在一个这样的子串所以可以唯一确定，暴力枚举每个可能的 prenpre_{n}pren​ 计算 SSS 的数量即可，时间复杂度 O(nm)O(nm)O(nm)。
总结：这种部分不确定性的问题，我们需要思考其中确定的信息，通过这些确定的信息去确定其他的不知道的信息。
 AT_arc165_e [ARC165E] Random Isolation
大技巧题，我不会的技巧都叫做好题好吧（逃）
首先一看这玩意 “在剩下的点里随机选一个”，操作概率的分母一个一个都不一样。这种随机操作求期望的问题一般情况会出现在这里，这种情况下我们可以对于一个随机过程，可以考虑将所 有元素钦定优先级来刻画。 钦定优先级会将一个问题限定在离散的范围内，一些不同情况下 不好计算的概率在钦定优先级之后可能会很好计数。
对于这个题，我们转化问题，转化为对于随机长度为 nnn 的排列 ppp，我们按照 p1,p2,p3…,pnp_1,p_{2},p_{3}\dots,p_{n}p1​,p2​,p3​…,pn​ 的顺序依次考虑，若 pip_{i}pi​ 所在连通块大小大于 KKK，那么再当前树上删除 pip_{i}pi​；否则不进行任何操作，求有效操作的期望次数，忽略掉所有无效的操作之后，这个命题和原命题是等价的。
考虑能否对每个点计算共享，考虑删掉点的时候的连通块，显然它的大小需要 &gt;k&gt;k&gt;k。 既然这样，这之前对该连通块内点的操作显然全部需要成功。 因此，我们甚至可以假设所有这之前的操作都成功（因为即使切到别的连通块也不影响这个连通块的大小）。
那么有 DP，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示 iii 子树内，有 yyy 个点被删了，根节点连通块大小是 zzz 的方案数。时间复杂度 O(n4)O(n^4)O(n4)。
这是权值，最后还有概率要乘上，对于原树中一个以 uuu 为根，大小为 iii 的连通块，他能造成贡献，当且仅当与这个连通块相邻的 jjj 个点全部在他之前删除。剩下的点对他没有影响，所以只要考虑这 i+ji+ji+j 个点即可。产生贡献的概率是好算的，随便排是 (i+j)!(i+j)!(i+j)! 种，jjj 个先全删的有 i!j!i!j!i!j! 种，概率为 i!j!(i+j)!\dfrac{i!j!}{(i+j)!}(i+j)!i!j!​​。
总结：
学到了一种随机过程期望的方法，就是将所有元素钦定优先级来刻画。 钦定优先级会将一个问题限定在离散的范围内，一些不同情况下不好计算的概率在钦定优先级之后可能会很好计数。
 【UNR #1】火车管理
最快的一集。
考虑到操作 2 才是最 nb 的。显然不能每一个栈都去维护，5e5 让我们只能考虑一些 polylog 级别的数据结构，考虑线段树维护栈顶，但是问题在于弹栈，我们发现删除操作，可以看成回退到上一时刻，可以用保留所有历史版本的主席树来支持回退。你需要做的就是维护覆盖这个单点的时刻，然后修改单点查上一时刻的值，用这个值修改即可，时间复杂度 O(qlog⁡n)O(q\log n)O(qlogn)。
总结：删除操作，可以看成回退到上一时刻，可以用保留所有历史版本的主席树来支持回退。
 CF1651F Tower Defense
我知道分块的 O(nn)O(n\sqrt{n})O(nn​) 简单维护颜色段做法。但是我是来学主席树的 QwQ
考虑分析性质，发现如果只有一个怪物的情况下那么销毁的必定是一段前缀，但是如果怪物多起来了就会将序列分成一段一段，每一段的数值状况不一致。启示颜色段均摊，但是显然这个不是拿 ODT 维护的。但是我们可以拿个栈存一下每个段的分界点，按照左端点降序排列，询问时类似弹栈即可。
然后我们考虑原命题的限制 min⁡(ci,riT)\min(c_{i},r_{i}T)min(ci​,ri​T)，其中 TTT 为怪物到来的时间差，我们可以把他看作一个分段函数，即：
fi(T)={riTT≤⌊ciri⌋ciT&gt;⌊ciri⌋f_{i}(T)=
\begin{cases}
r_{i}T &amp; T\le \lfloor \dfrac{c_{i}}{r_i} \rfloor \\ \\
c_{i} &amp; T&gt;\lfloor \dfrac{c_{i}}{r_i} \rfloor
\end{cases}
fi​(T)=⎩⎪⎪⎪⎪⎨⎪⎪⎪⎪⎧​ri​Tci​​T≤⌊ri​ci​​⌋T&gt;⌊ri​ci​​⌋​
考虑到一个段 [l,r][l,r][l,r]，我们如何判断当前的怪物能否清楚这个段呢？只需要看当前生命值 hhh 是否满足 h≥∑i=lrfi(T)h\ge \sum\limits_{i=l}^r f_{i}(T)h≥i=l∑r​fi​(T) 即可，当然如果 l=rl=rl=r 直接 O(1)O(1)O(1) 做就可以了，但区间求和考虑使用线段树来维护一次函数，但是分段函数如何维护呢？注意到值域是较小的，我们可以用可持久化线段树来维护这个分段函数，具体的，以自变量 TTT 为版本，线段树维护每一个 fif_{i}fi​，修改只需要在分段的地方单点修改即可，预处理的时间复杂度是 O(nlog⁡n)O(n\log n)O(nlogn)。
现在我们能判断能否一次清楚这个段了，但是如果无法清除那我们怎么维护呢？分析问题实质上就是我们需要求出我们能够清楚这个段最长能延伸到什么位置，可以考虑主席树上二分去求出这个位置 pospospos，那么 [l,pos][l,pos][l,pos] 和 [pos+1,r][pos+1,r][pos+1,r] 就是旧段操作后的新段，直接维护，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：维护分段函数，在值域较小的情况下，我们可以通过可持久化，以以自变量 xxx 为版本，线段树维护每一个 fif_{i}fi​。
 CF679E Bear and Bad Powers of 42
首先不难观察到 42k42^k42k 的值域在题目范围内是很少的，kkk 取值在 k≤11k\le 11k≤11。
其次第一个操作第二个操作是容易的，但是第三个操作是不容易的，因为是连续操作，而且我们要维护的是加法中触碰到特定值的部分。考虑到特定值的数量很少，我们有一个想法就是类似于树套树，外部为正常维护序列的线段树，内部为权值线段树，每一次枚举权值 kkk，查询是否有 k−xk-xk−x 的值存在，若存在则继续累加，直到结束。显然这个做法看起来很可以，但是内存会炸。
考虑这个做法能否优化，首先观察到我们每一次查询都是只需要查每一个权值 k−xk-xk−x 是否存在，但是我们记录所有权值的情况太过于浪费空间。我们思考，对于一个序列数 aia_{i}ai​，加法能影响到的只能是 &gt;ai&gt;a_{i}&gt;ai​ 的 42k42^k42k。有一个想法，我们对每一个 aia_{i}ai​ 维护到下一个 42k42^k42k 的距离 mnmnmn，如果有数的距离 mnmnmn 为 000，那么就再次进行操作 3 直到不为 0。
具体的，我们需要在线段树维护这个区间距离最小值，操作 2 可以暴力区间赋值。但是操作 3 是个问题，因为我们暴力修改每一个显然是不行的，但是注意到若一个区间距离最小值 ≥x\ge x≥x 是可以通过打标记 O(1)O(1)O(1) 做，若不满足就暴力递归下去，借鉴 Segment Beats 的势能法分析是可以的。我们不妨定义势能为：区间所有颜色段上方的 42 次幂个数之和。一次操作 2 会增加 O(log⁡nlog⁡42x)O(\log n \log_{42} x)O(lognlog42​x) 的势能，操作 333 通过 O(1)O(1)O(1) 时间减少 O(1)O(1)O(1) 势能，时间复杂度 O(nlog⁡nlog⁡42V)O(n\log n \log_{42} V)O(nlognlog42​V)。
总结：线段树上尽量不要去维护有关特定值的信息，如果需要维护常常可以通过放宽条件的方法解决。例如本题放宽为了考察区间中所有越过 42 次幂的数。
 【UR #19】前进四
哦我的天啊这是什么？
首先考虑 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)，首先这玩意可以转化为从后往前的极长下降子序列的长度，这玩意是 LCIS - HDU 3308 - Virtual Judge，可以使用我们的线段树理论简单构造出信息！
然而这玩意是区间求的，我们求得是一个后缀，如果用维护区间的去维护后缀就太浪费了。注意到题目可以离线，考虑离线，离线之后我们就可以考虑类似扫描线一样的后缀扫描，依次扫描询问，维护每个位置的数据结构。但是我们发现这玩意和上面做法没有什么差异，考虑变化主体，从后往前依次扫描位置，维护每个询问的数据结构。
我们把所有东西离线下来，那么修改变成了对一段询问区间取 min，询问变成了对于某个询问单点求 min 值的变化次数。用 Segment Beat 维护即可，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：先弄清维护的信息是什么，然后切换主体，保持维护信息的不变即可。通过离线我们可以方便的切换主体。
 CF1017G The Tree
神秘主体思想。
考虑链怎么做，显然不难发现原命题相当于黑色段和白色段，一个拓张，一个缩小，同时会有区间推平为白色操作。可以考虑分块维护颜色段，时间复杂度是 O(qn)O(q\sqrt{n})O(qn​)。
考虑放到树上怎么做，发现这玩意很抽象，因为如果我们暴力维护段的话直接就 T 了，考虑到如果对段暴力拓展显然是没有前途。有一个性质就是段拓展只会向下拓展，考虑到询问只有单点查询，我们考虑一个点什么会被变黑？上面的结论推论就是一个点若会被影响到当且仅当其祖先中操作次数足够到可以将范围扩大到影响当前点。
进一步转化，我们将每一个点权值初始设置为 −1-1−1，对于操作 1 在该点上进行单点加 111，那么单点查询时，为黑当且仅当当前点到根的链最大后缀（从当前点开始）权值和 ≥0\ge 0≥0，即距离能够够到，否则为白。
转化成 DFN 序上，用树剖加线段树维护，发现这玩意就是一个最大后缀和，可以直接用线段树维护，时间复杂度 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
总结：
本题目的精华就是在于将这个操作等效，等效操作的思想是很重要的，当你切换维护对象之后，可以通过等效操作来适应现在所维护的东西。
 P7735 [NOI2021] 轻重边
考虑分析性质，注意到每一个重边路径段都是互相独立互不干扰的，由于操作首先会将相邻边都变成轻边然后再变成重边。然后我们考虑怎么维护这些重边路径段，而且还要满足独立性，我们发现这玩意可以直接转化为维护边上的颜色段。
显然边上的颜色段不好维护，我们考虑边权转点权，那么我们给颜色段内的点赋一个颜色 ccc，这个 ccc 要满足每个颜色段对应是唯一的，那么是重边当切仅当 cu=cvc_{u}=c_{v}cu​=cv​。
树上路径带修我们考虑树剖，然后转化为为 DFN 上的区间问题，然后线段树维护即可，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：属于染色模型，一些类区间赋值类操作可以向染色模型转化。
呃呃呃。
 CF1458C Latin Square
啊啊啊。
首先观察到所有操作全是全局标记，维护整体标记，本题的核心是考察整体操作对单点的影响。
发现前四个操作对于单点是独立的，我们可以维护偏移量。但是问题在于后两个操作，后两个操作单看每个元素的位置变化是混乱的。
我们考虑能否独立化这些操作，考虑转化问题，我们转化到三维平面上，有 n2n^2n2 个坐标 (i,j,p)(i,j,p)(i,j,p)，对行取逆就是交换坐标的第二维和第三维；对列取逆就是交换坐标的第一维和第三维。那么我们再维护表示维护交换的整体标记即可，时间复杂度 O(n2+m)O(n^2+m)O(n2+m)。
很好的题啊啊啊啊，如果我们想要维护整体标记，我们要考虑整体操作对于单点的影响，把整体操作对单点的影响独立开来，分开维护，查询单点时，把操作一一作用在该点上，得到真实答案。
 P3352 [ZJOI2016] 线段树
需要把这些序列大小要整合到一起，不然不知道用什么处理？
笛卡尔树？bro 有点难。咱们还是考虑 01 序列怎么做吧。
首先没有概率，就是纯纯的求方案数乘上权值。考虑值域为 {0,1}\{0,1\}{0,1} 的时候怎么做，不难发现对答案造成贡献必定是 000 段和 111 段合并，并且发现 000 段必定会被 111 段给包夹（边界位置设置为 111)。考虑到每次操作 111 段大小单调不降，000 段大小单调不升，我们考虑 DP 主体应该为 000 段，有状态 f(i,l,r)f(i,l,r)f(i,l,r) 表示 iii 操作后 000 段缩小到 [l,r][l,r][l,r] 的方案数，有转移：
dp[i][l][r]←{dp[i−1][l][r]⋅l(l+1)+(n−r+1)(n−r+2)+(r−l)(r−l−1)2QwQdp[i−1][l′][r]⋅l′l′&lt;ldp[i−1][l][r′]⋅(n−r′+1)r′&gt;rdp[i][l][r]\leftarrow\begin{cases}dp[i-1][l][r]\cdot\frac{l(l+1)+(n-r+1)(n-r+2)+(r-l)(r-l-1)}{2} &amp; \text{QwQ}\\dp[i-1][l&#x27;][r]\cdot l&#x27; &amp; l&#x27;&lt;l \\ dp[i-1][l][r&#x27;]\cdot (n-r&#x27;+1) &amp; r&#x27;&gt; r\end{cases}
dp[i][l][r]←⎩⎪⎪⎨⎪⎪⎧​dp[i−1][l][r]⋅2l(l+1)+(n−r+1)(n−r+2)+(r−l)(r−l−1)​dp[i−1][l′][r]⋅l′dp[i−1][l][r′]⋅(n−r′+1)​QwQl′&lt;lr′&gt;r​
不难发现可以用前缀和优化转移，时间复杂度 O(n2q)O(n^2q)O(n2q)，拓展到一般序列上我们把 www 的贡献拆为 max⁡ai−max⁡i=0max⁡ai[w&lt;i]\max a_{i}-\max_{i=0}^{\max a_{i}} [w&lt;i]maxai​−maxi=0maxai​​[w&lt;i]，即把所有 ≥i\ge i≥i 的位置标为 1，把所有 &lt;i&lt;i&lt;i 的位置标为 0。此时我们就可以算出每一个位置 &lt;i&lt;i&lt;i 的方案数，时间复杂度 O(n3q)O(n^3q)O(n3q)，数据随机可过。
显然太吃运气了，考虑优化，发现所有的 dp 值的转移柿子都完全一致，所以我们可以把所有初始值放到同一个 dp 数组里面，然后进行一次整体的 dp，就可以求出答案。
总结：01 序列天地灭！
 P5443 [APIO2019] 桥梁
刚开始做操作分块，不太熟练。
考虑到这玩意显然不太好 polylog 去维护，基本上稍微复杂一点的都没法polylog？
首先可达性转连通性，问题转化为维护连通块内点个数，我们首先有一个显然的想法就是修改就暴力修改，对于每一个询问，在并查集中加入所有 ≥x\ge x≥x 的边，时间复杂度 O(qm⋅α(n))O(qm\cdot \alpha(n))O(qm⋅α(n))。
考虑没有修改操作的时候怎么做，注意到可以离线，考虑离线所有询问，然后按照 xxx 从大到小排序，每次加边用并查集维护连通性和来连通块内点个数，时间复杂度是 O(q+m)O(q+m)O(q+m) 的。
但是现在有修改操作，如果我们还是仿照以前的做法的话我们需要使用可撤销冰茶几，对于每一个 xxx 我们都暴力扫一边询问然后计算贡献，处理完每一个询问的时候，再撤销掉临时加入的边。时间复杂度是 O(q2log⁡m)O(q^2\log m)O(q2logm)，瓶颈再修改。
考虑操作分块，每 BBB 个操作分一块。注意到每一块内修改边权个数不超过  个，询问次数同理，因此考虑对于不在该块内修改的边，直接固定边权。和上面的做法一样，还是考虑离线询问按 xxx 从大到小，但是我们只用离线当前块内的询问，对于每一个询问，看看在该块内修改的边，在这个询问时权值分别是多少，然后加入 ≥x\ge x≥x 的边，询问连通块个数，然后撤销临时加入的边。
最后将新操作修改的边更新到原来的边上，相当于操作分块继承以前的贡献。时间复杂度令 B=qB=\sqrt{q}B=q​ 可以取到 O(mlog⁡mq)O(m\log m\sqrt{q})O(mlogmq​)。
 CF1588F Jumping Through the Array
啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊？？？？？？？？？？？根号？？？？？？？？？？？？？？？？？？？？？？？？？？
操作没有任何营养。考虑最没有营养的操作 3 去掉怎么做。发现如果是单点修改那就很好说，但是问题是区间修改啊啊啊，没法 Log 维护啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊。
考虑发掘性质，但是没有性质啊啊啊啊啊啊啊啊啊啊啊啊。
啊啊啊啊啊？根号！考虑到所有操作全是 O(n)O(n)O(n) 级别，我们考虑操作分块，每 BBB 个操作分成一块，我们发现对于每一个需要修改的位置，从它到它后边第一个需要修改位置之前的所有位置的 ppp 都不会发生变化，所以我们可以将这些位置缩成一个，这样环长就是 O(B)O(B)O(B) 级别了每次可以暴力遍历。而每次预处理要花 O(qB⋅n)O(\frac{q}{B}\cdot n)O(Bq​⋅n) 来缩点，其次对于 1 操作我们可以查询修改的位置所造成的贡献，就是对于这些点上打标记，存下来应哪些点，然后每次二分出这个缩后的点里面有多少个点在询问的区间里，时间复杂度是 O(Blog⁡n)O(B\log n)O(Blogn) 的，然后做完了？
总结：这 tm 什么玩意啊，操作分块这么神奇的吗？以后遇见这种图上神秘操作且 10 分钟内发觉不了性质直接开始想暴力，今天 byd 一个性质都没有，搞不搞笑。
 CF840E In a Trap
首先注意到这个玩意如果直接对整体维护显然是没有什么很好的性质的，但是有一个极其关键的性质就是 ai≤na_{i} \le nai​≤n，由于位运算在二进制位下是独立的，我们不妨考虑按位分治，就是值域分治，分成前八位和后八位，那么值域最多只需要处理 256256256 即可。
然后我们考虑将询问点分块，说人话就是将树上以链分成 256256256 长度的块，前 8 位我们可以用 Trie 来预处理然后询问时查询即可，后 8 位我们需要处理，设 f(u,i)f(u,i)f(u,i) 表示 uuu 向上的 256 个节点中最大的 av⊕(depu−depv)⊕(i⋅256)a_{v}\oplus (dep_{u}-dep_{v})\oplus (i\cdot 256)av​⊕(depu​−depv​)⊕(i⋅256)，查询可以先跳整块再跳散块。但是显然不能这么直接合并获得因为前 8 位也是一个限制，考虑设 g(u,i)g(u,i)g(u,i) 表示前 8 位为 iii 最大的 ((depu−depv)⊕av)⊕256((dep_u-dep_v)\oplus a_v)\oplus 256((depu​−depv​)⊕av​)⊕256，这样就可以合并了，时间复杂度时 O(nlog⁡nn)O(n\log n \sqrt{n})O(nlognn​)。
总结：看到 ai≤na_{i}\le nai​≤n 之类的限制多半要用到值域分块，对于加法和异或的混合问题可以考虑对半拆位。位运算和四则运算混合在一起是很恶心的，方法基本上只有按位考虑。
 [AGC002D] Stamp Rally
翻译全部错误 666.
最大编号尽可能小，考虑二分。问题转化为求经过边编号 ≤mid\le mid≤mid 的 x→yx\to yx→y 路径上点数量，将边权设置为边的编号，那么命题关系求两点路径最大权值最小值，容易想到 Kruskal 重构树，且这题限制了经过点的个数要恰好为 zzz，不能大也不能小，所以二分是一个比较好的解决方案。时间复杂度 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
总结：大/最小边权问题考虑 kruskal 重构树。
 P3684 [CERC2016] 机棚障碍 Hangar Hurdles
先考虑我们初始点最大能放多少，由于是一个正方形，我们考虑前缀和预处理这个网格图，然后二分求出最大长度。这样我们就能得出每一个点所能容纳的最大正方形长度 ddd。利用这个 ddd 我们对于正方形每一个点向四周连边，边权设置为 min⁡(du,dv)\min(d_{u},d_{v})min(du​,dv​)，那么命题转化为求起点到终点的路径上边的权值最小值的最大值，用 Kruskal 重构树即可解决，但是为题在于连边过多，我们考虑对于 ddd 相同的点缩点即可，时间复杂度 O(n2log⁡n)O(n^2 \log n)O(n2logn)。在实现细节方面，我们注意到，由于障碍的存在，所以可能最后得到的是森林而不是一棵树。考虑到树与树之间是不连通的，所以我们完全可以新建一个节点连向这些树，并把点权设为 0，就可以直接按照普通一棵树的情况来做了。
码力题不写。
 AT_arc098_d [ARC098F] Donation
牛牛牛
首先不难发现一个性质就是如果我们在某个地方给塞钱了之后我们肯定之后就不回来这里。同时发现答案必定 ≥∑Bi\ge \sum\limits B_{i}≥∑Bi​，考虑到给钱很难想，正难则反考虑倒着走领钱，设 ci=max⁡(ai−bi,0)c_{i}=\max(a_{i}-b_{i},0)ci​=max(ai​−bi​,0)，不难发现题目的条件就是要求满足到达点 iii 的时候满足 val≥cival\ge c_{i}val≥ci​，如果不满足就补充即可。如果是第一次经过令 val←val+bival\leftarrow val+b_{i}val←val+bi​。
这玩意怎么做？考虑最小生成树，令边权为 max⁡(cu,cv)\max(c_{u},c_{v})max(cu​,cv​)，表示经过这条边当前钱数的最小值。但是我们发现这玩意很难搞，因为边权是乱序的，如果暴力枚举起点走的话是 O(n2)O(n^2)O(n2) 的，但是我们发现我们肯定是贪心的走边权最小的。考虑这玩意我们可以在建树的时候求得，考虑 Kruskal 重构树表述建树这一过程。然后再树上 DP，设 f(u)f(u)f(u) 表示 uuu 子树内都经过后最小领到的前，叶子节点即为 ci+bic_{i}+b_{i}ci​+bi​，对于非叶子节点枚举从哪里最后进入出来即可，有 f(u)=min⁡v{su−sv+max⁡(cu,fv)}f(u)=\min\limits_{v}\{ s_{u}-s_{v}+\max(c_{u},f_{v})\}f(u)=vmin​{su​−sv​+max(cu​,fv​)}。其中 sus_{u}su​ 表示 uuu 为根的子树内节点的 ∑b\sum\limits b∑b，由于重构树显然是二叉树可以直接展开 min⁡\minmin，但是如果你写多叉树那我没啥好说的，时间复杂度 O(mlog⁡m+nlog⁡∣V∣)O(m\log m+n\log |V|)O(mlogm+nlog∣V∣)。
总结：本题通过发掘性质将这个不塞钱操作简化问题，同时正难则反是重要的思维技巧。
借助 Kruskal 重构树，通过合理的赋值边权我们可以满足题目中的限制，难点就是在于我们如何发掘边权所表示的意义。
 CF1628E Groceries in Meteor Town
首先看到简单路径上求经过边权最大值不难想到利用 Kruskal 重构树，查询操作就转化成了重构树上， xxx 点与所有关键点的 lca 的权值。
那么现在为题转化为如何求一个点集合的 LCA，如果你做过树上查询你可能会以为是区间 LCA 直接一个一个维护，但是显然不是这样的，这是点集不是区间。答案是点集中 dfn 最大点和 dfn 最小点的 lca，所以直接维护区间最大最小 DFN 即可。
总结：学会了新的 LCA 方式！求一个点集合的 LCA 答案是点集中 dfn 最大点和 dfn 最小点的 lca。边权最大最小问题考虑 Kruskal重构树。
 P3679 [CERC2016] 二分毯 Bipartite Blanket - 洛谷
呃呃
注意到 n,m≤20n,m\le 20n,m≤20，考虑状压选取的点集合，但是我们只能状压一个不能状压另一个，如果直接做将会达到 O(nm22n)O(nm 2^{2n})O(nm22n) 无法通过，复杂度启示 O(n22n)O(n^22^n)O(n22n) 也就是说我们只能状压一个点集，考虑到我们还没有分析性质，分析性质。
现在的问题就是我们只能状压二分图中一部的点集，考虑到上面算法的瓶颈在于我们必须知道我们和哪些点匹配了。联想到 Hall 定理可以帮助我们在只有点集合大小的情况下完成匹配，题目要求就是两个选取出来的点集 A′A&#x27;A′ 和 B′B&#x27;B′ 有完美匹配，但是点集合大小我们只能知道一个集合的大小，如何推出是否有完美匹配呢？
考虑拆分法，由于二分图两部点之间是独立的，我们只需要算一部的选取点集合所有点匹配（如果存在无法匹配我们可以去掉，这个状态在之后一定会枚举到），这种情况下是否能够凑出 B′B&#x27;B′ 即可，那么根据 Hall 定理不难发现一个结论：由于点集要求全部都选，而且只要求一个匹配覆盖即可而不是点集之间两两覆盖，那么也就是说点集合只要能够完美匹配即可。而对于左部点集 A′A&#x27;A′ 和右部点集 B′B&#x27;B′，只要两者 A′A&#x27;A′ 和 B′B&#x27;B′ 都对其能够到达的点完美匹配即可满足两者必定存在一个匹配覆盖。
考虑证明必要性：显然若有覆盖 A∪BA\cup BA∪B 的匹配，显然能分别覆盖 AAA 和 BBB。充分性：AAA 与覆盖 BBB 的匹配，则对任意 S⊆A∪BS\subseteq A\cup BS⊆A∪B 都满足 Hall 条件（因为 SSS 来自两侧，邻居落在不同的两侧，不会重叠），从而存在匹配覆盖 A∪BA\cup BA∪B。
那么只需要状压点集合即可，分别状压，将合法方案存储下来，最后统计答案的时候用二分求出有多少个合法点即可，时间复杂度 O(n22n+m22m)O(n^2 2^n+m^2 2^m)O(n22n+m22m)。
总结：二分图的独立性（只需要考虑某一部的具体情况）
 [AGC032E] Modulo Pairing
将 (x+y)(x+y)(x+y) 分为 (x+y)&lt;M(x+y)&lt; M(x+y)&lt;M 和 (x+y)≥M(x+y) \ge M(x+y)≥M。如果我们只有单独一类的话我们显然可以通过将 aaa 排序后贪心即可，然而问题在于这是一个混合在一起的。
我们考虑能否融合这些贪心方法，那么必然存在一个分界点 ppp，使得 ppp 左边第一种贪心，ppp 右边用第二种贪心。下图的蓝线表示一类匹配，红线表示二类匹配：

证明可以考虑调整法：

左边一列的调整是平凡的，右边一类的调整可以考虑：蓝色匹配的代价必然 ≥ 右端点，红色匹配的代价必然 &lt; 左端点，那么不难发现调整之后最大代价都是变小了的。
但是分界点怎么求呢，根据调整的过程，我们可以考虑二分求出分界点 ppp，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：
混合多种方法的思路十分重要，例如根号分治。对于贪心问题，混合贪心可以让局部最优，我们再考虑怎么从局部最优拓展到整体最优即可；
 CF1131G Most Dangerous Shark
想起来一些不好的回忆，想起来 ARC 的某个题了呜呜呜呜呜。
首先，不难发现倒下骨牌的过程中，其骨牌高度 hhh 单调不降。也就是说我们可以通过单调栈来预处理每个骨牌所能向左向右倒影响的最远位置 LiL_{i}Li​ 和 RiR_{i}Ri​，具体如何计算见代码。
这样你就得到了一些区间，现在问题转化为要求选取一些区间使得能够覆盖所有点（覆盖的点不能再选）。考虑 DP，根据 CF1476F 灯塔题不难想到设 f(i)f(i)f(i) 表示前 iii 骨牌被推倒的最小代价，转移：
fi←{fj+ciLi−1≤j&lt;ii 骨牌向左倒fj−1+cjj&lt;i≤rjj 骨牌向右倒f_{i}\leftarrow 
\begin{cases}
f_{j}+c_{i} &amp; L_{i}-1\le j &lt; i &amp; i \text{ 骨牌向左倒} \\ \\
f_{j-1}+c_{j} &amp; j&lt;i\le r_{j} &amp; j \text{ 骨牌向右倒}
\end{cases}
fi​←⎩⎪⎪⎨⎪⎪⎧​fj​+ci​fj−1​+cj​​Li​−1≤j&lt;ij&lt;i≤rj​​i 骨牌向左倒j 骨牌向右倒​
第一种根据贪心显然只需要考虑 j=Li−1j=L_{i}-1j=Li​−1 的转移就可以了，第二个可以通过线段树优化，时间复杂度 O(mlog⁡m)O(m\log m)O(mlogm) 无法通过，考虑优化，但是发现这玩意不太好搞因为是一个区间查询。
考虑进一步对区间发掘性质，我们根据上面骨牌高度 hhh 单调不降，那么同时也能不难发现区间范围也是单调不降的，进一步推论：每个骨牌的覆盖范围要么包含，要么相离。考虑单调栈优化 DP，每次新加入的点就放在栈顶，每次只需要考虑栈顶得覆盖范围够不够，不够直接弹出，然后维护一个栈的前缀最小值就可以转移了。时间复杂度 O(n)O(n)O(n)。
总结：对于数列覆盖问题，常有的结论是两个点的覆盖范围要么包含、要么相离，这时候可以选择用单调数据结构维护（因为覆盖范围单调），而不是带 log 的数据结构。
 P2305 [NOI2014] 购票
首先有一个及其显然的 DP，设 f(i)f(i)f(i) 表示 iii 点向上跳祖先的最小花费，有转移：
f(u)=min⁡v∈fauf(v)+(depu−depv)⋅pu+qudepu−depv≤lu\begin{aligned} f(u) &amp; =\min_{v\in fa_{u}} f(v)+(dep_{u}-dep_{v})\cdot p_{u}+q_{u} &amp; dep_{u}-dep_{v}\le l_{u} \end{aligned}  
f(u)​=v∈fau​min​f(v)+(depu​−depv​)⋅pu​+qu​​depu​−depv​≤lu​​
直接做，时间复杂度 O(n2)O(n^2)O(n2)。考虑转化 DP 形式，不难有：
f(u)=(depu⋅pu+qu)×min⁡v∈fau{−depv⋅pu+fv}depu−depv≤lu\begin{aligned} f(u) &amp; = (dep_{u}\cdot p_{u}+q_{u})\times\min_{v\in fa_{u}} \{-dep_{v}\cdot p_{u}+f_{v}\} &amp; dep_{u}-dep_{v}\le l_{u} \end{aligned}  
f(u)​=(depu​⋅pu​+qu​)×v∈fau​min​{−depv​⋅pu​+fv​}​depu​−depv​≤lu​​
不难发现后面是一次函数，在没有转移限制情况下用李超线段树维护即可，但是问题在于有了限制怎么办。发现考虑上距离的限制其实就是多加了一维偏序关系，所以我们可以用树套树。一种空间消耗较小的树套树方法是，我们预处理出每个点的欧拉出序，外层线段树以欧拉出序来建立。询问时先二分出可以到达的最浅祖先，然后可以得到一个欧拉出序的区间，这个区间只包含这个点到祖先的路径，因为还没访问到的点没被加入到李超树中，那么插入的时候不用回撤，直接插入即可。时间复杂度 O(nlog⁡2n)O(n\log^2  n)O(nlog2n)。
总结：发现题目有不可解决的维度时，要敢于使用数据结构。但是此时空间消耗特别重要，注意处理 dp 的顺序，才能时数据结构的使用简单化，并且减少常数的消耗。
这里出栈序的应用也十分经典，引用了欧拉出序的区间，区间只包含这个点到祖先的路径这个优美的性质来防止李超树的回退，将一段具有祖孙关系的点对之间的路径直接映射到了序列上的一段区间从而将树上问题转化成了序列上的问题。
 CF303E Random Ranking

除了序列大小转 01 之外序列我是真不知道还能这么玩！
对区间离散化，然后呢？
首先考虑一个简单的问题，如果所有人选取的值域区间一致，那么一个人获得 1∼n1\sim n1∼n 的排名概率都是 1n\dfrac{1}{n}n1​。
那么我们考虑对于离散化后端点所构成的每一个小段 [pi,pi+1)[p_{i},p_{i+1})[pi​,pi+1​)，我们把一些人分配到小段的左边，把一些人分配到小段的右边，并钦定某个值在里面。然后来统计答案：
设 f(i,j)f(i,j)f(i,j) 表示 iii 个数所在区间比它小，jjj 个数所在区间比它大，剩下的人都在小段中的概率。一个人的概率可以通过讨论线段关系简单计算，那么这就变成一个背包问题了。时间复杂度是 O(n5)O(n^5)O(n5) 的。统计答案时枚举 (i,j)(i,j)(i,j)，对于这 (i,j)(i,j)(i,j)，可能的排名为 [i+1,i+j+1][i+1,i+j+1][i+1,i+j+1]，这些排名一定是等概率的，因为区间 [pi,pi+1)[p_{i},p_{i+1})[pi​,pi+1​) 内的这些值是全是随机的，iii 在每个排名的概率是相同的，精髓就是我们通过合理的状态设计将复杂问题划归为简单的问题。直接做是 O(n5)O(n^5)O(n5)。可以用 CDQ 分治优化，时间复杂度 O(n4log⁡n)O(n^4\log n)O(n4logn)。
总结：
很多实数概率题的技巧通常是，先解决一个能用概率简单计算的子问题，然后把原问题化归到这个简单问题上，想本题所使用的划归思想。
种不太好记录之前的值的信息，不好考虑完整的大小关系的随机问题一种套路做法是考虑枚举一个值，作为最终取的值或是前几大的分界线考虑，再来统计其他值和这个值的相对大小关系。
 AT_abc219_h
没法记录时间，这不是矩阵快速幂，不知道蜡烛具体长度，是我们知道每一秒蜡烛会减少 1 的长度，所以应用费用提前计算的思想，我们可以计算有多少个以后吹熄的蜡烛受到了这次减少的影响。
发现走的过程必定是一个区间，要么拓展当前位置一步，要么走到另一头。考虑区间 DP，设 f(l,r,0/1)f(l,r,0/1)f(l,r,0/1) 表示 [l,r][l,r][l,r] 区间，在 lll 还是 rrr 的方案，转移考虑向左向右或者从一端走到一端决策即可。但是我们没有办法算代价，因为蜡烛可能燃烧完毕，我们发现，相当于选择一些蜡烛不去选择，最优情况下一定是都选择会产生正贡献的蜡烛，错解不优。
所以加一维度 kkk 表示还有 kkk 个需要选择，答案就是 f(1,n,0,0/1)f(1,n,0,0/1)f(1,n,0,0/1)，时间复杂度 O(n3)O(n^3)O(n3)。
总结：如果当前状态不好知道，但你清楚代价的变化规则时，可以费用提前计算。
 P6847 [CEOI 2019] Magic Tree
今天没有什么太好的性质，考虑 DP，设 f(i,j)f(i,j)f(i,j) 表示 iii 子树内断边在 ≤j\le j≤j 的时间断开，转移：

不获取 u 点的果汁：f(u,i)=∑vf(v,i)f(u,i)=\sum\limits_{v}f(v,i)f(u,i)=v∑​f(v,i)
断开父边，获取 u 点的果汁：f(u,x)=wu+∑vf(v,du)f(u,x)=w_{u}+\sum\limits_{v}f(v,d_{u})f(u,x)=wu​+v∑​f(v,du​)，其中 x≥dux\ge d_{u}x≥du​。
线段树合并来优化，第一种转移就直接线段树合并，第二种转移不能维护区间最值标记。而且合并不太好维护，考虑分析性质，发现 f(u,∗)f(u,*)f(u,∗) 随 iii 增加而单调，那么第二种转移可以考虑成区间赋值。实现中区间赋值不打标记，而是线段树上的点维护 min,max，如果 min=max 的时候就说明这个区间是一个值，线段树合并的时候如果遇到区间同值的情况就打加法标记，修改的时候如果区间同值就新开儿子节点，上传的时候如果发现区间同值可以把儿子节点删掉，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。

更 nb 的，因为 dp 值单调所以可以考虑差分，那么第一种转移就能直接启发式合并，第二种转移是增加 wuw_{u}wu​ 的差分值，直接插入 set 中，这其实是取 max 操作，所以要从后面删除一些差分标记，时间复杂度 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
 [ARC120F] Wine Thief
可怜的 PPM 从暑假到做这个题之前都不知道学长口中所说的环上每个位置是等价的到底指的是是什么？做完这个题后 PPM 直接星宇大发！
上来直接拆贡献，然后问题在于你不会算合法的方案数，对于每个位置的方案数几乎是本质不同的。如果直接去算的话你还需要枚举选择大小时间复杂度是 O(nk)O(nk)O(nk) 的没法搞（其实可以）。
先考虑简单一点的，如果没有 kkk 的限制，就是单纯的让你链上选择独立集，根据插板法不难得出答案即为 f(n,k)=(n−k+1k)f(n,k)=\dbinom{n-k+1}{k}f(n,k)=(kn−k+1​)。现在我们考虑如何处理每个位置的方案数，由于我们不可能枚举选了多少个不然复杂度还是 O(nk)O(nk)O(nk) 的，考虑到如果我们不去枚举那么这个序列要求我们枚举的位置必须等价，考虑链上的位置是不等价，但是环上的位置是等价的。所以考虑转为环，此时方案数为 f(n−3,k−1)f(n-3,k-1)f(n−3,k−1)，如果位置在 111 和 nnn 的时候就是 F(n−2,k−1)F(n-2,k-1)F(n−2,k−1)。是此时 (1,n)(1,n)(1,n) 都选的方案是没有算上的。不过我们发现当钦定 1,n 都选时我们进入了一个子问题，子问题仍然可以放在一起处理，也就是说方案数是以一种 ∑i=0f(n−3−4i,k−2i−1)\sum\limits_{i=0} f(n-3-4i,k-2i-1)i=0∑​f(n−3−4i,k−2i−1) 的形式出现，前缀和维护即可，时间复杂度 O(n)O(n)O(n)。
 CF1528F AmShZ Farm
哦我的天啊这简直简直了。
两个限制，我们先单独讨论一个限制如何满足，比如说 aaa 的限制。我们发现限制可以如下转化：有 nnn 个凳子，nnn 个人手里拿着一个位置编号排队就座。第 iii 个人如果当前位置没有人坐就坐，如果有人就往后找到第一个没有人的凳子坐下来，合法当且仅当每个人都能找到座位。这个性质也很好，但是问题如何快速判断每个人能否找到座位？我们可以在最后一个位置加一个哨兵座位 n+1n+1n+1，如果排完座位后 n+1n+1n+1 没人的话那么就是合法的。
但是 bbb 相等限制怎么处理，上面这个操作很不方便我们进行计数，原因就是在于我们选位置每个节点都只能向右选，位置是不等价的，不方便我们进行计数。我们发现如果我们将首尾相接，形成一个环，环上位置就是等价的就方便我们计数。
考虑进一步发掘点有用的，我们发现 bbb 的组合意义其实就是就是一个 aia_{i}ai​ 的贡献是其中每种数数量的 kkk 次方的和。同时发现这个环如果我们钦定一个点为 n+1n+1n+1，断环为链，而 [1,n][1,n][1,n] 中合法元素因为只要出现次数满足可以分配，即设 cnticnt_{i}cnti​ 表示 iii 数出现次数，满足 ∑j=incntj≤n−i+1\sum\limits_{j=i}^n cnt_{j}\le n-i+1j=i∑n​cntj​≤n−i+1 的话就可以了。所以 [1,n][1,n][1,n] 都是循环同构的，而这些组中 aaa 的贡献都是一致的。我们可以对所有的 aaa 进行计算后除掉 n+1n+1n+1 即为答案。
现在考虑每个元素的贡献，答案需要乘上 (n+1)(n+1)(n+1) 发现消掉了，太好了，那么直接通过 bbb 来卡 aaa 的限制，枚举该元素出现次数，那么答案为：
∑i=0n(ni)iknn−i\sum\limits_{i=0}^n \binom{n}{i}i^k n^{n-i}
i=0∑n​(in​)iknn−i
由于 kkk 较小，考虑斯特林反演有：
∑i=0n(ni)⋅nn−i∑j=0kS(k,j)⋅(ij)⋅j!\sum_{i=0}^n{n\choose i}\cdot n^{n-i}\sum_{j=0}^kS(k,j)\cdot {i\choose j}\cdot j!
i=0∑n​(in​)⋅nn−ij=0∑k​S(k,j)⋅(ji​)⋅j!
注意到：(ni)(ij)=(nj)(n−ji−j)\dbinom{n}{i}\dbinom{i}{j}=\dbinom{n}{j}\dbinom{n-j}{i-j}(in​)(ji​)=(jn​)(i−jn−j​)，有：
∑j=0kS(k,j)⋅(nj)⋅j!⋅(∑i=jn(n−ji−j)⋅nn−i)\sum_{j=0}^kS(k,j)\cdot \binom{n}{j} \cdot j!\cdot (\sum_{i=j}^n{n-j\choose i-j}\cdot n^{n-i})
j=0∑k​S(k,j)⋅(jn​)⋅j!⋅(i=j∑n​(i−jn−j​)⋅nn−i)
可以二项式反演，答案即为：
∑j=0kS(k,j)⋅(nj)⋅j!⋅(n+1)n−j\sum_{j=0}^kS(k,j)\cdot \binom{n}{j}\cdot j!\cdot(n+1)^{n-j}
j=0∑k​S(k,j)⋅(jn​)⋅j!⋅(n+1)n−j
用第二类斯特林数·行的技巧算一下就可以啦，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
总结：等概率环是一个很重要的玩意，链上的位置是不等价的，但是环上是等价的，所以我们可以考虑。
 CF512D Fox And Travelling
首先可以将标记看作删除，其次根据题目限制不难发现合法的删除操作必定每次删除的点度数都 ≤1\le 1≤1。然后我们发现满足这个性质的只有树，环是没有用的，说严谨点将原图去掉环后合法的都是森林。
那先考虑树怎么做，显然飞上去一个树形 DP 设 f(i,j)f(i,j)f(i,j) 表示 iii 子树内选了 jjj 个点的方案数，转移枚举合并上来，还要乘上一个 (j+kj)\dbinom{j+k}{j}(jj+k​) 的组合数，时间复杂度 O(n2)O(n^2)O(n2)。
注意到我在玩文字游戏，上面只是说树了没说是有根树还是无根树，显然无根树有一堆重复方案，我们考虑这些重复方案有什么性质，发现无根树定根时做 DP 每种选择 iii 个点的方案会被多算 siz−isiz-isiz−i 次，其中 sizsizsiz 为这棵无根树的大小，那么除掉即可，时间复杂度 O(n3)O(n^3)O(n3)。
 CF914F Substrings in a String
bitset 好神秘！
对 26 个字母各开一个 bitset，存这个字母出现的位置。
对于询问，新建一个 bitset。从前到后枚举询问串的每个位置 yi​，和这个字母对应的 bitset 右移 i 位取 and。
最终得到的 bitset 中 1 的个数即为询问串在原串出现次数。
 P5355 [Ynoi Easy Round 2017] 由乃的玉米田
bitset 神秘密！
首先飞一个莫队上去，考虑加法操作如何解决，显然只要存在 x+y=kx+y=kx+y=k 即可满足，而题目只要求可行性而非要求个数，故考虑 bitset 维护值域数是否出现，那么加法操作就是 (s1&amp;(s1&lt;&lt;qry[i].x)).any()，其中 s1s1s1 表示值域维护。
然后考虑减法，显然减法可以维护一个 105−x10^5 -x105−x 的 bitset，设为 s2s2s2，那么判断方法就是：(s1&amp;(s2&gt;&gt;(1e5-qry[i].x))).any()。然后考虑乘法，枚举约数 O(nn)O(n\sqrt{n})O(nn​) 做。问题在于除法很难维护，考虑根号分治，&gt;n&gt;\sqrt{n}&gt;n​ 的暴力找。但是问题在于 ≤n\le \sqrt{n}≤n​ 怎么做？
先将询问按左端点降序排列。然后取一个指针，一开始指向 nnn。若当前询问的左端点为 lll，则将 [l,j][l,j][l,j] 上所有元素的贡献插入树状数组中，并使 j=l−1j=l-1j=l−1，完成后直接在树状数组上获取当前询问的答案，时间复杂度 O(nmax⁡iailog⁡n)O(n \sqrt{\max_i a_i}\log n )O(nmaxi​ai​​logn)，直接做即可。
 P4465 [国家集训队] JZPSTR
bitset，bitset，bitset！
虽然标程是分块加 SAM， 但是显然大家都不喜欢这么毒瘤的。注意到插入删除询问次数独立的都很少，并且字符集很少，考虑 bitset。我们维护每个字符在哪些位置上出现过，记 iii 字符出现在 bib_{i}bi​ 集合的位置，现有匹配串 ststst，维护当前仍然合法的起始点集合 pospospos，则有 pos=pos∧(bsti&gt;&gt;i)pos=pos \land (b_{st_i}&gt;&gt;i)pos=pos∧(bsti​​&gt;&gt;i)。
讲完了就好说了，强两个操作显然可以用位运算暴力，第二个就用我们上面的操作，时间复杂度是 O(nTw+nlw)O(\dfrac{nT}{w}+\dfrac{nl}{w})O(wnT​+wnl​) 其中 l=max⁡ilen⁡(zi)l=\max\limits_{i} \operatorname{len}(z_{i})l=imax​len(zi​)。
轻松最优解第二位，不知道第一位如何做到？
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>优化建图技巧</title>
    <url>/posts/5c86f54/</url>
    <content><![CDATA[ 0. 前言
会添加的吧，会添加的吧？一定会添加的吧！
 1. 线段树优化建图
CF786B Legacy
区间向区间连边，我们可以利用线段树的优秀区间特性来进行连边。具体来说，我们建立两颗线段树，一颗专门管入边，一颗管出边入边的树父节点向子节点连边（如果子节点向父节点连边，会导致本来只连向该区间的边通过子节点向父节点连的边连向了更大的区间），同理出边的子节点向父节点连边。父子节点之间的边，边权为 0。

总边复杂度大约在 O(mlog⁡n)O(m \log n)O(mlogn) 级别。
例如上图，本题代码如下：
#include&lt;bits/stdc++.h&gt;#define int long long#define ls (p&lt;&lt;1)#define rs (p&lt;&lt;1|1)#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=4e6+15,K=6e5;struct Edge&#123;    int v,w;&#125;;int n,q,s,dis[MN],pos[MN];vector&lt;Edge&gt; adj[MN];bool vis[MN];inline void add(int u,int v,int w)&#123;    adj[u].push_back(&#123;v,w&#125;);&#125;void build(int p,int l,int r)&#123;    if(l==r)&#123;        pos[l]=p;        return;    &#125;    add(p,ls,0);    add(p,rs,0);    add(ls+K,p+K,0);    add(rs+K,p+K,0);    int mid=(l+r)&gt;&gt;1;    build(ls,l,mid);    build(rs,mid+1,r);&#125;void updatetoqj(int p,int l,int r,int fl,int fr,int u,int w)&#123;    if(l&gt;=fl&amp;&amp;r&lt;=fr)&#123;        add(u+K,p,w);        return;    &#125;    int mid=(l+r)&gt;&gt;1;    if(mid&gt;=fl) updatetoqj(ls,l,mid,fl,fr,u,w);    if(mid&lt;fr) updatetoqj(rs,mid+1,r,fl,fr,u,w);&#125;void updatefromqj(int p,int l,int r,int fl,int fr,int u,int w)&#123;    if(l&gt;=fl&amp;&amp;r&lt;=fr)&#123;        add(p+K,u,w);        return;    &#125;    int mid=(l+r)&gt;&gt;1;    if(mid&gt;=fl) updatefromqj(ls,l,mid,fl,fr,u,w);    if(mid&lt;fr) updatefromqj(rs,mid+1,r,fl,fr,u,w);&#125;void dijk(int begin)&#123;    memset(dis,0x3f,sizeof(dis));    priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt;q;    q.push(pir(0,begin));    dis[begin]=0;    while(!q.empty())&#123;        int u=q.top().second;        q.pop();        if(vis[u]) continue;        vis[u]=1;        for(auto e:adj[u])&#123;            int v=e.v,w=e.w;            if(dis[v]&gt;w+dis[u])&#123;                dis[v]=w+dis[u];                if(!vis[v]) q.push(pir(dis[v],v));            &#125;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;    build(1,1,n);    for(int i=1;i&lt;=n;i++)&#123;        add(pos[i],pos[i]+K,0);        add(pos[i]+K,pos[i],0);    &#125;    while(q--)&#123;        int op,u,fl,fr,w,v;        cin&gt;&gt;op;        if(op==1)&#123;            cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;            add(pos[u]+K,pos[v],w);        &#125;else if(op==2)&#123;            cin&gt;&gt;u&gt;&gt;fl&gt;&gt;fr&gt;&gt;w;            updatetoqj(1,1,n,fl,fr,pos[u],w);        &#125;else if(op==3)&#123;            cin&gt;&gt;u&gt;&gt;fl&gt;&gt;fr&gt;&gt;w;            updatefromqj(1,1,n,fl,fr,pos[u],w);        &#125;    &#125;    dijk(pos[s]+K);    for(int i=1;i&lt;=n;i++)&#123;        cout&lt;&lt;(dis[pos[i]]&lt;0x3f3f3f3f3f3f3f3f?dis[pos[i]]:-1)&lt;&lt;&quot; &quot;;    &#125;    return 0;&#125;
 2. 前后缀优化建图
可以用于连边区间序列的前后缀或树上根链的情况。
这一部分优化的是一个点向一整个前缀或后缀连边，暴力连边数可达到惊人的 O(n2)O(n^2)O(n2)，无法承受。

我们通过对于每一个节点 iii 建立两个复制节点：prei,sufipre_{i},suf_{i}prei​,sufi​。连边为 i→prei,prei−1→preii \to pre_{i},pre_{i-1} \to pre_{i}i→prei​,prei−1​→prei​。同理于 sufsufsuf。

对于树上根链，直接建内向树，连根链末尾即可。
Luogu-P6378 PA 2010 Riddle
2-sat 加优化建图：
// 注释：DeepseekR1 and V3,WJY// 可以线段树优化，但是问题是你要开好多个线段树来存储[1,x-1],[x,n]的节点信息，空间很炸裂，但也能做#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=8e6+15;int n,m,k,dfn[MN],low[MN],vdcc[MN],tot,dcc; // dfn: DFS序, low: Tarjan算法中的low值, // vdcc: 强连通分量编号, tot: dfn时间戳, dcc: 强连通分量计数器vector&lt;int&gt; adj[MN],gp[MN]; //gp: 存储每个部分(题意中的部分)的点bool vis[MN];int s[MN],top;void tarjan(int u)&#123;    // tarjan求强联通    low[u]=dfn[u]=++tot;    s[++top]=u;    vis[u]=1;    for(auto v:adj[u])&#123;        if(!dfn[v])&#123;            tarjan(v);            low[u]=min(low[u],low[v]);        &#125;else if(vis[v])&#123;            low[u]=min(low[u],dfn[v]);        &#125;    &#125;    if(low[u]==dfn[u])&#123;        dcc++;        int p;        do        &#123;            p=s[top--];            vdcc[p]=dcc;            vis[p]=0;        &#125; while (p!=u);    &#125;&#125;// 以下注释中// ¬u表示u的否定，即u+n// u的前缀辅助点，即u+2n// u的后缀辅助点，即u+3nint main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        int fu=u+n,fv=v+n;        adj[fu].push_back(v); // 添加边¬u → v        adj[fv].push_back(u); // 添加边¬v → u    &#125;    for(int i=1;i&lt;=k;i++)&#123;        int num;        cin&gt;&gt;num;        for(int j=1;j&lt;=num;j++)&#123;            int p;            cin&gt;&gt;p;            gp[i].push_back(p);            adj[p].push_back(p+2*n); // 添加边 p → p+2n（前缀变量）            adj[p+3*n].push_back(p+n); // 添加边 p+3n → ¬p（后缀变量）        &#125;        for(int j=1;j&lt;gp[i].size();j++)&#123;            int d1=gp[i][j-1],d2=gp[i][j]; // 前一个点和当前点            adj[d1+2*n].push_back(d2+2*n); // 添加边 d1+2n → d2+2n（前缀传递）            adj[d2+3*n].push_back(d1+3*n); // 添加边 d2+3n → d1+3n（后缀传递，可以看图理解）            adj[d1+2*n].push_back(d2+n); // 添加边 d1+2n → ¬d2（前缀已选，d2不可选）            adj[d2].push_back(d1+3*n); // 添加边 d2 → d1+3n（选d2，后缀必须选到d1）        &#125;    &#125;    for(int i=1;i&lt;=n*4;i++)&#123;        if(!dfn[i]) tarjan(i);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(vdcc[i]==vdcc[i+n] || vdcc[i+2*n]==vdcc[i+3*n])&#123;             // 如果i和¬i在同一分量，或前缀和后缀变量在同一分量则环无解            cout&lt;&lt;&quot;NIE&quot;;            return 0;        &#125;    &#125;    cout&lt;&lt;&quot;TAK&quot;;    return 0;&#125;
P3783 [SDOI2017] 天才黑客 - 洛谷
首先这个字典树的边权没有任何卵用，因为题目中已经给出边上的 did_{i}di​ 了。
其次这个题一眼最短时间，说人话就是最短路，考虑 Dijkstra 求最短路，因为这里 SPFA 显然已死（你真的要卡 O(nm)O(nm)O(nm)？）。问题转化为如何取去建图，根据题意，通过一条边的边权是如下构成的：
w(u,v)=c(u,v)+LCP⁡(dnow,di)w_{(u,v)} = c_{(u,v)} + \operatorname{LCP}(d_{now}, d_{i})
w(u,v)​=c(u,v)​+LCP(dnow​,di​)
不难注意到题目中慷慨的给我们了字典树，根据字典树上的性质，任意两个点之间的 LCA 节点的深度大小就是这两点的所构成字符串的最长公共前缀长度，那么边权转化为：
w(u,v)=c(u,v)+dep{LCA⁡(dnow,di}w_{(u,v)} = c_{(u,v)} + dep\left\{\operatorname{LCA}(d_{now}, d_{i}\right\}
w(u,v)​=c(u,v)​+dep{LCA(dnow​,di​}
但是这里面有一个棘手的地方就是这个 dnowd_{now}dnow​，因为如果我们真的要在 Dijkstra 上跑的话这个 dnowd_nowdn​ow 是不太好处理的。考虑题目的性质，注意到题目中的点几乎没有任何卵用，因为所有信息都在有向图的边上，那么我们考虑怎么从边上下手。考虑点边互换，将边拆成入点和出点，连边 in→outin \to outin→out，边权为 cec_{e}ce​。让后考虑这个 LCA 怎么处理，其实很简单，我们对于第一个边的出点，我们向第二个边的入点连上边权为两个边上的 LCA 权，即 dep{LCA⁡(d(u,v),d(v,t))}dep\left\{ \operatorname{LCA}(d_{(u,v)},d_{(v,t)}) \right\}dep{LCA(d(u,v)​,d(v,t)​)}。
注意到节点 111 向哪里走都是无代价的，所以对于所有 1→a1 \to a1→a 的边，我们建超级源点 SSS，让 S→aS \to aS→a，边权为 000 即可。
让后输出最短路长度的时候，答案即为 min⁡be=idisout\min\limits_{b_{e}=i} dis_{out}be​=imin​disout​，正确性是显然的。
写完交上去，恭喜你 MLE+TLE。为什么？因为边数最高可到达 O(m2)O(m^2)O(m2) 啊，这个时候又要开始优化建图了（悲）。

首先原来的 in→outin \to outin→out 显然是不能动的，我们考虑对 LCA 上下手，注意到我们对于 LCA 上都是一个一个连边的，而 LCA 对于大多数对节点是相同的，这是什么，虚树啊！我们考虑虚树的大小能否支持我们操作，不妨设 S={di∣bi=u,ai=u}S=\left\{ d_{i}| b_{i}=u,a_{i}=u \right\}S={di​∣bi​=u,ai​=u}，那么这些边的边权只能是 SSS 中任意两点 LCA 的深度，根据虚树特性理论，SSS，中任意两点的 LCA 总共只有 O(∣S∣)O(|S|)O(∣S∣) 个，对于所有点，∑u∣Su∣=m\sum\limits_{u} |S_u|=mu∑​∣Su​∣=m，边复杂度 O(m)O(m)O(m)，可以接受。
我们考虑把 LCA 这个点拿出来建虚点，在子树中的节点连一个 LCA 的虚点，让后在从这个虚点连向另外一个虚点，让后在利用虚树进行建边，但是这样边数是 O(n)O(n)O(n) 的，总边数还是 O(n2)O(n^2)O(n2) 的，还是会被卡，考虑怎么优化。
注意到，我们实际上连边都是在子树中的节点连一个 LCA 的虚点，让后在从这个虚点连向另外一个虚点，考虑这个怎么优化。子树的性质，DFN连续。那么，问题转化为 DFS 序上的区间向点连边，点向另外一个连续区间连边，这是什么，线段树优化建图啊！让后就做完了，时间复杂度因为连边是 O(log⁡n)O(\log n)O(logn) 的，所以总复杂度是 O(nlog⁡2m)O(n \log^2 m)O(nlog2m)，我没写因为我有卡常黑历史 www。
能不能再给力一点啊？
可以的！上述过程我们是在暴力枚举 LCA 的，事实上，如果两点间连了一堆的边，但是只有代价最小的边是有用的，剩下都是没太大啥用的，连了也不影响。
我们先把 SSS 集合求出来，连边的话我们从 [1,i][1,i][1,i] 的出点向 [i+1,t][i+1,t][i+1,t] 入点，[i+1,t][i+1,t][i+1,t] 出点向 [1,i][1,i][1,i] 入点连边，其中 t=∣S∣t=|S|t=∣S∣，这个可以用线段树也可以用神秘的前缀后缀优化建图来做。让后根据上面所说的，只有代价最小的边有用，也就是说对于一个子树区间，只有 min⁡x,ydep[lca⁡(x,y)]\min_{x,y} dep[ \operatorname{lca}(x,y)]minx,y​dep[lca(x,y)] 才有用，我们考虑这个代价最小的边怎么连，注意到每次都是某个前缀向后缀连边，或者后缀向前缀连边，为什么，你思考上面线段树的做法。那么，我们建立四个数组：前缀入点、前缀出点、后缀入点、后缀出点。这样的建边是 O(1)O(1)O(1) 的，时间复杂度是 O(nlog⁡m)O(n \log m)O(nlogm)。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e6+15,MLOG=20;struct Edge&#123;    int v,w;&#125;;struct EDGE&#123;    int a,b,c,d;&#125;e[MN];int n,m,K,S,ans[MN],hlca[MN],ntot,prein[MN],preout[MN],sufin[MN],sufout[MN];vector&lt;int&gt; out[MN],in[MN];vector&lt;Edge&gt; adj[MN];vector&lt;pir&gt; vt; // 这是集合 Snamespace Trie&#123;    vector&lt;int&gt; g[MN];    int fa[MN][30],dep[MN],dfn[MN],dfntot;    void triedfs(int u,int pre)&#123;        dfn[u]=++dfntot;        fa[u][0]=pre;        dep[u]=dep[pre]+1;        for(int i=1;i&lt;=MLOG;i++)&#123;            fa[u][i]=fa[fa[u][i-1]][i-1];        &#125;        for(auto v:g[u])&#123;            triedfs(v,u);        &#125;    &#125;    int lca(int x,int y)&#123;        if(dep[x]&gt;dep[y]) swap(x,y);        for(int i=MLOG;i&gt;=0;i--)&#123;            if(dep[fa[y][i]]&gt;=dep[x]) y=fa[y][i];        &#125;        if(x==y) return x;        for(int k=MLOG;k&gt;=0;k--)&#123;            if(fa[x][k]!=fa[y][k])&#123;                x=fa[x][k],y=fa[y][k];            &#125;        &#125;        return fa[x][0];    &#125;&#125;using namespace Trie;namespace Dijkstra&#123;    int dis[MN];    bool vis[MN];    void dijk(int st)&#123;        memset(dis,0x3f,sizeof(dis));        memset(vis,0,sizeof(vis));        priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt; q;        dis[st]=0;        q.push(pir(0,st));        while(!q.empty())&#123;            int u=q.top().second;            q.pop();            if(vis[u]) continue;            vis[u]=1;            for(auto e:adj[u])&#123;                int v=e.v;                if(dis[v]&gt;dis[u]+e.w)&#123;                    dis[v]=dis[u]+e.w;                    q.push(pir(dis[v],v));                &#125;            &#125;        &#125;    &#125;&#125;using namespace Dijkstra;bool cmp(pir x,pir y)&#123;    return dfn[x.first]&lt;dfn[y.first];&#125;void clear()&#123;    S=MN-3;    ntot=dfntot=0;    memset(dfn,0,sizeof(dfn));    memset(dep,0,sizeof(dep));    memset(fa,0,sizeof(fa));    for(int i=0;i&lt;MN;i++)&#123;        in[i].clear();        out[i].clear();        g[i].clear();        adj[i].clear();    &#125;&#125;void solve()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;K;    clear();    ntot=m&lt;&lt;1;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;e[i].a&gt;&gt;e[i].b&gt;&gt;e[i].c&gt;&gt;e[i].d;        out[e[i].a].push_back(i);        in[e[i].b].push_back(i);    &#125;    for(int i=1;i&lt;K;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        g[u].push_back(v);    &#125;    triedfs(1,0);    for(int i=1;i&lt;=m;i++)&#123;        adj[i].push_back(&#123;i+m,e[i].c&#125;);        if(e[i].a==1) adj[S].push_back(&#123;i,0&#125;);    &#125;        // 以上都是常规建边    for(int i=1;i&lt;=n;i++)&#123;        vt.clear();        for(auto p:in[i]) vt.push_back(pir(e[p].d,p+m));        for(auto p:out[i]) vt.push_back(pir(e[p].d,p));        sort(vt.begin(),vt.end(),cmp);        for(int j=0;j&lt;vt.size();j++)&#123; //新建前缀后缀节点            prein[j]=++ntot;            preout[j]=++ntot;            sufin[j]=++ntot;            sufout[j]=++ntot;        &#125;        for(int j=0;j+1&lt;vt.size();j++)&#123;            hlca[j]=lca(vt[j].first,vt[j+1].first); // 求出 dfn 排序后的任意两个节点的LCA            adj[prein[j+1]].push_back(&#123;prein[j],0&#125;); // 前缀后缀初始化建图            adj[preout[j]].push_back(&#123;preout[j+1],0&#125;);            adj[sufin[j]].push_back(&#123;sufin[j+1],0&#125;);            adj[sufout[j+1]].push_back(&#123;sufout[j],0&#125;);        &#125;        for(int j=0;j&lt;vt.size();j++)&#123;            // 前缀建图要分类，别建炸缸了            if(vt[j].second&lt;=m)&#123;                adj[sufin[j]].push_back(&#123;vt[j].second,0&#125;);                adj[prein[j]].push_back(&#123;vt[j].second,0&#125;);            &#125;            else&#123;                adj[vt[j].second].push_back(&#123;sufout[j],0&#125;);                adj[vt[j].second].push_back(&#123;preout[j],0&#125;);            &#125;        &#125;        for(int j=0;j+1&lt;vt.size();j++)&#123;            // 连边，这里dep-1是因为根节点dep=1，而lcp是根节点到            // 当前节点的距离，dep[rt]=1，所以要-1            adj[sufout[j+1]].push_back(&#123;prein[j], dep[hlca[j]]-1&#125;);            adj[preout[j]].push_back(&#123;sufin[j+1], dep[hlca[j]]-1&#125;);        &#125;    &#125;    dijk(S);    memset(ans,0x3f,sizeof(ans));    for(int i=1;i&lt;=m;i++)&#123;        // 暴力枚举        ans[e[i].b]=min(ans[e[i].b],dis[i+m]);    &#125;    for(int i=2;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0; // byebye程序&#125;
 3. 后缀树上优化建图
P5284 [十二省联考2019]字符串问题
当然是 SAM 做法啦，首先为了求前缀信息直接对反串求后缀自动机。
不难注意到这个支配关系很想一个图中的边，我们思考能不能进行图论建模，但是前缀全部建图是很难受的，但是一个性质，link 树上的祖先在反串上都是它的前缀。
我们记录一下反串每一个位置在后缀自动机上的位置，然后在 link 树上倍增上去找 s[l,r]s[l,r]s[l,r] 对应的节点。我们对于后缀自动机上每一个节点开一个 vector，按照子串长度为第一关键字，是否为 A 类串为第二关键字排序，然后依次连边。让后把后缀自动机父亲结点挂下来的结点向当前结点连一条边。
然后问题就是在 DAG 上求最长路！
其实就是综合利用 link 树上的祖先在反串上都是它的前缀的特性。
大约是 O(Tnlog⁡n)O(Tn \log n)O(Tnlogn)
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;int n,na,nb,m,in[MN],tot,dis[MN],a[MN],b[MN],last[MN],fa[MN],pre[31][MN],pos[MN];long long ans;bool isa[MN];string s;vector&lt;int&gt; adj[MN],g[MN];struct SAM&#123;    int nxt[MN][26],len[MN],stot,lst;    void init()&#123;        for(int i=0;i&lt;=stot;i++)&#123;            fa[i]=len[i]=0;            for(int j=0;j&lt;=30;j++) pre[j][i]=0;            memset(nxt[i],0,sizeof(nxt[i]));        &#125;        stot=lst=1;    &#125;    void expand(int c)&#123;        int cur=++stot;        len[cur]=len[lst]+1;        int p=lst;        while(p&amp;&amp;!nxt[p][c]) nxt[p][c]=cur,p=fa[p];        if(!p)&#123;            fa[cur]=1;        &#125;else&#123;            int q=nxt[p][c];            if(len[q]==len[p]+1)&#123;                fa[cur]=q;            &#125;else&#123;                int nq=++stot;                len[nq]=len[p]+1;                fa[nq]=fa[q];                memcpy(nxt[nq],nxt[q],sizeof(nxt[q]));                fa[q]=fa[cur]=nq;                while(p&amp;&amp;nxt[p][c]==q)&#123;                    nxt[p][c]=nq;                    p=fa[p];                &#125;            &#125;        &#125;        lst=cur;    &#125;    void initpre()&#123;        for(int i=1;i&lt;=stot;i++) pre[0][i]=fa[i];        for(int i=1;i&lt;=30;i++)&#123;            for(int j=2;j&lt;=stot;j++)&#123;                pre[i][j]=pre[i-1][pre[i-1][j]];            &#125;        &#125;    &#125;&#125;sam;bool cmp(int x,int y)&#123;    if(sam.len[x]==sam.len[y])&#123;        return isa[x]&gt;isa[y];    &#125;    return sam.len[x]&gt;sam.len[y];&#125;void init()&#123;    sam.init();    for(int i=1;i&lt;=tot;i++) in[i]=dis[i]=isa[i]=pos[i]=0,g[i].clear(),adj[i].clear();    ans=0;&#125;int toposort()&#123;    queue&lt;int&gt; q;    for(int i=1;i&lt;=tot;i++) if(!in[i]) q.push(i);    while(!q.empty())&#123;        int u=q.front();        q.pop();        ans=max(ans,1ll*dis[u]+sam.len[u]);        for(auto v:adj[u])&#123;            dis[v]=max(dis[v],dis[u]+sam.len[u]);            in[v]--;            if(!in[v])&#123;                q.push(v);            &#125;        &#125;    &#125;    bool flag=0;    for(int i=1;i&lt;=tot;i++)&#123;        if(in[i]) flag=1;    &#125;    if(flag) return -1;    return ans;&#125;void solve()&#123;    init();    cin&gt;&gt;s;    n=s.length();    s=&quot; &quot;+s;    for(int i=n;i&gt;=1;i--)&#123;        sam.expand(s[i]-&#x27;a&#x27;);        pos[i]=sam.lst;    &#125;    sam.initpre();    cin&gt;&gt;na;    tot=sam.stot;    for(int i=1;i&lt;=na;i++)&#123;        int l,r;        cin&gt;&gt;l&gt;&gt;r;        int lenn=r-l+1,p=pos[r];        for(int i=30;i&gt;=0;i--)&#123;            if(pre[i][p]&amp;&amp;sam.len[pre[i][p]]&gt;=lenn) p=pre[i][p];         &#125;        isa[++tot]=1;        sam.len[tot]=lenn;        g[p].push_back(tot);        a[i]=tot;    &#125;    cin&gt;&gt;nb;    for(int i=1;i&lt;=nb;i++)&#123;        int l,r;        cin&gt;&gt;l&gt;&gt;r;        int lenn=r-l+1,p=pos[l];        for(int i=30;i&gt;=0;i--)&#123;            if(pre[i][p]&amp;&amp;sam.len[pre[i][p]]&gt;=lenn) p=pre[i][p];         &#125;        isa[++tot]=0;        sam.len[tot]=lenn;        g[p].push_back(tot);        b[i]=tot;    &#125;    for(int i=2;i&lt;=sam.stot;i++) sort(g[i].begin(),g[i].end(),cmp);    for(int i=1;i&lt;=sam.stot;i++)&#123;        int lst=i;        for(int j=g[i].size()-1;j&gt;=0;j--)&#123;            adj[lst].push_back(g[i][j]);            in[g[i][j]]++;            if(!isa[g[i][j]]) lst=g[i][j];        &#125;        last[i]=lst;    &#125;    for(int i=2;i&lt;=sam.stot;i++)&#123;        adj[last[fa[i]]].push_back(i);        in[i]++;    &#125;    for(int i=1;i&lt;=tot;i++)&#123;        if(!isa[i]) sam.len[i]=0;    &#125;    cin&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int x,y;        cin&gt;&gt;x&gt;&gt;y;        adj[a[x]].push_back(b[y]);        in[b[y]]++;    &#125;    cout&lt;&lt;toposort()&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 4. 倍增优化建图
区间向区间连边，可以转化为区间向虚点连边，再由虚点向区间连边。
和线段树建图极其相似，但是不同的是我们这里搬到了书上，我们同样要建出两个树，一个是出边树，一个是入边树，让后我们通过倍增求 LCA 的方法来建立：

每一次我们让 [u1,v1]→[u2,v2][u_1,v_{1}] \to [u_{2},v_{2}][u1​,v1​]→[u2​,v2​] 连边时，两个跳 LCA，[u1,v1]→out[u1,v1][u_{1},v_{1}] \to out_{[u_{1},v_{1}]}[u1​,v1​]→out[u1​,v1​]​，[u2,v2]→in[u2,v2][u_{2},v_{2}] \to in_{[u_{2},v_{2}]}[u2​,v2​]→in[u2​,v2​]​。让后 out[u1,v1]→in[u2,v2]out_{[u_1,v_{1]}\to}in_{[u_{2},v_{2}]}out[u1​,v1]​→​in[u2​,v2​]​。
时间复杂度在 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)。
#include&lt;bits/stdc++.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e7+15;constexpr int INF=0x3f3f3f3f;struct Query&#123;    int u1,v1,u2,v2,w;&#125;qry[MN];int n,m,st,qtot,dis[MN],pre[MN];bool vis[MN];vector&lt;pir&gt; adj[MN],g[MN];namespace Tree&#123;    int dep[MN],fa[MN][20],dtot;    int in[MN][20],out[MN][20];    void dfs(int u,int pre)&#123;        dep[u]=dep[pre]+1;        fa[u][0]=pre;        in[u][0]=++dtot;        adj[dtot].push_back(&#123;u,0&#125;);        adj[dtot].push_back(&#123;pre,0&#125;);        out[u][0]=++dtot;        adj[u].push_back(&#123;dtot,0&#125;);        adj[pre].push_back(&#123;dtot,0&#125;);        for(int j=0;j&lt;__lg(n);j++)&#123;            fa[u][j+1]=fa[fa[u][j]][j];            in[u][j+1]=++dtot;            adj[dtot].push_back(&#123;in[u][j],0&#125;);            adj[dtot].push_back(&#123;in[fa[u][j]][j],0&#125;);            out[u][j+1]=++dtot;            adj[out[u][j]].push_back(&#123;dtot,0&#125;);            adj[out[fa[u][j]][j]].push_back(&#123;dtot,0&#125;);        &#125;        for(auto e:g[u])&#123;            int v=e.first;            if(v==pre) continue;            dfs(v,u);        &#125;    &#125;    void lca1(int x,int y,int k)&#123;        if(dep[x]&lt;dep[y]) swap(x,y);        adj[y].push_back(&#123;k,0&#125;);        for(int i=__lg(n);i&gt;=0;i--)&#123;            if(dep[fa[x][i]]&gt;=dep[y])&#123;                adj[out[x][i]].push_back(&#123;k,0&#125;);                x=fa[x][i];            &#125;        &#125;        if(x==y) return;        for(int i=__lg(n);i&gt;=0;i--)&#123;            if(fa[x][i]!=fa[y][i])&#123;                adj[out[x][i]].push_back(&#123;k,0&#125;);                adj[out[y][i]].push_back(&#123;k,0&#125;);                x=fa[x][i];                y=fa[y][i];            &#125;        &#125;        adj[out[x][0]].push_back(&#123;k,0&#125;);    &#125;    void lca2(int x,int y,int k)&#123;        if(dep[x]&lt;dep[y]) swap(x,y);        adj[k].push_back(&#123;y,0&#125;);        for(int i=__lg(n);i&gt;=0;i--)&#123;            if(dep[fa[x][i]]&gt;=dep[y])&#123;                adj[k].push_back(&#123;in[x][i],0&#125;);                x=fa[x][i];            &#125;        &#125;        if(x==y) return;        for(int i=__lg(n);i&gt;=0;i--)&#123;            if(fa[x][i]!=fa[y][i])&#123;                adj[k].push_back(&#123;in[x][i],0&#125;);                adj[k].push_back(&#123;in[y][i],0&#125;);                x=fa[x][i];                y=fa[y][i];            &#125;        &#125;        adj[k].push_back(&#123;in[x][0],0&#125;);    &#125;&#125;using namespace Tree;int root(int x)&#123;    return pre[x]==x?x:pre[x]=root(pre[x]);&#125;void dijk(int st)&#123;    priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt; q;    memset(dis,0x3f,sizeof(dis));    dis[st]=0;    q.push(&#123;0,st&#125;);    while(!q.empty())&#123;        int u=q.top().second;        q.pop();        if(vis[u]) continue;        vis[u]=1;        for(auto e:adj[u])&#123;            int v=e.first,w=e.second;            if(dis[v]&gt;dis[u]+w)&#123;                dis[v]=dis[u]+w;                q.push(&#123;dis[v],v&#125;);            &#125;        &#125;    &#125;&#125;int main()&#123;    ios::sync_with_stdio(0);    cin.tie(0);cout.tie(0);    cin&gt;&gt;n&gt;&gt;m&gt;&gt;st;    dtot=n;    for(int i=1;i&lt;=n;i++) pre[i]=i;    while(m--)&#123;        int op,u1,v1,u2,v2,w;        cin&gt;&gt;op;        if(op==1)&#123;            cin&gt;&gt;u1&gt;&gt;v1&gt;&gt;u2&gt;&gt;v2&gt;&gt;w;            if(root(u1)!=root(v1)||root(u2)!=root(v2)) continue;            qry[++qtot]=&#123;u1,v1,u2,v2,w&#125;;        &#125;else&#123;            cin&gt;&gt;u1&gt;&gt;v1&gt;&gt;w;            int ru=root(u1),rv=root(v1);            if(ru==rv) continue;            g[u1].push_back(&#123;v1,w&#125;);            g[v1].push_back(&#123;u1,w&#125;);            adj[u1].push_back(&#123;v1,w&#125;);            adj[v1].push_back(&#123;u1,w&#125;);            pre[rv]=ru;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)        if(!dep[i]) dfs(i,0);    for(int i=1;i&lt;=qtot;i++)&#123;        lca1(qry[i].u1,qry[i].v1,++dtot);        lca2(qry[i].u2,qry[i].v2,++dtot);        adj[dtot-1].push_back(&#123;dtot,qry[i].w&#125;);    &#125;    dijk(st);    for(int i=1;i&lt;=n;i++)        cout&lt;&lt;(dis[i]==INF?-1:dis[i])&lt;&lt;&quot; &quot;;    return 0;&#125;
 5. 虚点连边
区间向区间连边，可以转化为区间向虚点连边，再由虚点向区间连边。
这个话还是比较管用的，这样复杂度可以大大降低。
但是我题丢了，所以只能放一句话 www。
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>分块九讲</title>
    <url>/posts/ea3fa6a/</url>
    <content><![CDATA[这里是块状数组

 1.引入
分块是一种思想，把一个整体划分为若干个等长的小块，对整块整体处理，打标记。零散块暴力处理。可以做到均摊O(n)O(\sqrt{n})O(n​)的询问时间复杂度，总时间复杂度O(nn)O(n\sqrt{n})O(nn​)的一个优雅的暴力思想
我们将一个长度为nnn的数组分成lenlenlen个块，那么每个块的长度就是nlen\frac{n}{len}lenn​，一般来说这个lenlenlen取n\sqrt{n}n​,是需要自己用基本不等式去算出来的，但是一般比赛中手算一下理论复杂度，只要块长n\sqrt{n}n​能过就行。
为啥非要取n\sqrt{n}n​？因为nn=n\frac{n}{\sqrt{n}}=\sqrt{n}n​n​=n​,显然用基本不等式可以证明
以下是对1~16进行分块，分块实质上就是3层树，第二层就是块，每个块的子树共有n\sqrt{n}n​个孩子节点。只不过，块状数组最顶层的信息不用维护。

我们对于一次区间操作，可能有如下的可能

我们所操作的区间左右端点刚好在一个块里，这时候我们就可以暴力操作。但是我们要注意如果所修改的信息对块整体有影响块也要更新（例如求和），如下图。但是问题我们怎么左右端点是否在一个区间里呢。很简单我们只需要在预处理每个块的时候记录一下各个端点所属于的块的id就行
![[粘贴的图像 (4).png]]
当然下面这个情况也是属于第一种情况的，这种情况也可以保证复杂度是O(n)O(\sqrt{n})O(n​)


2. 我们所操作的区间左右端点不在一个块，如下图

这种情况我们根据上面所说的定义，散块暴力，大块打tag，橙色就是打tag,绿色代表暴力处理，打tag显然复杂度O(1)O(1)O(1)，两边暴力加起来也不会绿色总长度超过2n2\sqrt{n}2n​

优雅的暴力，虽然他的时间复杂度干不过O(nlog2n)O(nlog_2n)O(nlog2​n)的算法，但是他有一个好处，就是他的信息不需要满足结合律，也不需要一层层地传递标记，它具有更高的灵活性。
根据定义就能够写出以下建块的代码，这里我们以P3374——单点加区间和为例子，我们用sum[i]sum[i]sum[i]数组表示第i个块维护的数字和
void init()&#123;    len=sqrt(n);//块长为根号n    for(int i=1;i&lt;=len;i++)&#123;        l[i]=r[i-1]+1;//新块的左端点就是上一个块右端点+1        r[i]=i*len;//处理右端点    &#125;    if(r[len]&lt;n)&#123;//如果长度不够就在建一个块        r[++len]=n;        l[len]=r[len-1]+1;    &#125;    for(int i=1;i&lt;=len;i++)&#123;//注意这里len不在代表块长而是代表块的个数        for(int j=l[i];j&lt;=r[i];j++)&#123;            pos[j]=i;//处理每个点对应块的id            sum[i]+=a[j];//处理区间和，前缀和的思想        &#125;    &#125;&#125;
单点加如下，要注意对点修改也会对块维护的信息产生影响
void add(int x,ll k)&#123;    a[x]+=k;    sum[pos[x]]+=k;&#125;
询问如下
ll query(int fl,int fr)&#123;    int ql=pos[fl],qr=pos[fr];//获取左右端点的对应块id    ll ret=0;    if(ql==qr)&#123;//如果在一个块里，就情况1暴力处理        for(int i=fl;i&lt;=fr;i++)&#123;            ret+=a[i];        &#125;        return ret;    &#125;    //情况二，分散块暴力，整块看tag    for(int i=fl;i&lt;=r[ql];i++)&#123;//对左端点的分散块暴力        ret+=a[i];    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;//对右端点分散块暴力        ret+=a[i];    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;//对整块直接加tag        ret+=sum[i];    &#125;    return ret;&#125;
AC代码如下
#include&lt;iostream&gt;#include&lt;cmath&gt;#define endl &#x27;\n&#x27;#define ll long longusing namespace std;const int MN=5e5+15;int n,m;int l[MN],r[MN],pos[MN];ll a[MN],sum[MN],len;void add(int x,ll k)&#123;    a[x]+=k;    sum[pos[x]]+=k;&#125;void init()&#123;    len=sqrt(n);    for(int i=1;i&lt;=len;i++)&#123;        l[i]=r[i-1]+1;        r[i]=i*len;    &#125;    if(r[len]&lt;n)&#123;        r[++len]=n;        l[len]=r[len-1]+1;    &#125;    for(int i=1;i&lt;=len;i++)&#123;        for(int j=l[i];j&lt;=r[i];j++)&#123;            pos[j]=i;            sum[i]+=a[j];        &#125;    &#125;&#125;ll query(int fl,int fr)&#123;    int ql=pos[fl],qr=pos[fr];    ll ret=0;    if(ql==qr)&#123;        for(int i=fl;i&lt;=fr;i++)&#123;            ret+=a[i];        &#125;        return ret;    &#125;    for(int i=fl;i&lt;=r[ql];i++)&#123;        ret+=a[i];    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        ret+=a[i];    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;        ret+=sum[i];    &#125;    return ret;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    init();    while (m--)    &#123;        int op;        ll x,y;        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;        if(op==1)&#123;            add(x,y);        &#125;else cout&lt;&lt;query(x,y)&lt;&lt;endl;    &#125;        return 0;&#125;
 2.数列分块
成功解锁了分块，那么现在就来开始做题吧

单点加，区间求值，就是P3369

#include&lt;iostream&gt;#include&lt;cmath&gt;#define endl &#x27;\n&#x27;#define ll long longusing namespace std;const int MN=5e5+15;int n,m;int l[MN],r[MN],pos[MN];ll a[MN],sum[MN],len;void add(int x,ll k)&#123;    a[x]+=k;    sum[pos[x]]+=k;&#125;void init()&#123;    len=sqrt(n);    for(int i=1;i&lt;=len;i++)&#123;        l[i]=r[i-1]+1;        r[i]=i*len;    &#125;    if(r[len]&lt;n)&#123;        r[++len]=n;        l[len]=r[len-1]+1;    &#125;    for(int i=1;i&lt;=len;i++)&#123;        for(int j=l[i];j&lt;=r[i];j++)&#123;            pos[j]=i;            sum[i]+=a[j];        &#125;    &#125;&#125;ll query(int fl,int fr)&#123;    int ql=pos[fl],qr=pos[fr];    ll ret=0;    if(ql==qr)&#123;        for(int i=fl;i&lt;=fr;i++)&#123;            ret+=a[i];        &#125;        return ret;    &#125;    for(int i=fl;i&lt;=r[ql];i++)&#123;        ret+=a[i];    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        ret+=a[i];    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;        ret+=sum[i];    &#125;    return ret;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    init();    while (m--)    &#123;        int op;        ll x,y;        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;        if(op==1)&#123;            add(x,y);        &#125;else cout&lt;&lt;query(x,y)&lt;&lt;endl;    &#125;        return 0;&#125;

区间加，区间查询小于等于某个数

显然这个我们入手角度就是对于整个块怎么进行处理，我们显然可以发现。“小于等于”，如果暴力就是O(n)O(n)O(n),但是如果我们以有序数组二分那就是O(log2n)O(log_2n)O(log2​n)。思想就是对于块要维护有序。对于区间加，对于情况1和情况2的散列块我们需要重新建块进行sort排序。对于查询，我们可以对散列块暴力找，整块二分找。区间加对于大块来说是都加上一个数，不会改变相对大小的顺序所以只需要打tag就可以啦
代码如下
#include&lt;iostream&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;const int MN=5e4+15,MQ=700;int n;vector&lt;int&gt; bl[MQ];int l[MQ],r[MQ],pos[MN],tag[MQ],a[MN],len;void init()&#123;    len=sqrt(n);    for(int i=1;i&lt;=len;i++)&#123;        l[i]=r[i-1]+1;        r[i]=i*len;    &#125;    if(r[len]&lt;n)&#123;        r[++len]=n;        l[len]=r[len-1]+1;    &#125;    for(int i=1;i&lt;=len;i++)&#123;        for(int j=l[i];j&lt;=r[i];j++)&#123;            pos[j]=i;            bl[i].push_back(a[j]);        &#125;        sort(bl[i].begin(),bl[i].end());//处理完后要排序    &#125;&#125;void bladd(int fl,int fr,int k)&#123;//暴力加    int ql=pos[fl];    for(int i=fl;i&lt;=fr;i++)&#123;        a[i]+=k;    &#125;    bl[ql].clear();    for(int i=l[ql];i&lt;=r[ql];i++)&#123;        bl[ql].push_back(a[i]);    &#125;    sort(bl[ql].begin(),bl[ql].end());&#125;void add(int fl,int fr,int k)&#123;//区间加操作    int ql=pos[fl],qr=pos[fr];    if(ql==qr)&#123;        bladd(fl,fr,k);        return;    &#125;    bladd(fl,r[ql],k);    bladd(l[qr],fr,k);    for(int i=ql+1;i&lt;qr;i++)&#123;        tag[i]+=k;    &#125;&#125;int query(int fl,int fr,int k)&#123;    int ql=pos[fl],qr=pos[fr],ret=0;    if(ql==qr)&#123;        for(int i=fl;i&lt;=fr;i++)&#123;            if(a[i]+tag[ql]&lt;k)&#123;                ret++;            &#125;        &#125;        return ret;    &#125;    //两边暴力大块二分    //分块九讲对于暴力写的是推到一个数组排序后二分，但是直接暴力也是可以的吧    for(int i=fl;i&lt;=r[ql];i++)&#123;        if(a[i]+tag[ql]&lt;k)&#123;            ret++;        &#125;    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        if(a[i]+tag[qr]&lt;k)&#123;            ret++;        &#125;    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;        ret+=lower_bound(bl[i].begin(),bl[i].end(),k-tag[i])-bl[i].begin();    &#125;    return ret;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    init();    while (n--)    &#123;        int op,l,r,k;        cin&gt;&gt;op&gt;&gt;l&gt;&gt;r&gt;&gt;k;        if(op==0)&#123;            add(l,r,k);        &#125;else cout&lt;&lt;query(l,r,k*k)&lt;&lt;endl;    &#125;        return 0;&#125;

区间加，查询某个数的前继

这个其实和2是一样的，也是二分查找，这里贴一下他人的代码
const int inf=1e5+7;int n,len,a[inf];int bel[inf],L[400],R[400];int tag[400];vector&lt;int&gt;h[400];void baoli(int l,int r,int k)&#123;	int in=bel[l];	for(int i=l;i&lt;=r;i++)		a[i]+=k;	h[in].clear();	for(int i=L[in];i&lt;=R[in];i++)		h[in].push_back(a[i]);	sort(h[in].begin(),h[in].end());&#125;void update(int l,int r,int k)&#123;	int lin=bel[l],rin=bel[r];	if(lin==rin)	&#123;		baoli(l,r,k);		return;	&#125;	baoli(l,R[lin],k);	baoli(L[rin],r,k);	for(int i=lin+1;i&lt;rin;i++)		tag[i]+=k;&#125;int query(int l,int r,int k)&#123;	vector&lt;int&gt;ls;	for(int i=l;i&lt;=r;i++)		ls.push_back(a[i]+tag[bel[l]]);	sort(ls.begin(),ls.end());	vector&lt;int&gt;::iterator ret=lower_bound(ls.begin(),ls.end(),k);	if(ret==ls.begin())return -1;	return *--ret;&#125;int ask(int l,int r,int k)&#123;	int lin=bel[l],rin=bel[r];	if(lin==rin)return query(l,r,k);	int ans=-1;	ans=max(ans,query(l,R[lin],k));	ans=max(ans,query(L[rin],r,k));	for(int i=lin+1;i&lt;rin;i++)	&#123;		vector&lt;int&gt;::iterator ls=lower_bound(h[i].begin(),h[i].end(),k-tag[i]);		if(ls==h[i].begin())ans=max(ans,-1);		else ans=max(ans,*--ls+tag[i]);	&#125;	return ans;&#125;int main()&#123;	n=re();len=sqrt(n);	for(int i=1;i&lt;=n;i++)		a[i]=re();	for(int i=1;i&lt;=len;i++)		L[i]=R[i-1]+1,R[i]=i*len;	R[len]=n;	for(int i=1;i&lt;=len;i++)	&#123;		for(int j=L[i];j&lt;=R[i];j++)			bel[j]=i,h[i].push_back(a[j]);		sort(h[i].begin(),h[i].end());	&#125;	for(int i=1;i&lt;=n;i++)	&#123;		int op=re(),l=re(),r=re(),k=re();		if(op)wr(ask(l,r,k)),putchar(&#x27;\n&#x27;);		else update(l,r,k);	&#125;	return 0;&#125;

区间加，区间求和

我会线段树！！！！
用分块也是可以做的，与第一类型的相比来说只需要维护两个tag，一个区间加tag，一个区间和tag就可以啦
#include&lt;iostream&gt;#include&lt;cmath&gt;#define int long longusing namespace std;const int MN=1e5+15,MQ=700;int l[MQ],r[MQ],pos[MN],sum[MQ],tag[MQ],a[MN],n,len;void init()&#123;    len=sqrt(n);    for(int i=1;i&lt;=len;i++)&#123;        l[i]=r[i-1]+1;        r[i]=i*len;    &#125;    if(r[len]&lt;n)&#123;        r[++len]=n;        l[len]=r[len-1]+1;    &#125;    for(int i=1;i&lt;=len;i++)&#123;        for(int j=l[i];j&lt;=r[i];j++)&#123;            pos[j]=i;            sum[i]+=a[j];        &#125;    &#125;&#125;void add(int fl,int fr,int k)&#123;    int ql=pos[fl],qr=pos[fr];    if(ql==qr)&#123;        for(int i=fl;i&lt;=fr;i++)&#123;            a[i]+=k;            sum[ql]+=k;        &#125;        return;    &#125;    for(int i=fl;i&lt;=r[ql];i++)&#123;        a[i]+=k;        sum[ql]+=k;    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        a[i]+=k;        sum[qr]+=k;    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;        tag[i]+=k;        sum[i]+=(r[i]-l[i]+1)*k;    &#125;&#125;int query(int fl,int fr,int k)&#123;    int ql=pos[fl],qr=pos[fr],ans=0;    if(ql==qr)&#123;        for(int i=fl;i&lt;=fr;i++)&#123;            ans=(ans+a[i]+tag[ql])%k;        &#125;        return ans;    &#125;    for(int i=fl;i&lt;=r[ql];i++)&#123;        ans=(ans+a[i]+tag[ql])%k;    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        ans=(ans+a[i]+tag[qr])%k;    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;        ans=(ans+sum[i])%k;    &#125;    return ans;&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    init();    while (n--)    &#123;         int op,l,r,k;        cin&gt;&gt;op&gt;&gt;l&gt;&gt;r&gt;&gt;k;        if(op==0)&#123;            add(l,r,k);        &#125;else cout&lt;&lt;query(l,r,k+1)&lt;&lt;endl;    &#125;        return 0;&#125;

区间开方，区间求和

唉这个题不还是线段树么
P4145
这个题我们不要被101210^{12}1012吓到了，对其一直开根号，操作次数显然可证明为log2log2nlog_2log_2{n}log2​log2​n,计算一下大约一个2642^{64}264的数开7次就可以开到1或0。解题的关键就是1=1\sqrt{1}=11​=1,0=0\sqrt{0}=00​=0，只要对块进行检测，如果都是1或都是0就打个tag，之后就不用处理啦
代码如下
#include&lt;iostream&gt;#include&lt;cmath&gt;#define ll long longusing namespace std;const int MN=1e5+15,MQ=710;bool isok[MQ];int l[MQ],r[MQ],pos[MN],n,len,m;ll a[MN],sum[MQ];void build()&#123;    len=sqrt(n);    for(int i=1;i&lt;=len;i++)&#123;        l[i]=r[i-1]+1;        r[i]=i*len;    &#125;    if(r[len]&lt;n)&#123;        len++;        l[len]=r[len-1]+1;        r[len]=n;    &#125;    for(int i=1;i&lt;=len;i++)&#123;        for(int j=l[i];j&lt;=r[i];j++)&#123;            pos[j]=i;            sum[i]+=a[j];        &#125;    &#125;&#125;void kuaikai(int x)&#123;    if(isok[x]) return;    sum[x]=0;    isok[x]=1;    for(int i=l[x];i&lt;=r[x];i++)&#123;        a[i]=sqrt(a[i]);        sum[x]+=a[i];        if(a[i]&gt;1) isok[x]=0;    &#125;&#125;void kai(int fl,int fr)&#123;    int ql=pos[fl],qr=pos[fr];    if(ql==qr)&#123;        for(int i=fl;i&lt;=fr;i++)&#123;            sum[ql]-=a[i];            a[i]=sqrt(a[i]);            sum[ql]+=a[i];        &#125;        return;    &#125;    for(int i=fl;i&lt;=r[ql];i++)&#123;        sum[ql]-=a[i];        a[i]=sqrt(a[i]);        sum[ql]+=a[i];    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        sum[qr]-=a[i];        a[i]=sqrt(a[i]);        sum[qr]+=a[i];    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;        kuaikai(i);    &#125;&#125;ll ask(int fl,int fr)&#123;    ll ans=0;    int ql=pos[fl],qr=pos[fr];    if(ql==qr)&#123;        for(int i=fl;i&lt;=fr;i++)&#123;            ans+=a[i];        &#125;        return ans;    &#125;    for(int i=fl;i&lt;=r[ql];i++)&#123;        ans+=a[i];    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        ans+=a[i];    &#125;    for(int i=ql+1;i&lt;qr;i++)&#123;        ans+=sum[i];    &#125;    return ans;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    build();    cin&gt;&gt;m;    while (m--)    &#123;        int op,x,y;        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;        if(x&gt;y) swap(x,y);        if(op==0) kai(x,y);        else cout&lt;&lt;ask(x,y)&lt;&lt;endl;    &#125;        return 0;&#125;

单点修改，单点查询

考虑用vector存块，vector在中间插入的时间复杂度是O(len)O(len)O(len)，但是长度是n\sqrt{n}n​,所以修改复杂度其实也是O(n)O(\sqrt{n})O(n​)
代码如下（粘贴自分块九讲)
const int inf=1e5+7;int n,len,a[inf];int L[400],R[400];vector&lt;int&gt;h[inf];void insert(int id,int k)&#123;	for(int i=1;i&lt;=len;i++)	&#123;		if(id&lt;=h[i].size())		&#123;			vector&lt;int&gt;::iterator ls=h[i].begin()+id-1;			h[i].insert(ls,k);			return;		&#125;		id-=h[i].size();	&#125;&#125;int ask(int id)&#123;	for(int i=1;i&lt;=len;i++)	&#123;		if(id&lt;=h[i].size())			return *(h[i].begin()+id-1);		id-=h[i].size();	&#125;&#125;int main()&#123;	n=re();len=sqrt(n);	for(int i=1;i&lt;=n;i++)		a[i]=re();	for(int i=1;i&lt;=len;i++)		L[i]=R[i-1]+1,R[i]=i*len;	R[len]=n;	for(int i=1;i&lt;=len;i++)		for(int j=L[i];j&lt;=R[i];j++)			h[i].push_back(a[j]);	for(int i=1;i&lt;=n;i++)	&#123;		int op=re(),l=re(),r=re(),k=re();		if(op)wr(ask(r)),putchar(&#x27;\n&#x27;);		else insert(l,r);	&#125;	return 0;&#125;

区间众数问题 P4168

我们显然可以考虑用桶来去计数，但是问题是只知道一个块的众数很显然没有用是吧。
这里我们考虑众数的性质本身就是统计数字出现的个数，也就是说对于询问[L,R][L,R][L,R]区间的众数，其本质可以用[1,R][1,R][1,R]的数字个数减去[1,L−1][1,L-1][1,L−1]的数字个数
那么就很简单了，我们开一个二位数组定义为zs，zsi,jzs_{i,j}zsi,j​表示第i个块到第j个块的众数
我们可以使用O(nn)O(n\sqrt{n})O(nn​)的复杂度预处理众数
既然大块的众数已经解决，那么零散块如何处理，我们显然可以发现众数只会有两种情况，第一种就是在中间的大块，第二种就是在零散块中。
暴力找数可以，但是我们需要找出现次数的话，我们可以考虑用vector存储点的出现顺序，显然这个序列满足单调递增的顺序，我们就可以对左端点进行二分，右端点进行二分，右减去左就能够得到顺序啦
注意数据过大，由于二分我们需要经过离散话才可以
#include&lt;iostream&gt;#include&lt;unordered_map&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;const int MN=1e5+15,MQ=420;unordered_map&lt;int,int&gt; um,fum;//存离散化后的值，通过离散化的值找原数int ls=0;//zs数字表示从第i个块到第j个块的众数编号int n,zs[MQ][MQ],l[MQ],r[MQ],pos[MN],a[MN],len,bok[MN];int tong[MN]&#123;&#125;;vector&lt;int&gt; numpos[MN];void build()&#123;    len=sqrt(n);    for(int i=1;i&lt;=len;i++)&#123;        l[i]=r[i-1]+1;        r[i]=i*len;    &#125;    r[len]=n;    for(int i=1;i&lt;=len;i++)&#123;        for(int j=l[i];j&lt;=r[i];j++)&#123;            pos[j]=i;        &#125;    &#125;    for(int i=1;i&lt;=len;i++)&#123;//找众数，用桶计数        memset(tong,0,sizeof(tong));        int zsnum=0,maxx=0;        for(int j=l[i];j&lt;=n;j++)&#123;            tong[a[j]]++;            if(maxx&lt;tong[a[j]]||(maxx==tong[a[j]]&amp;&amp;zsnum&gt;a[j]))&#123;//第一个是找到一个出现次数更多的，第二个是要求众数编号最小                zsnum=a[j];                maxx=tong[a[j]];            &#125;            zs[i][pos[j]]=zsnum;        &#125;    &#125;&#125;//获取这个数在[l,r]区间内出现次数（即众数），使用二分int getcishu(int fl,int fr,int k)&#123;    auto start=lower_bound(numpos[k].begin(),numpos[k].end(),fl);    auto end=upper_bound(numpos[k].begin(),numpos[k].end(),fr);    return end-start;&#125;int query(int fl,int fr)&#123;    int ql=pos[fl],qr=pos[fr];    int zsnum=0,maxx=0;    if(ql==qr)&#123;        //暴力找        memset(tong,0,sizeof(tong));        for(int i=fl;i&lt;=fr;i++)&#123;            tong[a[i]]++;            if(maxx&lt;tong[a[i]]||(maxx==tong[a[i]]&amp;&amp;zsnum&gt;a[i]))&#123;                zsnum=a[i];                maxx=tong[zsnum];            &#125;        &#125;        return bok[zsnum];//反向查找直接返回答案    &#125;    //先把答案设置在中间的块    //显然答案只能在中间块或左右两个块中（如果左中或右中合并最终答案还是中间的众数）    zsnum=zs[ql+1][qr-1];    maxx=getcishu(fl,fr,zsnum);    for(int i=fl;i&lt;=r[ql];i++)&#123;        int ret=getcishu(fl,fr,a[i]);        if(maxx&lt;ret||(maxx==ret&amp;&amp;zsnum&gt;a[i]))&#123;            zsnum=a[i];            maxx=ret;        &#125;    &#125;    for(int i=l[qr];i&lt;=fr;i++)&#123;        int ret=getcishu(fl,fr,a[i]);        if(maxx&lt;ret||(maxx==ret&amp;&amp;zsnum&gt;a[i]))&#123;            zsnum=a[i];            maxx=ret;        &#125;    &#125;    return bok[zsnum];&#125;int main()&#123;    int m;    ios::sync_with_stdio(0);    cin&gt;&gt;n&gt;&gt;m;    // for(int i=1;i&lt;=n;i++)&#123;    //     int p;    //     cin&gt;&gt;p;    //     if(um.find(p)==um.end())&#123;    //         um[p]=++ls;    //         fum[ls]=p;    //     &#125;    //     a[i]=um[p];    //     numpos[a[i]].push_back(i);//1~n保证内部单调递增不用sort降级nlogn（?）    // &#125;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        bok[i]=a[i];    &#125;    sort(bok+1,bok+1+n);    int num=unique(bok+1,bok+1+n)-bok-1;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=lower_bound(bok+1,bok+1+num,a[i])-bok;        numpos[a[i]].push_back(i);    &#125;    build();    int bef=0;    for(int i=1;i&lt;=m;i++)&#123;        int fl,fr;        cin&gt;&gt;fl&gt;&gt;fr;        fl=(fl+bef-1)%n+1;        fr=(fr+bef-1)%n+1;        if(fl&gt;fr) swap(fl,fr);        bef=query(fl,fr);        cout&lt;&lt;bef&lt;&lt;endl;        // cout&lt;&lt;query(fl,fr)&lt;&lt;endl;    &#125;    // len=sqrt(n);    return 0;&#125;
 3.总结
分块是一种思想，不同的题目有不同的做法，具体情况具体分析。分块强调整块的统一处理，算法设计十分重要。
注意块长直接决定你的时间复杂度，如果根号被卡
可以考虑n+1\sqrt{n}+1n​+1, nlgn\sqrt{\frac{n}{lgn}}lgnn​​, n+常数\sqrt{n}+常数n​+常数
YNOI大分块之后再说

引用

Zvelig1205的分块九讲——link

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>分治fft</title>
    <url>/posts/b54c354b/</url>
    <content><![CDATA[ 0. 前言
你需要知道：

FFT 或 NTT。
CDQ 分治。

 1. 介绍
分治 FFT，用于解决这一个问题：

给定长为 n−1n-1n−1 的序列 ggg，求长为 n−1n-1n−1 的序列 fff，满足：
fi=∑j=1ifi−jgjf_i=\sum_{j=1}^i f_{i-j}g_jfi​=∑j=1i​fi−j​gj​，边界为 f0=1f_0=1f0​=1。
要求时间复杂度 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。

你可能会说：“这不就是卷积吗，FFT秒了！”但是你发现这玩意不太对劲，因为你卷积默认你是知道 fff，现在问题在于你不知道 fff，要一个一个求。
我们解决这个问题可以利用 CDQ 分治的思想，具体的，设 solve(l,r) 表示计算 g[l,r]g[l,r]g[l,r] 内这一段子问题的函数，注意这里算的不是 fif_ifi​，而是这一段自己对自己的贡献。为了我们 FFT 的方便，一开始肯定是调用 solve(0,1&lt;&lt;k) 的形式。
让后就是分治的部分，首先 midmidmid 劈成 [l,mid],[mid,r)[l,mid],[mid,r)[l,mid],[mid,r) 两段，令 len=r−llen=r-llen=r−l。左边一段我们可与i递归往下计算，但是对于右边我们需要计算左边对右边的贡献，因为 i−ji-ji−j 可能跑到 [l,mid][l,mid][l,mid] 里面。计算左侧 fff 的贡献，可以发现对右半边位置 xxx 的贡献为：
∑i=lmidfi×gx−i\sum_{i=l}^{mid} f_i \times g_{x-i}
i=l∑mid​fi​×gx−i​
故可以卷积快速计算，时间复杂度 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)。
以下为模板题代码：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2e7+15;int f[MN],g[MN],ans[MN],len,n,m;namespace BJXPoly&#123;    constexpr int MOD=998244353,G=3,INVG=332748118;    int rev[MN],tmp[MN],ta[MN],tb[MN];    int ksm(int a,int b)&#123;        int ret=1;        while(b)&#123;            if(b&amp;1) ret=ret*a%MOD;            a=a*a%MOD;            b&gt;&gt;=1;        &#125;        return ret;    &#125;    void dorev(int f[],int len)&#123;        for(int i=0;i&lt;len;i++)&#123;            rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;            if(i&amp;1)&#123;                rev[i]|=len&gt;&gt;1;            &#125;        &#125;        for(int i=0;i&lt;len;i++)&#123;            if(i&lt;rev[i]) swap(f[i],f[rev[i]]);        &#125;    &#125;    void NTT(int f[],int len,int op)&#123;        dorev(f,len);        for(int i=1;i&lt;len;i&lt;&lt;=1)&#123;            int Wn=ksm((op==1?G:INVG),(MOD-1)/(i&lt;&lt;1));            for(int j=0;j&lt;len;j+=(i&lt;&lt;1))&#123;                int w=1;                for(int k=0;k&lt;i;k++,w=(w*Wn)%MOD)&#123;                    int x=f[j+k],y=w*f[j+k+i]%MOD;                    f[j+k]=(x+y)%MOD;                    f[j+k+i]=(x-y+MOD)%MOD;                &#125;            &#125;        &#125;        if(op==-1)&#123;            int invlen=ksm(len,MOD-2);            for(int i=0;i&lt;len;i++) f[i]=f[i]*invlen%MOD;        &#125;    &#125;void Mul(int a[], int b[], int n, int m)&#123;    // 注意一定要复制一份再去做 NTT，不能覆盖原数组    int len=1;    while(len &lt; n+m-1) len &lt;&lt;= 1;    static int ta[MN], tb[MN];    for(int i=0;i&lt;len;i++) ta[i] = (i&lt;n ? a[i] : 0);    for(int i=0;i&lt;len;i++) tb[i] = (i&lt;m ? b[i] : 0);    NTT(ta, len, 1);    NTT(tb, len, 1);    for(int i=0;i&lt;len;i++) ta[i] = ta[i] * tb[i] % MOD;    NTT(ta, len, -1);    for(int i=0;i&lt;len;i++) a[i] = ta[i]; &#125;    void cdq(int l,int r)&#123;        if(l+1==r) return;        int mid=(l+r)&gt;&gt;1;        int len=r-l;        cdq(l,mid);        for(int i=0;i&lt;len*2;i++)&#123;            tmp[i]=0;        &#125;        for(int i=l;i&lt;mid;i++) tmp[i-l]=f[i];        Mul(tmp,g,len*2,len*2);        for(int i=mid;i&lt;r;i++) (f[i]+=tmp[i-l])%=MOD;        cdq(mid,r);    &#125;&#125;signed main()&#123;    read(n);    for(int i=1;i&lt;n;i++)&#123;        read(g[i]);    &#125;    int lim=n;    while(lim!=(1&lt;&lt;__lg(lim))) ++lim;    f[0]=1;    BJXPoly::cdq(0,lim);    for(int i=0;i&lt;n;i++)&#123;        put(f[i],0);    &#125;    return 0;&#125;
 2. 升级分治 FFT
我们思考，分治 FFT 的过程依赖于 CDQ 来计算贡献。回顾整个过程，它总是按照下标的顺序来一次一次计算出答案。

既然我们要升级，借助这个 CDQ 分治的结构树，我们思考，假设我们询问位置的值的时候，允许对值进行一些修改？
那么稍加分析，发现如果我们进行了修改，修改是有效的，因为我们 CDQ 在分治计算贡献的时候显然会把这个贡献在回溯分治树的时候依次计算到后面，大区间的贡献就包含了我们修改后的贡献。并且发现复杂度是正确的 O(log2n)O(log^2 n)O(log2n)。

也就是说，CDQ 递归的任意层，修改当前层左半区间的 fff 值，是有效且可行的，这样该层的卷积贡献会重新计算（局部 FFT），然后这个修改会继续往更上层递归传播，沿着递归树路径逐层更新。
更进一步！我们尝试把 ggg 也给修改！
发现不行，因为 ggg 的贡献一个一个改的话是让整个递归树贡献受到影响时间复杂度 O(n)O(n)O(n) 了。
不过还好，我们发现分治 FFT 可以通过小范围的修改来支持添加删除贡献的的操作，这个操作相当于将分治 FFT 进一步的升级了，恭喜你，你的分治 FFT 升级为了：半在线卷积。
半在线卷积的半在线是什么意思呢？回看我们的 CDQ 分治过程，前半段结果在递推时即时产生，后半段则依赖前半段，用分治+FFT一次性批量算出。所以叫“半在线”，是因为它的依赖关系是在线的（必须先知道前面的 fff 才能算后面的），但计算方式是批量的（一次 FFT 更新一大段），不像纯在线卷积那样每步只更新一个元素。
不叫在线，是因为 fif_ifi​ 仍然是按顺序被解锁的，在计算 fmidf_{mid}fmid​ 之前，f&lt;midf_{&lt;mid}f&lt;mid​ 已经全部算出来，可以被使用；但右半段的贡献是一次性批量算的，不是每次求一个 fif_ifi​ 就更新一次卷积结果，所以它不是完全在线的。
有一道 DP 例题，供大家练练手：CF553E。
 3. 例题
CF553E
考虑倒着 DP，设 f(i,j)f(i,j)f(i,j) 表示第 iii 个点走到 nnn，当前时间为 jjj 的期望。有转移：
f(u,j)=min⁡v∈son(i){∑kf(v,j+k)⋅pu,k}+wif(u,j)=\min_{v\in son(i)} \{ \sum_{k} f(v,j+k)\cdot p_{u,k} \}+w_i
f(u,j)=v∈son(i)min​{k∑​f(v,j+k)⋅pu,k​}+wi​
末状态 f(u,i)=dis(u,n)+x,i&gt;tf(u,i)=dis(u,n)+x,i&gt;tf(u,i)=dis(u,n)+x,i&gt;t，f(n,i)=0,i≤tf(n,i)=0,i\le tf(n,i)=0,i≤t
时间复杂度 O(nt2)O(nt^2)O(nt2)，无法通过，考虑优化，发现一堆优化板子都套不上去，但是发现 FFT 可以套上去。考虑 FFT 优化，但是注意到这个玩意差卷积不能卷因为这玩意是半在线的。考虑分治 FFT，但是对什么进行分治呢？考虑分析转移方程，注意到方程中时间的转移时具有顺序的，可以进行 CDQ。不妨对时间一维分治。
具体的，记 g(u,v),jg_{(u,v),j}g(u,v),j​ 来表示 ∑k=1tp(u,v),k×f(v,j+k)\sum_{k=1}^t p_{(u,v),k} \times f(v,j+k)∑k=1t​p(u,v),k​×f(v,j+k)，用 f→gf \to gf→g，在分治底层计算出 f(u,j)=min⁡v∈son(i){∑kf(v,j+k)⋅pu,k}+wif(u,j)=\min_{v\in son(i)} \{ \sum_{k} f(v,j+k)\cdot p_{u,k} \}+w_if(u,j)=minv∈son(i)​{∑k​f(v,j+k)⋅pu,k​}+wi​，时间复杂度 O(mtlog⁡2t)O(mt\log^2 t)O(mtlog2t)。
好消息是又学会了一个科技。
反思：DP 优化不仅仅可以从状态优化和一类特殊的转移优化，也可以通过转移的顺序进行优化。
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>区间前缀最大值（线段树）</title>
    <url>/posts/973cfd72/</url>
    <content><![CDATA[****# 0.前言

前缀最大值就是指从序列开头到某个位置，所有元素的最大值喵~    ——Deepseek

即如下
max⁡j=1iaj\max\limits_{j=1}^i a_j
j=1maxi​aj​
比如序列 [3,1,4,1,5][3, 1, 4, 1, 5][3,1,4,1,5]，它的前缀最大值序列就是 [3,3,4,4,5][3, 3, 4, 4, 5][3,3,4,4,5]。
 1.正文
看如下题
P4198

小A在平面上(0,0)点的位置，第i栋楼房可以用一条连接(i,0)和(i,Hi)的线段表示，其中Hi为第i栋楼房的高度。如果这栋楼房上任何一个高度大于0的点与(0,0)的连线没有与之前的线段相交，那么这栋楼房就被认为是可见的。
施工队的建造总共进行了M天。初始时，所有楼房都还没有开始建造，它们的高度均为0。在第i天，建筑队将会将横坐标为Xi的房屋的高度变为Yi(高度可以比原来大—修建，也可以比原来小—拆除，甚至可以保持不变—建筑队这天什么事也没做)。请你帮小A数数每天在建筑队完工之后，他能看到多少栋楼房？

我们把样例画出来，左图任何情况下都只为1，第二种为2。

题目问的是线段不相交即可，而且又连向原点，我们可以考虑正比例函数的关系式$$y=kx$$
那么对于线段相交，只需要判断k1≥k2k_{1\ge}k_2k1≥​k2​是否成立即可（我们设1节点在2节点之前），若成立，则第二个点被覆盖不能看到。
那么我们可以将问题转化为求最长递增的斜率序列（注意这里不是最长上升子序列！），而且原题有单点修改斜率这一操作，并且求[1,n][1,n][1,n]的答案，我们显然可以想到线段树维护这一数据结构。
我们怎么设计呢，我们可以线段树节点维护2个信息，第一个显然是最长递增的斜率序列长度，第二个是当前序列的最大值。
建树和easy，但…pushup不会写啊！
如果直接合并2个区间，那么一定会炸。所有O(1)O(1)O(1)的合并肯定会爆炸。

我们如何合并最长递增序列？显然第一项肯定在这个序列里，区间最大值一定在这里面。
2个子区间的值已经处理好了，可知左儿子内序列每一项一定在这个大区间内（因为如果左边不选那么右边肯定都会被覆盖啊）所以只需要处理右儿子区间和左儿子区间最大值的关系。这个值（我们设lmaxlmaxlmax）当作右儿子区间选出的节点的值必须大于lmaxlmaxlmax。
我们设计一个queryqueryquery函数用于处理：

如果l==rl==rl==r，那么是叶子节点，如果val&gt;lmaxval&gt;lmaxval&gt;lmax，则返回1，否则返回0
劈2半，设lslsls区间与rsrsrs区间

如果ls.max&lt;lmaxls.max&lt;lmaxls.max&lt;lmax，那么左孩子肯定都被覆盖了，去右孩子找。
如果ls.max&gt;lmaxls.max&gt;lmaxls.max&gt;lmax，那么右孩子在序列中的值一定会被贡献上，递归左孩子。注意右孩子的贡献是root.len−ls.lenroot.len-ls.lenroot.len−ls.len，因为右孩子的最长序列中所有值不一定都在这个根节点的序列中存在。看下图：




那么query函数如下:
int query(int p,double maxx)&#123;    if(maxx&gt;=t[p].mk) return 0;    if(t[p].l==t[p].r)&#123;        return t[p].mk&gt;maxx;    &#125;    else if(t[ls].mk&lt;=maxx)&#123;        return query(rs,maxx);    &#125;else return query(ls,maxx)+t[p].sum-t[ls].sum;&#125;
pushup也就像上文那么写：
void pushup(int p)&#123;    t[p].mk=max(t[ls].mk,t[rs].mk);    t[p].sum=t[ls].sum+query(rs,t[ls].mk);&#125;
那么代码单点修改也很好写，那么所有代码也就如下，注意一下浮点数：
#include&lt;bits/stdc++.h&gt;#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1using namespace std;const int MN=1e5+15;int n,m;struct segtree&#123;    int l,r,sum;    double mk;&#125;t[MN&lt;&lt;2];void build(int p,int l,int r)&#123;    t[p].l=l;    t[p].r=r;    if(l==r)&#123;        return;    &#125;    int mid=l+r&gt;&gt;1;    build(ls,l,mid);    build(rs,mid+1,r);&#125;int query(int p,double maxx)&#123;    if(maxx&gt;=t[p].mk) return 0;    if(t[p].l==t[p].r)&#123;        return t[p].mk&gt;maxx;    &#125;    else if(t[ls].mk&lt;=maxx)&#123;        return query(rs,maxx);    &#125;else return query(ls,maxx)+t[p].sum-t[ls].sum;&#125;void pushup(int p)&#123;    t[p].mk=max(t[ls].mk,t[rs].mk);    t[p].sum=t[ls].sum+query(rs,t[ls].mk);&#125;void change(int p,int pos,double k)&#123;    if(t[p].l==t[p].r)&#123;        t[p].sum=1;        t[p].mk=k;        return;    &#125;    int mid=t[p].l+t[p].r&gt;&gt;1;    if(mid&gt;=pos) change(ls,pos,k);    else change(rs,pos,k);    pushup(p);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    build(1,1,n);    int fl,fr;    while (m--)    &#123;        cin&gt;&gt;fl&gt;&gt;fr;        change(1,fl,(double)fr/fl);        cout&lt;&lt;t[1].sum&lt;&lt;&#x27;\n&#x27;;    &#125;        return 0;&#125;
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>区间最大字段和问题（线段树）</title>
    <url>/posts/64da72f3/</url>
    <content><![CDATA[ 吉司机线段树
 0.吉司机的前言


 1.介绍
吉司机线段树主要用于2件事，一个是区间最值修改，一个是区间历史最值维护。
 2.区间最值

给定一个长度为n的数列A，接着有m次操作

区间[l,r]中所有数变为min(Ai,x)min(A_i,x)min(Ai​,x)
询问区间[l,r]和
使用O(nlog⁡n)数据结构O(n\log n)数据结构O(nlogn)数据结构


用线段树解题一般我们使用lazytag来实现高效的时间复杂度。但是本题怎么设计？如果用一个tag处理区间最值，另一个处理区间和，但是这个和修改区间最值没有任何直接关系，不能这么简单处理。
吉司机线段树将这一类区间最值进行了通用转化方法，时间复杂度达到了O(nlog⁡n)O(n\log n)O(nlogn)。首先维护如下标记

区间最大值mx
区间最大值出现次数mxcnt
区间次大值se
区间和sum

考虑区间最值修改操作，即用min(Ai,x)min(A_i,x)min(Ai​,x)替换区间[L,R][L,R][L,R]的每个节点aia_iai​，首先找到对应区间，让后暴力搜索，我们搜到某个节点时，会分成以下三种情况。

当x≥mxx\ge mxx≥mx，显然这次修改不影响该节点，return
当se&lt;x≤mxse&lt;x\le mxse&lt;x≤mx，这次操作影响她的最大值，那么sum=sum−(mx−x)×mxcntsum=sum-(mx-x)\times mxcntsum=sum−(mx−x)×mxcnt
当x≤sex\le sex≤se，这个时候就不能直接修改了，只能递归左右儿子，让后在pushup中解决

上述算法的关键就是次大值，起到了剪枝的关键作用。
这个的时间复杂度是O(nlog⁡n)O(n\log n)O(nlogn) 。
 3.历史最值

直接上板子题罢
线段树3——区间最值，区间历史最值

给出一个长度为 nnn 的数列 AAA，同时定义一个辅助数组 BBB，BBB 开始与 AAA 完全相同。接下来进行了 mmm 次操作，操作有五种类型，按以下格式给出：


1 l r k：对于所有的 i∈[l,r]i\in[l,r]i∈[l,r]，将 AiA_iAi​ 加上 kkk（kkk 可以为负数）。
2 l r v：对于所有的 i∈[l,r]i\in[l,r]i∈[l,r]，将 AiA_iAi​ 变成 min⁡(Ai,v)\min(A_i,v)min(Ai​,v)。
3 l r：求 ∑i=lrAi\sum_{i=l}^{r}A_i∑i=lr​Ai​。
4 l r：对于所有的 i∈[l,r]i\in[l,r]i∈[l,r]，求 AiA_iAi​ 的最大值。
5 l r：对于所有的 i∈[l,r]i\in[l,r]i∈[l,r]，求 BiB_iBi​ 的最大值。

对于前四种操作，我们完全可以和上面那个题写起来一模一样，而操作瓶颈在于5。
我们观察一下tag的变化，tag的变化可能变大也可能变小，但在下传的时候当前节点儿子的值是不会改变的。
那么也就是说：只有当tag达到最大的时候，下传才能让儿子达到最大
那么也就是说，我们可以记录一个最大的懒标记。
如何下传？我们应当先更新maxbmaxbmaxb再更新maxamaxamaxa，先更新最大懒标记在更新懒标记。
让后就没有让后了…
#include &lt;bits/stdc++.h&gt;#define ls p &lt;&lt; 1#define rs p &lt;&lt; 1 | 1#define ll long longusing namespace std;constexpr int MN = 5e6 + 15, NINF = -2e9;template &lt;typename type&gt;inline void read(type &amp;x)&#123;    x = 0;    bool flag(0);    char ch = getchar();    while (!isdigit(ch))        flag = ch == &#x27;-&#x27;, ch = getchar();    while (isdigit(ch))        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (ch ^ 48), ch = getchar();    flag ? x = -x : 0;&#125;int n, m;struct segtree&#123;    ll sum;    int l, r, maxa, maxb, se, mxcnt;    int add1, add2, mxadd1, mxadd2;&#125; t[MN &lt;&lt; 2];void pushup(int p)&#123;    t[p].sum = t[ls].sum + t[rs].sum;    t[p].maxa = max(t[ls].maxa, t[rs].maxa);    t[p].maxb = max(t[ls].maxb, t[rs].maxb);    if (t[ls].maxa == t[rs].maxa)    &#123;        t[p].se = max(t[ls].se, t[rs].se);        t[p].mxcnt = t[ls].mxcnt + t[rs].mxcnt;    &#125;    else if (t[ls].maxa &gt; t[rs].maxa)    &#123;        t[p].se = max(t[ls].se, t[rs].maxa);        t[p].mxcnt = t[ls].mxcnt;    &#125;    else    &#123;        t[p].se = max(t[ls].maxa, t[rs].se);        t[p].mxcnt = t[rs].mxcnt;    &#125;&#125;void build(int p, int l, int r)&#123;    t[p].l = l, t[p].r = r;    if (l == r)    &#123;        read(t[p].maxa);        t[p].sum = t[p].maxb = t[p].maxa;        t[p].se = NINF;        t[p].mxcnt = 1;        return;    &#125;    int mid = l + r &gt;&gt; 1;    build(ls, l, mid);    build(rs, mid + 1, r);    pushup(p);&#125;void doit(int k1, int k2, int k3, int k4, int p)&#123;    // 更新历史最大值    t[p].maxb = max(t[p].maxb, t[p].maxa + k3);    // 更新当前最大值    t[p].maxa += k1;    // 更新区间和    t[p].sum += 1ll * k1 * t[p].mxcnt + 1ll * k2 * (t[p].r - t[p].l + 1 - t[p].mxcnt);    // 更新次大值    if (t[p].se != NINF)        t[p].se += k2;    // 更新标记    t[p].mxadd1 = max(t[p].mxadd1, t[p].add1 + k3);    t[p].mxadd2 = max(t[p].mxadd2, t[p].add2 + k4);    t[p].add1 += k1;    t[p].add2 += k2;&#125;void pushdown(int p)&#123;    int maxn = max(t[ls].maxa, t[rs].maxa);    if (t[ls].maxa == maxn)    &#123;        doit(t[p].add1, t[p].add2, t[p].mxadd1, t[p].mxadd2, ls);    &#125;    else    &#123;        doit(t[p].add2, t[p].add2, t[p].mxadd2, t[p].mxadd2, ls);    &#125;    if (t[rs].maxa == maxn)    &#123;        doit(t[p].add1, t[p].add2, t[p].mxadd1, t[p].mxadd2, rs);    &#125;    else    &#123;        doit(t[p].add2, t[p].add2, t[p].mxadd2, t[p].mxadd2, rs);    &#125;    t[p].add1 = t[p].add2 = t[p].mxadd1 = t[p].mxadd2 = 0;&#125;void updateadd(int p, int fl, int fr, ll k)&#123;    if (t[p].l &gt;= fl &amp;&amp; t[p].r &lt;= fr)    &#123;        t[p].sum += 1ll * k * (t[p].r - t[p].l + 1);        t[p].maxa += k;        t[p].maxb = max(t[p].maxb, t[p].maxa);        if (t[p].se != NINF)            t[p].se += k;        t[p].add1 += k;        t[p].add2 += k;        t[p].mxadd1 = max(t[p].mxadd1, t[p].add1);        t[p].mxadd2 = max(t[p].mxadd2, t[p].add2);        return;    &#125;    pushdown(p);    int mid = t[p].l + t[p].r &gt;&gt; 1;    if (mid &gt;= fl)        updateadd(ls, fl, fr, k);    if (mid &lt; fr)        updateadd(rs, fl, fr, k);    pushup(p);&#125;void updatemin(int p, int fl, int fr, int v)&#123;    if (v &gt;= t[p].maxa || t[p].l &gt; fr || t[p].r &lt; fl)        return;    if (t[p].l &gt;= fl &amp;&amp; t[p].r &lt;= fr &amp;&amp; v &gt; t[p].se)    &#123;        int k = t[p].maxa - v;        t[p].sum -= 1ll * k * t[p].mxcnt;        t[p].maxa = v;        t[p].maxb = max(t[p].maxb, v); // 更新历史最大值        t[p].add1 -= k;        return;    &#125;    pushdown(p);    updatemin(ls, fl, fr, v);    updatemin(rs, fl, fr, v);    pushup(p);&#125;ll querysum(int p, int fl, int fr)&#123;    if (t[p].l &gt;= fl &amp;&amp; t[p].r &lt;= fr)    &#123;        return t[p].sum;    &#125;    pushdown(p);    int mid = t[p].l + t[p].r &gt;&gt; 1;    ll res = 0;    if (mid &gt;= fl)        res += querysum(ls, fl, fr);    if (mid &lt; fr)        res += querysum(rs, fl, fr);    return res;&#125;int querymaxa(int p, int fl, int fr)&#123;    if (t[p].l &gt;= fl &amp;&amp; t[p].r &lt;= fr)    &#123;        return t[p].maxa;    &#125;    pushdown(p);    int res = NINF;    int mid = t[p].l + t[p].r &gt;&gt; 1;    if (mid &gt;= fl)        res = querymaxa(ls, fl, fr);    if (mid &lt; fr)        res = max(res, querymaxa(rs, fl, fr));    return res;&#125;int querymaxb(int p, int fl, int fr)&#123;    if (t[p].l &gt;= fl &amp;&amp; t[p].r &lt;= fr)    &#123;        return t[p].maxb;    &#125;    pushdown(p);    int res = NINF;    int mid = t[p].l + t[p].r &gt;&gt; 1;    if (mid &gt;= fl)        res = querymaxb(ls, fl, fr);    if (mid &lt; fr)        res = max(res, querymaxb(rs, fl, fr));    return res;&#125;int main()&#123;    read(n);    read(m);    build(1, 1, n);    int op, x, y, z;    while (m--)    &#123;        read(op);        read(x);        read(y);        if (op == 1)        &#123;            read(z);            updateadd(1, x, y, z);        &#125;        else if (op == 2)        &#123;            read(z);            updatemin(1, x, y, z);        &#125;        else if (op == 3)        &#123;            cout &lt;&lt; querysum(1, x, y) &lt;&lt; &#x27;\n&#x27;;        &#125;        else if (op == 4)        &#123;            cout &lt;&lt; querymaxa(1, x, y) &lt;&lt; &#x27;\n&#x27;;        &#125;        else if (op == 5)        &#123;            cout &lt;&lt; querymaxb(1, x, y) &lt;&lt; &#x27;\n&#x27;;        &#125;    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>单调队列优化DP</title>
    <url>/posts/d87cf644/</url>
    <content><![CDATA[ 0.前言
本文章例题出自于蓝书，优化方案来自许多博客（但我忘了呜呜呜）
 1.单调队列概念与怎么优化
单调队列，我们先来看他是用来干什么的。

单调队列主要用于维护两端指针单调不减的区间最值。  ——oiwiki

对于一般的特殊DP方程，我们可以进行优化。
他优化的是下面的一类DP方程，其中：
得到的方程：f[i]=min⁡L(i)≤j≤R(i)(f[j]+a[i]+b[j])\text{得到的方程：}  f[i]=\min\limits_{L(i)\le j \le R(i)}{(f[j]+a[i]+b[j])} 
得到的方程：f[i]=L(i)≤j≤R(i)min​(f[j]+a[i]+b[j])
因为i是外层循环定值，变形为：f[i]=min⁡L(i)≤j≤R(i)(f[j]+b[j])+a[i]\text{因为i是外层循环定值，变形为：} f[i]=\min\limits_{L(i)\le j \le R(i)}(f[j]+b[j])+a[i]
因为i是外层循环定值，变形为：f[i]=L(i)≤j≤R(i)min​(f[j]+b[j])+a[i]
其中min可以替换为max
设ds[j]=f[j]+b[j]ds[j]=f[j]+b[j]ds[j]=f[j]+b[j]，因为ds[j]ds[j]ds[j]与 iii 完全无关，所以有下式：
f[i]=min⁡L(i)≤j≤R(i)(ds[j])+a[i]f[i]=\min\limits_{L(i)\le j \le R(i)}(ds[j])+a[i]
f[i]=L(i)≤j≤R(i)min​(ds[j])+a[i]
由于ds[j]ds[j]ds[j]仅与jjj有关，与iii无关，那么我们只需要算一遍ds[j]ds[j]ds[j]就可以用于全部的f[i]f[i]f[i]计算，不用一个一个去枚举。
朴素的想法是每一次遍历iii的时候取计算min⁡L(i)≤j≤R(i)(ds[j])\min\limits_{L(i)\le j \le R(i)}(ds[j])L(i)≤j≤R(i)min​(ds[j])，但是这里有大量的重复计算，我们可以用单调队列优化这个计算，可以观察到j∈[L(i),R(i)]j\in [L(i),R(i)]j∈[L(i),R(i)]是一个滑动窗口，我们可以维护滑动窗口上的最值。

如果是求最小，我们应维护的是ds[j]ds[j]ds[j]单调上升的单调队列
如果是求最大，我们应维护的是ds[j]ds[j]ds[j]单调下降的单调队列

如何维护？我们把计算出来的值一个一个压进单调队列，

如果是当前的最值，前面计算和不在范围的我们要全部弹走。
若要最值，队首就是最值。
加入新决策时，先检查加入后是否满足单调性，处理完后那我们放进队尾

这样，队首即为我们想要的ds[j]ds[j]ds[j]。让后就可以更新f[i]f[i]f[i]，这样，我们从朴素的O(n2)O(n^2)O(n2)变为了O(n)O(n)O(n)。
ds[j]ds[j]ds[j]的值计算必须与iii完全无关！
第二个就是方程中某些具有单调性，可以根据性质发掘出来。
我们来看例题
 1.例题引入
P10978

有一段长度为 nnn 的序列和 mmm 个人，每个位置只能染色一次，每个人都有一个位置。这些人可以选择一段长度不超过 LiL_iLi​ 并且包括自己位置SiS_iSi​的一段区间进行染色。每个人对一个位置的贡献是 PiP_iPi​ 。求最大贡献。
数据范围：1≤n≤100,1≤m≤160001\le n\le 100,1\le m\le 160001≤n≤100,1≤m≤16000

我们先根据SiS_iSi​进行排序，这样的话每个人染色的区间一定在上一个工匠粉刷的区间之后，这样就可以线性DP了！
不难有状态f(i,j)f(i,j)f(i,j)表示前iii个人染色[1,j][1,j][1,j]（可以有空着不刷，没说必须刷完）能获得的最大报酬。
不难有转移方程：

不染色罚坐，有f(i,j)=f(i−1,j)f(i,j)=f(i-1,j)f(i,j)=f(i−1,j)
第jjj个点可以不刷，有f(i,j)=f(i,j−1)f(i,j)=f(i,j-1)f(i,j)=f(i,j−1)
第iii个人刷[k+1,j][k+1,j][k+1,j]，根据题目条件有区间长度len≤Lilen\le L_ilen≤Li​且Si∈[k+1,j]S_{i }\in[k+1,j]Si​∈[k+1,j]。也就是说k+1≤Si≤j并且j−k≤Lik+1\le S_{i}\le j \text{并且} j-k\le L_ik+1≤Si​≤j并且j−k≤Li​ ，我们变变形，就有如下转移方程：

f(i,j)=max⁡j−Li≤k≤Si−1f(i−1,k)+Pi×(j−k),其中j≥Sif(i,j)=\max\limits_{j-L_{i} \le k \le S_i-1}{f(i-1,k)+P_{i}\times (j-k)},\text{其中}j\ge S_i
f(i,j)=j−Li​≤k≤Si​−1max​f(i−1,k)+Pi​×(j−k),其中j≥Si​
我们观察第三个式子，我们和上面的式子来做个比较：
f[i]=min⁡L(i)≤j≤R(i)(f[j]+a[i]+b[j])f[i]=\min\limits_{L(i)\le j \le R(i)}{(f[j]+a[i]+b[j])}
f[i]=L(i)≤j≤R(i)min​(f[j]+a[i]+b[j])
我们发现这个式子十分甚至九分的详细，我们可以仿照上面把Pi×jP_{i} \times jPi​×j提出来，因为在这里我们朴素用3层循环，在循环kkk的时候jjj是不变的，故可以提出来。
变形后：f(i,j)=Pi×j+max⁡j−Li≤k≤Si−1(f(i−1,k)−Pi×k),其中j≥Si\text{变形后：}f(i,j)=P_{i} \times j + \max\limits_{j-L_{i} \le k \le S_i-1}{(f(i-1,k)-P_{i}\times k}),\text{其中}j\ge S_i
变形后：f(i,j)=Pi​×j+j−Li​≤k≤Si​−1max​(f(i−1,k)−Pi​×k),其中j≥Si​
当jjj增大时，kkk的上界Si−1S_i-1Si​−1不变，下界j−Lij-L_ij−Li​变大。那么这个就很像一个滑动窗口，特殊点就在于是一个左端点不断减小，右端点不变的滑动窗口。我们可以维护一个kkk单调递增，f(i−1,k)−Pi×kf(i-1,k)-P_{i}\times kf(i−1,k)−Pi​×k单调递减的一个
如何维护？

当jjj变大，检查队头，把之前计算过的小于j−Lij-L_ij−Li​的决策出队。
查询最优的f(i−1,k)−Pi×kf(i-1,k)-P_{i}\times kf(i−1,k)−Pi​×k，我们只需要查队头就行，因为维护的是单调递减的滑动窗口。
当要添加新决策，在队尾先检查f(i−1,k)−Pi×kf(i-1,k)-P_{i}\times kf(i−1,k)−Pi​×k单调性让后在加入

很开头我们提出的维护单调队列的方法十分的相似。
对于本题来说，当开始循环jjj的时候，建立一个空单调队列，先把[max(Si−Li)，Si−1][max(S_i-L_i)，S_i-1][max(Si​−Li​)，Si​−1]的决策依次加入候选集合，让后检查决策合法性，取队头转移，每个决策至多进入弹出1次，故时间复杂度均摊O(1)O(1)O(1)，故时间复杂度O(nm)O(nm)O(nm)。
代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=16005;struct node&#123;    int l,p,s;&#125;a[MN];int n,m;int f[MN][MN],q[MN];bool cmp(node x,node y)&#123;    return x.s&lt;y.s;&#125;int calc(int i,int k)&#123;    return f[i-1][k]-a[i].p*k;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;a[i].l&gt;&gt;a[i].p&gt;&gt;a[i].s;    &#125;    sort(a+1,a+1+m,cmp);//先排序    for(int i=1;i&lt;=m;i++)&#123;        int l=1,r=0;        for(int k=max(0,a[i].s-a[i].l);k&lt;=a[i].s-1;k++)&#123;            // 加决策并维护里面的单点递减            while(l&lt;=r&amp;&amp;calc(i,q[r])&lt;=calc(i,k)) r--;            q[++r]=k;        &#125;        for(int j=1;j&lt;=n;j++)&#123;            f[i][j]=max(f[i-1][j],f[i][j-1]);//罚坐与不涂            if(j&gt;=a[i].s)&#123;//如果当前j可以进行第三个转移方程                while(l&lt;=r&amp;&amp;q[l]&lt;j-a[i].l)&#123;//排除过时决策                    l++;                &#125;                if(l&lt;=r)&#123;//如果队不为空，转移                    f[i][j]=max(f[i][j],calc(i,q[l])+a[i].p*j);                &#125;            &#125;        &#125;    &#125;    cout&lt;&lt;f[m][n];    return 0;&#125;
请读者阅读完本题题解后和最开始我们提出的优化方法进行比较，观察其思想是如何体现的。
 2.单调队列优化多重背包
是是是我知道你会二进制优化，但是我要是限制复杂度O(nm)O(nm)O(nm)你又不会了。
这一部分教学借鉴了知乎宫水三叶的讲解

给定nnn种物品，第iii种物品的体积为ViV_iVi​，价值为WiW_iWi​，并且有CiC_iCi​个，背包容积MMM，要求选若干个物品进背包，确保背包不会炸掉的情况下价值总和最大。

首先还是用类似于01背包单维空间的定义：f[i]f[i]f[i]代表容量不超过iii的最大价值
目标：f[m]f[m]f[m]
朴素的转移想法，我们遍历当前容量能够装多少件该物品，让后从所有情况中取最优。

但事实上，转移只会发生在「对当前物品体积取余相同」的状态之间。——宫水三叶

例如我们遍历1→101\rightarrow 101→10，物品价值和体积均为2，数量为3，发现有如下规律：

f[10]f[10]f[10]由f[8],f[6],f[4]f[8],f[6],f[4]f[8],f[6],f[4]转移过来
f[9]f[9]f[9]由f[7],f[5],f[3]f[7],f[5],f[3]f[7],f[5],f[3]转移过来
…\dots…
f[5]f[5]f[5]由f[3],f[1]f[3],f[1]f[3],f[1]转移过来
f[3]f[3]f[3]由f[1]f[1]f[1]转移过来
f[2]f[2]f[2]由f[0]f[0]f[0]转移过来

即某个状态f[x]f[x]f[x]由Vimod  xV_{i}\mod xVi​modx转移过来（ViV_iVi​为体积，xxx即背包容量），并且比iii小，数量不超过物品个数的状态值所更新。
那么，我们可以把倒序循环jjj改为对每个余数u∈[0,Vi−1]u\in[0,V_i-1]u∈[0,Vi​−1]，倒序循环p=⌊(M−u)/Vi​⌋→0p=⌊(M-u)/V_i​⌋\rightarrow 0p=⌊(M−u)/Vi​​⌋→0，对应的状态就是j=u+p×Vij=u+p\times V_ij=u+p×Vi​，不难有状态转移方程
f[j]=max⁡p−Ci≤k≤p−1(f[u+k×Vi]+(p−k)×Wi)f[j]=\max\limits_{p-C_{i} \le k \le p-1}(f[u+k\times V_i]+(p-k)\times W_i)
f[j]=p−Ci​≤k≤p−1max​(f[u+k×Vi​]+(p−k)×Wi​)
不难发现这个转移方程和上一题几乎一模一样，处理方法也是同理的，那么细节就不说了，代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=150,MM=1e5+15;int n,m;int v[MN],w[MN],c[MN];int q[MM],f[MM];int clac(int i,int u,int k)&#123;    return f[u+k*v[i]]-k*w[i];&#125;int main()&#123;    memset(f,128,sizeof(f));    f[0]=0;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;w[i]&gt;&gt;v[i]&gt;&gt;c[i];        for(int u=0;u&lt;v[i];u++)&#123;            int l=1,r=0;            int maxp=(m-u)/v[i];            for(int k=maxp-1;k&gt;=max(maxp-c[i],0);k--)&#123;                while(l&lt;=r&amp;&amp;clac(i,u,q[r])&lt;=clac(i,u,k)) r--;                q[++r]=k;            &#125;            for(int k=maxp;k&gt;=0;k--)&#123;                while(l&lt;=r&amp;&amp;q[l]&gt;k-1)l++;                if(l&lt;=r) f[u+k*v[i]]=max(f[u+k*v[i]],clac(i,u,q[l])+k*w[i]);                if(k-c[i]-1&gt;=0)&#123;                    while(l&lt;=r&amp;&amp;clac(i,u,q[r])&lt;=clac(i,u,k-c[i]-1))r--;                    q[++r]=k-c[i]-1;                &#125;            &#125;        &#125;    &#125;    int ans=0;    for(int i=1;i&lt;=m;i++)&#123;        ans=max(ans,f[i]);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 3.另一道例题洛谷P2569

通过一段时间的观察，lxhgww\text{lxhgww}lxhgww 预测到了未来 TTT 天内某只股票的走势，第 iii 天的股票买入价为每股 APiAP_iAPi​，第 iii 天的股票卖出价为每股 BPiBP_iBPi​（数据保证对于每个 iii，都有 APi≥BPiAP_i \geq BP_iAPi​≥BPi​），但是每天不能无限制地交易，于是股票交易所规定第 iii 天的一次买入至多只能购买 ASiAS_iASi​ 股，一次卖出至多只能卖出 BSiBS_iBSi​ 股。
另外，股票交易所还制定了两个规定。为了避免大家疯狂交易，股票交易所规定在两次交易（某一天的买入或者卖出均算是一次交易）之间，至少要间隔 WWW 天，也就是说如果在第 iii 天发生了交易，那么从第 i+1i+1i+1 天到第 i+Wi+Wi+W 天，均不能发生交易。同时，为了避免垄断，股票交易所还规定在任何时间，一个人的手里的股票数不能超过 MaxP\text{MaxP}MaxP。
在第 111 天之前，lxhgww\text{lxhgww}lxhgww 手里有一大笔钱（可以认为钱的数目无限），但是没有任何股票，当然，TTT 天以后，lxhgww\text{lxhgww}lxhgww 想要赚到最多的钱，聪明的程序员们，你们能帮助他吗？

不难有状态f(i,j)f(i,j)f(i,j)表示到了第iii天，手上持有第jjj份股票赚到最多的钱数。
目标：max⁡j=1maxpf[n][j]\max\limits_{j=1}^{maxp}f[n][j]j=1maxmaxp​f[n][j]
考虑1天共有4个决策，分别是凭空买（之前没买过股票），今天不交易，凭之前的基础买入和卖出。
那么状态转移方程也就如下：

凭空买：f(i,j)= −APi×j其中j≤ASif(i,j)=\,-AP_{i}\times j \quad \text{其中}j\le AS_if(i,j)=−APi​×j其中j≤ASi​
不交易：f(i,j)=max(f(i−1,j))其中j≤maxpf(i,j)=max(f(i-1,j))\quad \text{其中}j\le maxpf(i,j)=max(f(i−1,j))其中j≤maxp
买入：f(i,j)=max⁡j−ASi≤k≤jf(i−w−1,k)−APi×(j−k)其中j≤maxpf(i,j)=\max\limits_{j-AS_{i}\le k \le j}f(i-w-1,k)-AP_{i}\times (j-k) \quad \text{其中}j\le maxpf(i,j)=j−ASi​≤k≤jmax​f(i−w−1,k)−APi​×(j−k)其中j≤maxp
卖出：f(i,j)=max⁡j≤k≤j+BSif(i−w−1,k)+BPi×(j−k)其中j≤maxpf(i,j)=\max\limits_{j \le k \le j+BS_{i}}f(i-w-1,k)+BP_{i}\times (j-k) \quad \text{其中}j\le maxpf(i,j)=j≤k≤j+BSi​max​f(i−w−1,k)+BPi​×(j−k)其中j≤maxp

初始化全部为负无穷。
我们观察方程式，不难发现和之前还是一样的处理逻辑，把jjj提出来，里面的式子就变为了只和kkk有关的量，用单调队列优化即可。
故代码如下，想必你一定借助上面的代码能看懂，这里将不用提供注释了。
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=2015;struct youaremyidolQUEUE&#123;    int ap,bp,as,bs;&#125;d[MN];int f[MN][MN],n,m,w,q[MN],ql,qr;bool isnotokap(int i,int j,int k)&#123;    return f[i-w-1][k]+d[i].ap*k&lt;=f[i-w-1][j]+d[i].ap*j;&#125;bool isnotokbp(int i,int j,int k)&#123;    return f[i-w-1][k]+d[i].bp*k&lt;=f[i-w-1][j]+d[i].bp*j;&#125;int main()&#123;    memset(f,128,sizeof(f));    cin&gt;&gt;n&gt;&gt;m&gt;&gt;w;//m为maxp    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;d[i].ap&gt;&gt;d[i].bp&gt;&gt;d[i].as&gt;&gt;d[i].bs;    &#125;    for(int i=1;i&lt;=n;i++)&#123;                for(int j=0;j&lt;=d[i].as;j++)&#123;            f[i][j]= -1*d[i].ap*j;                    &#125;        for(int j=0;j&lt;=m;j++)&#123;            f[i][j]=max(f[i][j],f[i-1][j]);        &#125;        if(i&lt;=w) continue;        ql=1,qr=0;        for(int j=0;j&lt;=m;j++)&#123;            while(ql&lt;=qr&amp;&amp;q[ql]&lt;j-d[i].as) ql++;            while(ql&lt;=qr&amp;&amp;isnotokap(i,j,q[qr]))&#123;                qr--;            &#125;            q[++qr]=j;            if(ql&lt;=qr)&#123;                f[i][j]=max(f[i-w-1][q[ql]]+q[ql]*d[i].ap-d[i].ap*j,f[i][j]);            &#125;        &#125;        ql=1,qr=0;        for(int j=m;j&gt;=0;j--)&#123;            while(ql&lt;=qr&amp;&amp;q[ql]&gt;j+d[i].bs) ql++;            while(ql&lt;=qr&amp;&amp;isnotokbp(i,j,q[qr]))&#123;                qr--;            &#125;            q[++qr]=j;            if(ql&lt;=qr)&#123;                f[i][j]=max(f[i-w-1][q[ql]]+q[ql]*d[i].bp-d[i].bp*j,f[i][j]);            &#125;        &#125;    &#125;    int ans=-2e9;    for(int i=0;i&lt;=m;i++)&#123;        ans=max(ans,f[n][i]);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 4.总结
在第一部分中我们提到的模型，实际上就是1D1D动态规划模型，就是类似于如下：
f(i)=min/max(g(j)+w(i,j))1≤j&lt;if(i)=min/max(g(j)+w(i,j))\quad 1\le j &lt; i
f(i)=min/max(g(j)+w(i,j))1≤j&lt;i
如果w(i,j)w(i,j)w(i,j)为一次函数，那么我们可以用单调队列进行优化。或者不是多项式但有单调性，我们也可以进行优化。
回忆LIS，我们发现他们有着类似的结构，但是为什么LIS不能用单调队列进行求解呢？这是因为其中有一个关系在a[j]&lt;a[i]a[j]&lt;a[i]a[j]&lt;a[i]，这个关系在成立的时候w=1w=1w=1否则w=0w=0w=0，不难看出违反了上面的最重要的一条，www必须与iii无关。
那么这个题怎么解呢，我们可以使用DP+二分的方法进行求解，这样的时间复杂度就是O(nlogn)O(nlogn)O(nlogn)，感兴趣可以回看NOIP1999导弹拦截这道题，观察第一问的转移方程，思考为什么不能用单调队列求解，为什么使用二分，会有新收获。
在某些题中，1D/1D模型不在适用，就要自行取挖掘性质进行优化，例如P10977，就要发掘性质用堆（或multiset）和单调队列优化，可以看zhouruoheng的题解来理解发掘单调性的奥妙。
完结撒AC！
]]></content>
      <categories>
        <category>DP优化</category>
      </categories>
      <tags>
        <tag>DP优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论半家桶——从入门到门入从</title>
    <url>/posts/d788aa88/</url>
    <content><![CDATA[可能更洛谷的阅读体验
2025.6.27 花了一上午增添了新内容，翻新了威佐夫博弈证明。大幅更新了自己理解下的 SG 函数，添加了自己 yy 的 trick。

 0. 前言
对于在信息学竞赛中的博弈论，我们研究的是组合博弈问题。在实际考察中会结合其他知识点考察，例如动态规划或者贪心等，建立模型来解决问题。
本文建议读者看到模型后可以停下来思考思考，让后再看证明。
说半家桶是因为内容还不全，不能作为 OI 中的全家桶，但是足以应付一部分问题了。
而对于例题讲解来说，我更喜欢的方式就是在许多不同的题目中总结模型出来，并且会结合之前的知识点来进行讲解，所以建议是都研读 www。
有谁注意到标题其实有一个回文串了。
 1. 组合博弈与博弈基础
对于组合博弈，我们用两种类型：公平组合游戏和非公平组合游戏来区别，定义如下：
 1.1 公平组合与非公平组合
公平组合游戏：

由两名玩家交替行动；
任意一个游戏者在某一确定状态可以作出的决策集合只与当前的状态有关，而与游戏者无关；
游戏中的同一个状态不可能多次抵达，游戏以玩家无法行动为结束，且游戏一定会在有限步后以非平局结束。

例如取数游戏，Nim 游戏等，是公平组合游戏，我们下文会提到。
而非公平组合游戏，即在某一确定状态下作出的决策集合与游戏者有关。例如国际象棋，五子棋等是非公平组合游戏，因为双方不能使用对方的棋子。
以上是 Oi-Wiki 的内容，可能很抽象，但是提取重点的来说：

公平组合游戏：可允许的操作和当前局面状态有关，而不和玩家有关（这样就很公平，因为和玩家无关啦）。
非公平组合游戏：可允许的操作与当前操作的玩家有关（因为和玩家有关，我不能动你的棋子，这显然很不公平 www）。

 1.2 先手，后手，必胜必输局面
本手，妙手，俗手。
接下来我们定义几个名词：

局面：我们把游戏过程中面临的状态我们称作为 “局面”。
先手：整局游戏第一个行动的。
后手：整局游戏第二个行动的。

这几个名词还是比较简单的。

必败局面：即无论采取任何行动都无法胜利，都会输掉游戏。
必胜局面：即在某一局面下存在某种行动，使得后手行动陷入必败局面。

注意其中名词加粗的部分。
 1.3 先手必胜与先手必败

先手必胜状态 ： 先手行动以后，可以让剩余的状态变成必败状态 留给对手。(即可以走到某一个必败状态)
先手必败状态 ： 不管怎么操作，都达不到必败状态，换句话说，如果无论怎么行动都只能达到一个先手必胜状态留给对手，那么对手（后手）必胜，先手必败。（即走不到任何一个必败状态）

有如下定理：

没有后继状态的状态是必败状态。
一个状态是必胜状态当且仅当存在至少一个必败状态为它的后继状态。
一个状态是必败状态当且仅当它的所有后继状态均为必胜状态。

 1.4 必胜点与必败点
必败点，又称 PPP 点，表示前一个选手将取胜的点称作必败点。
必胜点，又称 NNN 点，表示下一个选手将取胜的点称作必胜点。

所有终结点都是必败点。
从任何必胜点操作，至少存在一种方案可以进入必败点。
无论如何操作，必败点只能进入必胜点（不然先手怎么赢）。

 2. 基本公平组合游戏
接下来我们看见一堆取东西的游戏 www。
 2.1 Nim 游戏

给定 nnn 堆物品，第 iii 堆物品有 aia_{i}ai​ 个。两名玩家分别行动，每次可以任选一堆，取出任意多个物品，可以一把取光但是不能不取。取走最后一个物品的人胜利。

Vim 游戏？
Nim 游戏没有平局，只有先手必胜和先手必败两种情况。我们有如下的判定定理来判定：

Nim 博弈先手必胜，当且仅当 a1xor⁡a2xor⁡…xor⁡an≠0a_{1} \operatorname{xor} a_{2} \operatorname{xor} \dots \operatorname{xor}  a_{n} \neq 0a1​xora2​xor…xoran​=0。

其中 xor⁡\operatorname{xor}xor 代表异或操作。
证明如下：
我们考虑，所有物品都被取光当然是一个必败局面（对手取走最后一件物品，已经取得胜利），此时 a1xor⁡a2xor⁡…xor⁡an=0a_{1} \operatorname{xor} a_{2} \operatorname{xor} \dots \operatorname{xor}  a_{n} = 0a1​xora2​xor…xoran​=0。
对于一个局面如果 a1xor⁡a2xor⁡…xor⁡an≠0a_{1} \operatorname{xor} a_{2} \operatorname{xor} \dots \operatorname{xor}  a_{n} \neq 0a1​xora2​xor…xoran​=0，那么设 xxx 二进制表示下最高位的 111 在第 kkk 位，那么至少存在一堆物品使得它的第 kkk 位为 111。显然 aixor⁡x&lt;aia_{i} \operatorname{xor} x &lt; a_{i}ai​xorx&lt;ai​，我们就从 aia_{i}ai​ 堆中取走若干物品，使其变为 aixor⁡xa_{i} \operatorname{xor} xai​xorx，这个操作我们就是尝试将局面变为 a1xor⁡a2xor⁡…xor⁡an=0a_{1} \operatorname{xor} a_{2} \operatorname{xor} \dots \operatorname{xor}  a_{n} = 0a1​xora2​xor…xoran​=0，容易证明这是最优策略。
对于任意一个局面，若 a1xor⁡a2xor⁡…xor⁡an=0a_{1} \operatorname{xor} a_{2} \operatorname{xor} \dots \operatorname{xor}  a_{n} = 0a1​xora2​xor…xoran​=0，容易证明无论如何取物品，最后的局面异或起来都无法不等于 000，那么综上所述 a1xor⁡a2xor⁡…xor⁡an≠0a_{1} \operatorname{xor} a_{2} \operatorname{xor} \dots \operatorname{xor}  a_{n} \neq 0a1​xora2​xor…xoran​=0，一定是必胜局面，一定存在一个情况让对手面临各堆物品异或起来为 000 的局面，证毕。
P2197 NIM游戏
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e5+15;int T,n;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        cin&gt;&gt;n;        int ans=0;        for(int i=1;i&lt;=n;i++)&#123;            int x;            cin&gt;&gt;x;            ans^=x;        &#125;        if(ans) cout&lt;&lt;&quot;Yes\n&quot;;        else cout&lt;&lt;&quot;No\n&quot;;    &#125;    return 0;&#125;
 2.2 Nim升级版——NimK

nnn 堆石子，每次从不超过 kkk 堆中取任意多个石子，取走最后一个物品的人胜利。

结论如下：
把 nnn 堆石子用二进制数表示，统计二进制数上 111 的个数，若每一位上 111 的个数 num1 mod (k+1)num_{1} \bmod (k+1)num1​mod(k+1) 全部为 000，则先手必胜，否则先手必败。
证明还是类似于 Nim 游戏：

所有物品都被取光当然是一个必败局面，即全为 000。
任意一个先手必败状态，一次操作后必然会到达必胜状态（因为游戏是交替进行的。）在某一次移动中，至少有一堆被改变，也就是说至少有一个二进制位被改变。因为最多动 kkk 堆，所以对于任意一个二进制位，111 的个数最多改变 kkk。而由于原先的总数为 k+1k+1k+1 的整数倍，那么改变后必然不可能是 k+1k+1k+1 的整数倍。所以在必败状态下必然能转移到必胜状态。
而对于先手必胜，总有一种操作使其走到必败状态，即证明有一种方法让第 iii 位回到 k+1k+1k+1 的整数倍。有一个比较显然的性质，对于那些已经改变的 mmm 堆，当前位可以自由选择 1 或 0。我们设除去已经更改的 mmm 堆，剩下堆 iii 位上 111 的总和为 sumsumsum。考虑分类讨论：

sum≤k−msum\le k-msum≤k−m，此时我们可以将堆上的 111 全部拿掉，让后让拿 mmm 堆得 iii 位全部为 0。
sum&gt;k−msum&gt;k-msum&gt;k−m，此时我们在之前改变的 mmm 堆中选择 k+1−sumk+1-sumk+1−sum 堆，将他们的第 iii 位设置成 1。剩下的设置成 0。由于 k+1−sum&lt;k+1−(k−m)&lt;m+1k+1-sum&lt;k+1-(k-m)&lt;m+1k+1−sum&lt;k+1−(k−m)&lt;m+1,也就是说 k+1−sum≤mk+1-sum\le mk+1−sum≤m，故这是可以达到的。



故存在，证毕。
例题：SDOI2011黑白棋
 2.3 阶梯 Nim 游戏

nnn 堆石子，编号 1 到 nnn。初始第 nnn 堆石子数为 aia_{i}ai​，保证单调不降。轮流取石子，每次从任意一堆拿走任意个，要求取完后每一堆剩余石子个数单调不降（没有石子的记为 0 个），先不能行动者败。

或者换一种表述：

有 nnn 堆石子。除了第一堆外，每堆石子个数都不少于前一堆的石子个数。两人轮流操作。每次操作可以从一堆石子中移走任意多颗石子，但是要保证操作后仍然满足初始时的条件。没有石子可移动的人就输掉了游戏。

因为堆数是单调递增的，像一个阶梯，我们在阶梯取石子。所以叫阶梯 Nim 游戏。
结论：

阶梯 nim 的游戏结果与只看奇数堆的石子数的普通 nim 结果一致。

考虑证明：
首先末态一定是 a1 xor⁡ a3 xor⁡ a5⋯=0a_{1} \operatorname{xor} a_{3} \operatorname{xor} a_{5}\dots=0a1​ xor a3​ xor a5​⋯=0， 那么如果初态 a1 xor⁡ a3 xor⁡ a5⋯=0a_{1} \operatorname{xor} a_{3} \operatorname{xor} a_{5}\dots=0a1​ xor a3​ xor a5​⋯=0，就一定存在一种方式将某奇数台阶的石子移动到偶数台阶上使得异或和为 0 。这样，不管后手的人是把奇数台阶的移动到偶数台阶还是相反，先手都一定存在一种方案使得异或和为 0 ,这样就一定能转移到末态，先手就赢了！
板题：
P3480
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1520;int T,n,a[MN],b[MN];void solve()&#123;    cin&gt;&gt;n;    int x=0;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        b[i]=a[i]-a[i-1];    &#125;    for(int i=n;i&gt;=1;i-=2) x^=b[i];    if(x) cout&lt;&lt;&quot;TAK\n&quot;;    else cout&lt;&lt;&quot;NIE\n&quot;;&#125;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 2.4 巴什博弈 Bash Game
Bash 命令行？

只有一堆石子，个数为 nnn 个，两名玩家轮流在石子堆中拿石子，每次至少取 1 个，至多取 mmm 个，最后一个取走石子的玩家为胜者。

结论如下：
若 (m+1)∣n(m+1)|n(m+1)∣n，则先手必败，否则先手必胜。
证明如下：

当 n≤mn\le mn≤m 时，显然先手必胜。
当 n=m+1n=m+1n=m+1 时，先手最多取走 mmm 个，无论取走多少个后手必胜。
若 (m+1)∣n(m+1)|n(m+1)∣n，假设先手拿走 xxx 个，那么后手一定可以拿走 (m+1)−x(m+1)-x(m+1)−x 个，这样无论怎么拿剩下的石头个数都是 (m+1)(m+1)(m+1) 的倍数，那么最后一次取的石头一定还剩下 m+1m+1m+1 个，显然必败。否则，先手取走模 (m+1)(m+1)(m+1) 的手头，此时转化为 (m+1)∣n(m+1)|n(m+1)∣n，那么后手必败。

得证。
有板题：HDU4764
 2.5 威佐夫博弈

有两堆石子，石子数可以不同。两人轮流取石子，每次可以在一堆中取，或者从两堆中取走相同个数的石子，数量不限，取走最后一个石头的人获胜。判定先手是否必胜。

同步发表于：P2252题解
威佐夫博弈不同于Nim游戏与巴什博奕，它的特殊之处在于不能将两堆石子分开分析。
证明可以不看的 www。
因为只有两堆石子，先进行一步转化给他丢到二维坐标系上，那么坐标 (x,y)(x,y)(x,y) 就表示两堆的石子数量。
我们考虑观察性质，我们可以枚举几个必败状态，例如 (0,0),(1,2),(3,5),(4,7)……
我们观察状态，可以发现两个规律，我们假设从小到大排的第 kkk 个必败状态是 (x,y)(x,y)(x,y)，并且 x&lt;yx&lt;yx&lt;y。并且我们发现 y=x+ky=x+ky=x+k。这个说明的就是必败状态两个数的差值是递增的，所以也就说明了每一个必败状态的差值都各不相同。证明我们待会在来看。
那么原来的问题，我们可以把游戏转化为，棋盘上有一个点，每个人可以将棋子往下，向左或向左下移动若干的棋子，不能移动的人。能够一步移动到原点的点显然就是必胜点，假设我们给这些所有必胜点都染色的话，剩下的的没当中横纵坐标和最小的点就是下一个必败点，因为无论如何移动都会给对手留下一个必胜点。
我们借用梁唐的知乎博客的图，将必败点染色可以得到如下图：

从图中不难看出，必败点之间是无法一次移动就能得到的，换句话说可以一次移动到必败点的点都是必胜点，那么上图中除了必败点之外的点都是必胜点，并且每一个自然数必然只会被包含在一个必败状态之中。
那么根据图的一些奇妙性质，我们定义，先手必输的局势为奇异局势。不妨设 (x,y)(x,y)(x,y) 为第 kkk 个奇异局势。那么有如下性质：

xxx 为前 kkk 个奇异局势中最小没有出现过的正整数，y=x+ky=x+ky=x+k。
任何一个自然数都包含在有且仅有一个奇异局势中。
任何操作都会将奇异局势变成非奇异局势。（必胜必然走向必败）
可以采取适当的方法让非奇异局势变成奇异局势。（即必败走向必胜点）

第一个，考虑反证法，假设 (a,a+k),(b,b+k)(a,a+k),(b,b+k)(a,a+k),(b,b+k) 是必败状态，并且 a&lt;ba&lt;ba&lt;b。那么先手面临 (b,b+k)(b,b+k)(b,b+k) 的时候，只需要在两堆当中同时取走 b−ab-ab−a 个石子，那么给后手的局面就是 (a,a+k)(a,a+k)(a,a+k)。但是对于后手来说，这是一个必败的局面，那么 (b,b+k)(b,b+k)(b,b+k) 不就是必胜状态了吗，矛盾，所以不存在两个必败局面的差值相等。
第二个个证明考虑反证法，我们需要证明两点：

任意自然数都出现过。
任意自然数只出现一次。

证明如下：

反证法，如果 vvv 没有出现过，那么 vvv 显然可以做一个新奇异局势的 xxx。
反证法，假设 vvv 出现了两次，那么 vvv 一定不是所在奇异局势的 xxx，那么 vvv 只能同时是两个奇异局势的 yyy，但因为任意一个奇异局势的差值不相同，所以 vvv 不可能存在。

第三个，我们考虑若取走一堆中的石子，那么两对石子的差值会改变，必将成为非奇异局势。若同时取走，因为同一个差值只会对应一种奇异局势，必将成为非奇异局势。
第四个是显然的，不证明。
那么现在问题在于我们如何快速找出一个通项公式使得对于第 kkk 个必败局面，它的坐标是 (xk,yk)(x_{k},y_{k})(xk​,yk​) 呢？
我们有 Betty 定理！

设 a,ba,ba,b 是两个正无理数，且 1a+1b=1\dfrac{1}{a}+\dfrac{1}{b}=1a1​+b1​=1。
记 P={⌊a×n⌋∣n∈N+},Q={⌊b×n⌋∣n∈N+}P=\left\{ \lfloor a\times n \rfloor|n \in \mathbb{N}^{+} \right\},Q=\left\{ \lfloor b\times n \rfloor|n \in \mathbb{N}^{+} \right\}P={⌊a×n⌋∣n∈N+},Q={⌊b×n⌋∣n∈N+}，则 P∩Q=∅,P∪Q=N+P \cap Q=\varnothing,P \cup Q =\mathbb{N}^{+}P∩Q=∅,P∪Q=N+。

证明可以去网上看。
那不对啊，我们是自然数你这是无理数，你这八杆子打不着的东西拿出来用干啥啊。因为我们发现必败状态的通项和Betty定理序列很像。
我们不妨假设存在这样的 a,ba,ba,b 同时满足 Betty 定理和必败状态的性质，当然无理数不可能作为坐标出现啦，我们当然要让它变为整数。
那怎么办，Betty 有一个推论就是：

任何正整数都可刚好以一种形式表示为不大于其中一个无理数的正整数倍的最大整数。

从定理直接推，那么有如下式子：
{⌊a×n⌋+n=⌊b×n⌋1a+1b=1\begin{cases}
\lfloor a\times n\rfloor +n = \lfloor b\times n \rfloor \\
\frac{1}{a}+\frac{1}{b}=1
\end{cases}
{⌊a×n⌋+n=⌊b×n⌋a1​+b1​=1​
解第一个方程：
⌊b×n⌋=⌊a×n⌋+n=⌊a×n+n⌋=⌊(a+1)×n⌋∴b=a+1\begin{aligned}
\lfloor b\times n \rfloor  &amp; = \lfloor a\times n\rfloor +n \\

&amp; = \lfloor a\times n +n \rfloor \\
&amp; = \lfloor (a+1) \times n\rfloor \\

\therefore b &amp;= a+1
\end{aligned}
⌊b×n⌋∴b​=⌊a×n⌋+n=⌊a×n+n⌋=⌊(a+1)×n⌋=a+1​
那么代入第二个方程有：
1a+1a+1=1\frac{1}{a}+\frac{1}{a+1}=1
a1​+a+11​=1
开解！
1a+1a+1=11a=a+1a(a+1)1a+1=aa(a+1)∴a+1a(a+1)+aa(a+1)=1→2a+1a(a+1)=1∴2a+1=a(a+1)=a2+a∴2a+1−a2−a=0∴a2−a−1=0\begin{aligned}

&amp; \frac{1}{a} + \frac{1}{a+1}  = 1 \\
&amp; \frac{1}{a}  =\frac{a+1}{a(a+1)} \\
&amp; \frac{1}{a+1} = \frac{a}{a(a+1)} \\
&amp; \therefore \frac{a+1}{a(a+1)}+\frac{a}{a(a+1)}=1 \\

&amp; \to \frac{2a+1}{a(a+1)}=1 \\

&amp; \therefore 2a+1=a(a+1)=a^2 +a \\

&amp; \therefore 2a+1-a^2 -a =0 \\

&amp; \therefore a^2-a-1=0 

\end{aligned}
​a1​+a+11​=1a1​=a(a+1)a+1​a+11​=a(a+1)a​∴a(a+1)a+1​+a(a+1)a​=1→a(a+1)2a+1​=1∴2a+1=a(a+1)=a2+a∴2a+1−a2−a=0∴a2−a−1=0​
利用初中知识不难得出 a=1+52a=\dfrac{1+\sqrt{5}}{2}a=21+5​​ 或 1−52\dfrac{1-\sqrt{5}}{2}21−5​​。
完了吗？敢说完了的扣 114514 分 (≧m≦)

设 a,ba,ba,b 是两个正无理数，且 1a+1b=1\dfrac{1}{a}+\dfrac{1}{b}=1a1​+b1​=1。

正无理数！所以解为 a=1+52a=\dfrac{1+\sqrt{5}}{2}a=21+5​​。
综上，假设两堆石子为 (x,y),x&lt;y(x,y),x&lt;y(x,y),x&lt;y。
那么先手必败，当且仅当：
(y−x)×5+12=x(y-x) \times \frac{\sqrt{5}+1}{2}=x
(y−x)×25​+1​=x
其中，5+12\dfrac{\sqrt{5}+1}{2}25​+1​ 就是黄金分割数，很神奇的。
题目：P2252
#include&lt;bits/stdc++.h&gt;#define double long longusing namespace std;const double hjfg=((1.0+sqrt(5.0))/2.0);double a,b;int main()&#123;    cin&gt;&gt;a&gt;&gt;b;    if(a&gt;b) swap(a,b);    double ans=(b-a)*((1.0+sqrtl(5.0))/2.0);    if(ans==a) cout&lt;&lt;0;    else cout&lt;&lt;1;    return 0;&#125;
 2.6 斐波那契博弈
有一堆个数为 n,(n≥2)n,(n\ge 2)n,(n≥2) 的石子，游戏双方轮流取石子，规则如下：

先手不能第一次全取完，至少取 111 颗。
之后每次取的石子个数至少为 111，至多为对手所取的石子数的 222 倍。

还是最后一个取走石子的为赢家。
先手必败，当且仅当石子数为斐波那契数
先证明必要性，斐波那契数一定先手必败，可以用数学归纳法，大致思路就是一定能拆成两堆斐波那契数，不论先手怎样取，后手总能取到最后一颗
然后证明充分性，由齐肯多夫定理定理：

任何正整数可以表示为若干个不连续的斐波那契数之和

那么这样就回到了斐波那契数列里，可以证明。
考虑最优决策：

若正整数 nnn 不为斐波那契数，那么用上述定理表示后，最小的那一堆个数即为答案。

证明因为不存在相邻的斐波那契数，那么显然有 fj&gt;2×fif_{j}&gt;2 \times f_{i}fj​&gt;2×fi​，只要我取第一个，那么对手一定取不完下一个，让后我捡漏，以此类推，一定能取道最后一个石子。
板题：P6847
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;signed main()&#123;    int n;    cin&gt;&gt;n;    while(n)&#123;        if(n==1)&#123;            cout&lt;&lt;1;            break;        &#125;        if(n==2)&#123;            cout&lt;&lt;2;            break;        &#125;        int a=1,b=2,c=3;        while(c&lt;n) a=b,b=c,c=a+b;        if(c==n)&#123;            cout&lt;&lt;n;            break;        &#125;        n-=b;    &#125;    return 0;&#125;
 2.7 总结
有一张来自HansLimon的好图：

以上都是一些基本公平组合游戏，我们通过分析必胜状态与必败状态的位置来计算。接下来我们会介绍公平组合游戏的万能工具，SG 函数。
 3. SG与有向图游戏
 3.1 有向图游戏
给定一个有向无环图，图中有一个唯一的起点，在起点上放有一枚棋子。两名玩家交替地把这枚棋子沿有向边进行移动，每次可以移动一步，无法移动者判负。该游戏被称为有向图游戏。
任何一个公平组合游戏都可以转化为有向图游戏。具体方法是，把每个局面看成图中的一个节点，并且从每个局面向沿着合法行动能够到达的下一个局面连有向边。 转化为有向图游戏，也称绘制了它的博弈状态图（简称博弈图或游戏图）。
而对于有向图游戏中的每一个节点，都代表当前子游戏的状态。
 3.2 Mex 运算
设 SSS 表示一个非负整数集合。定义 mex⁡(S)\operatorname{mex}(S)mex(S) 为求出不属于集合S的最小非负整数的运算，即：
mex⁡(S)=min⁡{x},x∈N+,x∉S\operatorname{mex}(S)=\min \left\{ x \right\},x\in \mathbb{N}^{+},x\notin S
mex(S)=min{x},x∈N+,x∈/S
mex⁡(S)\operatorname{mex}(S)mex(S) 的求法我们在做题中一般推式子用。如果真要单纯考，还真考过，可以考虑用 set 来实现，把 SSS 中的数都放入 set 中，维护两个操作：

加入 xxx 操作：在 set 删除 xxx，前提是 xxx 这个数出现第一次。
删除 xxx 操作：在 set 加入 xxx，前提是 xxx 是剩下的唯一一个 xxx。
查询操作：查询 setsetset 里的第一个数。

例题：abc330e
 3.3 SG 函数
在有向图游戏中，对于每个节点 xxx，设从 xxx 除法共有 kkk 条有向边，分别到达节点 y1,y2,…,yky_{1},y_{2},\dots ,y_{k}y1​,y2​,…,yk​，定义 SG⁡(x)\operatorname{SG}(x)SG(x) 表示为 xxx 的后继节点 y1,y2,…,yky_{1},y_{2},\dots ,y_{k}y1​,y2​,…,yk​ 的 SG⁡\operatorname{SG}SG 函数值所构成的集合再执行 mex⁡\operatorname{mex}mex 运算的结果，即：
SG⁡(x)=mex⁡({SG⁡(y1),SG⁡(y2),…,SG⁡(yk)})\operatorname{SG}(x)=\operatorname{mex}(\left\{ \operatorname{SG}(y_{1}),\operatorname{SG}(y_{2}),\dots,\operatorname{SG}(y_{k}) \right\})
SG(x)=mex({SG(y1​),SG(y2​),…,SG(yk​)})
特别的，整个有向图游戏 GGG 的 SG⁡\operatorname{SG}SG 函数值定义为有向图起点 sss 的 SG⁡\operatorname{SG}SG 函数值，即 SG⁡(G)=SG⁡(s)\operatorname{SG}(G)=\operatorname{SG}(s)SG(G)=SG(s)。
没错，你是不是发现了，SG 函数其实是递归求解的，，计算一个位置的 SG 值需要知道其所有后继位置的 SG 值。
 3.4 必胜与必败判定,SG 定理
判定法则（同时也是定义）如下：

有向图某个局面必胜，当且仅当该局面对应节点的 SG⁡\operatorname{SG}SG 函数值大于 000。
有向图某个局面必胜，当且仅当该局面对应节点的 SG⁡\operatorname{SG}SG 函数值等于 000。

凭什么我们这么规定！
那我们把前面我们所说的必胜点和必败点联系起来，对于 SG 函数的定义有：

终止状态（无合法移动）：SG⁡=0\operatorname{SG}=0SG=0（必败点，P-position）。
非终止状态：SG⁡(x)=mex⁡({SG⁡(y1),SG⁡(y2),…,SG⁡(yk)})\operatorname{SG}(x)=\operatorname{mex}(\left\{ \operatorname{SG}(y_{1}),\operatorname{SG}(y_{2}),\dots,\operatorname{SG}(y_{k}) \right\})SG(x)=mex({SG(y1​),SG(y2​),…,SG(yk​)})。

那么显然有：

SG⁡=0\operatorname{SG}=0SG=0：所有后续都是必胜点（都可以不走到终止状态），当前玩家无法避免失败。因此是必败点。
SG⁡≠0\operatorname{SG} \neq 0SG=0：至少有一个移动可使对手进入必败点，因为根据 mex⁡\operatorname{mex}mex 运算的性质 SG⁡=0\operatorname{SG}=0SG=0 出现了。因此是必胜点。

同时思考我们上面所说的 SG 函数的递归性质的计算，你有没有发现什么？
而根据上面我们所说的，有向图游戏是一个 DAG，并且节点状态唯一确定不重叠的。我们有没有想到什么，没错，动态规划的转移也是这样的！
动态规划当前问题由子问题确定当前解，而 SG 函数由子游戏的 SG 确定当前的解；SG 计算利用 DAG 的拓扑序计算（从终止反向递推），而动态规划状态转移也是 DAG 上的转移。当前节点的 SG
函数只依赖后续状态，而不依赖历史，也就是无后效性，这个 DP 同样也满足！
那么我们怎么利用 DP 的思想定义 SG 函数呢？

状态：就是有向图游戏上的一个局面。
转移：有向图游戏上的合法移动。
答案：即当前局面在最优策略下的的博弈论特征值（即 SG 函数或其他）

其实，SG函数的递归计算本质上就是在动态地判断每个状态是必胜还是必败，类似于在 DAG 上的动态规划过程，我们利用 mex⁡\operatorname{mex}mex 运算来保证 SG 函数的求解正确性。我们通过终止向前递推我们游戏的过程。
那么，根据上面我们所说的，SG 函数可以通过记忆化搜索避免重复计算（类似 DP 的记忆化搜索写法），或者通过常规的动态规划我们可以求解。那么，也就是说，通过动态规划的方法我们也是可以求解出博弈论的解，这个可是一大考点，我们把两大很难的内容融合到一起就会出现很多的考点，在接下来的博弈论应用这我们会详细的提到。
接下来我们来看有向图游戏的和，即 SG 定理，我们这么定义：
设 G1,G2,…,GmG_{1},G_{2},\dots,G_{m}G1​,G2​,…,Gm​ 是 mmm 个子有向图游戏。定义有向图游戏 GGG，它的行动规则是任选某个有向图游戏 GiG_{i}Gi​，并在 GiG_{i}Gi​ 上行动一步。GGG 被称为有向图游戏 G1,G2,…,GmG_{1},G_{2},\dots,G_{m}G1​,G2​,…,Gm​ 的和。
有向图游戏的和的 SG⁡\operatorname{SG}SG 函数值等于它包含的各个子游戏 SG⁡\operatorname{SG}SG 函数值的异或和，即：
SG⁡(G)=SG⁡(G1)xor⁡SG⁡(G2)xor⁡…SG⁡(Gm)\operatorname{SG}(G)= \operatorname{SG} (G_{1}) \operatorname{xor}  \operatorname{SG} (G_{2})\operatorname{xor} \dots \operatorname{SG} (G_{m})
SG(G)=SG(G1​)xorSG(G2​)xor…SG(Gm​)
这里给出一个性质，由 mex⁡\operatorname{mex}mex 得出某个状态的 SG 值一定在 O(m)O(\sqrt{m})O(m​) 以内，其中 mmm 为有向图游戏的边数。
 3.5 公平组合游戏为何结局注定？
下面的芝士了解即可。
你有没有好奇过，我们上面讲了那么多的基本公平组合游戏，为什么我们明明还没开始玩这个游戏，结局却已经命中注定了呢？
回顾我们之前所讲的公平组合游戏定义：

由两名玩家交替行动；
任意一个游戏者在某一确定状态可以作出的决策集合只与当前的状态有关，而与游戏者无关；
游戏中的同一个状态不可能多次抵达，游戏以玩家无法行动为结束，且游戏一定会在有限步后以非平局结束。

为何公平？在我们组合游戏理论中，“公平” 指的是：

规则对称：双方玩家在同一个游戏状态下可用的移动完全相同（不像象棋或围棋，双方棋子不同）。
无随机性：游戏过程有玩家决策决定，没有抽牌的随机因素。
终止性：游戏必然在有限步数内结束，不会无限循环。
完全信息：没有隐藏信息，双方对游戏状态完全知晓。

而我们上面一直所提到的最优策略，采取最优策略其实决定了你的结局走向。那么最优策略到底是什么？为什么先手有必胜必输这种状态？这里我们揭秘：

策梅洛定理：在有限步、无随机性、完全信息的两人博弈中，必然存在一个确定的最优策略，使得先手或后手一方有必胜策略，或双方至少能强制平局。

证明？
考虑数学归纳法，设 nnn 是某一游戏的最大步长，比如我们下棋，玩很多很多次，其中最多回合的一次，是大战300回合后我赢了，那么 n=600n=600n=600 因为我们下了 600 次棋。对 nnn 进行数学归纳法：

当 n=1n=1n=1，显然，只用走一步，就可决定输赢。按照游戏的规定，也许有胜负和三种，那么玩家 1 显然选择胜的走法，于是满足玩家 1 有必胜策略。
假设当 i≤ni\le ni≤n 时命题成立，考虑 n+1n+1n+1 时的子游戏，除去玩家 1 走的第一步以后的游戏部分。玩家1第一步的每一种走法都会产生一个新游戏起始状态，它的最大步长是 ≤n\le n≤n 的，而根据我们的假设，每个子游戏有唯一确定的结果，玩家 1 必然会赢、输或者和。于是等价于 n=1n=1n=1 的情况了！相当于玩家 1 在第一步的时候来选择进入哪个游戏，是自己必赢还是必输还是必和。

综上，该结论对于所有正整数成立，证毕。
由于公平组合游戏通常没有平局（游戏以某一方无法移动结束），所以每个状态要么是必胜点，要么是必败点，我们的最优策略就是确保自己始终处于必胜点。，而我们通过 SG 函数和必胜必败点分析就能得出计算胜负的数学方法。

必胜策略：如果当前玩家处于 必胜点（N-position），则存在至少一个移动，使得对手进入 必败点（P-position）。那么我们始终选择让对手进入必败点的移动，即可确保胜利。
必败策略：- 如果当前玩家处于 必败点（P-position），则无论怎么移动，对手都能采取最优策略获胜。此时，最优策略是尽量拖延游戏，或希望对手犯错。

那么，根据定理，只要玩家遵循最优策略，结局就已被初始状态决定。奇怪的宿命论出现了！而最优策略就是利用 SG 函数或必胜/必败点分析，确保对手始终处于劣势。然而，理论上我们固定了，但是实际对局中玩家可能犯错，这个时候就要重新计算了，正如我们上面所提到的必胜点：存在至少一个。所以必胜点也可以走向必败点的。
综上，我们分析了为什么公平组合游戏结局注定，必胜必输状态是怎么出现的以及公平组合游戏的性质。
 3.6 NIM 游戏与 SG 函数的结合
对于单堆的 Nim 游戏，我们很容易计算它的 SG⁡\operatorname{SG}SG 值，设 SG⁡(m)\operatorname{SG}(m)SG(m) 表示剩余 mmm 个式子状态的函数值，显然 SG⁡(0)=0\operatorname{SG}(0)=0SG(0)=0，那么以此类推，SG⁡(1)=1,SG⁡(2)=2,…,SG⁡(n)=n\operatorname{SG}(1)=1,\operatorname{SG}(2)=2,\dots,\operatorname{SG}(n)=nSG(1)=1,SG(2)=2,…,SG(n)=n。因此，当石子数不为 000 时为必胜态。
而对于更多的，它们所有的堆都可以划分为一个单独的有向图游戏，而每一个有向图游戏的 SG⁡\operatorname{SG}SG 函数值就是上面所以到的。那么，我们可以根据 SG⁡\operatorname{SG}SG 定理，将它们给和起来，那么答案就是：
SG⁡(G)=SG⁡(G1)xor⁡SG⁡(G2)xor⁡…xor⁡SG⁡(Gn)=a1xor⁡a2xor⁡…xor⁡an\begin{aligned}
\operatorname{SG}(G) &amp; =\operatorname{SG}(G_{1}) \operatorname{xor} \operatorname{SG}(G_{2)} \operatorname{xor} \dots \operatorname{xor} \operatorname{SG}(G_{n}) \\

&amp; = a_{1} \operatorname{xor} a_{2} \operatorname{xor} \dots \operatorname{xor}  a_{n}
\end{aligned}
SG(G)​=SG(G1​)xorSG(G2)​xor…xorSG(Gn​)=a1​xora2​xor…xoran​​
那么，我们就得到的 Nim 游戏的经典结论，是不是很神奇。
对于博弈的大部分问题，只要SG值相同，就可以互相转化，而对于 SG 函数来说，其求解依靠将一个总游戏划分成几个子游戏，简化问题逐个击破，通过定理就可以把他们的结果结合起来。
 3.7 SG例题与复杂博弈论技巧
在实际应用方面，我们介绍的是子游戏的划分以及 SG 函数状态刻画，以及求解。照应我们上面所说的内容,**对于博弈的大部分问题，只要SG值相同，就可以互相转化，而对于 SG 函数来说，其求解依靠将一个总游戏划分成几个子游戏，简化问题逐个击破，通过定理就可以把他们的结果结合起来。
P1290
显然是公平组合游戏。
对于这种没有明显结论的博弈论题，我们先处理出特殊情况。
而对于本题来说，显然我们划分的子游戏就是每个人手里握的求。
我们考虑最终情况：一个数是 xxx，而另一个是 0，那么先手必败（因为游戏已经结束了）。
剩下的情况就是握着两个数，不妨设为 x,yx,yx,y，其中 x&gt;yx&gt;yx&gt;y。
那么根据题意有：
SG⁡(n,m)=mex⁡({SG⁡(n−m,m),SG⁡(n−2m,m),…,SG⁡(m,n mod m)})\operatorname{SG}(n,m)=\operatorname{mex}(\left\{ \operatorname{SG}(n-m,m),\operatorname{SG}(n-2m,m),\dots,\operatorname{SG}(m,n \bmod m) \right\})
SG(n,m)=mex({SG(n−m,m),SG(n−2m,m),…,SG(m,nmodm)})
考虑里面怎么求，注意到：
SG⁡(n−m,m)=mex⁡({SG⁡(n−2m,m),SG⁡(n−3m,m),…,SG⁡(m,n mod m)})\operatorname{SG}(n-m,m)=\operatorname{mex}(\left\{ \operatorname{SG}(n-2m,m),\operatorname{SG}(n-3m,m),\dots,\operatorname{SG}(m,n \bmod m) \right\})
SG(n−m,m)=mex({SG(n−2m,m),SG(n−3m,m),…,SG(m,nmodm)})
同理可以迭代下去，所以除了 SG⁡(m,n mod m)\operatorname{SG}(m,n \bmod m)SG(m,nmodm) 以外其他都可以由他迭代出来，考虑如何求出来：
假设 SG⁡(m,n mod m)=0\operatorname{SG}(m,n \bmod m)=0SG(m,nmodm)=0，设 k=nmk=\dfrac{n}{m}k=mn​，那么有 SG⁡(n−(k−1)×m,m)=mex⁡{SG⁡(m,n mod m)}\operatorname{SG}(n-(k-1)\times m,m)=\operatorname{mex}\left\{ \operatorname{SG}(m,n \bmod m) \right\}SG(n−(k−1)×m,m)=mex{SG(m,nmodm)} 成立。
假设 SG⁡(m,n mod m)=1\operatorname{SG}(m,n \bmod m)=1SG(m,nmodm)=1，那么 SG⁡(n−(k−1)×m,m)=mex⁡{SG⁡(m,n mod m)}\operatorname{SG}(n-(k-1)\times m,m)=\operatorname{mex}\left\{ \operatorname{SG}(m,n \bmod m) \right\}SG(n−(k−1)×m,m)=mex{SG(m,nmodm)} 不成立。
由此可以看出，若 k=1,SG⁡(n,m)=[SG⁡(m,n mod m)=0]k=1,\operatorname{SG}(n,m)=[\operatorname{SG}(m,n \bmod m)=0]k=1,SG(n,m)=[SG(m,nmodm)=0]，否则是 1。
一般来说，我们对于 SG 函数的求解，最常规的套路就是：暴力，找规律。或者打表。 大部分题都可以这么进行操作，有的时候需要进一步转化模型，当然那就是后面再说了。
这是标准的辗转相除的递推式子，用 gcd⁡\gcdgcd 的写法即可实现：
#include&lt;bits/stdc++.h&gt;using namespace std;int T;int dfs(int x,int y,int p)&#123;    if(x==y) return p;    if(y/x&gt;=2) return p;    return dfs(y-x,x,p^1);&#125;void solve()&#123;    int m,n;    cin&gt;&gt;m&gt;&gt;n;    if(m&gt;n) swap(m,n);    if(dfs(m,n,0)==0) cout&lt;&lt;&quot;Stan wins\n&quot;;    else cout&lt;&lt;&quot;Ollie wins\n&quot;;&#125;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
P3179
对不起对不起忘放这个题了 (๑• . •๑)。
而本题，我们和上面，首先我们要分解出子游戏，这样我们才能利用 SG 函数求解。若我们无法分解为子游戏，我们需要考虑其他方法求解。
结论就是，每一个白色格子都是独立的，即一个白色格子处的决策与其他格子的状态无关，这样我们就划分出来子游戏了。
等等等等，你咋证明这个满足我们上面所说的有向图游戏的性质啊！
我们考虑，因为一个白格子可能会影响其他白格的情况，当且仅当这个白格翻转后有产生与其他白格重合的白格。这个时候我们应当把重合格子视为黑色格子，但是如果我们认为他们是两个独立的白格子，这显然是等价的，根据 SG 游戏和是异或的，异或和为 0，所以对这两个白色格子操作没有任何意义，得证。
感性理解就是一方操作了这两个白格中的一个，另一方可以立刻操作另一个，局势不发生变化。
我们对于翻棋子游戏，解法就是把初始状态的 SG 值即所有棋子的 SG 值异或和求出来，为 0 则必败否则必胜。
简单暴力，我们从后往前进行卡搜绿，求出每一个白色格子出现在每一个位置的 SG 值，对于每一个白色格子，考虑枚举 kkk 的值，这个时候新状态的 SG 值是 SG⁡(x+ix)\operatorname{SG}(x+ix)SG(x+ix)，的异或和，其中 (1≤i≤k−1)(1 \le i \le k-1)(1≤i≤k−1)。最后再求出所有转移到的状态 SG 值加上一个 0 的 mex。复杂度是 ∑i=1n⌊ni⌋=O(nlog⁡n)\sum\limits_{i=1}^n \lfloor \frac{n}{i} \rfloor =O(n \log n)i=1∑n​⌊in​⌋=O(nlogn)。
不难注意到是整除分块，考虑只维护 ⌊nx⌋\lfloor \dfrac{n}{x} \rfloor⌊xn​⌋ 个不同的根号个 xxx 的 SG 函数，仍然按 xxx 从大到小考虑。对于每一个 xxx 考虑它的所有转移到的状态 SG 值仍然有如上性质，可以考虑 ⌊nx⌋\lfloor \dfrac{n}{x} \rfloor⌊xn​⌋ 相同的一起计算，这是整除分块，时间复杂度是 O(n34)O(n ^{\frac{3}{4}})O(n43​)，可以通过。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=3e6+15;int sg[2][MN],rt[MN],pos[MN],tot,n,n2,T;inline int SG(int x)&#123;	return ((x=n/(n/x))&gt;n2)?sg[1][n/x]:sg[0][x];&#125;void init()&#123;    for(int l=1,r;l&lt;=n;l=r+1)&#123;        r=n/(n/l);        rt[++tot]=r;    &#125;    ++tot;    while(--tot)&#123;        int x=rt[tot],y=0,z=1;        pos[y]=tot;        for(int i=x*2,j;i&lt;=n;i=j+x)&#123;            j=n/(n/i)/x*x,pos[y^SG(j)]=tot;            ((j-i)/x&amp;1^1)&amp;&amp;(y^=SG(j));        &#125;        while(pos[z]==tot) ++z;        (x&gt;n2)?sg[1][n/x]=z:sg[0][x]=z;    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;T;    while(n2*n2&lt;=n) ++n2;    n2--;    init();    while(T--)&#123;        int w,x=0;        cin&gt;&gt;w;        for(int i=1;i&lt;=w;i++)&#123;            int awa;            cin&gt;&gt;awa;            x^=SG(awa);        &#125;        cout&lt;&lt;(x?&quot;Yes&quot;:&quot;No&quot;)&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
agc017d
还是我们的思路，分解子游戏。
首先源命题删边的操作，我们转化为删一个子树的操作（不能删整棵树），显然这个游戏是公平组合游戏，问我们初始状态，考虑利用 SG 函数求解。
首先，刻画游戏，我们终止状态是什么，显然当这个一个几点没有孩子节点的时候就是终止节点，那么 SG 函数为 0。
让后考虑我们怎么进行转移，还是上面我们所提到过的，对于这种没有明显结论的博弈论题，我们先处理出特殊情况。

xxx 没有儿子，显然 SG 为 0。
xxx 有一个儿子，设为 yyy，我们考虑证明 SG⁡(x)=SG⁡(y)+1\operatorname{SG}(x)=\operatorname{SG}(y)+1SG(x)=SG(y)+1。

删除以 yyy 为根的子树，显然 SG 为 0。
删除其他子树，显然这个子树在以 yyy 为根的子树内，根据数学归纳法，SG 中 0,1,…,SG⁡(y)−10,1,\dots,\operatorname{SG}(y)-10,1,…,SG(y)−1 都出现了，则 SG⁡(x)=mex⁡{1,2,…,SG⁡(y)}=SG⁡(y)+1\operatorname{SG}(x)=\operatorname{mex}\left\{  1,2,\dots,\operatorname{SG}(y) \right\}=\operatorname{SG}(y)+1SG(x)=mex{1,2,…,SG(y)}=SG(y)+1。


若 xxx 有多个儿子，此时可以继续划分为好几个子游戏，根据 SG 定理结合起来即使答案。
所以，SG 函数求解如下：

SG⁡(x)={0x has no sonxor⁡y∈son(x)SG⁡(y)+1otherwise\operatorname{SG}(x)=
\begin{cases}
0 &amp; \text{x has no son} \\ \\
\operatorname{xor}_{y\in son(x)} \operatorname{SG}(y)+1  &amp; \text{otherwise}
\end{cases}
SG(x)=⎩⎪⎪⎨⎪⎪⎧​0xory∈son(x)​SG(y)+1​x has no sonotherwise​
时间复杂度 O(n)O(n)O(n)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e5+15;int f[MN],n;vector&lt;int&gt; adj[MN];void dfs(int u,int pre)&#123;    f[u]=0;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs(v,u);        f[u]^=f[v]+1;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs(1,0);    cout&lt;&lt;(f[1]?&quot;Alice&quot;:&quot;Bob&quot;);    return 0;&#125;
P7864
还是上面我们所提到过的，但是我们在增广一下，对于这种没有明显结论的博弈论题，我们先处理出特殊情况。在从特殊情况推广到一般情况。这也是大部分 OI 题的常规思路。
首先，树是一条链怎么做，经过手模显然在两端取，那么为偶数的时候先手必胜，反之为奇数的时候先手必败。
其次，我们考虑存在一个父节点，该节点存在多个叶子节点的形式，最经典的就是菊花图，那么有：

若只有一个叶子，显然先手必败。
若有多个叶子，那么先手可以把叶子节点拿到只剩下一个，那么就把必败的局面传给对方，因此先手必胜。

考虑推广但一般情况，就是将根几点当成树的一部分结构，那么结构因为是公平组合游戏，那么一定是 P 点或者 N 点，若是 P 状态，我们直接把叶子节点全部拿完，如果是 N 状态，我们就只剩下一个叶子节点。但是对于局面来说，先手都是具有操控全的。
最后，我们推广到一般性情况。对于所有的第二种情况，先手都可以操纵，也就是说情况 2 是必胜态。如果否则一定存在若干个链条使得所有叶子节点都没有兄弟。这样的话我们需要判断的链条的长度，也就是从该叶子节点出发到达的第一个不是只有一个子节点的父节点，也就是直到一种情况 2 出现。因此我们计算出所有链条的长度，如果存在奇数，先手必胜；如果全是偶数，则后手必胜。
时间复杂度 O(n)O(n)O(n)。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int T,n,fa[MN],dg[MN];void clear()&#123;    for(int i=1;i&lt;=n;i++) dg[i]=fa[i]=0;&#125;void solve()&#123;    cin&gt;&gt;n;    clear();    for(int i=2;i&lt;=n;i++)&#123;        cin&gt;&gt;fa[i];        dg[fa[i]]++;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(dg[i]) continue;        int pre=fa[i],len=0;        while(dg[pre]==1)&#123;            pre=fa[pre];            len++;        &#125;        len++;        if(len&amp;1)&#123;            cout&lt;&lt;1&lt;&lt;&#x27;\n&#x27;;            return;        &#125;    &#125;    cout&lt;&lt;&quot;0\n&quot;;&#125;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 4. 反常游戏与反SG游戏
 4.1 Anti-Nim游戏
是这样的：

有 nnn 堆石子，两个人可以从任意一堆石子中拿任意多个石子(不能不拿)，拿走最后一个石子的人失败`。

不难发现和 Nim 游戏不同的一点就是胜利条件变了，不过条件还是可以推的。
先手必胜有两种情况：

对于所有石子都只有一个，且游戏的 SG⁡\operatorname{SG}SG 值为 0。
至少一堆石子多于一个，且游戏的 SG⁡\operatorname{SG}SG 不为 0。

游戏分为三种情况：

当每堆只有一个石子
异或值为 0 时，先手必胜。
异或值不为 0 时，先手必败。
只有一堆石子数大于 1，先手必胜。

先手我们可以考虑对数量大于 1 的那对堆石子下手脚，从而构造出后手必败的状态：

存在至少两堆石子数大于1
当异或和为0时，先手必败
当异或和不为0时，先手必败

证明和 Nim 游戏是相似的，可以自行证明或网上搜索，这里就不给出了。
例题：SHOI2008 小约翰的游戏
#include&lt;bits/stdc++.h&gt;using namespace std;int T,n;void solve()&#123;    cin&gt;&gt;n;    int ans=0;    bool flag=0;    for(int i=1;i&lt;=n;i++)&#123;        int x;        cin&gt;&gt;x;        ans^=x;        if(x&gt;1) flag=1;    &#125;    if(!flag&amp;&amp;!ans) cout&lt;&lt;&quot;John\n&quot;;    else if(flag&amp;&amp;ans) cout&lt;&lt;&quot;John\n&quot;;    else cout&lt;&lt;&quot;Brother\n&quot;;&#125;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 4.2 反 SG 游戏
我们根据 Anti-Nim 游戏能否推广到一般性情况呢？有的兄弟有的，反 SG 游戏就是。
我们定义：

Anti-SG游戏：决策集合为空的游戏者赢，剩下规则与 SG 游戏相同。

那么，如何判断能否赢呢？
对于 Anti-SG 游戏，如果我们规定当局面单一游戏的 SG⁡\operatorname{SG}SG 值为 0 时，游戏结束，则先手必胜当且仅当：

游戏的 SG⁡\operatorname{SG}SG 函数不为0且游戏中某个单一游戏的 SG⁡\operatorname{SG}SG 函数值大于 1。
游戏的 SG⁡\operatorname{SG}SG 函数为0且游戏中没有某个单一游戏的 SG⁡\operatorname{SG}SG 函数值大于 1。

证明和 SG⁡\operatorname{SG}SG 函数类似。
 5. 博弈论及与其他知识结合
 5.0 操作手册
博弈论确实可以和其他芝士一起结合起来一块考。
一般我们拿到一个看起来像是博弈论的题，我们需要确定题目的类型，可以通过几个操作手册来：

确定博弈：大部分的博弈论题都是假博弈论，有可能是贪心什么的。需要自行观察以下，尤其警惕标题带博弈论的 www。
思考模型：大部分博弈都有基础模型，我们通过基础模型来构建起问题的 “整体”，这也是为什么我们上面给出那么多的组合游戏模型。
落实限制：我们找到模型后，题目一般都会给予你几个限制。现在就是发挥你实力的时候了，通过知识点的综合运用，将模型转化到一些知识点上去。
分类讨论：这个时候就是通过限制来进行分类讨论，不做过多介绍，可以做题体会。
写代码

 5.1 例题
这里举几个比较简单的例题。DP 与博弈论的考察一般考察方案数的选取，或带有特殊限制的博弈问题。或者通过 DP 来求解博弈论所需要的信息。
GZOI2017 取石子游戏
不难发现这是一个带特殊限制的 NIM 游戏。
让 Alice 必败就是让其选择的石子堆中的数量异或为 0，要么无法在这一堆中足够的石子使得剩下的异或为 0，所以给定 Alice 选择的石子数量一定要大于等于其他选择的堆的数异或值。
考虑枚举 Alice 选哪一堆，让后对于其他石子堆用 DP 求出前 iii 堆中任意选择一些使得异或值为 jjj 的方案数，直接统计即可，时间复杂度 O(n2×256)O(n^2 \times 256)O(n2×256)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=520,MOD=1e9+7;int f[MN][MN],ans,n,a[MN];void solvedp(int x)&#123;    memset(f,0,sizeof(f));    f[0][0]=1;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=0;j&lt;256;j++)&#123;            if(i==x) f[i][j]=f[i-1][j];            else f[i][j]=(f[i-1][j]+f[i-1][j^a[i]])%MOD;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        solvedp(i);        for(int j=a[i];j&lt;256;j++)&#123;            (ans+=f[n][j])%=MOD;        &#125;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
USACO09NOV A Coin Game S
注意到是题目中的关键信息，取的硬币数和上一步取的操作有关，这个直接思考不太好，我们考虑进行 DP 求解。
设 f(i,j)f(i,j)f(i,j) 表示取到第 iii 个金币，取金币的上限为 jjj 先手取的最大价值，转移是显然的，考虑记忆化搜索实现比较好些，但是转移是 O(n3)O(n^3)O(n3) 的。
考虑优化，注意到我们 f(i,j)f(i,j)f(i,j) 在记忆化搜索是 1→n1 \rightarrow n1→n 取搜索的，那么我们 f(i,j)f(i,j)f(i,j) 的答案其实包含了 f(i,j−1)f(i,j-1)f(i,j−1)，那么我们可以直接搜 f(i,j−1)f(i,j-1)f(i,j−1) 没有的部分，即 (x+lim,lim×2)(x+lim,lim\times 2)(x+lim,lim×2)，其中 limlimlim 为金币上限，那么这样搜索复杂度就是 O(n2)O(n^2)O(n2) 的了。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e3+15;int f[MN][MN],n,s[MN],c[MN];int dfs(int x,int y)&#123;    y=min(y,n-x+1);    if(~f[x][y]) return f[x][y];    if(x+y&gt;n) return s[x];    if(!y) return 0;    int ans=dfs(x,y-1);    ans=max(ans,s[x]-dfs(x+y,y&lt;&lt;1));    return f[x][y]=ans;&#125;signed main()&#123;    cin&gt;&gt;n;    memset(f,-1,sizeof(f));    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;c[i];    &#125;    for(int i=n;i&gt;=1;i--) s[i]=s[i+1]+c[i];    cout&lt;&lt;dfs(1,2);    return 0;&#125;
ZJOI2009 取石子游戏
神题：
再次复读：

神仙题.jpg。ZJOI 是真的神仙。
发现 SG 函数等东西完全找不到规律，无奈只能翻题解。

看 wsyhb的题解吧，他说的肯定比我好 www。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1520;int L[MN][MN],R[MN][MN],n,a[MN];void solve()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        L[i][i]=R[i][i]=a[i];    &#125;    for(int len=2;len&lt;=n;len++)&#123;        for(int l=1;l+len-1&lt;=n;l++)&#123;            int r=l+len-1;            int x=a[r],xl=L[l][r-1],xr=R[l][r-1];            if(x==xr) L[l][r]=0;            else if(x&gt;=xl&amp;&amp;x&lt;xr) L[l][r]=x+1;            else if(x&gt;xr&amp;&amp;x&lt;=xl) L[l][r]=x-1;            else L[l][r]=x;            x=a[l],xl=L[l+1][r],xr=R[l+1][r];            if(x==xl) R[l][r]=0;            else if(x&gt;=xr&amp;&amp;x&lt;xl) R[l][r]=x+1;            else if(x&gt;xl&amp;&amp;x&lt;=xr) R[l][r]=x-1;            else R[l][r]=x;        &#125;    &#125;    if(L[2][n]==a[1]) cout&lt;&lt;0&lt;&lt;&#x27;\n&#x27;;    else cout&lt;&lt;1&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
P4363
对于这种博弈论的题，基本上理解就能想到了把状态压出来，然后做记忆化搜索。
对于落子的限制条件是，上方和左方的格子要么是棋子要么是边界。
我们可以考虑直接状压落子的状态，存每一行铺到了哪个位置，这个方法的复杂度显然为 O(nm)O(n^m)O(nm) 的。
我们发现，一个棋子想要存在的条件是上方和左方的所有格子全部被棋子填满。
那么，对于任意时刻，棋盘上的棋子构成一个锯齿形。
那有用的情况有多少种呢，我们考虑从锯齿状的起点开始走，我们最多往右走 nnn 步，往下走 mmm 步，路径数论是多少？显然为 (n+mn)\dbinom{n+m}{n}(nn+m​) 种。
算出来就是 184756184756184756 中，考虑暴力 11 进制状压，让后用 map 存就可以了。
注意开 long long。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=15,INF=1e18;int a[MN][MN],b[MN][MN],ed,n,m;map&lt;int,int&gt; ans,vis;int dfs(int x,int y)&#123;    if(x==ed) return 0;    if(vis[x]==1) return ans[x];    vis[x]=1;    int p=1,sum=y?INF:-INF,tmp=x;    int c[MN]&#123;&#125;;    c[0]=INF;    for(int i=1;i&lt;=n;i++) c[i]=tmp%11,tmp/=11;    if(y)&#123;        for(int i=1;i&lt;=n;i++)&#123;            if(c[i]&lt;min(c[i-1],m)) sum=min(sum,dfs(x+p,y^1)-b[i][c[i]+1]);            p*=11;        &#125;    &#125;    else &#123;        for(int i=1;i&lt;=n;i++)&#123;            if(c[i]&lt;min(c[i-1],m)) sum=max(sum,dfs(x+p,y^1)+a[i][c[i]+1]);            p*=11;        &#125;    &#125;    ans[x]=sum;    return ans[x];&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=m;j++)&#123;            cin&gt;&gt;a[i][j];        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=m;j++)&#123;            cin&gt;&gt;b[i][j];        &#125;    &#125;    for(int i=1;i&lt;=n;i++) ed=ed*11+m;    cout&lt;&lt;dfs(0,0);    return 0;&#125;
HNOI2010 取石头游戏
这种题的模型就是：“我可以死，但你要死的更惨！”。
由于得分之和是定值，且双方都想让自己分数最大，我们不妨令 valvalval 表示先手得分与后手得分的差，类似于对抗搜索，那么先手要让 valvalval 尽可能大，而后手尽量让 valvalval 小。
而取石子，可以转化为两端分别有一个栈，可以从栈顶取石子，中间有若干个双端队列，可以从其两端取石子。
让后我们对连续的三个元素进行分类讨论，分别有：

递增
递减
先增后减
先减后增

因为我们取的方向是从外到内的，我们接下来分类讨论。

递增：我们肯定要放到后面选择，因为一旦先手选择，后手一定能够选择比他大的数的。
递减：优先选择递减里面最大的。
先增后减与先减后增：到了这个情况的化，后手肯定选择中间的情况，先手肯定会选择左后两个。考虑证明：

如果先手发现选取最优的话，他会选走这个。由于先增加后减少，所以当前对于后手而言，选取比上一次最优还优秀的点肯定是最佳的，随意肯定会选中间那个。
若不一定最优秀，那么可能会选取其他更优的决策点。但是最终还是要选择这个剩下的点。我们直接把这个情况压成一个点的情况，这样所有的双段队列和栈就不会出现任何线增加后减少的情况了。



贪心即可：
#include&lt;bits/stdc++.h&gt;#define maxn 2000010using namespace std;typedef long long ll;template &lt; typename T &gt; inline void read(T &amp; x) &#123;    x = 0;    char c = getchar();    bool flag = false;    while (!isdigit(c)) &#123;        if (c == &#x27;-&#x27;) flag = true;        c = getchar();    &#125;    while (isdigit(c)) &#123;        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ 48);        c = getchar();    &#125;    if (flag) x = -x;&#125;ll n, sum, val, s, L, R, tot;ll l[maxn], r[maxn], v[maxn];bool tag[maxn];bool cmp(const ll &amp; a,    const ll &amp; b) &#123;    return a &gt; b;&#125;int main() &#123;    read(n), r[0] = 1, l[n + 1] = n;    for (int i = 1; i &lt;= n; ++i)        read(v[i]), sum += v[i], l[i] = i - 1, r[i] = i + 1, tag[i] = (v[i] != 0);    for (int i = 3; i &lt;= n; i = r[i])        while (tag[l[l[i]]] &amp;&amp; tag[l[i]] &amp;&amp; tag[i] &amp;&amp; v[l[i]] &gt;= v[l[l[i]]] &amp;&amp; v[l[i]] &gt;= v[i])            v[i] = v[l[l[i]]] + v[i] - v[l[i]], r[l[l[l[i]]]] = i, l[i] = l[l[l[i]]];    L = r[0], R = l[n + 1];    while (v[L] &gt;= v[r[L]] &amp;&amp; tag[L] &amp;&amp; tag[r[L]]) s += v[r[L]] - v[L], L = r[r[L]];    while (v[R] &gt;= v[l[R]] &amp;&amp; tag[R] &amp;&amp; tag[l[R]]) s += v[l[R]] - v[R], R = l[l[R]];    for (int i = L; i &lt;= R; i = r[i])        if (tag[i])            v[++tot] = v[i];    sort(v + 1, v + tot + 1, cmp), v[++tot] = s;    for (int i = 1; i &lt;= tot; ++i) &#123;        if (i &amp; 1) val += v[i];        else val -= v[i];    &#125;    printf(&quot;%lld %lld&quot;, (sum + val) / 2, (sum - val) / 2);    return 0;&#125;
 6. 后言
蒟蒻博弈论就学到这里了，如果还有后面的进一步学习，还是会更新内容了。
这篇文章，我感觉还是欠缺一部分 SG 解题的部分。见的题还是不太多，坑还是要补的 www。
看在这么用心的份上，不要脸的求赞 www。
 参考

Vatyr的阶梯 Nim 题解
繁凡さん的博弈论全家桶
自为风马月前卒的博弈论总结
clover_hxy的Nim 游戏及其变形
Wolfycz的洛谷日报
Oi-Wiki
CoCo_T_ 的树上删边游戏及其拓展
bloodstalk的博弈论
拉姆已经够可爱了的OI复习笔记
mex 经典求法
Pecco的 SG函数
crpboy 的P2964 题解

]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>卡特兰数与反射容斥</title>
    <url>/posts/6c261b84/</url>
    <content><![CDATA[ 0. 前言
本文章介绍内容难度不超过提高组难度，属于笔者提高组复习计划的一部分。
 1. 卡特兰数
 1.1 介绍
卡特兰数作为广泛出现在OI中的一类特殊数列，第 iii 项改为 CiC_{i}Ci​，其拥有广泛的意义。数列的前几项为：1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862。
这些特殊的数字，在信息学竞赛里许多题目都有这个数列的存在，可以在打表找规律时激发灵感。
我们通过一个经典例子来说明，即折线问题，如下图：

在平面上从 (0,0)(0,0)(0,0) 走到 (n,n)(n,n)(n,n)，每次只能向上或者向右走，不穿过 y=xy=xy=x 这条直线有多少种方案。
 1.2 朴素解法
我们考虑枚举最后一个 y=xy=xy=x 上的点 (i,i)(i,i)(i,i)，可以把问题规模缩小。

我们强制钦定最后一段不碰到 y=xy=xy=x，我们在 (i,i)(i,i)(i,i) 继续向终点走去的过程中，第一步只能向右走，到 (n,n)(n,n)(n,n) 的最后一步只能向上走，中间的问题我们可以视作从 (i,i+1)→(n,n−1)(i,i+1)\to (n,n-1)(i,i+1)→(n,n−1) 不穿过 y=(x−1)y=(x-1)y=(x−1) 的直线方案数，平移有：

中间这段答案就是 Cn−i−1C_{n-i-1}Cn−i−1​，故可以求出 Cn=∑i=0n−1CiCn−i−1C_{n}=\sum\limits_{i=0}^{n-1} C_{i}C_{n-i-1}Cn​=i=0∑n−1​Ci​Cn−i−1​。
在众多卡特兰数所对应的题目如出栈顺序，括号匹配中，缩小问题规模是一个很经典的做法。
但是这样的时间复杂度为 O(n2)O(n^2)O(n2)，我们考虑能否得到一个 O(n)O(n)O(n) 或者 O(1)O(1)O(1) 的过程。
 1.3 容斥解法
本解法请仔细理解，因为会涉及到第二章的讲解。
正难则反，我们考虑用所有路径数减去不合法路径的数量。总的是 (2nn)\dbinom{2n}{n}(n2n​)，我们思考不合法路径的数量，考虑把一条不合法路径进行操作：  把一条不合法路径在第一次触碰到 y=x+1y=x+1y=x+1 的这条线的点设为 ppp，我们在 ppp 右侧的在 y=x+1y=x+1y=x+1 以下的部分全部沿 对称到上方，我们发现这样翻转之后，所有可能出现的不合法路径，和 (0,0)→(n−1,n+1)(0,0)\to (n-1,n+1)(0,0)→(n−1,n+1) 的路径产生了一一映射的关系。


所以我们就有 Cn=(2nn)−(2nn−1)=1n+1(2nn)C_{n}=\dbinom{2n}{n}-\dbinom{2n}{n-1}=\dfrac{1}{n+1}\dbinom{2n}{n}Cn​=(n2n​)−(n−12n​)=n+11​(n2n​)。
 1.4 总结与经典应用
CnC_{n}Cn​ 共两个公式，一个 Cn=∑i=0n−1CiCn−i−1C_{n}=\sum\limits_{i=0}^{n-1} C_{i}C_{n-i-1}Cn​=i=0∑n−1​Ci​Cn−i−1​，一个 Cn=(2nn)−(2nn−1)=1n+1(2nn)C_{n}=\dbinom{2n}{n}-\dbinom{2n}{n-1}=\dfrac{1}{n+1}\dbinom{2n}{n}Cn​=(n2n​)−(n−12n​)=n+11​(n2n​)。
一些等价模型：

由 nnn 对左右括号构成的合法的括号序列数。
栈（无穷大）的进栈序列 {1,2,…,n−1,n}\{1,2,\dots,n-1,n\}{1,2,…,n−1,n} 由多少个不同的出栈顺序。
nnn 个 111 和 nnn 个 −1-1−1 构成 2n2n2n 项 a1,a2,…,ana_1,a_2,\dots,a_{n}a1​,a2​,…,an​ 的任意前缀和 ≥0\ge 0≥0 的序列数量个数。
nnn 个节点可以构造出多少个不同的二叉树。
圆上选择 2n2n2n 个点，将这些点成对连接起来使得所得到的 nnn 条线段不相交的方法数？

有经验的不难发现前四个性质是完全一致的，而最后一个可以进一步推论。
而卡特兰数计数的本质，是任何前缀中总存在某种约束的不可逆平衡（如左括号数 ≥\ge≥ 右括号数）。
 1.5 例题
例题是多的，这里举例几个经典应用。
 P2532 [AHOI2012] 树屋阶梯
我们思考要求强制使用 nnn 个举行有没有什么特殊性质，我们发现一个矩形，其左下角这个矩形，一定右上角是某个拐点，否则我们会发现，我们需要额外使用一个矩形去覆盖这个拐点。
那么我们可以缩小问题规模，每次对这个阶梯状物，进行一个枚举覆盖左下角这个矩形的右上角是哪一个拐点，不妨设为第 xxx 个拐点，那么上面就是一个 x−1x-1x−1 的子问题，下面为 n−x−1n-x-1n−x−1 的子问题，不难发现答案就是 Cn=∑i=0n−1CiCn−i−1C_{n}=\sum\limits_{i=0}^{n-1} C_{i}C_{n-i-1}Cn​=i=0∑n−1​Ci​Cn−i−1​，即卡特兰数。
 P3978 [TJOI2015] 概率论
期望是困难的，我们直接考虑统计 nnn 个点可能的二叉树数量 fnf_{n}fn​ 和其叶子总数 gng_{n}gn​。注意到 fnf_nfn​ 就是卡特兰数，而 gng_{n}gn​ 如何计算呢？打表发现 gn=nfn−1g_{n}=nf_{n-1}gn​=nfn−1​，证明太长了不想过多证明（逃）。
答案就是 gnfn=n(n+1)4n−2\dfrac{g_n}{f_n}=\dfrac{n(n+1)}{4n-2}fn​gn​​=4n−2n(n+1)​。
 P4769 [NOI2018] 冒泡排序
众所周知的是，冒泡排序的交换次数就是排列的逆序对数。
首先不考虑字典序（即特殊性质），我们如何计算有多少个排列满足逆序对数等于 12∑i=1n∣i−pi∣\dfrac{1}{2} \sum\limits_{i=1}^n |i-p_{i}|21​i=1∑n​∣i−pi​∣。我们考虑原式子为 cnt=12∑i=1n∣i−pi∣cnt=\dfrac{1}{2} \sum\limits_{i=1}^n |i-p_{i}|cnt=21​i=1∑n​∣i−pi​∣，变形有 2⋅cnt=∑i=1n∣i−pi∣2\cdot cnt=\sum\limits_{i=1}^n |i-p_{i}|2⋅cnt=i=1∑n​∣i−pi​∣，其中后面的式子我们考虑用图论刻画，即 i→pii\to p_{i}i→pi​ 进行连边，那么 ∣i−pi∣|i-p_{i}|∣i−pi​∣ 就表示跨过的距离，那么合法当且仅当每条边穿过的格子正好对应它参与的逆序对的个数，即所有逆序对两两配对成边的端点，且没有多余交叉。
也就是说，逆序对必须两两配对，不可能出现一个位置被两个人抢走配对的情况。
等价的转化提议，即不存在三元即以上的序列满足 i&lt;j&lt;ki&lt;j&lt;ki&lt;j&lt;k 使 pi&gt;pj&gt;pkp_{i}&gt;p_{j}&gt;p_{k}pi​&gt;pj​&gt;pk​。即不存在三元即以上的下降子序列。
那么这样如何刻画呢？我们发现这玩意由于没有一元子序列这一说法，那么必定为二元下降子序列，我们用图来表示合法序列数变化这一过程：

我们发现拐点必然是当前时刻序列的最大值然后接一个较小值，然后再继续上升。
故有一个 DP，设 f(i,j)f(i,j)f(i,j) 表示前 iii 个数构成的排列最大值为 jjj 的方案数，转移为 f(i,j)=f(i−1,j)+f(i,j−1)f(i,j)=f(i-1,j)+f(i,j-1)f(i,j)=f(i−1,j)+f(i,j−1)，要求 j≤ij\le ij≤i。这玩意是搞笑的 O(n2)O(n^2)O(n2)，但是不难发现这玩意就是格路计数但是有 j≤ij\le ij≤i 的限制，可以转化为卡特兰数，可以 O(1)O(1)O(1) 计算，或者公式为 (i+ji)−(i+jj+1)\dbinom{i+j}{i}-\dbinom{i+j}{j+1}(ii+j​)−(j+1i+j​)。
现在考虑有字典序的限制，这个限制我们可以转化为至少一个位置满足 pi&gt;qip_{i}&gt; q_{i}pi​&gt;qi​，其余任意。我们考虑枚举法确定这个位置什么，我们钦定一个位置 iii，前面的和 qiq_{i}qi​ 一致，第 iii 个必须大于 pip_{i}pi​。令 mx=max⁡j=1i−1qjmx=\max_{j=1}^{i-1} q_{j}mx=maxj=1i−1​qj​，mnmnmn 为最小可以填的数。
由于我们强制钦定之后从 (1,1)→(n,n)(1,1) \to (n,n)(1,1)→(n,n) 的 fff 的计算就不再适用了，我们将其定义为从 (i,j)(i,j)(i,j) 走到 (n,n)(n,n)(n,n) 的方案数。
接下来我们考虑如何计算方案数，考虑分类讨论：

若 pi=mnp_{i}=mnpi​=mn，那么我们显然只能填写 x&gt;mxx&gt;mxx&gt;mx 的方案，即 f(i,mx+1)f(i,mx+1)f(i,mx+1)。
若 mn&lt;pi&lt;mxmn&lt;p_{i}&lt;mxmn&lt;pi​&lt;mx，显然只能填写 x&gt;mxx&gt;mxx&gt;mx，但是显然这样构成不合法排列了，故无解。
若 pi≥mxp_{i}\ge mxpi​≥mx，只需要填写一个 x&gt;pix&gt;p_{i}x&gt;pi​ 的数就可以了，即 f(i,pi+1)f(i,p_{i}+1)f(i,pi​+1)。

时间复杂度 O(n)O(n)O(n)。
 2. 反射容斥
 2.1 反射法介绍与卡特兰三角
有些人会将反射法叫做映射法，这里本文章称作反射法。
回看 1.3 的解法，我们通过构造 y=x+1y=x+1y=x+1 的直线，然后将终点进行对称构造双射。我们将这种通过构造直线然后对称构造的类似方案,把每一条第一次越界的坏对象反射为一个更容易计数的对象，从而用总数减去反射得到的坏数得到合法对象数。我们称作反射法。
我们来介绍一个经典应用，当然不是卡特兰数因为介绍过了，我们介绍卡特兰三角。
定义 C(n,k)C(n,k)C(n,k) 表示由 nnn 个 111，kkk 个 −1-1−1 构成的序列中，前缀和不小于零的序列数。说人话就是还有 y=xy=xy=x 的限制，但是是从 (0,0)(0,0)(0,0) 走到 (n,k)(n,k)(n,k)。
通过上面 1.3 的方法我们当然可以构造一个直线 y=x−1y=x-1y=x−1 来构造双射：

那么原命题类似的，可以转化为从 (0,0)→(k−1,n+1)(0,0)\to (k-1,n+1)(0,0)→(k−1,n+1) 的自由路双射，原命题即为 (n+kk)−(n+kk−1)\dbinom{n+k}{k}-\dbinom{n+k}{k-1}(kn+k​)−(k−1n+k​)。
同时不难有性质：C(n,k)=∑i=0kC(n−1,i)=∑i=knC(i,k−1)C(n,k)=\sum\limits_{i=0}^k C(n-1,i)=\sum\limits_{i=k}^n C(i,k-1)C(n,k)=i=0∑k​C(n−1,i)=i=k∑n​C(i,k−1)。
例题：P1641 [SCOI2010] 生成字符串
 2.2 双线反射容斥
而多数时候，限制条件不仅仅想卡特兰数中 y=xy=xy=x 一条直线的约数，可能是多重约数。例如纵坐标必须限定在 [0,m][0,m][0,m] 的范围内。换句话说，也就是不仅仅由一条死线的限制，可能有多个死线的限制，在 OI 中一般涉及到的是两个死线的问题。以下我们令两条线分别为 A:y=x+aA:y=x+aA:y=x+a 和 B:y=x+bB:y=x+bB:y=x+b，默认 b&lt;ab&lt;ab&lt;a 即 A 在 B 上方。
简单一点，如果限制只有一个形如 y=x+ay=x+ay=x+a，终点是 (n,m)(n,m)(n,m) 那么如何满足，当然还是用我们的反射法，第一次触碰开始反转，终点就是变成关于 y=x+ay=x+ay=x+a 对称的点 (m−a,n+a)(m-a,n+a)(m−a,n+a)。那么直接求解自由路即可。

简化问题做完了，我们原命题如何做，对于一条线的容斥，我们相当于去掉了所有包含 A 的串和包含 B 的串。 所以如果对两条线分别跑一次容斥，包含 AB 和 BA 这些串会被去掉两次。
我们要再把先触碰 A 再触碰 B 的方案数加回来，再把先触碰 B 再触碰 A 的方案数加回来。 然后此时包含 ABA 和 BAB 的串又被多加了一次，以此类推。显然碰线的上限次数是确定的，只需要展开有限项即可。
但是难点在于两个都经过的方案，我们考虑两个都经过的方案数怎么算

我们思考能否类似于上面的反射法，将路线反射呢，我们考虑，如果先对 y=x+ay=x+ay=x+a 翻折，然后对 y=x+(2a−b)y=x+(2a-b)y=x+(2a−b) 进行翻折，这个 y=x+(2a−b)y=x+(2a-b)y=x+(2a−b) 表示 B 直线通过 A 翻折上去后的直线，会变成：

那么方案数就可以通过组合数进行计算了。通过上述我们容斥的过程不断计算即可。注意到每一次反射至少减少一个坐标。所以我们可以在 O(n+ma+b)O(\dfrac{n+m}{a+b})O(a+bn+m​) 的时间复杂度内完成这一操作。
请注意这个特殊的复杂度，这个复杂度可以和一个神秘知识点叫做根号分治结合考察。
 2.3 例题
 P3266 [JLOI2015] 骗我呢
骗你呢。
省流：

f(1,0/1/2/…/m)=1f(1,0/1/2/\dots/m)=1f(1,0/1/2/…/m)=1，f(i,j)=∑k=0j−1f(i−1,k)f(i,j)=\sum\limits_{k=0}^{j-1}f(i-1,k)f(i,j)=k=0∑j−1​f(i−1,k)。
求 ∑i=0mf(n,i)\sum\limits_{i=0}^m f(n,i)i=0∑m​f(n,i)，其中 n,m≤106n,m\le 10^6n,m≤106。

先考虑改写 DP 式子，不难改写为 f(i,j)=f(i,j−1)+f(i−1,j+1)f(i,j)=f(i,j-1)+f(i-1,j+1)f(i,j)=f(i,j−1)+f(i−1,j+1)，当 j=0j=0j=0 时 f(i,j)=f(i−1,j)+f(i−1,j+1)f(i,j)=f(i-1,j)+f(i-1,j+1)f(i,j)=f(i−1,j)+f(i−1,j+1)。时间复杂度 O(n2)O(n^2)O(n2)。
这种方程是典型的格路计数类方程，考虑将转移图画出来，发现两个移动方向，一个往左上，一个往右。坐标轴一侧变为向上和向右。考虑到左上很难搞，考虑拉伸坐标轴，将左上方向拉伸为和正上方，变为：

把左边的箭头改一改，改成往上后往右即可，根据 DP 性质不难发现两个不能经过的线：y=x+2y=x+2y=x+2 和 y=x−(m+1)y=x-(m+1)y=x−(m+1)，直接反射 DP 即可，以下为参考：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e6+15,MOD=1e9+7;int n,m,x,y,pw[MN],inv[MN],ans;int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void flipa()&#123;    swap(x,y);    x--;    y++;&#125;void flipb()&#123;    swap(x,y);    x+=m+2;    y-=m+2;&#125;void initpw()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++)&#123;        pw[i]=pw[i-1]*i%MOD;    &#125;    inv[MN-1]=ksm(pw[MN-1],MOD-2);    for(int i=MN-2;i&gt;=0;i--)&#123;        inv[i]=inv[i+1]*(i+1)%MOD;    &#125;&#125;int getC(int a,int b)&#123;    if(a&lt;b||b&lt;0) return 0;    return pw[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;int calc(int x,int y)&#123;    if(x&lt;0||y&lt;0) return 0;    return getC(x+y,x);&#125;signed main()&#123;    initpw();    cin&gt;&gt;n&gt;&gt;m;    x=n+m+1,y=n;    ans=calc(x,y);    while(x&gt;=0&amp;&amp;y&gt;=0)&#123;        flipa();        ans=(ans-calc(x,y)+MOD)%MOD;        flipb();        ans=(ans+calc(x,y))%MOD;    &#125;    x=n+m+1,y=n;    while(x&gt;=0&amp;&amp;y&gt;=0)&#123;        flipb();        ans=(ans-calc(x,y)+MOD)%MOD;        flipa();        ans=(ans+calc(x,y))%MOD;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 Gym 104053J
首先 i=1i=1i=1 的时候容易有 a1=1a_{1}=1a1​=1，对于 i&gt;1i&gt;1i&gt;1 有：
4Si=ai2+2ai+14Si−1+4ai=ai2+2ai+14Si−1=ai2−2ai+14Si−1=(ai−1)2∴ai=1±2Si−1\begin{aligned}
4S_{i} &amp; =a_{i}^2+2a_{i}+1 \\
4S_{i-1}+4a_{i}&amp;=a_{i}^2+2a_{i}+1 \\
4S_{i-1}&amp;=a_{i}^2-2a_{i}+1 \\
4S_{i-1}&amp;=(a_{i}-1)^2 \\
\therefore a_{i}&amp;=1\pm 2\sqrt{S_{i-1}}
\end{aligned}
4Si​4Si−1​+4ai​4Si−1​4Si−1​∴ai​​=ai2​+2ai​+1=ai2​+2ai​+1=ai2​−2ai​+1=(ai​−1)2=1±2Si−1​​​
注意到 Si=Si−1+ai=Si−1±2Si−1+1=(Si−1±1)2S_{i}=S_{i-1}+a_{i}=S_{i-1}\pm 2\sqrt{S_{i-1}}+1=(\sqrt{S_{i-1}}\pm 1)^2Si​=Si−1​+ai​=Si−1​±2Si−1​​+1=(Si−1​​±1)2。设 xi=Six_{i}=\sqrt{S_{i}}xi​=Si​​，那么拆括号后会变号，那么 b1=1b_{1}=1b1​=1，bi=bi−1=±1b_i=b_{i-1}=\pm 1bi​=bi−1​=±1。
考虑值域限制：

若 bi=bi−1+1b_{i}=b_{i-1}+1bi​=bi−1​+1，那么要求 ai=1+2bi−1=2bi−1a_{i}=1+2b_{i-1}=2b_{i}-1ai​=1+2bi−1​=2bi​−1，即 bi≤m+12b_{i}\le \dfrac{m+1}{2}bi​≤2m+1​。
若 bi=bi−1−1b_{i}=b_{i-1}-1bi​=bi−1​−1，那么显然 bi≥0b_{i}\ge 0bi​≥0。

相当于在平面直角坐标系上每一次向右上或右下走一步，初始在 (1,1)(1,1)(1,1)，走 n−1n-1n−1 步后要求纵坐标在 [0,m+12][0,\dfrac{m+1}{2}][0,2m+1​] 范围内的方案数，反射容斥即可。
 CF1967E1 Again Counting Arrays
先考虑发掘一些性质：

每一列至多一个障碍。
障碍会导致方向出现三种选择情况：上下、只上、只下。不可能出现无法选择的情况，因为每一列至多一个障碍。
当我们走到 y=my=my=m 的时候无敌，因为 ai∈[1,m]a_{i}\in [1,m]ai​∈[1,m]，可以一直往上走。

我们考虑给定障碍的点，即给定 aaa 我们应该如何判定是否合法，有一个想法就是我们贪心的能往上走就尽量往上走到 y=my=my=m 的位置。因为根据性质 2 障碍只可能限制至多一个方向的前进，分类讨论不难有往上走是最优解。
我们现在有了决策，现在我们考虑如何计数上述合法的 aaa。考虑 DP，注意到决策只与当前所处的最后一个位置纵坐标有关，故设 f(i,j)f(i,j)f(i,j) 表示决策到第 iii 个数，最后一个的位置纵坐标为 jjj 的 aaa 方案数，转移分类讨论有：

f(i+1,j+1)←(m+1)f(i,j)f(i+1,j+1)\leftarrow (m+1)f(i,j)f(i+1,j+1)←(m+1)f(i,j)；
f(i+1,j−1)←f(i,j)f(i+1,j-1)\leftarrow f(i,j)f(i+1,j−1)←f(i,j)，当且仅当 j&lt;mj&lt;mj&lt;m。
f(i+1,m)←f(i,m)⋅mf(i+1,m)\leftarrow f(i,m)\cdot mf(i+1,m)←f(i,m)⋅m。

转移是 O(nm)O(nm)O(nm) 的就很难泵，考虑优化，发现这玩意是一个 O(1)O(1)O(1) 递推式子，而且发现这玩意及其类似格路计数问题。考虑转化问题，我们从 (0,b0)(0,b_{0})(0,b0​) 开始走，每次可以选择右上和右下走，我们有两个限制，一个是碰到 y=−1y=-1y=−1 就寄了，一个是碰到 y=my=my=m 的时候就结束了。显然我们不难发现这是双线限制问题，可以考虑反射容斥，但是问题在于反射容斥双线是死线是不能碰，这里出现的是一个死线一个活线。
我们可以考虑枚举结束位置 (i,m)(i,m)(i,m)，在这个位置之前都不能碰到 y=my=my=m 不然就非法，这样就能套上反射容斥了。特别的，枚举 (n,i)(n,i)(n,i) 作为结束位置，这个时候 y=my=my=m 就全部都是死线。然后就可以做了，具体实现由于我不会右上右下的反射容斥，我们可以考虑反向旋转 45 度给回归到往右走和往上走，这样就可以套上 P3266 的做法了。
等会！我们还没有处理 DP 中的系数呢，首先将 (i,m)(i,m)(i,m) 和 (n,i)(n,i)(n,i) 旋转之后变为 (i−m+b02,i+m−b02−1)(\frac{i-m+b_{0}}{2},\frac{i+m-b_{0}}{2}-1)(2i−m+b0​​,2i+m−b0​​−1) 和 (n−i2,n+i2)(\frac{n-i}{2},\frac{n+i}{2})(2n−i​,2n+i​)。对于 (i,m)(i,m)(i,m) 求解的我们乘上 (m−1)i+m−b02mn−i(m-1)^{\frac{i+m-b_{0}}{2}}m^{n-i}(m−1)2i+m−b0​​mn−i 的系数，后面乘上 (m−1)n+i2(m-1)^{\frac{n+i}{2}}(m−1)2n+i​即可。
搞笑的，这玩意是 O(n2m+n)O(\dfrac{n^2}{m}+n)O(mn2​+n) 的，但是注意到我们有两个做法，一个是 O(nm)O(nm)O(nm)，一个是 O(n2m+n)O(\dfrac{n^2}{m}+n)O(mn2​+n) 的，直接考虑根号分治，设定阈值 BBB，满足 m≤Bm\le Bm≤B 用 DP，否则用计数，时间复杂度 O(nn)O(n\sqrt{n})O(nn​)。
番外：CatPTG 告诉我说不能用 P3266 的维护方法给我了个直接维护右上右下。我真信了，我调不出来然后我去自己写旋转坐标系的出来了搞笑了。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e6+15,MM=2e5+15,MOD=998244353;int pw[MN],inv[MN],n,m,b0,ppm[MN],ppm1[MN];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void initpw()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++)&#123;        pw[i]=pw[i-1]*i%MOD;    &#125;    inv[MN-1]=ksm(pw[MN-1],MOD-2);    for(int i=MN-2;i&gt;=0;i--)&#123;        inv[i]=inv[i+1]*(i+1)%MOD;    &#125;&#125;int getC(int a,int b)&#123;    if(a&lt;b||b&lt;0) return 0;    return pw[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;namespace SUB1&#123; //dp 要开滚动数组    constexpr int MQ=3520;    int f[2][MQ],ret;    void init()&#123;        ret=0;        for(int i=0;i&lt;=m;i++)&#123;            f[0][i]=0;        &#125;    &#125;    void initdp(int f[])&#123;        for(int i=0;i&lt;=m;i++) f[i]=0;    &#125;    int solve()&#123;        init();        f[0][b0]=1;        int now=0,nxt=1;        for(int i=0;i&lt;n;i++,nxt^=1,now^=1)&#123;            initdp(f[nxt]);            for(int j=0;j&lt;m;j++)&#123;                if(!f[now][j]) continue;                if(j)&#123;                    f[nxt][j-1]=(f[nxt][j-1]+f[now][j])%MOD;                &#125;                if(j+1&lt;m)&#123;                    f[nxt][j+1]=(f[nxt][j+1]+f[now][j])%MOD;                &#125;else ret=(ret+f[now][j]%MOD*(m-1)%MOD*ppm[n-i-1]%MOD*ppm1[(i+j-b0)/2]%MOD)%MOD;//这里应该时 ppm[n-i] ppm1[(i+j-b0-1)]，但是因为 i 从 0 开始枚举的搞笑了            &#125;        &#125;        for(int i=0;i&lt;m;i++)&#123;            if(f[now][i])&#123;                ret=(ret+f[now][i]*ppm1[(i+n-b0)/2]%MOD)%MOD;// 同理            &#125;        &#125;        return ret;    &#125;&#125;namespace SUB2&#123; // rong chi    void flip(pir &amp;x,int k)&#123;        swap(x.first,x.second);        x.first-=k;        x.second+=k;    &#125;    int calc(pir x)&#123;        if(x.first&lt;0||x.second&lt;0) return 0;        return getC(x.first+x.second,x.first);    &#125;    int sol(int x,int y,int fl,int fr)&#123;         // from (0,0) to (x,y),y must in [fl,fr]        // maybe fl&gt;fr,But this is reflective inclusion-exclusion,I don&#x27;t care ¯\_(ツ)_/¯        pir pos=pir(x,y);        int ret=calc(pos);        while(pos.first&gt;=0&amp;&amp;pos.second&gt;=0)&#123;            flip(pos,fl);            ret=(ret-calc(pos)+MOD)%MOD;            flip(pos,fr);            ret=(ret+calc(pos))%MOD;        &#125;        pos=pir(x,y);        while(pos.first&gt;=0&amp;&amp;pos.second&gt;=0)&#123;            flip(pos,fr);            ret=(ret-calc(pos)+MOD)%MOD;            flip(pos,fl);            ret=(ret+calc(pos))%MOD;        &#125;        return ret;    &#125;    int solve()&#123;        int x=b0,y=0,ret=ksm(m,n);        for(int i=b0;i&lt;n;i+=2,x++,y++)&#123;            ret=(ret-sol(x,y,m-b0,-1-b0)*ppm[n-i-1]%MOD*ppm1[y]%MOD+MOD)%MOD;        &#125;        return ret;    &#125;&#125;void init()&#123;    ppm[0]=ppm1[0]=1;    for(int i=1;i&lt;=n;i++)&#123;        ppm[i]=ppm[i-1]*m%MOD;        ppm1[i]=ppm1[i-1]*(m-1)%MOD;    &#125;&#125;void solve()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;b0;    if(b0&gt;=m)&#123;        cout&lt;&lt;ksm(m,n)&lt;&lt;&#x27;\n&#x27;;        return;    &#125;    init();    if(m*m&lt;=n)&#123;        cout&lt;&lt;SUB1::solve()&lt;&lt;&#x27;\n&#x27;;    &#125;else cout&lt;&lt;SUB2::solve()&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    initpw();    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 2.4 一点小感想
反射容斥源于卡特兰数的组合意义技巧，即我们一开始说的反射法。是反射法和容斥法的有机结合，更多地运用了容斥思想，用满足部分条件的集合的交并刻画我们 需要的集合。
在遇到有限制的格路计数问题中，我们可以通过反射容斥来进行操作。
至于 Dyck 路，先咕咕咕吧。
 3. 参考
图源：

第一章图出处：浅谈卡特兰数 - fhq_treap 和我。
2.1 图出处：StayAlone 的文章。
2.2 图出处：格路计数和反射容斥 - OIer某罗

参考：

浅谈卡特兰数 - fhq_treap。
StayAlone 的文章。
格路计数和反射容斥 - OIer某罗
格路计数与反射容斥 - yzy4090

]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>同余最短路</title>
    <url>/posts/c1d10176/</url>
    <content><![CDATA[ 0. 前言
本篇文章不发布于洛谷文章广场，因为我是在自己 yy，不保证正确。
 1. 介绍
同余最短路，用于解决完全背包计数问题，例如给你 nnn 个数，每个数可以选无限次，问你用这些数能够拼凑出的信息。
这里我们一般化，给定物品体积 aaa，每个物品可以选无数次，问是否存在一种选择方式，使得物品总体积恰好为 xxx。
考虑 DP，设 f(i)f(i)f(i) 表示能否拼凑出体积 xxx，转移方程是显然的：
f(x)=f(x)or⁡f(x−ai)f(x)=f(x) \operatorname{or} f(x-a_{i})
f(x)=f(x)orf(x−ai​)
这是一个有向无环图（DAG）上的动态规划，没有环，这样的时间复杂度是非常高，因为我们要枚举 xxx，当 xxx 非常大的时候是无法承受。
而同余最短路就是优化这一过程的，首先对于一个完全背包计数问题，如果 xxx 可以被凑出来，那么 x+ai,x+2ai,…x+a_{i},x+2a_{i},\dotsx+ai​,x+2ai​,… 是可以都能够凑出来的。即如果能凑出来 xxx，那么 x+k×ai(k≥0)x+k\times a_{i} (k\ge 0)x+k×ai​(k≥0) 是可以凑出的。
我们可以这样，我们设定一个基准物品 mmm，令 mmm 为它的体积。前面我们提到了这种凑的方案，考虑用基准物品表示这些。
我们用基准物品去表示，所有 kmkmkm 的都会被标记，最终 xxx 序列会剩下这样的集合没有被标记：{x+km∣x∈[0,m−1],k∈N}\left\{ x+km | x\in [0,m-1],k \in \mathbb{N}\right\}{x+km∣x∈[0,m−1],k∈N}。那这些怎么处理呢？我们有一个思路，我们不妨设 disidis_{i}disi​ 表示 iii 最小能够表示的数，那么所有更大的 disi+kmdis_{i}+kmdisi​+km 是可以标记，也就是说我们只需要求出最小标记的数即可，那么现在问题缩小到了 x∈[0,m−1]x\in [0,m-1]x∈[0,m−1] 的范围内，也就是 mmm 下的剩余类。
上面说这么多的话，只涉及到基准物品的刻画，但是其他的物品你可是一点都没有考虑！别急，我们现在就考虑这些物品带来的贡献，考虑现在我们需要求什么，我们需要求 disidis_{i}disi​ 即 iii 最小能够表示的数。这个时候我们就可以考虑 aia_{i}ai​ 这个跳板，我们利用这个跳板来求解 disidis_{i}disi​，对于每个其他物品 aia_{i}ai​，尝试将其加到当前已覆盖的数上，从而扩展剩余类的可表示范围。
具体的，对于每个 u∈[0,m−1]u\in[0,m-1]u∈[0,m−1]，计算 v=(u+ai) mod mv=(u+a_{i})\bmod mv=(u+ai​)modm（更新 disdisdis 的 i∈[0,m−1]i\in[0,m-1]i∈[0,m−1]），并更新：
disv=min⁡(disv,disu+ai)dis_{v}=\min (dis_{v},dis_{u}+a_{i})
disv​=min(disv​,disu​+ai​)
即若已知 x≡u(modm)x \equiv u \pmod mx≡u(modm) 的最小可表述数是 disudis_{u}disu​，那么 x+ai≡v(modm)x+a_{i} \equiv v \pmod mx+ai​≡v(modm) 也是一个可表示数，且可能成为 vvv 的更优解。
细心的读者可能已经发现这不就是最短路的形式吗！没错我们可以这么刻画，u→(u+ai) mod mu \to (u+a_{i})\bmod mu→(u+ai​)modm 连边，边权 aia_{i}ai​，因为没有负边权我们可以跑 Dijkstra 或 SPFA即可。
其实我们上述变化的本质，就是们钦定一个基准物品，现在我们有了基准物品所构成一个取数集合，让后让其他物品在基准物品上拓宽这个集合的选取范围，上述的最短路过程相当于就是过动态松弛，逐步探索如何组合不同的 aia_{i}ai​​ 来覆盖所有剩余类。最短路径长度 disrdis_{r}disr​ 给出了每个剩余类的最小可表示数，对应原问题就是可以将两次经过同一个点之间添加的所有物品换成若干基准物品。所以，我们可以将完全背包转化为类多重背包问题，从而解决了完全背包的计数问题。
至于类多重背包的解释就是：完全背包的 “无限” 选择被限制。-在同余最短路中，由于剩余类的周期性和最短路的最优性，每个物品 aia_{i}ai​ 在实际转移过程中最多使用有限次。如果在最短路中，某个物品 aia_{i}ai​​ 被多次使用（例如两次经过同一个剩余类），则中间的部分可以替换为若干基准物品 mmm。
一般的，我们基准物品 mmm 取 m=∑i=1naim=\sum\limits_{i=1}^n a_{i}m=i=1∑n​ai​。这样能保证点数尽量小，选取其他也是可以的。
同余最短路的本质：就是从完全背包的 DP 到模意义下的最短路。
 2. 一些例题
 P3403 跳楼机
显然操作 4 没有任何卵用，其实就是上面的问题板子，这里给出上面的一种实现。
#include&lt;bits/stdc++.h&gt;#define int long long#include &lt;float.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e5+15;struct Edge&#123;    int v,w;&#125;;int x,y,z,dis[MN],h;vector&lt;Edge&gt; adj[MN];bool vis[MN];void dij()&#123;    memset(dis,0x3f,sizeof(dis));    memset(vis,0,sizeof(vis));    priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt; q;    q.push(pir(0,0));    dis[0]=0;    while(!q.empty())&#123;        int u=q.top().second;        q.pop();        if(vis[u]) continue;        vis[u]=1;        for(auto e:adj[u])&#123;            if(dis[e.v]&gt;dis[u]+e.w)&#123;                dis[e.v]=dis[u]+e.w;                q.push(&#123;dis[e.v],e.v&#125;);            &#125;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;h&gt;&gt;x&gt;&gt;y&gt;&gt;z;    if(x==1||y==1||z==1)&#123;        cout&lt;&lt;h;        return 0;    &#125;    h--;//注意从 0 开始    for(int i=0;i&lt;x;i++)&#123;        adj[i].push_back(&#123;(i+y)%x,y&#125;);        adj[i].push_back(&#123;(i+z)%x,z&#125;);    &#125;    dij();    int ans=0;    for(int i=0;i&lt;x;i++)&#123;        if(dis[i]&lt;=h) ans+=(h-dis[i])/x+1; //计算贡献    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 P2371 [国家集训队] 墨墨的等式
将询问差分，现在问题转化为求 [1,n][1,n][1,n] 的问题，这个问题其实和上面是一个问题，只不过从 n=3n=3n=3 拓展了。
#include&lt;bits/stdc++.h&gt;#define int long long#include &lt;float.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=6e5+15;struct Edge&#123;    int v,w;&#125;;int n,ans1,ans2,fz=-1,a[MN],dis[MN],l,r;vector&lt;Edge&gt; adj[MN];bool vis[MN];void dij()&#123;    memset(dis,0x3f,sizeof(dis));    memset(vis,0,sizeof(vis));    priority_queue&lt;pir,vector&lt;pir&gt;,greater&lt;pir&gt;&gt; q;    q.push(pir(0,0));    dis[0]=0;    while(!q.empty())&#123;        int u=q.top().second;        q.pop();        if(vis[u]) continue;        vis[u]=1;        for(auto e:adj[u])&#123;            if(dis[e.v]&gt;dis[u]+e.w)&#123;                dis[e.v]=dis[u]+e.w;                q.push(&#123;dis[e.v],e.v&#125;);            &#125;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        if(a[i]==1)&#123;            cout&lt;&lt;r-l+1;            return 0;        &#125;        if(a[i]!=0&amp;&amp;fz==-1) fz=i;    &#125;    if(fz==-1)&#123;        cout&lt;&lt;0;        return 0;    &#125;    for(int i=0;i&lt;a[fz];i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            adj[i].push_back(&#123;(i+a[j])%a[1],a[j]&#125;);        &#125;    &#125;    dij();    l--;    for(int i=0;i&lt;a[fz];i++)&#123;        if(dis[i]&lt;=r) ans1+=((r-dis[i])/a[fz]+1);        if(dis[i]&lt;=l) ans2+=(l-dis[i])/a[fz]+1;    &#125;    cout&lt;&lt;ans1-ans2;    return 0;&#125;
 3. 最短路优化
最短路的时间复杂度有的时候比较高，不能承受，我们考虑能不能给他优化一下。
我们考虑，一个物品 aia_{i}ai​ 最多用几次就没有意义了，你可能认为是 ai−1a_{i}-1ai​−1，对也不对。其实更好的上限应该是 aigcd⁡(ai,m)−1\dfrac{a_{i}}{\gcd(a_{i},m)}-1gcd(ai​,m)ai​​−1，也就是说用 aigcd⁡(ai,m)\dfrac{a_{i}}{\gcd(a_{i},m)}gcd(ai​,m)ai​​ 次就会出现 aia_{i}ai​ 的倍数，为什么？
kai mod m=0m∣kai\begin{aligned}
ka_{i} \bmod m &amp; =0 \\
m &amp; | ka_{i}
\end{aligned}
kai​modmm​=0∣kai​​
不妨设 g=gcd⁡(ai,m)g=\gcd(a_{i},m)g=gcd(ai​,m)，那么有：
gn∣kgm,gcd(n,m)=1n∣km∵gcd(n,m)=1∴n∣k\begin{aligned}
gn|kgm,gcd(n,m) &amp;=1 \\
n | km \\
\because gcd(n,m)=1 \\
\therefore n|k
\end{aligned}
gn∣kgm,gcd(n,m)n∣km∵gcd(n,m)=1∴n∣k​=1
所以 kkk 最小取值就是 nnn，即 aigcd⁡(ai,m)\dfrac{a_{i}}{\gcd(a_{i},m)}gcd(ai​,m)ai​​。于是我们就可以涉及转移啦，这里借用 同余最短路 林晋堃 的图：

不难发现转移呈环状，考虑从这个环下手，我们把所有这个物品用的次数中相同余数的点缩成一个点，就变成了这样：

好像时间复杂度根本就没有任何变化，但是我们注意到前面的结论，我们从任何一个余数出发原本只能走 gcd⁡(m,ai)−1\gcd(m,a_{i})-1gcd(m,ai​)−1 就停了下来，但是转圈法，也就是我们对最短路的优化，就是不要停下来，继续走，那么每个点的状态如下：

这种转移方式和刚才的转移不太一样，但是因为每个点的答案起码都大于等于 3 了，由于超过 3 就没有用了所以说这个转移方法转移次数不仅更优，而且也不会影响到答案。  这就是——大名鼎鼎的转圈背包！至于为什么叫转圈背包，那是因为这个转移很像在转圈。
总的来说，就是模 mmm 意义下的完全背包，对于体积为 aia_{i}ai​ 的物品在长度为 mmm 的环上生成 d=gcd⁡(ai,m)d=\gcd(a_{i},m)d=gcd(ai​,m) 个子环从一个点出发，不可能绕着子环走一圈再转移回到该点，因为最短路不会经过同一个点两次，否则存在负环。如果重复经过同一个点，那么可以将这两次经过之间加入的所有物品替换为若干基准物品。
我们考虑添加 aia_{i}ai​ 的时候，至多加入 mgcd⁡(ai,m)−1\dfrac{m}{\gcd(a_{i},m)}-1gcd(ai​,m)m​−1 个。对于每个子环，我们绕子环转两圈即可更新到所有答案，若从最小点开始则一即可。
 4. 最短路优化例题
 P2371 墨墨的等式
来个模板！
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e5+15;int n,m,l,r,ans,a[MN],b[MN],f[MN];signed main()&#123;    cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        if(!a[i]) n--,i--;    &#125;    if(!n) cout&lt;&lt;0&lt;&lt;&#x27;\n&#x27;,exit(0);    memset(f,0x3f,sizeof(f));    f[0]=0;    sort(a+1,a+1+n);    m=a[1];    for(int i=1;i&lt;=n;i++)&#123;        b[i]=a[i]%m;    &#125;    for(int i=2;i&lt;=n;i++)&#123;        for(int j=0,lim=__gcd(a[i],m);j&lt;lim;j++)&#123;            for(int k=j,c=0;c&lt;2;c+=k==j)&#123;                int p=k+b[i];                if(p&gt;=m) p-=m;                f[p]=min(f[p],f[k]+a[i]);                k=p;            &#125;        &#125;    &#125;    for(int i=0;i&lt;a[1];i++)&#123;        if(r&gt;=f[i]) ans+=max((r-f[i])/a[1]+1,0ll);        if(l&gt;f[i]) ans-=max((l-1-f[i])/a[1]+1,0ll);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 洛谷 P2662 牛场围栏
本质上就是将处理过后的 aia_{i}ai​ 跑上面的东西，代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;constexpr int INF=1e18;int f[MN],a[MN],b[MN],tot,n,m,ans,mod;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    sort(a+1,a+1+n);    mod=max(1ll,a[1]-m);    if(mod==1)&#123;        cout&lt;&lt;-1;        return 0;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        int lst=max(a[i-1]+1,a[i]-m);        for(int j=lst;j&lt;=a[i];j++)&#123;            if(j!=mod)&#123;                b[++tot]=j;            &#125;        &#125;    &#125;    sort(b+1,b+1+tot);    tot=unique(b+1,b+1+tot)-b-1;    memset(f,0x3f,sizeof(f));    f[0]=0;    for(int i=1;i&lt;=tot;i++)&#123;        for(int j=0,lim=__gcd(b[i],mod);j&lt;lim;j++)&#123;            for(int cur=j,c=0;c&lt;2;c+=cur==j)&#123;                int nxt=(cur+b[i])%mod;                f[nxt]=min(f[nxt],f[cur]+b[i]);                cur=nxt;            &#125;        &#125;    &#125;    for(int i=0;i&lt;mod;i++)&#123;        if(f[i]&gt;=0x3f3f3f3f3f3f3f3f)&#123;            cout&lt;&lt;-1;            return 0;        &#125;        ans=max(ans,f[i]-mod);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 「THUPC 2023 初赛」背包
这个题好，有助于我们完全理解同余最短路。
本题在完全背包的可行性基础上加入了权值这一维度。我们上面的题都是把 mmm 作为 aia_{i}ai​ 的最小值出现，而这里我们并不是要 aia_{i}ai​ 的最小值，而是将 civi\dfrac{c_{i}}{v_{i}}vi​ci​​ 最大的物品选座位基准物品，即把性价比最大的物品设置为基准物品。
如果你理解上述的过程，不难发现一个点就是实际上基准物品仍然在标记数字中占贡献的绝大部分，将一部分其它物品替换为若干基准物品，以最大化单位体积贡献的价值。所以如果题目中有限制，那么基准物品的选取将成为关键的地方。
容易发现对于一些总体积为 vkv_{k}vk​ 的物品不如换为 kkk，因为 kkk 是性价比最高的。但是对于总体积 vkv_{k}vk​ 来说就不一定，最优解可能比全部取 kkk 并空出剩下容量要优或劣。考虑求出两个背包方案的优劣之分。考虑 DP，设 VVV 为体积，CCC 为价值，设 f(i)f(i)f(i) 表示 i≡V(modvk)i \equiv V \pmod {v_{k}}i≡V(modvk​) 下最大的 C−⌊Vvk⌋×ckC-\lfloor \dfrac{V}{v_{k}} \rfloor \times c_{k}C−⌊vk​V​⌋×ck​，也就是最优解比全取 kkk 优劣多少。有转移：
fi=max⁡j=1nfj+cj−⌊i+vjvk⌋×ckf_{i}=\max_{j=1}^n f_{j}+c_{j}-\lfloor \dfrac{i+v_{j}}{v_{k}} \rfloor \times c_{k}
fi​=j=1maxn​fj​+cj​−⌊vk​i+vj​​⌋×ck​
转移有后效性，考虑跑最长路，这个图是负边权图，可以跑，用转圈时间复杂度 O(nm)O(nm)O(nm)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;int f[MN],n,q,mv[MN],md[MN],v[MN],d[MN],c[MN],w,m=1;signed main()&#123;    cin&gt;&gt;n&gt;&gt;q;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;v[i]&gt;&gt;c[i];        if(w*v[i]&lt;c[i]*m) w=c[i],m=v[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        mv[i]=v[i]%m;        md[i]=v[i]/m;    &#125;    for(int i=1;i&lt;m;i++)&#123;        f[i]=-1e18;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=0,lim=__gcd(v[i],m);j&lt;lim;j++)&#123;            for(int k=j,cy=0;cy&lt;2;cy+=k==j)&#123;                int p=k+mv[i],d=md[i];                if(p&gt;=m) p-=m,d++;                f[p]=max(f[p],f[k]+c[i]-d*w);                k=p;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=q;i++)&#123;        int V;        cin&gt;&gt;V;        int p=V%m;        if(f[p]&lt;-1e17) cout&lt;&lt;-1&lt;&lt;&#x27;\n&#x27;;        else cout&lt;&lt;f[p]+V/m*w&lt;&lt;&#x27;\n&#x27;;    &#125;        return 0;&#125;
 5. 总结
同余最短路，其实就是对于完全背包计数问题的一种解决方案，通过模意义与基准物品的选取优化。
放点同类的题？
ARC084B Small Multiple
「NOIP2018」货币系统
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀数组全家桶-从哈希乱搞到入门</title>
    <url>/posts/469b7eaa/</url>
    <content><![CDATA[可能更洛谷的阅读体验
 0. 前言
后缀数组是信息学竞赛中解决字符串匹配的一大利器，其思想和实现非常简单。虽然倍增加排序的思想很简单，但是它的拓展 hththt 数组功能及其强大并且适用性广，在 OI 范围内广泛应用。
以下应用魏老师的一句话：

几乎所有字符串算法都存在一个共性：基于所求信息的特殊性质与已经求出的信息，使用增量法与势能分析求得所有信息。这体现了动态规划思想。—— Alex_Wei

希望读者也能好好利用这句话来理解字符串算法。
本文章包含后缀数组入门，以及应用，以及技巧及其好题选讲大礼包！
但是作为本蒟蒻第一个写的算法全家桶，为了考虑到读者感受，写了一大堆没用的废话导致文章及其的长 ( •́ὤ•̀)，本文章共 2.1 万字，感谢管理员付出时间来进行审核。
一些基本约定：

本文章默认字符串下表从 111 开始。
我们用打字机字体表示字符串的内容，如：s=wjyppm1403s=\texttt{wjyppm1403}s=wjyppm1403。
拼接：s+ts+ts+t 表示将 ttt 拼接 sss 后。
字符集：即构成字符串中字符的集合。
空串：不含任何字符的字符串称为空串。
子串：在 sss 开头或末尾删去若干字符得到的字符串称作为 sss 的子串，sss 本身和空串也是 sss 的子串。我们定义 s[l,r]s[l,r]s[l,r] 表示 l→rl \to rl→r 上所有字符链接而成子串。
匹配：称 ttt 匹配 sss 当且仅当 ttt 在 sss 中出现。
字符串长度：我们用 ∣s∣|s|∣s∣ 来表示 sss 的长度。

前后缀：

前缀：在 sss 末尾删除若干字符得到的字符串称作 sss 的前缀，记为 preprepre。
后缀：在 sss 开头删除若干字符得到的字符串称作 sss 的后缀，记为 sufsufsuf。
最长公共前缀：LCP⁡(s,t)\operatorname{LCP}(s,t)LCP(s,t)，表示 s,ts,ts,t 的最长公共前缀，即最长的 uuu 使得 uuu 为 s,ts,ts,t 的前缀。最长公共后缀同理，我们称为 LCS⁡(s,t)\operatorname{LCS}(s,t)LCS(s,t)。LCP 的长度格式为：∣LCP⁡(s,t)∣|\operatorname{LCP}(s,t)|∣LCP(s,t)∣。
字典序：定义空字符小于任何字符。称 sss 的 字典序 小于 ttt 当且仅当去掉 LCP⁡(s,t)\operatorname{LCP}(s,t)LCP(s,t) 后，sss 的第一个字符小于 ttt 的第一个字符。等价于以第 iii 个字符作为第 iii 关键字比较。

我们先从概念讲起。
 1. 后缀树与后缀数组
 1.1 朴素后缀树
一个字符串的后缀是指从某个位置开始到结尾的一个子串，即 sufi=s[i→len]suf_{i}=s[i \to len]sufi​=s[i→len]。例如字符串 s=&quot;vamamadn&quot;s=\texttt{&quot;vamamadn&quot;}s=&quot;vamamadn&quot;，它的后缀有 888 个，suf0=&quot;vamamadn&quot;,suf1=&quot;amamadn&quot;,suf2=&quot;mamadn&quot;suf_{0}=\texttt{&quot;vamamadn&quot;},suf_{1}=\texttt{&quot;amamadn&quot;},suf_{2}=\texttt{&quot;mamadn&quot;}suf0​=&quot;vamamadn&quot;,suf1​=&quot;amamadn&quot;,suf2​=&quot;mamadn&quot; 等。
而后缀树，就是把字符串所有后缀子串通过字典树的方法建立的一颗树。如下图：

若要在字符串上找一个子串是否出现，如 &quot;mam&quot;\texttt{&quot;mam&quot;}&quot;mam&quot;，只需要在后缀树上查找就可以啦。
但是，问题在于，你全部显式的建出来那你空间不就炸掉了吗。我们思考这样的朴素后缀树的问题在哪里，这种方法的本质就是把一个长度为 nnn 的字符串拆成 nnn 个后缀子串，让后按照字典树来进行构造。但问题在于这样构建下来，每一次插入都是 O(n)O(n)O(n) 的时间复杂度，而遍历同样。并且当最坏情况下字符串字符互不相同的时候时间复杂度和空间复杂度都退化到 O(n2)O(n^2)O(n2)，一般情况下我们是无法接受的，那有没有什么好用的呢？
 1.2 后缀数组
由于不方便直接对后缀树进行构造，我们利用后缀数组这种简单的方法来替代它，我们定义：saisa_{i}sai​ 表示将所有后缀排序后第 iii 小的后缀的位置。这也就是我们所说的后缀数组。
那么将上面后缀树的例子，我们用后缀数组来表示一下：



后缀 sufisuf_isufi​
下表 iii

字典序
后缀数组 sajsa_jsaj​
下表 jjj




&quot;vamamadn&quot;\texttt{&quot;vamamadn&quot;}&quot;vamamadn&quot;
1

&quot;adn&quot;\texttt{&quot;adn&quot;}&quot;adn&quot;
6
1


&quot;amamadn&quot;\texttt{&quot;amamadn&quot;}&quot;amamadn&quot;
2

&quot;amadn&quot;\texttt{&quot;amadn&quot;}&quot;amadn&quot;
4
2


&quot;mamadn&quot;\texttt{&quot;mamadn&quot;}&quot;mamadn&quot;
3

&quot;amamadn&quot;\texttt{&quot;amamadn&quot;}&quot;amamadn&quot;
2
3


&quot;amadn&quot;\texttt{&quot;amadn&quot;}&quot;amadn&quot;
4

&quot;dn&quot;\texttt{&quot;dn&quot;}&quot;dn&quot;
7
4


&quot;madn&quot;\texttt{&quot;madn&quot;}&quot;madn&quot;
5

&quot;madn&quot;\texttt{&quot;madn&quot;}&quot;madn&quot;
5
5


&quot;adn&quot;\texttt{&quot;adn&quot;}&quot;adn&quot;
6

&quot;mamadn&quot;\texttt{&quot;mamadn&quot;}&quot;mamadn&quot;
3
6


&quot;dn&quot;\texttt{&quot;dn&quot;}&quot;dn&quot;
7

&quot;n&quot;\texttt{&quot;n&quot;}&quot;n&quot;
8
7


&quot;n&quot;\texttt{&quot;n&quot;}&quot;n&quot;
8

&quot;vamamadn&quot;\texttt{&quot;vamamadn&quot;}&quot;vamamadn&quot;
1
8



很明显，后缀数组的下表对应的就是后缀子串的字典顺序，记录的子串的有序排列。例如 sa1=5sa_{1}=5sa1​=5 表示排名为 111（即字典序最小）的后缀是源字符串从第 555 个位置开始的后缀子串。
上面是一个例子，下面是 OI-Wiki 的例子：

我们定义另外一个数组 rkrkrk 表示 sufisuf_{i}sufi​ 在字符串所有后缀的字典序排名，我们称作排名数组。显然，rkrkrk 与 sasasa 是互为逆运算的：

sasasa：将排名映射到源字符串的位置。
rkrkrk：将位置映射到源字符串的字典序排名。

那么有 sa(rk[i])=i,rk(sa[i])=isa(rk[i])=i,rk(sa[i])=isa(rk[i])=i,rk(sa[i])=i。
那么现在问题在于如何给这些后缀通过排序求出排名。有一个显而易见的想法是从最后一位开始枚举后缀，然后每次存下当前枚举到的字符串，最后排序并输出就 OK 辣！
但是这样显然复杂度起步就是 O(n2)O(n^2)O(n2)，排序复杂度就能够达到恐怖的 O(n2log⁡n)O(n^2 \log n)O(n2logn)，是无法接受的。
但是我们考虑，我们每一次都是一位一位比较的，我们能不能多位进行比较呢。这个时候我们就要用到倍增的思想：
首先对字符串 sss 长度为 111 的子串，即每个字符进行排序，得到排序后的编号数组 saisa_{i}sai​ 和排名数组 rkirk_{i}rki​，如下 OI-Wiki 的图：

第二次，我们根据倍增向后移 20=12^0=120=1 位，因为已经根据首字母排了一次序，所以现在就根据后面的排序。我们让第一关键字设置为上一次我们求得的 rankrankrank，第二关键字设置为下一位的字符：

第三次，移 21=22^1=221=2 位，还是根据我们上面的思路，让第一关键字设置为上一次我们求得的 rankrankrank，第二关键字设置为下一位的字符：

第四次：

唉？我们好像倍增完了，这样的话我们就求得了所有的 rankrankrank，接下来根据后缀数组性质：sa(rk[i])=isa(rk[i])=isa(rk[i])=i，就能够求出来 sasasa 啦。这样的时间复杂度，排序贡献 O(nlog⁡n)O(n \log n)O(nlogn)，倍增贡献 O(log⁡n)O(\log n)O(logn)，这样的时间复杂度就是 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)。
再看一遍整体的过程：

但是这样显然过不去我们可爱的 P3809，因为它要求 O(nlog⁡n)O(n\log n)O(nlogn)，我们考虑刚才的做法，排序是 O(nlog⁡n)O(n \log n)O(nlogn) 的，我们能不能从这里下手呢？我们可以考虑利用基数排序，这样我们就能做到 O(n)O(n)O(n) 啦，代码如下：
void getsa()&#123;    for(int i=1;i&lt;=n;i++)&#123;        x[i]=s[i];// x 就是        c[x[i]]++; //桶排    &#125;    for(int i=1;i&lt;=m;i++)&#123;        c[i]+=c[i-1];        //做一个前缀和。这样字典序越大，所对应的的 c 越大。    &#125;    for(int i=n;i&gt;=1;i--)&#123;        sa[c[x[i]]--]=i;        //为何要减呢？若c[x[i]]&gt;1表示有重复的，要保证排序不一样。    &#125;    for(int len=1;len&lt;=n;len&lt;&lt;=1)&#123;// 倍增        int num=0;        for(int i=n-len+1;i&lt;=n;i++)&#123;            y[++num]=i;            //n-len+1已经排序完因为它们再倍增就倍增到空气啦。我们直接存在 y 中。        &#125;        for(int i=1;i&lt;=n;i++)&#123;            if(sa[i]&gt;len) y[++num]=sa[i]-len;        // 若 i 可作其他位置的第二关键字，我们把他放在对应的第一关键字        &#125;        for(int i=1;i&lt;=m;i++) c[i]=0;        for(int i=1;i&lt;=n;i++) c[x[i]]++;        for(int i=1;i&lt;=m;i++) c[i]+=c[i-1];        for(int i=n;i&gt;=1;i--)&#123;            sa[c[x[y[i]]]--]=y[i];            y[i]=0;            // 注意, 倒序枚举保证计数排序的稳定性. 基数排序的正确性基于内层计数排序的稳定性.        &#125;        //和以前一样更新sa，但是排序是y[i]        swap(x,y);        num=1;        x[sa[1]]=1;        for(int i=2;i&lt;=n;i++)&#123;            if(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+len]==y[sa[i-1]+len]) x[sa[i]]=num;            else x[sa[i]]=++num;        &#125;        //以上都是在更新 x        if(num==n) break;// n 个排名互不相同, 排序完成.        m=num;    &#125;&#125;
关于成熟的模板我们之后再说。对于上面的内容其实都比较还算简单，但是 SA 真正的神就在于 Height 数组，我们这里简称为 hththt。
 1.3 Height 数组
回顾 LCP 的定义：

最长公共前缀：LCP⁡(s,t)\operatorname{LCP}(s,t)LCP(s,t)，表示 s,ts,ts,t 的最长公共前缀，即最长的 uuu 使得 uuu 为 s,ts,ts,t 的前缀。

而 Height 数组的定义就是：ht[i]=LCP⁡(sa[i],sa[i−1])ht[i]=\operatorname{LCP}(sa[i],sa[i-1])ht[i]=LCP(sa[i],sa[i−1])，就是第 iii 名的后缀与它前一名的后缀的最长公共前缀。特别的，我们记 ht[1]=0ht[1]=0ht[1]=0。
绝大多数 SA 的应用都需要 hththt，很少见只用 sa,rksa,rksa,rk 就能解决的题目。不过分地说，后缀数组求 sasasa 就是为了求 hththt。
那么怎么求？有一个朴素的想法就是哈希加二分，这个想必读者在做哈希题经常会见到这种操作。不然为什么我们标题叫哈希乱搞到入门，我们有一个结论：

若 rki&lt;rkj&lt;rkkrk_{i}&lt;rk_{j}&lt;rk_{k}rki​&lt;rkj​&lt;rkk​，则 ∣LCP⁡(i,j)∣|\operatorname{LCP}(i,j)|∣LCP(i,j)∣ 和 ∣LCP⁡(j,k)∣|\operatorname{LCP}(j,k)|∣LCP(j,k)∣，均不小于 ∣LCP⁡(i,k)∣|\operatorname{LCP}(i,k)|∣LCP(i,k)∣。

证明？设 t=∣LCP⁡(i,k)∣t=|\operatorname{LCP}(i,k)|t=∣LCP(i,k)∣，因为 sufjsuf_{j}sufj​ 的字典序在 sufi,sufksuf_{i},suf_{k}sufi​,sufk​ 之间，所以 sufjsuf_{j}sufj​ 的前 ttt 个字符必然与 sufi,sufksuf_{i},suf_{k}sufi​,sufk​ 相等。这个还是比较容易理解的，因为字典序距离越近，LCP 越长吗。
若我们希望不要 O(nlog⁡n)O(n \log n)O(nlogn) 的求 hththt 的话，我们自然考虑其性质：
假设 htiht_ihti​ 已知，则 ∣LCP⁡(sai,sai−1)∣=hti|\operatorname{LCP}(sa_{i},sa_{i-1})|=ht_{i}∣LCP(sai​,sai−1​)∣=hti​。考虑 suf(sai−1+1),suf(sai+1)suf(sa_{i-1}+1),suf(sa_{i}+1)suf(sai−1​+1),suf(sai​+1)。当 hti&gt;0ht_{i}&gt;0hti​&gt;0，显然有 ∣LCP⁡(sai+1,sai−1+1)∣=hti−1|\operatorname{LCP}(sa_{i}+1,sa_{i-1}+1)|=ht_{i}-1∣LCP(sai​+1,sai−1​+1)∣=hti​−1，且根据 rk(sai−1)&lt;rk(sai)rk(sa_{i-1})&lt;rk(sa_{i})rk(sai−1​)&lt;rk(sai​)，容易证明 rk(sai−1+1)&lt;rk(sai+1)rk(sa_{i-1}+1)&lt;rk(sa_{i}+1)rk(sai−1​+1)&lt;rk(sai​+1)。
令 p=sai+1,q=sai−1+1p=sa_{i}+1,q=sa_{i-1}+1p=sai​+1,q=sai−1​+1，我们尝试求出 rkprk_{p}rkp​ 所对应的 hththt，我们现在有如下性质：

∣LCP⁡(p,q)∣=hti−1|\operatorname{LCP}(p,q)|=ht_{i}-1∣LCP(p,q)∣=hti​−1。
rk(q)&lt;rk(p)rk(q)&lt;rk(p)rk(q)&lt;rk(p)。

我们考虑，排名为 rkp−1rk_{p}-1rkp​−1 的后缀 sufrsuf_rsufr​ 的排名它要么等于 rkqrk_qrkq​，那么 q=rq=rq=r。要么夹在 rkq,rkprk_q,rk_prkq​,rkp​ 之间，因为 rkrrk_rrkr​ 是小于 rkprk_prkp​ 的最大正整数 rkp−1rk_{p}-1rkp​−1，而 rkqrk_qrkq​ 小于 rkprk_prkp​。那么根据上面结论，有 ht(rkp)≥hti−1ht(rk_{p})\ge ht_{i}-1ht(rkp​)≥hti​−1。我们考虑把 rkprk_{p}rkp​ 换一下，有 ht(rk(sai+1))≥ht(rk(sai))−1ht(rk(sa_{i}+1))\ge ht(rk(sa_{i}))-1ht(rk(sai​+1))≥ht(rk(sai​))−1，那么令 u=sai+1u=sa_{i}+1u=sai​+1，那么我们就有的 hththt 数组的核心性质：
ht(rku)≥ht(rku−1)−1ht(rk_{u})\ge ht(rk_{u-1})-1
ht(rku​)≥ht(rku−1​)−1
我们这里引用 Alex_Wei 的图：

通过这个性质，我们可以通过类似于双指针的性质来暴力求解 hththt，以下为代码：
for(int i=1;i&lt;=len;i++) rk[sa[i]]=i;for(int i=1,k=0;i&lt;=len;i++)&#123;    if(rk[i]==1) continue;    if(k) k--;    int j=sa[rk[i]-1];    while(i+k&lt;=len&amp;&amp;j+k&lt;=len&amp;&amp;s[i+k]==s[j+k]) k++;    ht[rk[i]]=ST[0][rk[i]]=k;&#125;
下面是一个完整的模板，但是里面有一些函数还没有讲解，在应用中我们会逐个讲解：
namespace SA&#123;    int len,sa[MN],x[MN],y[MN],rk[MN],c[MN],ht[MN],ST[30][MN];    // 接受 string 和 vector_int 输入，其他输入不保证正确性    // ST表需要手动初始化调用initst函数    template&lt;typename vct&gt;    void getsa(vct &amp;s)&#123;        int m=400000;        len=s.size();        s.insert(s.begin(),&#x27; &#x27;);        for(int i=1;i&lt;=len;i++)&#123;            x[i]=s[i];            ++c[x[i]];        &#125;        for(int i=2;i&lt;=m;i++) c[i]+=c[i-1];        for(int i=len;i&gt;=1;i--) sa[c[x[i]]--]=i;        for(int k=1;k&lt;=len;k&lt;&lt;=1)&#123;            int num=0;            for(int i=len-k+1;i&lt;=len;i++) y[++num]=i;            for(int i=1;i&lt;=len;i++)&#123;                if(sa[i]&gt;k) y[++num]=sa[i]-k;            &#125;            for(int i=1;i&lt;=m;i++) c[i]=0;            for(int i=1;i&lt;=len;i++) c[x[i]]++;            for(int i=2;i&lt;=m;i++) c[i]+=c[i-1];            for(int i=len;i&gt;=1;i--) sa[c[x[y[i]]]--]=y[i],y[i]=0;            swap(x,y);            num=1,x[sa[1]]=1;            for(int i=2;i&lt;=len;i++)&#123;                if(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+k]==y[sa[i-1]+k]) x[sa[i]]=num;                else x[sa[i]]=++num;            &#125;            if(num==len) break;            m=num;        &#125;        for(int i=1;i&lt;=len;i++) rk[sa[i]]=i;        for(int i=1,k=0;i&lt;=len;i++)&#123;            if(rk[i]==1) continue;            if(k) k--;            int j=sa[rk[i]-1];            while(i+k&lt;=len&amp;&amp;j+k&lt;=len&amp;&amp;s[i+k]==s[j+k]) k++;            ht[rk[i]]=ST[0][rk[i]]=k;        &#125;    &#125;    // ST表初始化    void initst()&#123;        for(int i=1;i&lt;30;i++)&#123;            for(int j=1;j+(1&lt;&lt;i)-1&lt;=len;j++)&#123;                ST[i][j]=min(ST[i-1][j],ST[i-1][j+(1&lt;&lt;(i-1))]);            &#125;        &#125;    &#125;    // 查询位置为 i 和 位置为 j 的后缀的 LCP    int querylcp(int i,int j)&#123;        if((i=rk[i])&gt;(j=rk[j])) swap(i,j);        int d=__lg(j-(i++));        return min(ST[d][i],ST[d][j-(1&lt;&lt;d)+1]);    &#125;    // 手动查询 ST 表    int queryst(int l,int r)&#123;        int d=__lg(r-l+1);        return min(ST[d][l],ST[d][r-(1&lt;&lt;d)+1]);    &#125;&#125;
 2. 后缀数组的应用
后缀数组有着许许多多的应用，但是由于对应的例题过于杂且用到的芝士较多，我们的顺序是先讲解技巧，先认识，让后我们在最后一部分的习题环节进行练习。有一些应用是对应少见的例题，所以这里会直接进行讲解而不会放在习题。
 2.1 寻找最小的循环移动位置
循环移动位置实际上就是将字符串排为一个环，让后旋转这个环，我们先要断环成链将给定字符串复制一遍放在后面，这样就变为了后缀排序问题。
 JSOI2007字符加密
我们发现，循环移动位置实际上就是将字符串排为一个环，让后旋转这个环，我们先要断环成链。把给定字符串复制一遍放在后面。让后你发现题目其实就是把这个改变后的字符串进行后缀排序，我们根据后缀排序的数组让后输出对应最后一位就可以了：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=8e5+15;int x[MN],n,m,y[MN],c[MN],sa[MN];string s;void getsa()&#123;    for(int i=1;i&lt;=n;i++)&#123;        x[i]=s[i];        c[x[i]]++;    &#125;    for(int i=2;i&lt;=m;i++)&#123;        c[i]+=c[i-1];    &#125;    for(int i=n;i&gt;=1;i--)&#123;        sa[c[x[i]]--]=i;    &#125;    for(int len=1;len&lt;=n;len&lt;&lt;=1)&#123;        int num=0;        for(int i=n-len+1;i&lt;=n;i++)&#123;            y[++num]=i;        &#125;        for(int i=1;i&lt;=n;i++)&#123;            if(sa[i]&gt;len)&#123;                y[++num]=sa[i]-len;            &#125;        &#125;        for(int i=1;i&lt;=m;i++)&#123;            c[i]=0;        &#125;        for(int i=1;i&lt;=n;i++)&#123;            c[x[i]]++;        &#125;        for(int i=2;i&lt;=m;i++) c[i]+=c[i-1];        for(int i=n;i&gt;=1;i--)&#123;            sa[c[x[y[i]]]--]=y[i];            y[i]=0;        &#125;        swap(x,y);        num=1;        x[sa[1]]=1;        for(int i=2;i&lt;=n;i++)&#123;            if(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+len]==y[sa[i-1]+len])&#123;                x[sa[i]]=num;            &#125;else x[sa[i]]=++num;        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;s;    n=s.length()*2;    m=300000;    s=&#x27; &#x27;+s+s;    getsa();    for(int i=1;i&lt;=n;i++)&#123;        if(sa[i]&lt;=n/2) cout&lt;&lt;s[sa[i]+n/2-1];    &#125;    return 0;&#125;
 2.2 在字符串中寻找最长公共子串
细节我给同学讲解 Trie 习题后教练考我这个问题，还好我即会后缀数组也会哈希做法 www。
同学问我哈希怎么做，显然最长公共子串的长度满足可二分性，考虑二分最长公共子串长度 LLL ，现在问题转化为判定性问题。我们考虑最简单的情况：两个串。我们对第一个串拿长度为 LLL 的滑块在上面滑，过程中把哈希值存下来到哈希表，第二个串同样，但我们判断哈希值是否出现过即可，这个情况可以拓展到一般串的情况，时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn) 但常数极大！这是一个滑块思想的应用。
如何用 SA 做呢？现在我们要求在主串 TTT 中寻找子串 SSS，我们先建出 TTT 的后缀数组，让后查找子串 SSS。若子串在 TTT 中出现，它必定是 TTT 的一些后缀的前缀，我们可以通过在后缀数组中二分 SSS 来实现。比较子串 SSS 和后缀的时间复杂度是 O(∣S∣)O(|S|)O(∣S∣) 的，那么总时间复杂度是 O(∣S∣log⁡∣T∣)O(|S| \log |T|)O(∣S∣log∣T∣) 的，注意，如果该子串在 TTT 中出现了多次，每次出现都是在后缀数组数组中相邻的。因此出现次数可以通过再次二分找到，输出每次出现的位置也很轻松。
这一部分主要考察二分的操作使用，在下面的例题中我们也会详细的进行讲解。
 2.3 从字符串首尾取字符最小化字典序
给你一个字符串，每次从首或尾取一个字符组成字符串，问所有能够组成的字符串中字典序最小的一个。
例题：「USACO07DEC」Best Cow Line。
一个暴力的想法就是 O(n)O(n)O(n) 判断取首还是取尾，我们现在只需要优化即可，因为取尾实际上就是在反串中取，我们可以将原串后缀和反串后缀构成的集合比较大小，可以将反串拼接在原串后，并在中间加上分隔符，求后缀数组，即可 O(1)O(1)O(1) 判断：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e6+15;int x[MN],y[MN],rk[MN],sa[MN],c[MN],n,sn,m;string s,revs;void getsa()&#123;    for(int i=1;i&lt;=n;i++)&#123;        x[i]=s[i];        c[x[i]]++;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        c[i]+=c[i-1];    &#125;    for(int i=n;i&gt;=1;i--)&#123;        sa[c[x[i]]--]=i;    &#125;    for(int len=1;len&lt;=n;len&lt;&lt;=1)&#123;        int num=0;        for(int i=n-len+1;i&lt;=n;i++)&#123;            y[++num]=i;        &#125;        for(int i=1;i&lt;=n;i++)&#123;            if(sa[i]&gt;len)&#123;                y[++num]=sa[i]-len;            &#125;        &#125;        memset(c,0,sizeof(c));        for(int i=1;i&lt;=n;i++)&#123;            c[x[i]]++;        &#125;        for(int i=1;i&lt;=m;i++) c[i]+=c[i-1];        for(int i=n;i&gt;=1;i--)&#123;            sa[c[x[y[i]]]--]=y[i];            y[i]=0;        &#125;        swap(x,y);        num=1;        x[sa[1]]=1;        for(int i=2;i&lt;=n;i++)&#123;            if(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+len]==y[sa[i-1]+len])&#123;                x[sa[i]]=num;            &#125;else x[sa[i]]=++num;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        rk[sa[i]]=i;    &#125;&#125;int main()&#123;    cin&gt;&gt;n;    m=5e5;    for(int i=1;i&lt;=n;i++)&#123;        char awa;        cin&gt;&gt;awa;        s.push_back(awa);    &#125;    for(int i=s.length()-1;i&gt;=0;i--)&#123;        revs.push_back(s[i]);    &#125;    sn=n;    // cout&lt;&lt;s&lt;&lt;&#x27;\n&#x27;&lt;&lt;revs&lt;&lt;&#x27;\n&#x27;;    s=&#x27; &#x27;+s+(char)0+revs;    n=(n*2+1);    getsa();    int tot=0;    for(int l=1,r=sn;l&lt;=r;)&#123;        if(rk[l]&lt;rk[n+1-r])&#123;            cout&lt;&lt;s[l++];        &#125;else cout&lt;&lt;s[r--];        if((++tot)%80==0) cout&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 2.4 与贪心与 DP 的结合
对于后缀数组，在贪心和 DP 中一般不作为主角出现，多用于字符串加速匹配的问题或者利用其性质进行求解。
 2.5 与线段树等一类数据结构结合
某些题目让你求满足条件的前若干个数，而这些数又在后缀排序中的一个区间内。这时我们可以用归并排序的性质来合并两个结点的信息，利用线段树维护和查询区间答案。
同时后缀数组会根据题目的不同结合一系列数据结构算法，如莫队，扫描线等。在习题部分我们会单独开讲。
 3. Height 数组的应用
 3.1 任意两个后缀的 LCP
有了 hththt 数组，我们可以快速求出一个字符串 sss 的 iii 后缀和 jjj 后缀的最长公共前缀 LCP⁡(i,j)\operatorname{LCP}(i,j)LCP(i,j)。
结论如下：

若 rki&lt;rkjrk_{i}&lt;rk_{j}rki​&lt;rkj​，则 ∣LCP⁡(i,j)∣=min⁡p=rki+1rkjhtp|\operatorname{LCP}(i,j)|=\min\limits_{p=rk_{i}+1}^{rk_{j}}ht_p∣LCP(i,j)∣=p=rki​+1minrkj​​htp​。

感性理解以下，如果 HeightHeightHeight 一直大于某个数，前这么多位就一直没变过；反之，由于后缀已经排好序了，不可能变了之后变回来。
严格证明可以参考[2004] 后缀数组 by. 许智磊。那么通过这样，求两子串最长公共前缀就转化为了 RMQ 问题，这也就是对应了我们模板中的 ST 表，实现如下：
// ST表初始化void initst()&#123;    for(int i=1;i&lt;30;i++)&#123;        for(int j=1;j+(1&lt;&lt;i)-1&lt;=len;j++)&#123;            ST[i][j]=min(ST[i-1][j],ST[i-1][j+(1&lt;&lt;(i-1))]);        &#125;    &#125;&#125;// 查询位置为 i 和 位置为 j 的后缀的 LCPint querylcp(int i,int j)&#123;    if((i=rk[i])&gt;(j=rk[j])) swap(i,j);    int d=__lg(j-(i++));    return min(ST[d][i],ST[d][j-(1&lt;&lt;d)+1]);&#125;
我们这里引用 Alex_wei 的图：

上图就是对 aabaaaab\texttt{aabaaaab}aabaaaab 进行后缀排序后的结果以及 hththt 数组，由矩形框起来的两个字符串相等。那么根据上面的图也能理解两个后缀之间的 LCP 就是它们排名之间所有矩形宽度的最小值，即 hththt 的最小值。
但是，如果我们将整张图逆着旋转 909090 的话，那么有：

我们得到了一个矩形柱状图！hththt 恰好表示了每个矩形的高度，这也可能就说明了为什么名字叫做 Height 数组。观察这个图你有没有想到什么？

没错，这个玩意我们还是可以和单调栈结合起来一起考的！众所周知，单调栈可以求出柱状图中面积最大的矩形。
例如我们求所有后缀两两 LCP 长度之和，考虑按排名顺序加入所有后缀并实时维护 F(i)=∑p=1i−1∣LCP⁡(sap,sai)∣F(i)=\sum\limits_{p=1}^{i-1}|\operatorname{LCP}(sa_{p},sa_{i})|F(i)=p=1∑i−1​∣LCP(sap​,sai​)∣，那么其实就是在维护 ∑p=1i−1min⁡q=p+1ihtq\sum\limits_{p=1}^{i-1} \min\limits_{q=p+1}^{i} ht_{q}p=1∑i−1​q=p+1mini​htq​，可以视为把单调栈加入高 htiht_{i}hti​，宽 111 的矩形后，单调栈内矩形面积之和。
 3.2 求本质不同子串数
可以用 sss 所有后缀的前缀表示所有子串，我们考虑每次添加一个后缀，并删去这个后缀与已经添加的后缀的所有重复前缀，而前缀总数就是子串个数，为 n(n+1)2\dfrac{n(n+1)}{2}2n(n+1)​，如果按后缀排序的顺序枚举后缀，每次新增的子串就是除了与上一个后缀的 LCP 剩下的前缀。这些前缀一定是新增的，否则会破坏 ∣LCP⁡(i,j)∣=min⁡p=rki+1rkjhtp|\operatorname{LCP}(i,j)|=\min\limits_{p=rk_{i}+1}^{rk_{j}}ht_p∣LCP(i,j)∣=p=rki​+1minrkj​​htp​ 的性质。只有这些前缀是新增的，因为 LCP 部分在枚举上一个前缀时计算过了。那么答案就是 n(n+1)2−∑i=2nhti\dfrac{n(n+1)}{2}-\sum\limits_{i=2}^n ht_{i}2n(n+1)​−i=2∑n​hti​。
上面的做法我们求得了 sss 所有后缀本质不同的前缀数量。我们可以拓展到求 sss 某个后缀集合 SSS 所有本质不同前缀数量！
设 SSS 的所有位置按排名从小到大排名后的位置分别为 p1,p2,…,p∣S∣p_1,p_2,\dots,p_{|S|}p1​,p2​,…,p∣S∣​，答案就是：
(∑i=1∣S∣n−pi+1)−(∑i=1∣S∣−1∣LCP⁡(pi,pi+1)∣)\left( \sum\limits_{i=1}^{|S|} n-p_{i}+1 \right)-\left(\sum\limits_{i=1}^{|S|-1} |\operatorname{LCP}(p_{i},p_{i+1})| \right)
⎝⎛​i=1∑∣S∣​n−pi​+1⎠⎞​−⎝⎛​i=1∑∣S∣−1​∣LCP(pi​,pi+1​)∣⎠⎞​
其中后面能够 ST 表预处理后 O(∣S∣)O(|S|)O(∣S∣) 求出。
 3.3 多个串的最长公共子串
给出 nnn 个字符串，求 s1,s2,…,sns_{1},s_{2},\dots,s_{n}s1​,s2​,…,sn​ 的最长公共子串。
首先我们先把这个字符串给拼接起来，格式入 t=s1+c1+s2+c2+⋯+cn−1+snt=s_{1}+c_{1}+s_{2}+c_{2}+\dots +c_{n-1}+s_{n}t=s1​+c1​+s2​+c2​+⋯+cn−1​+sn​，其中 ci=’z’+ic_{i}=\texttt{&#x27;z&#x27;}+ici​=’z’+i，即分隔符，但要求互不相同不然就会出现影响答案的情况啦。
让后我们对 ttt 建出 SA 数组，问题转化为求 max⁡1≤l≤r≤∣t∣min⁡p=l+1r∣LCP⁡(p,p−1)∣\max\limits_{1\le l \le r \le |t|} \min_{p=l+1}^r |\operatorname{LCP}(p,p-1)|1≤l≤r≤∣t∣max​minp=l+1r​∣LCP(p,p−1)∣，其中这个区间 [l,r][l,r][l,r] 合法当且仅当对于每一个字符串 sis_isi​ 的后缀都落在这个区间内。
容易发现 lll 增大的时候 rrr 是单调不降的，我们可以考虑双指针维护整个过程。此外，我们还需要维护区间最小值，可以考虑利用单调队列就可以维护啦，时间复杂度 O(n+nlog⁡n)O(n+n \log n)O(n+nlogn)。
 3.4 结合并查集
某些题目求解时要求你将后缀数组划分成若干个连续 LCP 长度大于等于某一值的段，我们可以考虑根据 hththt 的性质，当我们给定一个长度阀值 LLL 的时候，我们把所有 &lt;L&lt;L&lt;L 的 hththt 去掉，让后 hththt 将区间划分为若干个子区间，同一子区间任意两个后缀的 LCP 长度均大于 LLL。将询问离线，我们从大到小考虑所有 htiht_{i}hti​，每次在 sai−1,saisa_{i-1},sa_{i}sai−1​,sai​，之间连边利用数据结构如并查集加启发式合并维护这一过程，就可以得到每个后缀的 LCP 长度 ≥L\ge L≥L 所有后缀的信息。
对 htiht_{i}hti​ 建立笛卡尔树的效果是同样的。
 3.5 连续的若干个相同子串
如果题目中出现一些构造字符串循环构成的问题，我们可以不妨考虑枚举这个循环的长度 LLL，让后按照 LLL 将字符串划分关键点分块（即按照 LLL 的倍数分块）利用分块和字符串的重复性质，将看似全局的问题局部化解决。对应到后缀数组上就是对相邻两块的块进行 LCP 和 LCS 查询，具体如何操作我们下面会讲解。
 4. 例题
 4.1 并查集技巧
 P2852 [USACO06DEC] Milk Patterns G
呃其实就是板子题，这个真没有什么好说的，考虑从从大到小添加每个 htiht_{i}hti​，等价于每次在 sai−1,saisa_{i-1},sa_{i}sai−1​,sai​之间连边，当出现大小为 kkk 的联通块时 htiht_{i}hti​ 即为所求。如果你非要说 Oi-Wiki 的做法的话也是可以的吧……
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,k;string a;multiset&lt;int&gt; tt;namespace SA&#123;// 省略&#125;using namespace SA;int main()&#123;    cin&gt;&gt;n&gt;&gt;k;    k--;    for(int i=1;i&lt;=n;i++)&#123;        int c;        cin&gt;&gt;c;        a.push_back(c);    &#125;    getsa(a);    int ans=0;    for(int i=1;i&lt;=n;i++)&#123;        tt.insert(ht[i]);        if(i&gt;k) tt.erase(tt.find(ht[i-k]));        ans=max(ans,*tt.begin());    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 P2178 [NOI2015] 品酒大会
若 rrr 相似成立，那么对于 r′(1≤r′&lt;r)r&#x27;(1\le r&#x27; &lt; r)r′(1≤r′&lt;r) 相似也是成立的。若我们考虑 ≥L\ge L≥L 的 htiht_{i}hti​，将 sai−1,saisa_{i-1},sa_{i}sai−1​,sai​ 之间连边，若 p,qp,qp,q 在一个联通块，那么根据我们上面所说的，则 p,qp,qp,q 是 LLL 相似的。
我们考虑从大到小处理 htiht_{i}hti​，使用并查集与启发式合并维护每个联通块的大小以及所有权值，用最大值乘次大值，最小值乘次小值（有负数）更新当前合并后 LLL 的答案，时间复杂度为 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)，当然我们可以只维护最大，次大，最小，次小，这样就能做到 O(nlog⁡n)O(n \log n)O(nlogn) 啦。其实这才是我们并查集技巧的题。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=6e5+15;int n,m,x[MN],y[MN],cnt[MN],pre[MN],sa[MN],rk[MN],h[MN],pos[MN];ll mx[MN],mn[MN],ans1[MN],ans2[MN],ans[MN],a[MN],siz[MN];string s;namespace SA&#123;// 省略&#125;using namespace SA;void geth()&#123;    for(int i=1,k=0;i&lt;=n;i++)&#123;        if(!rk[i]) continue;        if(k) k--;        while(s[i+k]==s[sa[rk[i]-1]+k]) k++;        h[rk[i]]=k;    &#125;&#125;void init()&#123;    memset(ans2,128,sizeof(ans2));    for(int i=1;i&lt;=n;i++)&#123;        pre[i]=i;        pos[i]=i;        mx[i]=mn[i]=a[i];        ans[i]=-1e18;        siz[i]=1;    &#125;&#125;int root(int x)&#123;    if(pre[x]==x) return pre[x];    else return pre[x]=root(pre[x]);&#125;void merge(int x,int y,int len)&#123;    x=root(x),y=root(y);    pre[y]=x;    ans1[len]+=(ll)siz[x]*siz[y];    siz[x]+=siz[y];    ans[x]=max(&#123;ans[x],ans[y],mx[x]*mx[y],mx[x]*mn[y],mn[x]*mx[y],mn[x]*mn[y]&#125;);    mx[x]=max(mx[x],mx[y]);    mn[x]=min(mn[x],mn[y]);    ans2[len]=max(ans2[len],ans[x]);&#125;bool cmp(int x,int y)&#123;    return h[x]&gt;h[y];&#125;int main()&#123;    cin&gt;&gt;n;    m=3e5;    cin&gt;&gt;s;    s=&#x27; &#x27;+s;    for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i];    getsa();    geth();    init();    sort(pos+2,pos+1+n,cmp);    // for(int i=1;i&lt;=n+1;i++)&#123;    //     cout&lt;&lt;sa[i]&lt;&lt;&quot; &quot;;    // &#125;    // cout&lt;&lt;&#x27;\n&#x27;;    for(int i=2;i&lt;=n;i++)&#123;        merge(sa[pos[i]],sa[pos[i]-1],h[pos[i]]);    &#125;    for(int i=n;i&gt;=0;i--) ans1[i]+=ans1[i+1];    for(int i=n;i&gt;=0;i--) ans2[i]=max(ans2[i],ans2[i+1]);    for(int i=0;i&lt;n;i++)&#123;        cout&lt;&lt;ans1[i]&lt;&lt;&quot; &quot;&lt;&lt;(ans1[i]?ans2[i]:0)&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 P6793 [SNOI2020] 字符串
我们考虑，每一次修改修改的都是一段后缀，启发我们对 a+ba+ba+b 拼接后形成的字符串进行后缀数组操作。我们有一个贪心的想法，我们每次修改两个 LCP 尽量长的子串，这个贪心显然正确的，证明考虑反证法即可。
那么，我们利用上面的思路，从大到小将 htiht_{i}hti​ 插入，实质上就是在从大到小枚举 LCP 进行贪心，每次贪心的消除当前联通块尽可能多的 a,ba,ba,b 后缀对，时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;int n,ans,K,as[MN],bs[MN],pre[MN];string a,b,s;vector&lt;int&gt; pos[MN];namespace SA&#123;	// 省略&#125;using namespace SA;int root(int x)&#123;    if(pre[x]==x) return pre[x];    else return pre[x]=root(pre[x]);&#125;void merge(int x,int y,int lcpl)&#123;    int rx=root(x),ry=root(y);    if(rx==ry) return;    int tmp=min(as[rx],bs[ry]);    ans+=max(0ll,K-lcpl)*tmp;    as[rx]-=tmp;    bs[ry]-=tmp;    tmp=min(bs[rx],as[ry]);    ans+=max(0ll,K-lcpl)*tmp;    bs[rx]-=tmp;    as[ry]-=tmp;    as[ry]=as[rx]+as[ry],bs[ry]=bs[rx]+bs[ry];    pre[rx]=ry;&#125;signed main()&#123;    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    cin&gt;&gt;n&gt;&gt;K&gt;&gt;a&gt;&gt;b;    s=a+&#x27;#&#x27;+b;    for(int i=1;i&lt;=n;i++)&#123;        as[i]=(i+K-1&lt;=n);    &#125;    for(int i=n+2;i&lt;=2*n+1;i++)&#123;        bs[i]=(i-n-1+K-1&lt;=n);    &#125;    for(int i=0;i&lt;=2*n+1;i++)&#123;        pre[i]=i;    &#125;    getsa(s);    initst();    for(int i=n;i&gt;=0;i--)&#123;        for(auto p:pos[i])&#123;            merge(sa[p],sa[p-1],i);        &#125;    &#125;    put(ans);    return 0;&#125;
 P7361 「JZOI-1」拜神
形式化题面如下：

给定一个长为 nnn 的字符串，询问次数为 qqq，多次询问区间 [l,r][l,r][l,r] 内最长重复子串的长度。
1≤n≤5×104,1≤q≤1051\le n \le 5\times 10^4,1\le q \le 10^51≤n≤5×104,1≤q≤105。

没有形式化题面感觉都想不出来怎么做 www。
肯定没有那么菜啦，首先考虑二分长度，问题转化为区间内是否存在一个长为 midmidmid 的最长重复子串。
接下来我们考虑这个最长重复子串怎么求，一个比较明显的想法就是后缀数组的 LCP 功能，原命题询问的实质就问是否存在 i,j∈[l,r−mid+1],LCP⁡(i,j)≥midi,j \in [l,r-mid+1],\operatorname{LCP}(i,j)\ge midi,j∈[l,r−mid+1],LCP(i,j)≥mid。看到后面这个式子，回忆起品酒大会的思路：从大到小将 Height 数组插入，若仅考虑 ≥L\ge L≥L 的 Height，将 sai−1,saisa_{i-1},sa_{i}sai−1​,sai​ 之间连边，那么若 p,qp,qp,q 在同一联通块里，表明 LCP⁡(p,q)≥L\operatorname{LCP}(p,q)\ge LLCP(p,q)≥L。我们通过并查集和启发式合并就可以做到 O(log⁡n)O(\log n)O(logn) 的优秀复杂度啦。
但是有点问题啊，如果我们直接这么做我们并没有考虑区间位置，也就是说在两个联通块启发式合并的时候我们必须要记录区间的位置。我们不妨考虑对于联通块内每一个位置，我们维护它在当前联通块内上一个元素的位置，记作 preipre_{i}prei​，那么区间限制转化为 max⁡i∈set(L),i∈[l,r−L+1]prei≥l\max\limits_{i\in set(L),i\in [l,r-L+1]} pre_{i}\ge li∈set(L),i∈[l,r−L+1]max​prei​≥l。我们可以通过对每一个联通块开主席树来辅助查询，这样就能够做到优秀的 O(qlog⁡2nO(q \log^2 nO(qlog2n) 的查询啦，其中两个 log⁡\loglog 由二分和主席树查询贡献。
问题转化为如何维护 preprepre 的合并。首先，唯一确定一个联通块的信息就是所对应的 LCP 长度 LLL（具体见上面品酒大会思路），根据品酒大会启发式合并的思路，一次启发式 preprepre 的变化最多只有 O(log⁡n)O(\log n)O(logn) 个，考虑用 set 把联通块内的元素存下来，启发式合并的时候暴力单点修改 preprepre，这样处理的复杂度是 O(nlog⁡2n)O(n \log^2 n)O(nlog2n) 的，可以过。故总时间复杂度为 O(qlog⁡2n+nlog⁡2n)O(q\log^2 n + n \log^2 n)O(qlog2n+nlog2n)。
请注意二分的实现：
#include&lt;bits/stdc++.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e4+15;int n,q,pre[MN];vector&lt;int&gt; vht[MN];set&lt;int&gt; st[MN];string s;struct Segment&#123;#define ls t[p].lson#define rs t[p].rson    struct Node&#123;        int lson,rson,val;    &#125;t[MN&lt;&lt;9];    int tot,rt[MN];        void pushup(int p)&#123;        t[p].val=max(t[ls].val,t[rs].val);    &#125;    void modfiy(int &amp;p,int lst,int l,int r,int pos,int v)&#123;        p=++tot;        t[p]=t[lst];        if(l==r)&#123;            t[p].val=max(t[p].val,v);            return;        &#125;        int mid=(l+r)&gt;&gt;1;        if(mid&gt;=pos) modfiy(ls,t[lst].lson,l,mid,pos,v);        else modfiy(rs,t[lst].rson,mid+1,r,pos,v);        pushup(p);    &#125;    int query(int p,int l,int r,int fl,int fr)&#123;        if(l&gt;=fl&amp;&amp;r&lt;=fr)&#123;            return t[p].val;        &#125;        int mid=(l+r)&gt;&gt;1,ret=0;        if(mid&gt;=fl) ret=max(ret,query(ls,l,mid,fl,fr));        if(mid&lt;fr) ret=max(ret,query(rs,mid+1,r,fl,fr));        return ret;    &#125;#undef ls#undef rs&#125;sg;namespace SA&#123;// 省略&#125;using namespace SA;int root(int x)&#123;    if(pre[x]==x) return pre[x];    else return pre[x]=root(pre[x]);  // 这里用这种合并方式而不是按秩合并  // 是因为并查集维护的是联通块所属的集合，不用考虑形态变化。&#125;void merge(int x,int y,int L)&#123;    int rx=root(x),ry=root(y);    if(rx==ry) return;    if(st[rx].size()&lt;st[ry].size()) swap(rx,ry);    pre[ry]=rx;    for(auto p:st[ry])&#123;        auto it=st[rx].lower_bound(p);        if(it!=st[rx].end())&#123;            sg.modfiy(sg.rt[L],sg.rt[L],1,n,*it,p);        &#125;        if(it!=st[rx].begin())&#123;            it--;            sg.modfiy(sg.rt[L],sg.rt[L],1,n,p,*it);        &#125;    &#125;    for(auto p:st[ry]) st[rx].insert(p);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;    getsa(s);    for(int i=2;i&lt;=n;i++)&#123;        vht[ht[i]].push_back(i);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        pre[i]=i;        st[i].insert(i);    &#125;    for(int i=n;i&gt;=1;i--)&#123;        sg.rt[i]=sg.rt[i+1];        for(auto p:vht[i])&#123;            merge(sa[p],sa[p-1],i);        &#125;    &#125;    while(q--)&#123;        int L,R;        cin&gt;&gt;L&gt;&gt;R;        int l=0,r=R-L+1;        while(l+1&lt;r)&#123;            int mid=(l+r)&gt;&gt;1;            if(sg.query(sg.rt[mid],1,n,L,R-mid+1)&gt;=L)&#123;                l=mid;            &#125;else r=mid;        &#125;        cout&lt;&lt;l&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 4.2 单调栈技巧
 P4248 [AHOI2013] 差异
前面两个都好说，关键字与后面这个每一个区间 LCP 之和怎么求回顾我们后缀数组求解 LCP 的式子：

若 rki&lt;rkjrk_{i}&lt;rk_{j}rki​&lt;rkj​，则 ∣LCP⁡(i,j)∣=min⁡p=rki+1rkjhtp|\operatorname{LCP}(i,j)|=\min\limits_{p=rk_{i}+1}^{rk_{j}}ht_p∣LCP(i,j)∣=p=rki​+1minrkj​​htp​。

那么现在问题转化为求每个区间的区间最小值之和，我们利用单调栈，考虑按排名顺序加入所有后缀并实时维护 F(i)=∑p=1i−1∣LCP⁡(sap,sai)∣F(i)=\sum\limits_{p=1}^{i-1}|\operatorname{LCP}(sa_{p},sa_{i})|F(i)=p=1∑i−1​∣LCP(sap​,sai​)∣，那么其实就是在维护 ∑p=1i−1min⁡q=p+1ihtq\sum\limits_{p=1}^{i-1} \min\limits_{q=p+1}^{i} ht_{q}p=1∑i−1​q=p+1mini​htq​，可以视为把单调栈加入高 htiht_{i}hti​，宽 111 的矩形后，单调栈内矩形面积之和。后面的答案就是 n(n+1)(n−1)2−2×F(i)\dfrac{n(n+1)(n-1)}{2}-2\times F(i)2n(n+1)(n−1)​−2×F(i)：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+51;int top,sta[MN],L[MN],R[MN],ans;string s;namespace SA&#123;// 省略&#125;using namespace SA;signed main()&#123;    cin&gt;&gt;s;    getsa(s);    sta[top=1]=1;    for(int i=2;i&lt;=len;i++)&#123;        while(top&amp;&amp;ht[sta[top]]&gt;ht[i]) R[sta[top--]]=i;        L[i]=sta[top];        sta[++top]=i;    &#125;    while(top) R[sta[top--]]=len+1;    ans=len*(len-1)*(len+1)/2;    for(int i=2;i&lt;=len;i++)&#123;        ans-=2*(R[i]-i)*(i-L[i])*ht[i];    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 P7409 SvT
问题即求：
∑i=1K∑j=i+1KLCP⁡(sufi,sufj)\sum_{i=1}^{K} \sum_{j=i+1}^{K} \operatorname{LCP}\left(suf_{i}, suf_{j}\right)
i=1∑K​j=i+1∑K​LCP(sufi​,sufj​)
其中 KKK 为后缀集合长度，显然有：
∑i=1K∑j=i+1KLCP⁡(si,sj)=∑i=1K∑j=i+1Kmin⁡ri+1≤k≤rj{ htk}\sum_{i=1}^{K} \sum_{j=i+1}^{K} \operatorname{LCP}\left(s_{i}, s_{j}\right)=\sum_{i=1}^{K} \sum_{j=i+1}^{K} \min _{r_{i}+1 \leq k \leq r_{j}}\left\{\text { ht}_{k}\right\}
i=1∑K​j=i+1∑K​LCP(si​,sj​)=i=1∑K​j=i+1∑K​ri​+1≤k≤rj​min​{ htk​}
直接单调栈做就可以了，但是记得要去重哦，因为给出的有重复的。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=1e6+15;constexpr ll MOD=23333333333333333;int n,m,sta[MN],top,a[MN],w[MN],L[MN],R[MN];namespace SA&#123;// 省略    int lcp(int i,int j)&#123;        if((i=rk[i])&gt;(j=rk[j])) swap(i,j);        int d=__lg(j-(i++));        return min(st[d][i],st[d][j-(1&lt;&lt;d)+1]);    &#125;&#125;using namespace SA;bool cmp(int x,int y)&#123;    return rk[x]&lt;rk[y];&#125;int main()&#123;    string s;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;    getsa(s);    initst();    while(m--)&#123;        int t;        ll ans=0;        cin&gt;&gt;t;        for(int i=1;i&lt;=t;i++)&#123;            cin&gt;&gt;a[i];        &#125;        sort(a+1,a+1+t);        t=unique(a+1,a+1+t)-a-1;        sort(a+1,a+1+t,cmp);        w[1]=0;        for(int i=2;i&lt;=t;i++)&#123;            w[i]=lcp(a[i-1],a[i]);        &#125;        sta[top=0]=0;        for(int i=1;i&lt;=t;i++)&#123;            while(top&amp;&amp;w[sta[top]]&gt;w[i]) top--;            L[i]=sta[top];            sta[++top]=i;        &#125;        sta[top=0]=t+1;        for(int i=t;i&gt;=1;i--)&#123;            while(top&amp;&amp;w[sta[top]]&gt;=w[i]) top--;            R[i]=sta[top];            sta[++top]=i;        &#125;        for(int i=2;i&lt;=t;i++)&#123;            ans=(ans+1ll*w[i]*(R[i]-i)%MOD*(i-L[i])%MOD)%MOD;        &#125;        cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 P5161 WD 与数列
做这个题之前请先解锁：关键点 Trick。
一个序列整体加一个数后与另一个序列相同，其实就是差分数组相同，原因自行思考。
那么源问题去掉限制就是裸的单调栈，但是问题在于要求不相交的，我们可以考虑容斥，总方案数减去相交的方案。总方案单调栈做，问题在于相交如何求解？
但是若求不相交的两个区间信息，请注意在差分数组上求时应当是相隔一个位置。差分数组中相交或相邻的串在原串中都是相交的。
我们考虑相交怎么做，我们可以考虑枚举长度 kkk，每隔一个 kkk 放一个关键点的套路。这里我们枚举两个字符串偏移的距离，若一个字符串的开头位置为 ppp，那么第二个串的开头为 p+kp+kp+k，第一个串的结束位置必须要满足 q≥p+k−1q\ge p+k-1q≥p+k−1，发现 ppp 每次向右移动，qqq 的取值减小 111，等差数列求解即可。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e6+15;int n,ans,a[MN],b[MN],top,tot;pir st[MN];struct SA&#123;// 省略。。。&#125;A,B;int clac(int x,int y)&#123;    return (x+y)*(y-x+1)/2;&#125;signed main()&#123;    vector&lt;int&gt; s,t;    cin&gt;&gt;n;    --n;    for(int i=0;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=n;i&gt;=1;i--)&#123;        a[i]-=a[i-1];        b[++tot]=a[i];    &#125;    sort(b+1,b+1+tot);    tot=unique(b+1,b+1+tot)-b-1;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=lower_bound(b+1,b+1+tot,a[i])-b;        s.push_back(a[i]);        t.push_back(a[i]);    &#125;    A.getsa(s);    reverse(t.begin(),t.end());    B.getsa(t);    A.initst();    B.initst();    int sum=0;    for(int i=n;i&gt;=1;i--)&#123;        ans+=sum;        int now=1;        while(top&amp;&amp;st[top].first&gt;=A.ht[i])&#123;            sum-=st[top].first*st[top].second;            now+=st[top--].second;        &#125;        st[++top]=pir(A.ht[i],now);        sum+=now*A.ht[i];    &#125;    for(int k=1;k&lt;n;k++)&#123;        for(int i=1;i&lt;=n/k-1;i++)&#123;            int x1=i*k,y1=x1+k,x2=n-y1+2,y2=n-x1+2;            int lcs=min(k-1,B.querylcp(x2,y2)),lcp=A.querylcp(x1,y1);            if(lcs+lcp-k+1&lt;0) continue;            ans-=clac(max(lcp-k+1,0ll),lcs+lcp-k+1);        &#125;    &#125;    cout&lt;&lt;ans+n*(n+1)/2;    return 0;&#125;
 P5115 Check, Check, Check one two!
前面两问都比较好说，问题在于后面的限制，它是两个限制。我们考虑只有一个限制，比如说 LCP 的限制，显然我们可以根据之前我们提到的，并查集的思路，从小往大插，就可以满足 LCP⁡(i,j)≤k1\operatorname{LCP}(i,j) \le k1LCP(i,j)≤k1，升级版之后我们又多了一个限制，这种限制在询问上表现的是一个范围，我们可以对第二个限制离线下来扫描线加并查集启发式合并做，这样做是 O(nlog⁡3n)O(n \log^3 n)O(nlog3n) 而且不用说就能感觉非常难写，有没有什么好用的性质来简化问题呢？
观察 LCP⁡(i,j),LCS⁡(i,j)\operatorname{LCP}(i,j),\operatorname{LCS}(i,j)LCP(i,j),LCS(i,j) 的性质，拼接起来形成长为 LCP⁡(i,j)+LCS⁡(i,j)−1\operatorname{LCP}(i,j)+\operatorname{LCS}(i,j)-1LCP(i,j)+LCS(i,j)−1 的相同子串，我们考虑关键点 Trick，我们在 (i−LCP⁡(i,j)+1,j−LCS⁡(i,j)+1)(i-\operatorname{LCP}(i,j)+1,j-\operatorname{LCS}(i,j)+1)(i−LCP(i,j)+1,j−LCS(i,j)+1) 统计贡献。因为相同子串要求极长，考虑枚举 i,ji,ji,j，若 si−1≠sj−1s_{i-1}\neq s_{j-1}si−1​=sj−1​，则 s[i,i+LCP⁡(i,j)−1]s[i,i+\operatorname{LCP}(i,j)-1]s[i,i+LCP(i,j)−1] 产生贡献。我们发现因为我们在枚举，其实这个和 LCP 是无关了，不妨设 f(x)=∑i=1xi(x−i+1)[i≤k1][j≤k2]f(x)=\sum\limits_{i=1}^x i(x-i+1)[i \le k1][j\le k2]f(x)=i=1∑x​i(x−i+1)[i≤k1][j≤k2]，那么拆贡献有：
ans=∑1≤i≤j≤n[si−1≠sj−1]f(LCP⁡(rki,rkj))=∑k=1nf(k)∑1≤i&lt;j≤n[LCP⁡(rki,rkj)=k,si−1≠j−1]=∑k=1nf(k)∑1≤i&lt;j≤n[LCP⁡(i,j)=k,ssai−1≠saj−1]\begin{aligned}
ans&amp;  = \sum_{1\le i \le j \le n}[s_{i-1}\neq s_{j-1}]f(\operatorname{LCP}(rk_i,rk_j)) \\
 
&amp; = \sum_{k=1}^n f(k)\sum_{1\le i &lt; j \le n}[\operatorname{LCP}(rk_i,rk_j)=k,s_{i-1}\neq _{j-1}] \\
&amp; = \sum_{k=1}^n f(k)\sum_{1\le i &lt; j \le n}[\operatorname{LCP}(i,j)=k,s_{sa_i-1}\neq _{sa_j -1}] \\
\end{aligned}
ans​=1≤i≤j≤n∑​[si−1​=sj−1​]f(LCP(rki​,rkj​))=k=1∑n​f(k)1≤i&lt;j≤n∑​[LCP(rki​,rkj​)=k,si−1​=j−1​]=k=1∑n​f(k)1≤i&lt;j≤n∑​[LCP(i,j)=k,ssai​−1​=saj​−1​]​
前面和后面都很好处理，中间的 LCP 用单调栈即可。
#include&lt;bits/stdc++.h&gt;#define int long long#define ull unsigned long longusing namespace std;constexpr int MN=1e6+15;int k1,k2,n,st[MN],top,w[MN];ull ans,f[MN];string s;namespace SA&#123;    int len,sa[MN],x[MN],y[MN],rk[MN],c[MN],ht[MN];    template&lt;typename vct&gt;    void getsa(vct &amp;s)&#123;        int m=40000;        len=s.size();        s.insert(s.begin(),0);        for(int i=1;i&lt;=len;i++)&#123;            x[i]=s[i];            ++c[x[i]];        &#125;        for(int i=1;i&lt;=m;i++) c[i]+=c[i-1];        for(int i=len;i&gt;=1;i--) sa[c[x[i]]--]=i;        for(int k=1;k&lt;=len;k&lt;&lt;=1)&#123;            int num=0;            for(int i=len-k+1;i&lt;=len;i++) y[++num]=i;            for(int i=1;i&lt;=len;i++)&#123;                if(sa[i]&gt;k) y[++num]=sa[i]-k;            &#125;            for(int i=1;i&lt;=m;i++) c[i]=0;            for(int i=1;i&lt;=len;i++) c[x[i]]++;            for(int i=1;i&lt;=m;i++) c[i]+=c[i-1];            for(int i=len;i&gt;=1;i--) sa[c[x[y[i]]]--]=y[i],y[i]=0;            swap(x,y);            num=1,x[sa[1]]=1;            for(int i=2;i&lt;=len;i++)&#123;                if(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+k]==y[sa[i-1]+k]) x[sa[i]]=num;                else x[sa[i]]=++num;            &#125;            if(num==len) break;            m=num;        &#125;        for(int i=1;i&lt;=len;i++) rk[sa[i]]=i;        for(int i=1,k=0;i&lt;=len;i++)&#123;            if(k) k--;            int j=sa[rk[i]-1];            while(i+k&lt;=len&amp;&amp;j+k&lt;=len&amp;&amp;s[i+k]==s[j+k]) k++;            ht[rk[i]]=k;        &#125;    &#125;&#125; using namespace SA;ull calc1(int x)&#123;    return x*(x+1)/2;&#125;ull calc2(int x)&#123;    return x*(x+1)*(x+x+1)/6;&#125;ull solve(char lim) &#123;    ull cur = 0, ans = 0;    top=0;    memset(w,0,sizeof(w));    for(int i = 2; i &lt;= n; i++) &#123;        int wid = lim ? s[sa[i - 1] - 1] == lim : 1;        while(top &amp;&amp; st[top] &gt;= ht[i]) &#123;            cur -= 1ull * w[top] * f[st[top]];            wid += w[top--];        &#125;        st[++top] = ht[i];        w[top] = wid;        cur += 1ull * wid * f[ht[i]];        if(lim ? s[sa[i] - 1] == lim : 1) &#123;            ans += cur;        &#125;    &#125;    return ans;&#125;signed main()&#123;    cin&gt;&gt;s&gt;&gt;k1&gt;&gt;k2;    n=s.length();    for(int i=1;i&lt;=n;i++)&#123;        int l=max(1ll,i-k2+1),r=min(i,k1);        if(l&gt;r) break;        f[i]=(calc1(r)-calc1(l-1))*(i+1)-(calc2(r)-calc2(l-1));    &#125;    getsa(s);    ans+=solve(0);    for(int i=0;i&lt;26;i++) ans-=solve(&#x27;a&#x27;+i);    cout&lt;&lt;ans;    return 0;&#125;
 练习
CF1073G
[HAOI2016]找相同字符
 4.3 SA加速匹配和查询子串
 P3763 [TJOI2017] DNA
由于不重合的字符很少，考虑暴力枚举不重合的子串起始位置，让后从这个位置往后跳最长公共前缀的长度，这样如果枚举的位置正确也能保证后续位置也能递推正确。现在问题转化为如何快速求解 LCP，用二分加哈希或 SA 加 ST 表即可实现。
二分加哈希：
#include&lt;bits/stdc++.h&gt;#define ull unsigned long longusing namespace std;constexpr ull base=13131;constexpr int MN=1e5+15;int lena,lenb;ull a[MN],b[MN],pw[MN];string sa,sb;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++) pw[i]=pw[i-1]*base;&#125;ull hsha(int l,int r)&#123;    return a[r]-a[l-1]*pw[r-l+1];&#125;ull hshb(int l,int r)&#123;    return b[r]-b[l-1]*pw[r-l+1];&#125;bool binfind(int x)&#123;    int st=1,r=x+lenb-1,ed=lenb;    for(int i=1;i&lt;=3;i++)&#123;        int lt=-1,rt=ed-st+2,ret=0;        while(lt+1&lt;rt)&#123;            int mid=(lt+rt)&gt;&gt;1;            if(hsha(x,x+mid-1)==hshb(st,st+mid-1)) lt=mid;            else rt=mid;        &#125;        x+=lt+1;        st+=lt+1;        if(st&gt;ed) return 1;    &#125;    return hsha(x,x+lenb-st)==hshb(st,ed);&#125;void solve()&#123;    cin&gt;&gt;sa&gt;&gt;sb;    lena=sa.length(),lenb=sb.length();    if(lena&lt;lenb)&#123;        cout&lt;&lt;0&lt;&lt;&#x27;\n&#x27;;        return;    &#125;    sa=&quot; &quot;+sa;    sb=&quot; &quot;+sb;    for(int i=1;i&lt;=lena;i++)&#123;        a[i]=a[i-1]*base+sa[i];    &#125;    for(int i=1;i&lt;=lenb;i++)&#123;        b[i]=b[i-1]*base+sb[i];    &#125;    int ans=0;    for(int i=1;i&lt;=lena-lenb+1;i++)&#123;        if(binfind(i)) ans++;    &#125;    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    init();    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
SA：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,m;string s,t;namespace SA&#123;// 省略    int lcp(int i,int j)&#123;        if((i=rk[i])&gt;(j=rk[j])) swap(i,j);        int d=__lg(j-(i++));        return min(st[d][i],st[d][j-(1&lt;&lt;d)+1]);    &#125;&#125;using namespace SA;void solve()&#123;    cin&gt;&gt;s&gt;&gt;t;    n=s.length(),m=t.length();    s=&quot; &quot;+s,t=&quot; &quot;+t;    string sst;    for(int i=1;i&lt;=n;i++)&#123;        sst.push_back(s[i]);    &#125;    sst.push_back(&#x27;#&#x27;);    for(int i=1;i&lt;=m;i++)&#123;        sst.push_back(t[i]);    &#125;    getsa(sst);    initst();    int ret=0;    for(int i=1;i&lt;=n-m+1;i++)&#123;        int curs=i,curt=1;        for(int j=1;j&lt;=4;j++)&#123;            if(curt&lt;=m)&#123;                int lcpl=lcp(curs,curt+n+1);                curs+=lcpl+(j&lt;4);                curt+=lcpl+(j&lt;4);            &#125;        &#125;        ret+=curt&gt;m;    &#125;    cout&lt;&lt;ret&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 SP1812 LCS2
2.2 有讲两种做法。
现在我们要求在主串 TTT 中寻找子串 SSS，我们先建出 TTT 的后缀数组，让后查找子串 SSS。若子串在 TTT 中出现，它必定是 TTT 的一些后缀的前缀，我们可以通过在后缀数组中二分 SSS 来实现。比较子串 SSS 和后缀的时间复杂度是 O(∣S∣)O(|S|)O(∣S∣) 的，那么总时间复杂度是 O(∣S∣log⁡∣T∣)O(|S| \log |T|)O(∣S∣log∣T∣) 的，注意，如果该子串在 TTT 中出现了多次，每次出现都是在后缀数组数组中相邻的。因此出现次数可以通过再次二分找到，输出每次出现的位置也很轻松。以下是 SA 的实现：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=3e6+15;int col[MN],vis[MN],L[MN],R[MN],sum,tot,ans;string s,str;deque&lt;int&gt; q;namespace SA&#123;// 省略&#125;using namespace SA;void add(int x)&#123;    if(col[x]==0) return;    vis[col[x]]++;    if(vis[col[x]]==1) sum++;&#125;void del(int x)&#123;    if(col[x]==0) return;    vis[col[x]]--;    if(vis[col[x]]==0) sum--;&#125;int main()&#123;    while(cin&gt;&gt;s)&#123;        tot++;        L[tot]=str.length()+1;        str=str+s;        R[tot]=str.length();        str.push_back(tot);    &#125;    getsa(str);    for(int i=1;i&lt;=tot;i++)&#123;        for(int j=L[i];j&lt;=R[i];j++)&#123;            col[rk[j]]=i;        &#125;    &#125;    add(1);    for(int r=2,l=1;r&lt;=len;r++)&#123;        while(!q.empty()&amp;&amp;ht[q.back()]&gt;=ht[r]) q.pop_back();        q.push_back(r);        add(r);        if(sum==tot)&#123;            while(tot==sum&amp;&amp;l&lt;r) del(l++);            add(--l);        &#125;        while(!q.empty()&amp;&amp;q.front()&lt;=l) q.pop_front();        if(tot==sum) ans=max(ans,ht[q.front()]);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 P5028 Annihilate
把字符串加分隔符连接在一起，让后跑后缀数组求 hththt，原本命题我们可以直接建立 st 秒了，但是空间炸缸了。但是时间复杂度启示我们 O(nm)O(nm)O(nm)？
考虑计算 LCP 的过程就是一段 hththt 求最小值的过程，考虑贪心，越近越优，每一个不同的字符串只需要保存目前 hththt 的最小值即可，这个值即是最近也是最小值中最大的。
放这个题就是为了看见 SA 不要僵化思路，这种一般是学多做题多了导致的 www。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=3e6+15,MK=55;int n,pos[MN],minn[MK],ans[MK][MK];vector&lt;int&gt; str;namespace SA&#123;// 省略&#125;using namespace SA;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        for(auto c:s)&#123;            str.push_back(c);            pos[str.size()]=i;        &#125;        str.push_back(1000+i);    &#125;    getsa(str);    for(int i=2;i&lt;=len;i++)&#123;        for(int j=1;j&lt;=n;j++) minn[j]=min(minn[j],ht[i]);        minn[pos[sa[i-1]]]=ht[i];        for(int j=1;j&lt;=n;j++)&#123;            ans[pos[sa[i]]][j]=ans[j][pos[sa[i]]]=max(ans[pos[sa[i]]][j],minn[j]);        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            if(i!=j) cout&lt;&lt;ans[i][j]&lt;&lt;&quot; &quot;;        &#125;        cout&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 P2463 [SDOI2008] Sandy 的卡片
一个序列整体加一个数后与另一个序列相同，其实就是差分数组相同，原因自行思考。
但是若求不相交的两个区间信息，请注意在差分数组上求时应当是相隔一个位置。差分数组中相交或相邻的串在原串中都是相交的。
那么先求差分数组，让后两个差分数组中间加分隔符连起来建立 SA，让后问题转化为求所有子串最长公共子串，考虑二分，只要有 nnn 个 ≥L\ge L≥L 的 hththt 并且这几个都属于不同的串就可以啦。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,lenn[MN],sta[MN],top,a[1145][1145];int pos[MN];bool vis[MN];string s;namespace SA&#123; // 省略&#125;using namespace SA;bool check(int x)&#123;    while(top) vis[sta[top--]]=0;    for(int i=1;i&lt;=len;i++)&#123;        if(ht[i]&lt;x) while(top) vis[sta[top--]]=0;        if(!vis[pos[sa[i]]])&#123;            vis[pos[sa[i]]]=1;            sta[++top]=pos[sa[i]];            if(top==n) return 1;        &#125;    &#125;    return 0;&#125;int main()&#123;    cin&gt;&gt;n;    int l=0,r=1e6,ans=0;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;lenn[i];        for(int j=1;j&lt;=lenn[i];j++)&#123;            cin&gt;&gt;a[i][j];        &#125;        r=min(r,lenn[i]-1);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=2;j&lt;=lenn[i];j++)&#123;            s.push_back(a[i][j]-a[i][j-1]);            pos[s.length()]=i;        &#125;        s.push_back(&#x27;#&#x27;);    &#125;    getsa(s);        while(l&lt;=r)&#123;        int mid=(l+r)&gt;&gt;1;        if(check(mid))&#123;            l=mid+1;            ans=mid;        &#125;else r=mid-1;    &#125;    cout&lt;&lt;ans+1;    return 0;&#125;
 SP220 PHRASES - Relevant Phrases of Annihilation
划分为 2 个子问题：

最长公共子串。
最长且不重叠出现两次及以上的子串。

第一问我们不说，我们考虑第二问如何求解，我们可以对于 hththt 分组，求除在原串中最大坐标和最小左边，判断差值是否大于 lenlenlen 即可。
结合起来就可以啦，时间复杂度 O(Slog⁡S)O(S \log S)O(SlogS)，其中 S=∑∣si∣S=\sum\limits|s_{i}|S=∑∣si​∣。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e6+15;int n,L[MN],R[MN];string s;vector&lt;int&gt; vct;namespace SA&#123;    void clear()&#123;        memset(sa,0,sizeof(sa));        memset(rk,0,sizeof(rk));        memset(ork,0,sizeof(ork));        memset(buc,0,sizeof(buc));        memset(id,0,sizeof(id));        memset(ht,0,sizeof(ht));        memset(st,0,sizeof(st));    &#125;// 省略&#125;using namespace SA;bool check(int x)&#123;    vct.clear();    for(int i=1;i&lt;=len;i++)&#123;        if(ht[i]&lt;x)&#123;            bool flag=true;            for(int j=1;j&lt;=n;j++)&#123;                int mn=MN,mx=0;                for(int p:vct)&#123;                    if(p&lt;L[j]||p&gt;R[j]) continue;                    mn=min(mn,p);                    mx=max(mx,p);                &#125;                if(mx-mn&lt;x)&#123;                    flag=false;                    break;                &#125;            &#125;            if(flag) return true;            vct.clear();        &#125;        vct.push_back(sa[i]);    &#125;    bool flag=true;    for(int j=1;j&lt;=n;j++)&#123;        int mn=MN,mx=0;        for(int p:vct)&#123;            if(p&lt;L[j]||p&gt;R[j]) continue;            mn=min(mn,p);            mx=max(mx,p);        &#125;        if(mx-mn&lt;x)&#123;            flag=false;            break;        &#125;    &#125;    return flag;&#125;void solve()&#123;    cin&gt;&gt;n;    s.clear();    for(int i=1;i&lt;=n;i++)&#123;        string st;        cin&gt;&gt;st;        L[i]=s.length()+1;        R[i]=s.length()+st.length();        s+=st;        s.push_back(&#x27;#&#x27;);        &#125;    getsa(s);    int l=1,r=len,ans=0;    while(l&lt;=r)&#123;        int mid=(l+r)&gt;&gt;1;        if(check(mid)) ans=mid,l=mid+1;        else r=mid-1;    &#125;    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    int T;cin&gt;&gt;T;    while(T--) solve();    return 0;&#125;
 P4143 采集矿石
第一眼看上去好像没什么思路啊 www。考虑发掘性质，从大到小的话，如果我们选取的子串在不断扩大的话，排名会逐渐下降，但重要度因为是求和，所以是单调不减，我们考虑利用冰火战士的思路，两次二分出这个排名和重要度之和的交点，让后我们检查是否符合要求。
现在问题在于如何求某个子串在所有字符串本质不同子串的排名。所有本质不同子串的计算我们之前提到过，也就是：(∑i=1∣S∣n−pi+1)−(∑i=1∣S∣−1∣LCP⁡(pi,pi+1)∣)\left( \sum\limits_{i=1}^{|S|} n-p_{i}+1 \right)-\left(\sum\limits_{i=1}^{|S|-1} |\operatorname{LCP}(p_{i},p_{i+1})| \right)(i=1∑∣S∣​n−pi​+1)−(i=1∑∣S∣−1​∣LCP(pi​,pi+1​)∣)，但是如何求排名，我们考虑对于两个子串 s,ts,ts,t，对于 ttt 其字典序不大于 sss 当且仅当 ttt 是 sss 的前缀或者在去掉 LCP 后第一个字符大于后者。
两个条件，第一个条件对应的后缀排名是一段排名区间 [L,R],(L≤rkl≤R)[L,R],(L\le rk_{l}\le R)[L,R],(L≤rkl​≤R)，满足第二种条件对应的就是 [R+1,n][R+1,n][R+1,n]。因此，求出排名为 [L,n][L,n][L,n] 的后缀本质不同的前缀数量，减去 r−lr-lr−l 重复算上的答案即为所求。求 LLL 考虑二分答案，找不大于 rklrk_{l}rkl​ 的最小排名，使得排名在 [L,rkl][L,rk_{l}][L,rkl​] 之间所有后缀的 LCP 不小于 r−l+1r-l+1r−l+1。通过 SA 加 ST 表即可做到 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e6+15;int n,v[MN],sumh[MN],sumsa[MN];vector&lt;pir&gt; ans;string s;namespace SA&#123; // 省略     // 查询位置为 i 和 位置为 j 的后缀的 LCP    int querylcp(int i,int j)&#123;        int d=__lg(j-(i++));        return min(ST[d][i],ST[d][j-(1&lt;&lt;d)+1]);    &#125;    // 手动查询 ST 表    int queryst(int l,int r)&#123;        int d=__lg(r-l+1);        return min(ST[d][l],ST[d][r-(1&lt;&lt;d)+1]);    &#125;&#125;using namespace SA;int clac(int x,int y)&#123;    int l=1,r=x=rk[x]+1;    while(l+1&lt;r)&#123;        int mid=(l+r)&gt;&gt;1;        if(querylcp(mid,x)&gt;=y) r=mid;        else l=mid;    &#125;    return sumsa[l]-sumh[l+1]-y+1;&#125;signed main()&#123;    cin&gt;&gt;s;    n=s.length();    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;v[i];    &#125;    getsa(s);    initst();    for(int i=n;i&gt;=1;i--)&#123;        sumh[i]=sumh[i+1]+ht[i];        sumsa[i]=sumsa[i+1]+n-sa[i]+1;    &#125;    for(int i=1;i&lt;=n;i++) v[i]+=v[i-1];    for(int i=1;i&lt;=n;i++)&#123;        int l=1,r=n-i+2;        while(l+1&lt;r)&#123;            int mid=(l+r)&gt;&gt;1;            if(clac(i,mid)&gt;=v[i+mid-1]-v[i-1]) l=mid;            else r=mid;        &#125;        if(clac(i,l)==v[i+l-1]-v[i-1])&#123;            ans.push_back(pir(i,i+l-1));        &#125;    &#125;    cout&lt;&lt;ans.size()&lt;&lt;&#x27;\n&#x27;;    for(auto p:ans) cout&lt;&lt;p.first&lt;&lt;&quot; &quot;&lt;&lt;p.second&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 练习
P4081 [USACO17DEC] Standing Out from the Herd P
P6640 [BJOI2020] 封印
P2408 不同子串
P5431
 4.4 对串进行分块操作
 P1117 [NOI2016] 优秀的拆分
显然 AABB 由两个形如 AA 的串拼接起来的，考虑维护两个数组 ai,bia_{i},b_{i}ai​,bi​。其中 aia_{i}ai​ 表示以 iii 结尾有多少个 AA 串，bib_{i}bi​ 表示以 iii 开头有多少个 AA 串，通过乘法原理不难得出 ans=∑i=1n−1aibi+1ans=\sum\limits_{i=1}^{n-1}a_{i}b_{i+1}ans=i=1∑n−1​ai​bi+1​。
现在问题在于如何求解 ai,bia_{i},b_{i}ai​,bi​，这里有一个很妙的 Trick 就是枚举长度，设置关键点求解 a,ba,ba,b。
对于固定的 LLL，若每间隔 LLL 放置一个关键点，则 AA 必然必然恰好经过两个关键点。让后考虑，我们只需要相邻两个关键点往前的 LCS 和往后的 LCP，若 LCS+LCP≥lenLCS+LCP\ge lenLCS+LCP≥len，那么就表示一定存在长度为 lenlenlen 的 AA 串。不难发现，所有经过这两个关键点长度为 lenlenlen 的 AA 串一定是连续的！我们可以找到这个区间，让后用前缀和差分，就可以避免区间修改了。现在问题转化为如何求解 LCS 和 LCP，正反串建立 SA 让后跑 ST 表就可以啦，时间复杂度是枚举 lenlenlen 的调和级数，为 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
从这道题开始，设置关键点变成了经典套路。
下列代码 f→a,g→bf\to a,g\to bf→a,g→b。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int T,f[MN],g[MN];string s;struct SA&#123;    int len,sa[MN],x[MN],y[MN],rk[MN],c[MN],ht[MN],ST[30][MN]; // 省略    // ST表初始化    void initst()&#123;        for(int i=1;i&lt;30;i++)&#123;            for(int j=1;j+(1&lt;&lt;i)-1&lt;=len;j++)&#123;                ST[i][j]=min(ST[i-1][j],ST[i-1][j+(1&lt;&lt;(i-1))]);            &#125;        &#125;    &#125;    // 查询位置为 i 和 位置为 j 的后缀的 LCP    int querylcp(int i,int j)&#123;        if((i=rk[i])&gt;(j=rk[j])) swap(i,j);        int d=__lg(j-(i++));        return min(ST[d][i],ST[d][j-(1&lt;&lt;d)+1]);    &#125;    // 手动查询 ST 表    int queryst(int l,int r)&#123;        int d=__lg(r-l+1);        return min(ST[d][l],ST[d][r-(1&lt;&lt;d)+1]);    &#125;&#125;A,B;void solve()&#123;    cin&gt;&gt;s;    int n=s.length();    A.getsa(s);    A.initst();    reverse(s.begin(),s.end());    B.getsa(s);    B.initst();    for(int i=1;i&lt;=n;i++)&#123;        f[i]=g[i]=0;    &#125;    for(int len=1;len&lt;=(n&gt;&gt;1);len++)&#123;        for(int l=len;l&lt;=n;l+=len)&#123;            int r=l+len,lcp=min(len,A.querylcp(l,r)),lcs=min(len-1,B.querylcp(n-(l-1)+1,n-(r-1)+1));            if(lcp+lcs&gt;=len)&#123;                int cov=lcp+lcs-len+1;                f[r+lcp-cov]++;                f[r+lcp]--;                g[l-lcs+cov]--;                g[l-lcs]++;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=n;i++) f[i]+=f[i-1],g[i]+=g[i-1];    long long ans=0;    for(int i=1;i&lt;n;i++) ans+=1ll*f[i]*g[i+1];    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 SP687 REPEATS - Repeats
借助上面的套路，考虑枚举循环节长度 LLL，每相邻 LLL 个位置放置一个关键点。若某个长度为 kkk 的子串出现 kkk 次，那么恰好跨过 kkk 个关键点。
我们考虑二分 kkk，考虑所有连续 kkk 个关键点 p,p+L,p+2×L,…,p+(k−1)Lp,p+L,p+2\times L,\dots,p+(k-1)Lp,p+L,p+2×L,…,p+(k−1)L，若这些位置的 LCP 加上它们对应所有前缀的 LCS 减去同时覆盖关键点后的长度不小于 LLL，即 LCS+LCP−1≥LLCS+LCP-1\ge LLCS+LCP−1≥L，那么表示出现重复，考虑从小到大用长为 kkk 的块滑字符串，用单调队列维护排名最大值和最小值方便求解 LCS 与 LCP，时间复杂度 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)。
还可以更优化，我们当 LLL 固定的时候，一个大区间一定比任何子区间更优，那么也就表明右指针增加的时候左指针单调不降，考虑双指针代替二分，时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
Alex_wei 的 Sol 3 看不懂 Orz。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN = 5e4 + 5;int n;struct SA &#123;    int len, sa[MN], x[MN], y[MN], rk[MN], c[MN], ht[MN], ST[16][MN];// 省略    int querylcp(int i, int j) &#123;        if((i = rk[i]) &gt; (j = rk[j])) swap(i, j);        int d = __lg(j - (i++));        return min(ST[d][i], ST[d][j - (1 &lt;&lt; d) + 1]);    &#125;&#125; A, B;void solve() &#123;    cin &gt;&gt; n;    string str;    for(int i = 1; i &lt;= n; i++) &#123;        char x;        cin &gt;&gt; x;        str.push_back(x);    &#125;    A.getsa(str);    A.initst();    reverse(str.begin(), str.end());    B.getsa(str);    B.initst();        int ans = 1;    for(int len = 1; len &lt;= n; len++) &#123;        for(int l = len, r = len + len; r &lt;= n; l += len, r += len) &#123;            int lcp = A.querylcp(l, r);            int lcs = B.querylcp(n - r + 1, n - l + 1);            ans = max(ans, (lcp + lcs - 1) / len + 1);        &#125;    &#125;    cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;;&#125;int main() &#123;    ios::sync_with_stdio(false);    cin.tie(nullptr);    int T;    cin &gt;&gt; T;    while(T--) &#123;        solve();    &#125;    return 0;&#125;
 4.5 与DP贪心结合
这里我们是单独介绍一些利用贪心思路和 DP 思路求解的问题。一般来说，这里的问题 SA 不是主角，是起到一个打辅助的作用的。
 CF822E Liar
一个显然的贪心，我们在新选择一个字符串并起来的时候应当尽可能的进行匹配，我们一定会匹配到第一个 kkk 使得 si+k≠tj+ks_{i+k} \neq t_{j+k}si+k​=tj+k​，证明考虑反证法和调整法。
字符串匹配，之前做过一堆 KMP 的题，这里肌肉记忆设 f(i,j)f(i,j)f(i,j) 表示在 sss 匹配前 iii 个字符，匹配 ttt 到 jjj 的位置，选出最少的子串数量。根据数据范围显然会炸缸，注意到 x≤30x\le 30x≤30，考虑经典 Trick：状态互换，设 f(i,j)f(i,j)f(i,j) 表示在 sss 匹配前 iii 个字符，选出子串数 jjj，最多能匹配到 ttt 的哪个位置。对于每个 f(i,j)f(i,j)f(i,j) 可以转移到 f(i+1,j)f(i+1,j)f(i+1,j) 表示不开启匹配，若开启匹配，根据贪心思路，则需要找到 s[i+1,n]s[i+1,n]s[i+1,n] 和 t[f(i,j−1)+1,m]t[f(i,j-1)+1,m]t[f(i,j−1)+1,m] 的最长公共前缀 LLL，令 f(i+L,j)←max⁡(f(i+L,j),f(i,j−1)+L)f(i+L,j) \leftarrow \max(f(i+L,j),f(i,j-1)+L)f(i+L,j)←max(f(i+L,j),f(i,j−1)+L)，求后缀的最长公共前缀是 SA 的拿手好戏，时间复杂度 O(nx+nlog⁡n)O(nx+n \log n)O(nx+nlogn)。
DP 加贪心加 SA，很好的题啊！
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e5+15,MK=35;int f[MN][MK],X,n,m;string s,t,sst;namespace SA&#123;// 省略    int lcp(int i,int j)&#123;        if((i=rk[i])&gt;(j=rk[j])) swap(i,j);        int d=__lg(j-(i++));        return min(st[d][i],st[d][j-(1&lt;&lt;d)+1]);    &#125;    int queryst(int l,int r)&#123;        int d=__lg(r-l+1);        return min(st[d][l],st[d][r-(1&lt;&lt;d)+1]);    &#125;&#125;using namespace SA;int lcpst(int i,int j)&#123;    if(i&gt;n||j&gt;m) return 0;    j+=n+1;    return lcp(i,j);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;s&gt;&gt;m&gt;&gt;t;    sst=s+&#x27;#&#x27;+t;    getsa(sst);    initst();    cin&gt;&gt;X;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=X;j++)&#123;            int L=lcpst(i,f[i][j-1]+1);            f[i+L][j]=max(f[i+L][j],f[i][j-1]+L);            f[i+1][j]=max(f[i+1][j],f[i][j]);        &#125;    &#125;    if(f[n+1][X]==m) cout&lt;&lt;&quot;YES&quot;;    else cout&lt;&lt;&quot;NO&quot;;    return 0;&#125;
 P6095 [JSOI2015] 串分割
有一个贪心的想法就是我们贪心让最大位数最小。那么答案串的长度最多就是 L=⌈nk⌉L=\lceil \dfrac{n}{k} \rceilL=⌈kn​⌉。贪心思路就是能断为 ⌈nk⌉\lceil \dfrac{n}{k} \rceil⌈kn​⌉ 尽量断为 ⌈nk⌉\lceil \dfrac{n}{k} \rceil⌈kn​⌉，不然就断成 ⌈nk⌉−1\lceil \dfrac{n}{k} \rceil-1⌈kn​⌉−1，证明考虑反证法即可。
让后我们考虑如何比较字符串大小，考虑二分排名 rkrkrk，那么从 iii 开始为 ⌈nk⌉/⌈nk⌉−1\lceil \dfrac{n}{k} \rceil / \lceil \dfrac{n}{k} \rceil-1⌈kn​⌉/⌈kn​⌉−1 的串即为后缀 iii 的前缀，又因为前缀的排名严格不大于原串，所以直接比较原后缀的排名与二分的排名即可。
最后要求输出最大值数字串，考虑存下排名的值输出这个排名的后缀长为 ⌈nk⌉\lceil \dfrac{n}{k} \rceil⌈kn​⌉ 的前缀就可以了。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;int n,K;string s;namespace SA&#123;// 省略&#125;using namespace SA;bool check(int mid)&#123;    int len=n/K;    for(int i=1;i&lt;=len;i++)&#123;        int st=i,cnt=0;        for(int j=1;j&lt;=K;j++)&#123;            if(cnt&lt;(n%K)&amp;&amp;rk[st]&lt;=mid)&#123;                st+=len+1;                cnt++;            &#125;else st+=len;        &#125;        if(st-i==n) return 1;    &#125;    return 0;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;K&gt;&gt;s;    if(n%K==0)&#123;        cout&lt;&lt;8;        return 0;    &#125;    s=s+s;    getsa(s);    int l=1,r=2*n;    while(l+1&lt;r)&#123;        int mid=(l+r)&gt;&gt;1;        if(check(mid)) r=mid;        else l=mid;    &#125;    for(int i=1;i&lt;=ceil(n*1.0/K);i++)&#123;        cout&lt;&lt;s[sa[l]+i-1];    &#125;    return 0;&#125;
 4.6 与数据结构或离线算法结合
 SP8093 莫队
先解决如何查一个查询串是多少个模板串的子串。我们考虑将所有模板串用分隔符连接起来跑 SA，那么查询串是一个模板串的子串，在 SA 上的范围表示的是一个区间的形式，这个区间的性质表示为 LCP⁡(si,sj)=len\operatorname{LCP}(s_{i},s_{j})=lenLCP(si​,sj​)=len，这个区间我们可以通过二分找出来左端点右端点。
让后第二个，查询区间颜色数，既然我们已经有了每一个查询串对应的 SA 区间，考虑莫队维护区间颜色数，让后就做完了。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;struct Query&#123;    int l,r,id;&#125;qry[MN];int n,m,qtot,qlen,col[MN],sumc,cnt[MN],ans[MN];vector&lt;int&gt; str;namespace SA&#123;// 省略    // 查询位置为 i 和 位置为 j 的后缀的 LCP    int querylcp(int i,int j)&#123;        int d=__lg(j-(i++));        return min(ST[d][i],ST[d][j-(1&lt;&lt;d)+1]);    &#125;    // 手动查询 ST 表    int queryst(int l,int r)&#123;        int d=__lg(r-l+1);        return min(ST[d][l],ST[d][r-(1&lt;&lt;d)+1]);    &#125;&#125;using namespace SA;bool cmp(Query x,Query y)&#123;    if(x.l/qlen!=y.l/qlen) return x.l&lt;y.l;    return x.r&lt;y.r;&#125;void add(int x)&#123;    cnt[col[x]]++;    if(cnt[col[x]]==1) sumc++;&#125;void del(int x)&#123;    cnt[col[x]]--;    if(!cnt[col[x]]) sumc--;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        string s;        cin&gt;&gt;s;        for(auto c:s)&#123;            str.push_back(c);            col[str.size()]=i;        &#125;        str.push_back(&#x27;z&#x27;+i);    &#125;    getsa(str);    for(int i=1;i&lt;=m;i++)&#123;        int slen,L=1,R=len;        string s;        cin&gt;&gt;s;        slen=s.length();        s=&quot; &quot;+s;        for(int j=1;j&lt;=slen;j++)&#123;            int l=L,r=R;            while(l&lt;=r)&#123;                int mid=(l+r)&gt;&gt;1;                if(str[sa[mid]+j-1]&lt;s[j]) l=mid+1;                else r=mid-1;            &#125;            swap(l,L);            r=R;            while(l&lt;=r)&#123;                int mid=(l+r)&gt;&gt;1;                if(str[sa[mid]+j-1]&lt;=s[j]) l=mid+1;                else r=mid-1;            &#125;            R=r;        &#125;        if(L&lt;=R)&#123;            qry[++qtot]=&#123;L,R,i&#125;;        &#125;    &#125;    qlen=sqrt(len);    sort(qry+1,qry+1+qtot,cmp);    int l=1,r=0;    for(int i=1;i&lt;=qtot;i++)&#123;        while(l&lt;qry[i].l) del(sa[l++]);        while(l&gt;qry[i].l) add(sa[--l]);        while(r&lt;qry[i].r) add(sa[++r]);        while(r&gt;qry[i].r) del(sa[r--]);        ans[qry[i].id]=sumc;    &#125;    for(int i=1;i&lt;=m;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 CF1608G Alphabetic Tree

哈哈其实没有那么多啦，我实现的时候其实也就不到 300 行吧，其实就是板子加板子，只是不过我是晚上写的太困了调了一万年。
因为信息具有可减性，战术将询问差分扫描线，即 Q(u,v,l,r)Q(u,v,l,r)Q(u,v,l,r) 拆为 Q(u,v,1,r)−Q(u,v,1,l−1)Q(u,v,1,r)-Q(u,v,1,l-1)Q(u,v,1,r)−Q(u,v,1,l−1)。
对于后缀数组，查一个查询串是多少个模板串的子串。我们考虑将所有模板串用分隔符连接起来跑 SA，那么查询串是一个模板串的子串，在 SA 上的范围表示的是一个区间的形式，这个区间的性质表示为 LCP⁡(si,sj)=len\operatorname{LCP}(s_{i},s_{j})=lenLCP(si​,sj​)=len，这个区间我们可以通过二分找出来左端点右端点。
那么对于本题来说也是一样的，我们对 sis_isi​ 进行后缀排序，设当前扫描线扫到位置 ppp，则管用的只有 s1→ps_{1\to p}s1→p​ 的后缀。那么对于一次询问 Q(u,v,1,p)Q(u,v,1,p)Q(u,v,1,p) 我们只需要对 u→vu\to vu→v 形成的字符串 t(u,v)t(u,v)t(u,v) 进行上述操作即可，具体的，我们考虑二分排名 kkk，问题转化为判定性问题比较 t(u,v)t(u,v)t(u,v) 和排名为 kkk 的后缀 sss 的大小关系。一般的比较方法就是我们之前所以到过的：两个子串 s,ts,ts,t，对于 ttt 其字典序不大于 sss 当且仅当 ttt 是 sss 的前缀或者在去掉 LCP 后第一个字符大于后者。
但是本题上树了，我们必须要考虑哈希求解，那么这样的话我们必须求解出 s[1→len]s[1\to len]s[1→len] 的哈希值，以及 u→vu\to vu→v 长度为 lenlenlen 的前缀的哈希值，后者要树上倍增，树上倍增加二分时间复杂度 O(qlog⁡3n)O(q \log^3 n)O(qlog3n)，改造成倍增二分 O(qlog⁡2n)O(q \log^2 n)O(qlog2n) 即可通过。
巨大码农，代码。
 [P4094 HEOI2016字符串]
又是最长公共子串，好烦啊~
直接二分长度，让后问题转化为判定性问题，那么一个长度可行当且仅当：

开头在 [a,b−mid+1][a,b-mid+1][a,b−mid+1]
LCP(s,c)⁡≥mid\operatorname{LCP(s,c)}\ge midLCP(s,c)≥mid，其中 ccc 为题目中 s[c→d]s[c\to d]s[c→d]。

那么问题转化为询问满足以上两个条件的后缀 sufksuf_{k}sufk​ 的个数是否大于 000，同时子串出现次数前面提到好多次了，一定是在后缀数组上连续的区间，二分左端点右端点即可，现在两个问题都是静态区间询问，主席树做即可。
我主席树又写错了，希望大家认真实现，我已经做麻了呜呜呜。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;int n,m;string s;struct Segment&#123;#define ls t[p].lson#define rs t[p].rson        struct Node&#123;        int lson,rson,val;    &#125;t[MN*20+1145];    int rt[MN],tot;    int insert(int lst,int l,int r,int x)&#123;        int p=++tot;        t[p]=t[lst];        t[p].val++;        if(l==r) return p;        int mid=(l+r)&gt;&gt;1;        if(x&lt;=mid) t[p].lson=insert(t[lst].lson,l,mid,x);        else t[p].rson=insert(t[lst].rson,mid+1,r,x);        return p;    &#125;    int query(int u,int v,int l,int r,int fl,int fr)&#123;        if(l&gt;=fl&amp;&amp;r&lt;=fr)&#123;            return t[v].val-t[u].val;        &#125;        int mid=(l+r)&gt;&gt;1,ret=0;        if(mid&gt;=fl) ret+=query(t[u].lson,t[v].lson,l,mid,fl,fr);        if(mid&lt;fr) ret+=query(t[u].rson,t[v].rson,mid+1,r,fl,fr);        return ret;    &#125;    int query(int u,int v,int l,int r)&#123;        return query(rt[u-1],rt[v],1,n,l,r);    &#125;#undef ls#undef rs&#125;sg;namespace SA&#123;    int len,sa[MN],x[MN],y[MN],rk[MN],c[MN],ht[MN],ST[30][MN]; // 省略    // ST表初始化    void initst()&#123;        for(int i=1;i&lt;30;i++)&#123;            for(int j=1;j+(1&lt;&lt;i)-1&lt;=len;j++)&#123;                ST[i][j]=min(ST[i-1][j],ST[i-1][j+(1&lt;&lt;(i-1))]);            &#125;        &#125;    &#125;    // 查询位置为 i 和 位置为 j 的后缀的 LCP    int querylcp(int i,int j)&#123;        int d=__lg(j-(i++));        return min(ST[d][i],ST[d][j-(1&lt;&lt;d)+1]);    &#125;    // 手动查询 ST 表    int queryst(int l,int r)&#123;        int d=__lg(r-l+1);        return min(ST[d][l],ST[d][r-(1&lt;&lt;d)+1]);    &#125;&#125;using namespace SA;bool check(int x,int a,int b,int c)&#123;    int l=1,r=rk[c],L,R;    while(l&lt;r)&#123;        int mid=(l+r)&gt;&gt;1;        if(querylcp(mid,rk[c])&lt;x) l=mid+1;        else r=mid;    &#125;    L=r;    l=rk[c],r=n;    while(l&lt;r)&#123;        int mid=(l+r+1)&gt;&gt;1;        if(querylcp(rk[c],mid)&lt;x) r=mid-1;        else l=mid;    &#125;    R=r;    return sg.query(L,R,a,b-x+1)&gt;0;&#125;void solve(int a,int b,int c,int d)&#123;    int l=0,r=min(b-a+1,d-c+1);    while(l&lt;r)&#123;        int mid=(l+r+1)&gt;&gt;1;        if(check(mid,a,b,c)) l=mid;        else r=mid-1;    &#125;    cout&lt;&lt;r&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;;    getsa(s);    initst();    for(int i=1;i&lt;=n;i++)&#123;        sg.rt[i]=sg.insert(sg.rt[i-1],1,n,sa[i]);    &#125;    while(m--)&#123;        int a,b,c,d;        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;        solve(a,b,c,d);    &#125;    return 0;&#125;
 P2336 [SCOI2012] 喵星球上的点名
将姓和名用分隔符连接，问题相当于给定 nnn 个文本串和 mmm 个模式串，对每个文本串求出作为其子串的模式串数量，这是 AC 自动机应用，但是字符集太大了不太好做。
将所有文本串用分隔符后建后缀数组，对每个模式串求出以其为前缀的排名区间，这个讲过 100 万遍了不再重复。第一位就是问区间颜色数，考虑离线下来跑莫队或者扫描线 BIT，第二问相当于对每种颜色查询与其有交的区间数。对每个区间和每个颜色在第一个位置统计答案，则每个位置对其颜色贡献在左端点落一个区间，右端点落另一端区间的区间数量，这是二位数点，还是扫描线 BIT。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int N=1e6+15, INF=1e9;int nn, q, n, m=400000;int sa[N], ra[N], h[N], t1[N], t2[N], c[N];int st[20][N], lg[N];int s[N], col[N], hd[N], len[N], bu[N];int pre[N], ans1[N], ans2[N];int lp[N]; struct Query &#123; int id, l, r; &#125; qry[N];struct BIT &#123;    int t[N];        void clear() &#123;        memset(t, 0, sizeof(t));    &#125;        void upd(int i, int v) &#123;        if (i) for (; i&lt;=n; i+=i&amp;-i) t[i] += v;    &#125;        int query(int i) &#123;        int res = 0;        for (; i; i-=i&amp;-i) res += t[i];        return res;    &#125;        int query(int l, int r) &#123;        return query(r) - query(l-1);    &#125;&#125; bit1, bit2;void getsa() &#123;// 省略&#125;void geth() &#123;// 省略&#125;void initST() &#123;// 省略&#125;int getmin(int a, int b) &#123;    if (a == b) return INF;    if (a &gt; b) swap(a, b);    int d = lg[b-(a++)];    return min(st[d][a], st[d][b-(1&lt;&lt;d)+1]);&#125;bool cmp(Query a, Query b) &#123;    return a.r &lt; b.r;&#125;int main() &#123;    ios::sync_with_stdio(0); cin.tie(0);    cin &gt;&gt; nn &gt;&gt; q;    int x, c = 10000;    for (int i=1; i&lt;=nn; ++i) &#123;        for (int j=0; j&lt;2; ++j) &#123;            int len; cin &gt;&gt; len;            while (len--) &#123;                cin &gt;&gt; x;                s[++n] = x;                col[n] = i;            &#125;            s[++n] = ++c;        &#125;    &#125;    for (int i=1; i&lt;=q; ++i) &#123;        cin &gt;&gt; len[n+1];        hd[n+1] = i;        for (int j=len[n+1]; j--; ) &#123;            cin &gt;&gt; x;            s[++n] = x;            col[n] = -i;        &#125;        s[++n] = ++c;    &#125;    getsa();    geth();    initST();    for (int i=1; i&lt;=n; ++i) &#123;        if (col[sa[i]] &gt; 0) &#123;            pre[i] = bu[col[sa[i]]];            bu[col[sa[i]]] = i;        &#125;        if (hd[i]) &#123;            qry[hd[i]].id = hd[i];            int l=1, r=ra[i];            while (l &lt; r) &#123;                int mi = (l+r)&gt;&gt;1;                if (getmin(mi, ra[i]) &gt;= len[i]) r = mi;                else l = mi+1;            &#125;            qry[hd[i]].l = lp[hd[i]] = l;            l = ra[i], r = n;            while (l &lt; r) &#123;                int mi = (l+r+1)&gt;&gt;1;                if (getmin(ra[i], mi) &gt;= len[i]) l = mi;                else r = mi-1;            &#125;            qry[hd[i]].r = r;        &#125;    &#125;    sort(qry+1, qry+q+1, cmp);    sort(lp+1, lp+q+1);    for (int i=1, j=1, k=1; i&lt;=n; ++i) &#123;        for (; j&lt;=q &amp;&amp; lp[j]==i; ++j) bit2.upd(i, 1);        if (col[sa[i]] &gt; 0) &#123;            ans2[col[sa[i]]] += bit2.query(i) - bit2.query(pre[i]);            bit1.upd(i, 1);            bit1.upd(pre[i], -1);        &#125;        for (; k&lt;=q &amp;&amp; qry[k].r==i; ++k) &#123;            ans1[qry[k].id] = bit1.query(qry[k].l, qry[k].r);            bit2.upd(qry[k].l, -1);        &#125;    &#125;    for (int i=1; i&lt;=q; ++i) cout &lt;&lt; ans1[i] &lt;&lt; &quot;\n&quot;;    for (int i=1; i&lt;=nn; ++i) cout &lt;&lt; ans2[i] &lt;&lt; &quot; &quot;;    return 0;&#125;
 4.7 与其他结合
 CF1654F Minimal String Xoration
关键性质：位运算在每一位独立。
设 f(i,d)f(i,d)f(i,d) 表示 sss 下表异或 iii 得到字符串的前 2d2^d2d 位，那么有 f(i,d+1)=f(i,d)+f(i⊕2d,d)f(i,d+1)=f(i,d)+f(i\oplus 2^d,d)f(i,d+1)=f(i,d)+f(i⊕2d,d)。类似于后缀排序，设 rk(i,d)rk(i,d)rk(i,d) 表示 f(i,d)f(i,d)f(i,d) 在所有 f(j,d)(0≤j≤2n)f(j,d)(0\le j \le 2^n)f(j,d)(0≤j≤2n) 中的排名，则 p(i,d+1)p(i,d+1)p(i,d+1) 就是二元组 (p(i,d),p(i⊕2d,d))(p(i,d),p(i\oplus 2^d ,d))(p(i,d),p(i⊕2d,d)) 在所有二元组 (p(j,d),p(j⊕2d,d))(p(j,d),p(j \oplus 2^d,d))(p(j,d),p(j⊕2d,d)) 中的排名。
倍增计数排序 O(2nn)O(2^n n)O(2nn) 即可。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,m,v,a[MN],b[MN],c[MN];string s;bool cmp(int x,int y)&#123;    if(b[x]==b[y]) return b[x^v]&lt;b[y^v];    return b[x]&lt;b[y];&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;s;    m=1&lt;&lt;n;    for(int i=0;i&lt;m;i++) a[i]=i,b[i]=s[i]-&#x27;a&#x27;;    sort(a,a+m,cmp);    for(int i=1;i&lt;=n;i++)&#123;        v=(1&lt;&lt;(i-1));        sort(a,a+m,cmp);        int cnt=0;        for(int j=0;j&lt;m;j++)&#123;            if(j==0||cmp(a[j-1],a[j])) c[a[j]]=++cnt;             else c[a[j]]=cnt;        &#125;        for(int j=0;j&lt;m;j++) b[j]=c[j];    &#125;    for(int i=0;i&lt;m;i++) cout&lt;&lt;s[i^a[0]];&#125;
 GYM102803E Everybody Lost Somebody
给同学做了，好题。
给出 SA 数组和 Height 数组我们能得到什么信息，具体来说：

对于 2≤i≤n2\le i \le n2≤i≤n，有 s[sai−1]≤s[sai]s[sa_{i-1}]\le s[sa_{i}]s[sai−1​]≤s[sai​]。更进一步，若 rksa(i−1)+1&gt;rksa(i)+1rk_{sa(i-1)+1}&gt;rk_{sa(i)+1}rksa(i−1)+1​&gt;rksa(i)+1​，则必须有 s[sai−1]&lt;s[sai]s[sa_{i-1}] &lt; s[sa_{i}]s[sai−1​]&lt;s[sai​]。
对于 2≤i≤n2\le i \le n2≤i≤n，对于 0≤j≤hti0\le j \le ht_{i}0≤j≤hti​，有 s[sai−1+j]≤s[sai+j]s[sa_{i-1}+j]\le s[sa_{i}+j]s[sai−1​+j]≤s[sai​+j]。更进一步，若 sai−1+hti≤nsa_{i-1}+ht_{i}\le nsai−1​+hti​≤n，则必须有 s[sai−1+hti]&lt;s[sai+hti]s[sa_{i-1}+ht_{i}] &lt; s[sa_{i}+ht_{i}]s[sai−1​+hti​]&lt;s[sai​+hti​]。

对于 hti≠−1ht_{i}\neq -1hti​=−1，枚举 j∈[0,hti)j\in [0,ht_{i})j∈[0,hti​)，则 s[sai+j]=s[sai+1+j]s[sa_{i}+j]=s[sa_{i+1}+j]s[sai​+j]=s[sai+1​+j] 且 s[sai+hti]&lt;s[sai+1+hti]s[sa_{i}+ht_{i}]&lt;s[sa_{i+1}+ht_{i}]s[sai​+hti​]&lt;s[sai+1​+hti​]。我们可以对于等于并查集缩点，小于连边跑拓扑即可。
现在考虑 hti=−1ht_{i}=-1hti​=−1 的情况，此时对于 sai,sai+1sa_{i},sa_{i+1}sai​,sai+1​ 的LCP 没有限制，而唯一的限制在于 sufsa(i)&lt;sufsa(i+1)suf_{sa(i)}&lt;suf_{sa(i+1)}sufsa(i)​&lt;sufsa(i+1)​，这对 s[sai],s[sai+1]s[sa_{i}],s[sa_{i+1}]s[sai​],s[sai+1​] 提出了要求。当 rk(sai+1)&lt;rk(sai+1+1)rk(sa_{i}+1)&lt;rk(sa_{i+1}+1)rk(sai​+1)&lt;rk(sai+1​+1) 时，s[sai]s[sa_i]s[sai​] 只要不大于 s[sai+1]s[sa_{i+1}]s[sai+1​]，否则 s[sai]s[sa_i]s[sai​] 需要小于s[sai+1]s[sa_{i+1}]s[sai+1​]。还是拓扑排序，时间复杂度 O(n2)O(n^2)O(n2)。
进一步可以发现，只要在合并的时候保持后缀大小顺序的连边，就可以通过了。时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)，魏老师有 O(n)O(n)O(n) 看不懂 qwq。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=5200;int n,sa[MN],rk[MN],pre[MN],ht[MN];char ans[MN];vector&lt;int&gt; G[MN];int root(int x)&#123;    if(pre[x]==x) return pre[x];    else return pre[x]=root(pre[x]);&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;sa[i];        rk[sa[i]]=i;        pre[i]=i;    &#125;    for(int i=2;i&lt;=n;i++)&#123;        cin&gt;&gt;ht[i];    &#125;    for(int i=2;i&lt;=n;i++)&#123;        if(ht[i]==-1)&#123;            int x=sa[i-1]+1,y=sa[i]+1;            if(rk[x]&gt;rk[y]) G[sa[i]].push_back(sa[i-1]);         &#125;        else&#123;            int x=sa[i-1],y=sa[i];            for(int j=1;j&lt;=ht[i];j++)&#123;                pre[root(x+j-1)]=pre[root(y+j-1)];            &#125;            if(x+ht[i]&lt;=n) G[y+ht[i]].push_back(x+ht[i]);        &#125;    &#125;    ans[sa[1]]=&#x27;a&#x27;;    for(int i=2;i&lt;=n;i++)&#123;        ans[sa[i]]=ans[sa[i-1]];        for(auto v:G[sa[i]])&#123;            if(ans[v]+1&gt;ans[sa[i]]) ans[sa[i]]=ans[v]+1;        &#125;        for(int j=1;j&lt;n;j++)&#123;            if(root(sa[j])==root(sa[i])) ans[sa[j]]=ans[sa[i]];        &#125;    &#125;    for(int i=1;i&lt;=n;i++) cout&lt;&lt;ans[i];    return 0;&#125;
 5. 后缀数组变形-树上后缀数组
P5353
可以参考 STARSczy题解的思路，这里我就不再详细展开了（打字太累了）
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,fa[MN],rk[MN],c[MN],sa[MN],x[MN],y[MN],tmp[MN];string s;vector&lt;int&gt; adj[MN];namespace SAonTree&#123;    void dfs(int u)&#123;        rk[u]+=c[rk[u]]++;        sort(adj[u].begin(),adj[u].end());        for(int v:adj[u]) dfs(v);    &#125;    void getsa(string s)&#123;        int len=s.length();        memset(c,0,sizeof(c));        for(int i=1;i&lt;=len;i++) c[s[i-1]+1]++;        for(int i=1;i&lt;=1000;i++) c[i]+=c[i-1];        for(int i=1;i&lt;=len;i++) rk[i]=c[s[i-1]]+1;        for(int w=0;w&lt;=__lg(len);w++)&#123;            memset(c,0,sizeof(c));            memset(tmp,0,sizeof(tmp));            for(int i=1;i&lt;=len;i++)&#123;                x[i]=rk[i];                y[i]=rk[fa[i]];                c[y[i]+1]++;            &#125;            for(int i=1;i&lt;=len;i++) c[i]+=c[i-1];            for(int i=1;i&lt;=len;i++) tmp[++c[y[i]]]=i;            memset(c,0,sizeof(c));            for(int i=1;i&lt;=len;i++) rk[tmp[i]]+=c[x[tmp[i]]]++;            for(int i=1;i&lt;=len;i++) sa[rk[i]]=i;            for(int i=1;i&lt;=len;i++)&#123;                if(x[sa[i-1]]==x[sa[i]] &amp;&amp; y[sa[i-1]]==y[sa[i]])                    rk[sa[i]]=rk[sa[i-1]];            &#125;            for(int i=len;i&gt;=1;i--) fa[i]=fa[fa[i]];        &#125;                memset(c,0,sizeof(c));        dfs(1);        for(int i=1;i&lt;=len;i++) sa[rk[i]]=i;    &#125;&#125;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    cin&gt;&gt;n;    for(int i=2;i&lt;=n;i++)&#123;        cin&gt;&gt;fa[i];        adj[fa[i]].push_back(i);    &#125;    cin&gt;&gt;s;    SAonTree::getsa(s);    for(int i=1;i&lt;=n;i++) cout&lt;&lt;sa[i]&lt;&lt;&quot; &quot;;    return 0;&#125;
例题：
P5346
假设我们求出来了 nnn 个人的排名。

操作 1：O(1)O(1)O(1) 回答。
操作 2：考虑主席树求第 kkk 小，只需要在节点的父亲版本上更新即可。O(log⁡n)O(\log n)O(logn) 回答
操作 3：按照 DFN 序更新即可。O(log⁡n)O(\log n)O(logn) 回答。
而排名求解利用树上后缀数组即可：

#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e6+15;int n,q,fa[MN],a[MN],b[MN],tot;vector&lt;int&gt; adj[MN],s;struct Segment&#123;#define ls t[p].lson#define rs t[p].rson    struct Node&#123;        int lson,rson,val;    &#125;t[MN*20+1145];    int tot,rt[MN];    int insert(int lst,int l,int r,int x)&#123;        int p=++tot;        t[p]=t[lst];        t[p].val+=1;        if(l==r) return p;        int mid=(l+r)&gt;&gt;1;        if(mid&gt;=x) ls=insert(t[lst].lson,l,mid,x);        else rs=insert(t[lst].rson,mid+1,r,x);        return p;    &#125;    int query(int u,int v,int l,int r,int k)&#123;        if(l==r) return l;        int mid=(l+r)&gt;&gt;1;        int rz=t[t[v].rson].val-t[t[u].rson].val;        if(k&lt;=rz) return query(t[u].rson,t[v].rson,mid+1,r,k);        return query(t[u].lson,t[v].lson,l,mid,k-rz);    &#125;#undef ls#undef rs&#125;sg0,sg1;namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;namespace SAonTree&#123;    int rk[MN],c[MN],tmp[MN],x[MN],y[MN],sa[MN];    void dfs(int u)&#123;        rk[u]+=c[rk[u]]++;        sort(adj[u].begin(),adj[u].end());        for(int v:adj[u]) dfs(v);    &#125;    void getsa(vector&lt;int&gt; s)&#123;        int len=s.size();        memset(c,0,sizeof(c));        for(int i=1;i&lt;=len;i++) c[s[i-1]+1]++;        for(int i=1;i&lt;=5e5;i++) c[i]+=c[i-1];        for(int i=1;i&lt;=len;i++) rk[i]=c[s[i-1]]+1;        for(int w=0;w&lt;=__lg(len);w++)&#123;            memset(c,0,sizeof(c));            memset(tmp,0,sizeof(tmp));            for(int i=1;i&lt;=len;i++)&#123;                x[i]=rk[i];                y[i]=rk[fa[i]];                c[y[i]+1]++;            &#125;            for(int i=1;i&lt;=len;i++) c[i]+=c[i-1];            for(int i=1;i&lt;=len;i++) tmp[++c[y[i]]]=i;            memset(c,0,sizeof(c));            for(int i=1;i&lt;=len;i++) rk[tmp[i]]+=c[x[tmp[i]]]++;            for(int i=1;i&lt;=len;i++) sa[rk[i]]=i;            for(int i=1;i&lt;=len;i++)&#123;                if(x[sa[i-1]]==x[sa[i]] &amp;&amp; y[sa[i-1]]==y[sa[i]])                    rk[sa[i]]=rk[sa[i-1]];            &#125;            for(int i=len;i&gt;=1;i--) fa[i]=fa[fa[i]];        &#125;                memset(c,0,sizeof(c));        dfs(1);        for(int i=1;i&lt;=len;i++) sa[rk[i]]=i;        for(int i=1;i&lt;=n;i++)&#123;            a[i]=rk[i];        &#125;    &#125;&#125;using namespace SAonTree;namespace Tree&#123;    int siz[MN],dfn[MN],dtot;    void dfsTree(int u)&#123;        dfn[u]=++dtot;        siz[u]=1;        sg1.rt[dfn[u]]=sg1.insert(sg1.rt[dfn[u]-1],1,n,a[u]);        for(auto v:adj[u])&#123;            sg0.rt[v]=sg0.insert(sg0.rt[u],1,n,a[v]);            dfsTree(v);            siz[u]+=siz[v];        &#125;    &#125;&#125;using namespace Tree;int main()&#123;    read(n,q);    for(int i=2;i&lt;=n;i++)&#123;        read(fa[i]);        adj[fa[i]].push_back(i);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        read(a[i]);        b[++tot]=a[i];    &#125;    sort(b+1,b+1+tot);    tot=unique(b+1,b+1+tot)-b-1;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=lower_bound(b+1,b+1+tot,a[i])-b;        s.push_back(a[i]);    &#125;    getsa(s);    sg0.rt[1]=sg0.insert(0,1,n,a[1]);    dfsTree(1);    while(q--)&#123;        int op,x,k;        read(op,x);        if(op==1)&#123;            put(n+1-a[x]);        &#125;else if(op==2)&#123;            read(k);            put(sa[sg0.query(0,sg0.rt[x],1,n,k)]);        &#125;else&#123;            read(k);            put(sa[sg1.query(sg1.rt[dfn[x]-1],sg1.rt[dfn[x]+siz[x]-1],1,n,k)]);        &#125;    &#125;    return 0;&#125;
 6. 后言
实际上，我们一些技巧基本都体现了我们开头所提到的增量法与势能分析，通过已求信息逐步推导新信息。一些技巧例如关键点思想或并查集块合并通过将全局问题转化为局部问题，动态问题转化为静态问题。
字符串后缀，是字符串的大杀器，在做题过程中，我们能够体会到后缀独特的性质，能够将我们必须暴力枚举的子串简单化，并且将它的对立面——前缀联系起来，后缀数组这一利器，能够解决大部分的问题，但是，有一些问题是后缀数组所不能解决的。这个时候，就要出动我们的 SAM 啦，敬请期待，字符串终极神器——后缀自动机 - 洛谷专栏。
UPD on 2025.7.7：孩子们，我题全部都做完了，结果练 SAM 发现题单里的题都用后缀数组实现过一遍了，充分证明了 SA 可以替代大部分 SAM。然而不是这样的。
完结撒花！
参考

Oi-Wiki
Alex_wei 的字符串基础及其题解
Hoks 的 P6095 题解
LostKeyToReach 的 P7409 题解
云浅知处的课件（保密）
罗勇军的算法竞赛书
算法竞赛进阶指南
chenly8128 的 P5028 题解
wjyppm1403的 P7361 题解
STARSczy树上后缀数组题解

]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>和哈希与随机赋权哈希</title>
    <url>/posts/c64445da/</url>
    <content><![CDATA[ 1. 定义
和哈希，又称集合哈希。
为什么叫集合哈希呢，集合与序列的不同点在于，集合是无序的，也就是说，序列要求每个位置一一相等，而集合只需要对应的元素出现次数相等即可。
我们引入一个问题：

给定一个长为 nnn 的序列 AAA，每次给出两个长度相等的区间 [l1,r1],[l2,r2][l_{1},r_{1}],[l_{2},r_{2}][l1​,r1​],[l2​,r2​] 里面的数排序后是否完全相等，我们就可以说 [2,3,1,4,5][2,3,1,4,5][2,3,1,4,5] 和 [5,4,3,2,1][5,4,3,2,1][5,4,3,2,1] 是相同的。

这种情况我们很难找到一个数据结构来支持这样的查询操作，我们发现如果称两个区间相同，那么这个区间里的每一个数的出现次数和另外一个区间中这个数的出现次数相同。
我们考虑，只需要次数相同就可以的话，那么也就是说，这哈希值之和我数值具体是多少，而和位置无关，那么两个区间相等的必要条件就是 h(l1,r1)=h(l2,r2)h(l_{1},r_{1})=h(l_{2},r_{2})h(l1​,r1​)=h(l2​,r2​)，现在问题在于如何设计函数使得冲突尽量小。
此时哈希函数以如下表示：
h({A})=∑i=1nh′(ax)h(\left\{ A \right\})=\sum\limits_{i=1}^n h&#x27;(a_{x})
h({A})=i=1∑n​h′(ax​)
那么我们有方法，就是给每一个元素赋值一个随机数 rxr_{x}rx​，让后 h({A})=∑i=1nraxh(\left\{ A \right\})=\sum\limits_{i=1}^n r_{a_{x}}h({A})=i=1∑n​rax​​。只要随机数质量高并且值域大，冲突的概率还是比较小的。当然有的时候会被卡，考虑多做几次即可。
 2. 例题
 Problem #115 - ECNU Online Judge

给一个长度为 nnn 的正整数数列 aia_{i}ai​，问有多少连续子数列，满足每个数字的出现次数均为偶数。

对于一个区间，如果每个出现次数为偶数，那么一定有 ⊕i=lrai=0\oplus_{i=l}^r a_{i}=0⊕i=lr​ai​=0，但是这并不代表出现次数一定为偶数，考虑给每个 aia_{i}ai​ 随机赋值，这样进行操作即可。
现在问题转化为当前位置 iii 有多少前缀异或和等于 preprepre，其中 preprepre 表示当前前缀异或，直接扫一遍就可以了。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3e5+15;int n,a[MN],ans,st;mt19937 mt;map&lt;int,int&gt; mp,cnt;signed main()&#123;    mt.seed(time(0));    cin&gt;&gt;n;    st=mt();    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        if(!mp.count(a[i])) mp[a[i]]=(st+=mt());        a[i]=mp[a[i]];    &#125;    int pre=0;    cnt[0]=1;    for(int i=1;i&lt;=n;i++)&#123;        pre^=a[i];        ans+=cnt[pre];        cnt[pre]++;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 [CSP-S 2022] 星战
给定一个 nnn 个点 mmm 条边的有向图，支持四种操作：

删除某条边；
删除某个点的所有入边；
恢复某条边；
恢复某个点的所有入边。

每次操作后询问当前图是否满足：

所有点出度均为 1；
所有点都处于一个环中（即基环内向树森林，每个连通块恰有一个环）。

我们考虑，这个反击图是内向基环树森林，利用性质 所有点出度均为 1。那么既然是有向图，其实只要满足出度都为 1，就能判断。
暴力维护出度显然是 O(nm)O(nm)O(nm)。
我们发现，维护出度是很难受的，因为删入边你还需要把遍历边才能把入边全部标记上。但是维护入度很好做啊，我们不妨令原图节点 uuu 的入度为 g(u)g(u)g(u)，而修改后的出度为 c(u)c(u)c(u)，初始情况下 g(u)=c(u)g(u)=c(u)g(u)=c(u)，而对于这四种操作有：

op=1,c(u)←c(u)−1op=1,c(u)\leftarrow c(u)-1op=1,c(u)←c(u)−1。
op=2,c(u)←0op=2,c(u)\leftarrow 0op=2,c(u)←0。
op=3,c(u)←c(u)+1op=3,c(u)\leftarrow c(u)+1op=3,c(u)←c(u)+1。
op=4,c(u)←g(u)op=4,c(u)\leftarrow g(u)op=4,c(u)←g(u)。

可以发现，一张图中的出度之和与入度之和是相等的，问题转化为判断和入度和和出度和为 nnn，但是这是必要条件，我们不能推出每个节点的出度均为 111，但是我们利用和哈希就可以做到。
对于每一个节点 uuu，我们不妨给他随机赋值 h(u)h(u)h(u)，我们令 g(v)=∑(u,v)∈Eh(u)g(v)=\sum\limits_{(u,v)\in E} h(u)g(v)=(u,v)∈E∑​h(u)，我们可以有新的操作：

op=1,c(u)←c(u)−h(u)op=1,c(u)\leftarrow c(u)-h(u)op=1,c(u)←c(u)−h(u)。
op=2,c(u)←0op=2,c(u)\leftarrow 0op=2,c(u)←0。
op=3,c(u)←c(u)+h(u)op=3,c(u)\leftarrow c(u)+h(u)op=3,c(u)←c(u)+h(u)。
op=4,c(u)←g(u)op=4,c(u)\leftarrow g(u)op=4,c(u)←g(u)。

维护 ∑c(u)\sum\limits c(u)∑c(u) 即可，如果有 ∑c(u)=∑h(u)\sum\limits c(u)=\sum\limits h(u)∑c(u)=∑h(u)，那么原图很大概率是合法图：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e5+15;int n,m,q,hsum,now,st,h[MN],g[MN],c[MN];mt19937 mt;signed main()&#123;    mt.seed(time(0));    cin&gt;&gt;n&gt;&gt;m;    st=mt();    for(int i=1;i&lt;=n;i++)&#123;        h[i]=(st+=mt());        hsum+=h[i];    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        g[v]+=h[u];        c[v]=g[v];        now+=h[u];    &#125;    cin&gt;&gt;q;    while(q--)&#123;        int op,u,v;        cin&gt;&gt;op;        if(op==1)&#123;            cin&gt;&gt;u&gt;&gt;v;            now-=h[u];            c[v]-=h[u];        &#125;        if(op==2)&#123;            cin&gt;&gt;u;            now-=c[u];            c[u]=0;        &#125;        if(op==3)&#123;            cin&gt;&gt;u&gt;&gt;v;            now+=h[u];            c[v]+=h[u];        &#125;        if(op==4)&#123;            cin&gt;&gt;u;            now+=g[u]-c[u];            c[u]=g[u];        &#125;        if(now==hsum)&#123;            cout&lt;&lt;&quot;YES\n&quot;;        &#125;else cout&lt;&lt;&quot;NO\n&quot;;    &#125;    return 0;&#125;
 CF1746F
发现直接在线做真的很不好做，考虑离线下来。注意到源题目只关心出现次数，而不关心具体取值，考虑和哈希。给每一个元素赋一个随机权值，那么每次询问我们查询 sum=∑i=lrhisum=\sum\limits_{i=l}^r h_{i}sum=i=l∑r​hi​，若 k∣sk|sk∣s 那么一定不满足，但是对于 kkk 不整除 sss 这是一个必要条件，可能不成立，我们考虑多用随机值映射几次，那么成功概率就会非常高。
接下来我们只需要一个数据结构支持单调修改，区间和查询，树状数组即可，注意到答案和 aia_{i}ai​ 具体取值无关，考虑离散化防止爆炸：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2e6+15,MOD=1e9+7;int n,q,a[MN],b[MN],c[MN],rd[MN],tot,op[MN],L[MN],R[MN],K[MN];bool ans[MN];mt19937 mt;unordered_map&lt;int,int&gt; mp;namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;struct BIT&#123;    int t[MN];    int lowbit(int x)&#123; return x&amp;-x; &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    int query(int fl,int fr)&#123;        return query(fr)-query(fl-1);    &#125;    void modify(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    void clear()&#123;        memset(t,0,sizeof(t));    &#125;&#125;t;signed main()&#123;    mt.seed(time(0));    int tim=clock();    read(n,q);    for(int i=1;i&lt;=n;i++)&#123;        read(a[i]);        b[++tot]=a[i];    &#125;    for(int i=1;i&lt;=q;i++)&#123;        read(op[i],L[i],R[i]);        if(op[i]==1)&#123;            b[++tot]=R[i];        &#125;        else&#123;            read(K[i]);            ans[i]=(R[i]-L[i]+1)%K[i]==0;        &#125;    &#125;    sort(b+1,b+1+tot);    tot=unique(b+1,b+1+tot)-b-1;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=lower_bound(b+1,b+1+tot,a[i])-b;    &#125;    for(int i=1;i&lt;=q;i++)&#123;        if(op[i]==1) R[i]=lower_bound(b+1,b+1+tot,R[i])-b;    &#125;    for(;1.0*clock()-tim&lt;=2.8*CLOCKS_PER_SEC;)&#123;        t.clear();        for(int i=0;i&lt;=tot;i++)&#123;            mp[i]=mt()%MOD;        &#125;        for(int i=1;i&lt;=n;i++) c[i]=mp[a[i]];        for(int i=1;i&lt;=n;i++) t.modify(i,c[i]);        for(int i=1;i&lt;=q;i++)&#123;            if(op[i]==1)&#123;                t.modify(L[i],mp[R[i]]-c[L[i]]);                c[L[i]]=mp[R[i]];            &#125;else if(t.query(L[i],R[i])%K[i]) ans[i]=0;        &#125;    &#125;    for(int i=1;i&lt;=q;i++)&#123;        if(op[i]!=1)&#123;            put((ans[i]?&quot;YES&quot;:&quot;NO&quot;));        &#125;    &#125;    return 0;&#125;
 P3792 由乃与大母神原型和偶像崇拜
重排为值域上连续的一段其实就是数值相邻，那么实际上数值相邻我们不关心数值具体是什么，我们只需要考虑它们能不能相邻就可以了，考虑随机赋权哈希，那么在值域连续的情况下。假设我们查询的区间随机数为 p2,p3,p4p_2,p_3,p_4p2​,p3​,p4​，那么通过前缀异或和算出 p2⊕p3⊕p4p_{2}\oplus p_{3}\oplus p_{4}p2​⊕p3​⊕p4​，若区间三个随机数异或和等于 p2⊕p3⊕p4p_{2}\oplus p_{3}\oplus p_{4}p2​⊕p3​⊕p4​，我们就认为这个区间是连续的。前缀异或和和映射前缀异或和可以用树状数组维护。
首先要离散化，但是不能瞎离散化，因为离散化后的数是连续的，我们可以考虑将离散化的时候多把每个值加 1 的数放到离散化数组里，这样本来就不连续的数离散化之后也不连续。
让后映射的数最好用 unsigned long long 自然溢出，这样的情况下极其难被 hack。若被卡随机数种子，考虑利用 random_device 这个玩意，在 Linux 下实现是一个真随机数生成器，从系统的熵池获取数据，通常用于为其他随机数引擎提供种子。这样能被 hack 概率可以忽略。
推荐使用茅台 19937 产随机数和 time(0) 初始化种子。
#include&lt;bits/stdc++.h&gt;#define int long long#define ull unsigned long longusing namespace std;constexpr int MN=3e6+15;int n,m,tot,a[MN],b[MN],op[MN],x[MN],y[MN];ull rd[MN],pre[MN];mt19937 mt; // 茅台 19937 产struct BITsum&#123;    int t[MN];    int lowbit(int x)&#123;return x&amp;-x;&#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    void modify(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;&#125;t1;struct BITXor&#123;    ull t[MN];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    ull query(int x)&#123;        int ret=0;        while(x)&#123;            ret^=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    void modify(int x,ull k)&#123;        while(x&lt;MN)&#123;            t[x]^=k;            x+=lowbit(x);        &#125;    &#125;&#125;t2;signed main()&#123;    mt.seed(time(0));    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        b[++tot]=a[i];        b[++tot]=a[i]+1;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;op[i]&gt;&gt;x[i]&gt;&gt;y[i];        if(op[i]==1) b[++tot]=y[i]+1,b[++tot]=y[i];    &#125;    sort(b+1,b+tot+1);    tot=unique(b+1,b+1+tot)-b-1;    rd[0]=mt();    for(ull i=1,st=rd[0];i&lt;=tot;i++)&#123;        rd[i]=(st+=mt());        pre[i]=pre[i-1]^rd[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=lower_bound(b+1,b+1+tot,a[i])-b;        t1.modify(i,a[i]);        t2.modify(i,rd[a[i]]);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        if(op[i]==1)&#123;            y[i]=lower_bound(b+1,b+1+tot,y[i])-b;            t1.modify(x[i],y[i]-a[x[i]]);            t2.modify(x[i],rd[y[i]]^rd[a[x[i]]]);            a[x[i]]=y[i];        &#125;else&#123;            int mid=(t1.query(y[i])-t1.query(x[i]-1))/(y[i]-x[i]+1);            int l,r;            l=mid-(y[i]-x[i])/2;            if((y[i]-x[i])&amp;1) r=mid+(y[i]-x[i])/2+1;            else r=mid+(y[i]-x[i])/2;            if(l&lt;=0||r&gt;=tot) cout&lt;&lt;&quot;yuanxing\n&quot;;            else if((t2.query(y[i])^t2.query(x[i]-1))==(pre[r]^pre[l-1]))&#123;                cout&lt;&lt;&quot;damushen\n&quot;;            &#125; else cout&lt;&lt;&quot;yuanxing\n&quot;;        &#125;    &#125;    return 0;&#125;
 3. 后言
属于是乱搞操作，但是又没有那么乱搞哈哈哈，学到也是赚到 lol。
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>四边形不等式优化DP</title>
    <url>/posts/ed03bc31/</url>
    <content><![CDATA[ 1.概念
四边形不等式是对一个二元函数定义：w(l,r)w(l,r)w(l,r)。这里的w(l,r)w(l,r)w(l,r)可以看作价值，权值或着价格都可以。
对于任意a≤b≤c≤da\le b\le c\le da≤b≤c≤d ，若都有w(a,d)+w(b,c)≥w(a,c)+w(b,d)w(a,d)+w(b,c)\ge w(a,c)+w(b,d)w(a,d)+w(b,c)≥w(a,c)+w(b,d)，我们就称w(l,r)w(l,r)w(l,r)满足四边形不等式，可以简单记为：”交叉小于包含“。
同时有结论，对于a≤ba\le ba≤b，有w(a,b−1)+w(a+1,b)≤w(a,b)+w(a+1,b−1)w(a,b-1)+w(a+1,b)\le w(a,b)+w(a+1,b-1)w(a,b−1)+w(a+1,b)≤w(a,b)+w(a+1,b−1)。
结论：若两个函数之间满足四边形不等式，那么和也满足四边形不等式。
话说为啥叫四边形不等式：

AD+BC≥AC+BDAD+BC\ge AC+BDAD+BC≥AC+BD，这个显然在初中是学过的。
反四边形不等式：
就是符号调换一下：w(a,d)+w(b,c)≤w(a,c)+w(b,d)w(a,d)+w(b,c)\le w(a,c)+w(b,d)w(a,d)+w(b,c)≤w(a,c)+w(b,d)
 2. 1D/1D优化
这里不是2.1
特征转移方程：
f(i)=min⁡1≤j&lt;if(j)+w(i,j)f(i)=\min_{1\le j &lt; i} f(j)+w(i,j)
f(i)=1≤j&lt;imin​f(j)+w(i,j)
如果www满足四边形不等式的话，我们就可以进行决策单调性优化。
f(i)=max⁡1≤j&lt;if(j)+w(i,j)f(i)=\max_{1\le j &lt; i} f(j)+w(i,j)
f(i)=1≤j&lt;imax​f(j)+w(i,j)
如果www满足反四边形不等式，我们也可以进行决策单调性优化。
啥是决策单调性？
 2.1 决策单调性
这个我们要好好说一说。
我们记pip_ipi​表示对于iii而言，枚举的jjj使得f(j)+w(i,j)f(j)+w(i,j)f(j)+w(i,j)最小的值，说人话就是f(i)f(i)f(i)从哪个jjj对应的值转移过来的。如果ppp在[1,n][1,n][1,n] 上单调不见，那么我们就称fff有决策单调性。
如果f(i)=min⁡1≤j&lt;if(j)+w(i,j)f(i)=\min_{1\le j &lt; i} f(j)+w(i,j)f(i)=min1≤j&lt;i​f(j)+w(i,j)中www满足四边形不等式，那么fff有决策单调性。

[!TIPS]
这个条件是充分条件，反过来不一定成立！

同理，如果f(i)=max⁡1≤j&lt;if(j)+w(i,j)f(i)=\max_{1\le j &lt; i} f(j)+w(i,j)f(i)=max1≤j&lt;i​f(j)+w(i,j)，其中www满足反四边形不等式，那么fff同样也有决策单调性。
那为什么叫决策单调性？其实四边形不等式你看着简单，实际上后面蕴含这导数和混合偏导数的关系，这里我不作解释，感兴趣去往上搜搜。
接下来我们说明的是四边形不等式，反四边形不等式与下面的完全相反，包括图形
事实上，当我们xxx越来越大的时候，w′w&#x27;w′即www的导数也越来越小。图像呈下面的样子。

当导数逐渐减少的时候，图形的斜率减少趋0，图像越来越平，获得的决策点pip_ipi​也越来越往后，也就是下图：

结论：
对于f(i)=min⁡1≤j&lt;if(j)+w(i,j)f(i)=\min_{1\le j &lt; i} f(j)+w(i,j)f(i)=min1≤j&lt;i​f(j)+w(i,j)，需要w(i,j)w(i,j)w(i,j)满足四边形不等式。
对于f(i)=max⁡1≤j&lt;if(j)+w(i,j)f(i)=\max_{1\le j &lt; i} f(j)+w(i,j)f(i)=max1≤j&lt;i​f(j)+w(i,j)，需要w(i,j)w(i,j)w(i,j)满足反四边形不等式。
根据图像也不难发现，pi−1≤pi≤pi+1p_{i-1}\le p_{i}\le p_{i+1}pi−1​≤pi​≤pi+1​，这就是决策单调性。
 2.2 单调队列+二分维护
若转移方程是fj+w→fif_{j} +w \rightarrow f_ifj​+w→fi​，前推后，那么我们称这个问题叫在线问题我们可以用单调队列+二分的思想。

观察图形，发现类易于一个凸壳的性质，我们可以类似于斜率优化一样来维护这个凸壳。但是有一个问题？这个是曲线又不是直线，不能判断斜率，怎么做？也就是不能简单地用队头队尾O(1)O(1)O(1)维护分界点，这个时候只能每次扫一遍凸壳确定。也就是二分。

检查队头，设队头为(j0,l0,r0)(j_0,l_0,r_0)(j0​,l0​,r0​)，若r0=i−1r_0=i-1r0​=i−1，删除队头否则令l0=il_0=il0​=i。
取队头决策，计算f[i]f[i]f[i]。
尝试插入iii。

取出队尾，记为(jt,lt,rt)(j_t,l_t,r_t)(jt​,lt​,rt​)。
若对于f[li]f[l_i]f[li​]来说，iii比jtj_tjt​更优，即f[i]+val(i,lt)≤f[jt]+val(jt,lt)f[i]+val(i,l_{t)} \le f[j_t]+val(j_t,l_t)f[i]+val(i,lt)​≤f[jt​]+val(jt​,lt​)，记pos=ltpos=l_tpos=lt​，删除队尾，回到取出队尾的步骤。
若对于f[ri]f[r_i]f[ri​]来说，iii比jtj_tjt​更优，即f[i]+val(i,rt)≤f[jt]+val(jt,rt)f[i]+val(i,r_{t)} \le f[j_t]+val(j_t,r_t)f[i]+val(i,rt)​≤f[jt​]+val(jt​,rt​)，记pos=ltpos=l_tpos=lt​，直接插入(i,pos,n)(i,pos,n)(i,pos,n)即可
否则，在[lt,rt][l_t,r_t][lt​,rt​]上二分，求出位置pospospos，在此之前决策jtj_tjt​更优，后面iii更优，让后令队尾的rt=posr_t=posrt​=pos，插入(i,pos,n)(i,pos,n)(i,pos,n)即可。



代码如下：
void insert(int x)&#123;    int pos=n+1;    while(ql&lt;=qr&amp;&amp;f[x]+w(x,q[qr].l)&lt;=f[q[qr].j]+w(q[qr].j,q[qr].l)) pos=q[qr--].l;    if(ql&lt;=qr&amp;&amp;f[x]+w(x,q[qr].r)&lt;=f[q[qr].j]+w(q[qr].j,q[qr].r))&#123;        int l=q[qr].l,r=q[qr].r;        while(l+1&lt;r)&#123;            int mid=(l+r)&gt;&gt;1;            if(f[x]+w(x,mid)&lt;=f[q[qr].j]+w(q[qr].j,mid)) r=mid;            else l=mid;        &#125;        q[qr].r=r-1;        pos=r;    &#125;    if(pos!=n+1)&#123;        q[++qr]=&#123;pos,n,x&#125;;    &#125;&#125;
DP的时候正常取决策即可：
ql=1,qr=0;q[++qr]=&#123;1,n,0&#125;;for(int i=1;i&lt;=n;i++)&#123;    while(ql&lt;=qr&amp;&amp;q[ql].r&lt;i) ql++;    f[i]=f[q[ql].j]+w(q[ql].j,i);    ans[i]=ans[q[ql].j]+1;    insert(i);&#125;
 2.3 分治法
若转移方程是g+w→fg+w \rightarrow fg+w→f的转移，也就是说转移是由一个已知的函数或这fff的上一层转移过来，那么我们就可以用分治的方法，这种决策是离线的，我们不依赖fi−1f_{i-1}fi−1​来计算fif_ifi​，这时候就不必采用单调队列这种顺序计算fif_ifi​了，只需要分治就可以，编码更简单也更灵活。
算法步骤：

初始化：首先暴力遍历j∈[1,n/2)j\in[1,n/2)j∈[1,n/2)来计算pn/2p_{n/2}pn/2​，作为分治的中心点。
分治求解：接下来分别计算2个区间[1,n/2)[1,n/2)[1,n/2)和(n/2,2](n/2,2](n/2,2]的pip_ipi​。

对于前半段，最优决策点一定在[1,pn/2][1,p_{n/2}][1,pn/2​]之间。
对于后半段，最优决策点一定在[pn/2,pn][p_{n/2},p_n][pn/2​,pn​]之间。


递归处理即可。

代码实现如下：
int clac(int i,int j); //计算选择决策j的费用// l,r是决策区间，kl,kr是决策点的区间void dfs(int l,int r,int kl,int kr)&#123;	int mid=(l+r)&gt;&gt;1,k=kl;	for(int i=kl;i&lt;=min(kr,mid-1);i++)&#123;		//求费用最少的f[mid]最优决策点		if(clac(mid,i)&lt;clac(mid,k)) k=i;		f[mid]=clac(mid,k);	&#125;	if(l&lt;mid) dfs(l,mid-1,kl,k);	if(r&gt;mid) dfs(mid+1,r,k,kr);&#125;//ans=f[n];
复杂度分析：
递归树深度log⁡n\log nlogn，递归执行一个元素至多被扫2次，时间复杂度即为O(nlog⁡n)O(n\log n)O(nlogn)。
空间复杂度显然O(log⁡n)O(\log n)O(logn)。
分治法的优点：
如果w(i,j)w(i,j)w(i,j)不能O(1)O(1)O(1)计算但是可以从w(i±1,j±1)w(i\pm 1,j\pm 1)w(i±1,j±1)来O(1)O(1)O(1)递推，此时分治法就能够以均摊O(1)O(1)O(1)的速度来计算，因为在暴力遍历循环中w(i,j)w(i,j)w(i,j)的区间是顺序扩大的，而单调队列计算w(i,j)w(i,j)w(i,j)是乱跳的。下面会有例题来解释。
 2.4 决策单调性1D1D例题
1.[单调队列二分] P1912 诗人小G

一首诗包含了若干个句子，对于一些连续的短句，可以将它们用空格隔开并放在一行中，注意一行中可以放的句子数目是没有限制的。小 G 给每首诗定义了一个行标准长度（行的长度为一行中符号的总个数），他希望排版后每行的长度都和行标准长度相差不远。显然排版时，不应改变原有的句子顺序，并且小 G 不允许把一个句子分在两行或者更多的行内。在满足上面两个条件的情况下，小 G 对于排版中的每行定义了一个不协调度, 为这行的实际长度与行标准长度差值绝对值的 PPP 次方，而一个排版的不协调度为所有行不协调度的总和。
小 G 最近又作了几首诗，现在请你对这首诗进行排版，使得排版后的诗尽量协调（即不协调度尽量小），并把排版的结果告诉他。
给定诗句数nnn，行标准长度LLL与题目描述的PPP，如果不协调度大于101810^{18}1018输出&quot;Too hard to arrange&quot;。

不妨设f[i]f[i]f[i]为前iii个句子的最小不协调度，记长度为aia_iai​，sumisum_isumi​为aia_iai​的前缀和，不难有转移方程：
f[i]=min⁡j=0i−1f[j]+∣sum[i]−sum[j]+(i−j−1)−L∣Pf[i]=\min_{j=0}^{i-1}f[j]+|sum[i]-sum[j]+(i-j-1)-L|^P
f[i]=j=0mini−1​f[j]+∣sum[i]−sum[j]+(i−j−1)−L∣P
就是将[j+1,i][j+1,i][j+1,i]作为最后一行，前面照常排。
这里PPP不固定不能考虑斜率优化，考虑四边形不等式，这个证明起来比较难，实在不行可以打表看看。
故代码如下：
#include&lt;bits/stdc++.h&gt;#define ld long double#define ll long longusing namespace std;const int MN=1e5+15;struct node&#123;    int c,l,r;&#125;q[MN];int T;int n,ql,qr,L,P,a[MN],pre[MN];ld f[MN],s[MN];string st[MN];vector&lt;int&gt; ans;ld qpow(ld a,ll b)&#123;    ld ans=1;    while (b)    &#123;        if(b&amp;1)&#123;            ans*=a;        &#125;        b&gt;&gt;=1;        a*=a;    &#125;    return ans;&#125;ld clac(int x,int y)&#123;    return f[x]+qpow(fabs(s[y]-s[x]-L-1),P);&#125;void insert(int x)&#123;    int pos=n+1;    while(ql&lt;=qr&amp;&amp;clac(x,q[qr].l)&lt;=clac(q[qr].c,q[qr].l))&#123;        pos=q[qr--].l;    &#125;    if(ql&lt;=qr&amp;&amp;clac(x,q[qr].r)&lt;=clac(q[qr].c,q[qr].r))&#123;        int l=q[qr].l,r=q[qr].r;        while(l+1&lt;r)&#123;            int mid=l+r&gt;&gt;1;            if(clac(x,mid)&lt;=clac(q[qr].c,mid)) r=mid;            else l=mid;        &#125;        q[qr].r=r-1;        pos=r;    &#125;    if(pos!=n+1)&#123;        q[++qr]=&#123;x,pos,n&#125;;    &#125;&#125;void solve()&#123;    ans.clear();    memset(f,0,sizeof(f));    memset(s,0,sizeof(s));    memset(pre,0,sizeof(pre));    cin&gt;&gt;n&gt;&gt;L&gt;&gt;P;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;st[i];        s[i]=s[i-1]+st[i].length()+1;    &#125;    ql=1,qr=0;    q[++qr]=&#123;0,1,n&#125;;    for(int i=1;i&lt;=n;i++)&#123;        while(ql&lt;=qr&amp;&amp;q[ql].r&lt;i) ql++;        f[i]=clac(q[ql].c,i);        pre[i]=q[ql].c;        insert(i);    &#125;    if(f[n]&gt;1e18)&#123;        cout&lt;&lt;&quot;Too hard to arrange\n&quot;;    &#125;else&#123;        cout&lt;&lt;(ll)f[n]&lt;&lt;&#x27;\n&#x27;;        for(int i=n;i;i=pre[i])&#123;            ans.push_back(i);        &#125;        int cur=ans.size()-1,tmp=0;        for(int i=1;i&lt;=n;i++)&#123;            if(tmp) cout&lt;&lt;&quot; &quot;;            cout&lt;&lt;st[i];            if(i==ans[cur]) cout&lt;&lt;&#x27;\n&#x27;,cur--,tmp=0;            else tmp++;        &#125;    &#125;    cout&lt;&lt;&quot;--------------------\n&quot;;&#125;int main()&#123;    cin&gt;&gt;T;    while (T--)    &#123;        solve();    &#125;        return 0;&#125;
2.[分治法] CF868F Yet Another Minimization Problem

给定一个长度为nnn的序列 aaa，要把它分成 kkk 个子段。每个子段的费用是其中相同元素的对数。求所有子段的费用之和的最小值。
2≤n≤105,2≤k≤min(n,20),1≤ai≤n2\le n\le 10^5,2\le k\le min(n,20),1\le a_{i}\le n2≤n≤105,2≤k≤min(n,20),1≤ai​≤n

不难设转移方程，f[i][j]f[i][j]f[i][j]表示执行到第iii个数，共化了jjj个子段，不难有转移方程。
f[i][j]=min⁡k=1i−1f[k][j−1]+w(k+1,i)f[i][j]=\min_{k=1}^{i-1}f[k][j-1]+w(k+1,i)
f[i][j]=k=1mini−1​f[k][j−1]+w(k+1,i)
时间复杂度为O(n2)O(n^2)O(n2)，不可承受，况且www的计算又是一个头痛的地方。
考虑www能否满足四边形不等式，不难发现iii向右移动时www单调不减，所以肯定满足决策单调性。
考虑决策单调性，不难发现这个不用顺序计算，考虑分治法，但是这样算不太好，我们把方程两维转换一下。
f[i][j]f[i][j]f[i][j]表示共化了iii个段，执行到第jjj个数，转移方程类似。
这样就能分治了，其实也可以不换（雾）。
考虑www如何快速的计算，区间相同元素，区间颜色段问题，这不是莫队的拿手好戏吗。我们做一个类似莫队的暴力，这样，用左右指针进行区间移动，考虑一次最多移动多少次？从[l,r][l,r][l,r]移动到最后一次的[l,mid][l,mid][l,mid]最多移动r−lr-lr−l次，同一层最多O(n)O(n)O(n)次，所以均摊单次计算O(1)O(1)O(1)，时间复杂度O(knlog⁡n)O(kn\log n)O(knlogn)。
其实这里www的计算也和上面分治法的优点对应，我们的w(i±1,j±1)w(i\pm 1,j\pm 1)w(i±1,j±1)可以通过O(1)O(1)O(1)移动指针O(1)O(1)O(1)算出来，但是如果我们使用单调队列的话就不能利用这个性质了。
故代码如下：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=1e5+15;int n,mk,a[MN],cnt[MN],wl=1,wr;ll f[MN][2],now,pre=1,w;inline ll cost(int l, int r) &#123;    while (wl &gt; l) wl--, w += cnt[a[wl]]++;    while (wr &lt; r) wr++, w += cnt[a[wr]]++;    while (wl &lt; l) w -= --cnt[a[wl]], wl++;    while (wr &gt; r) w -= --cnt[a[wr]], wr--;    return w;&#125;inline ll clac(int i, int j) &#123;    return f[j][pre] + cost(j+1, i);&#125;void dfs(int l,int r,int kl,int kr)&#123;    int mid=(l+r)&gt;&gt;1,k=kl;    ll kv=clac(mid,k);    for(int i=kl;i&lt;=min(kr,mid);i++)&#123;        ll tmp=clac(mid,i);        if(tmp&lt;kv)&#123;            k=i;            kv=tmp;        &#125;    &#125;    f[mid][now]=kv;    if(mid&gt;l) dfs(l,mid-1,kl,k);    if(mid&lt;r) dfs(mid+1,r,k,kr);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;mk;    wr=n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        f[i][now]=(w+=cnt[a[i]]++);    &#125;    for(int i=2;i&lt;=mk;i++)&#123;        swap(now,pre);        dfs(1,n,1,n);    &#125;    cout&lt;&lt;f[n][now];    return 0;&#125;
 3. 2D/1D优化
 3.1 区间决策点单调性
这里和上面的单点决策单调性就没太大关系了，我们这里是区间决策单调性。
这里2D表示我们的状态维度是二维，而决策点是一维的。
特征方程：
f[i][j]=min⁡k=ij−1(f[i][k]+f[k+1][j]+w[i][j])=min⁡k=ij−1(f[i][k]+f[k+1][j])+w[i][j]\begin{aligned}
f[i][j]&amp; =\min_{k=i}^{j-1}(f[i][k]+f[k+1][j]+w[i][j])\newline
&amp; = \min_{k=i}^{j-1}(f[i][k]+f[k+1][j])+w[i][j]
\end{aligned}
f[i][j]​=k=iminj−1​(f[i][k]+f[k+1][j]+w[i][j])​=k=iminj−1​(f[i][k]+f[k+1][j])+w[i][j]​
你会说，这不就是区间DP吗？
是…也不是？
但是这里我们的w(i,j)w(i,j)w(i,j)不仅要满足四边形不等式，更要满足单调性。
即：
对于任意a≤b≤c≤d,w(a,d)≥w(b,c) 或 w(i+1,j)≤w(i,j+1)\text{对于任意}a\le b\le c\le d,w(a,d)\ge w(b,c )\text{ 或 }w(i+1,j) \le w(i,j+1)
对于任意a≤b≤c≤d,w(a,d)≥w(b,c) 或 w(i+1,j)≤w(i,j+1)
速记：小区间≤\le≤大区间。
如果w(i,j)w(i,j)w(i,j)满足四边形不等式和单调性，那么我们用dpdpdp计算的时间复杂度是O(n2)O(n^2)O(n2)。

引理1：如果w(i,j)w(i,j)w(i,j)满足四边形不等式和单调性，则f[i][j]=min⁡k=ij−1(f[i][k]+f[k+1][j]+w[i][j])f[i][j]=\min_{k=i}^{j-1}(f[i][k]+f[k+1][j]+w[i][j])f[i][j]=mink=ij−1​(f[i][k]+f[k+1][j]+w[i][j])也满足四边形不等式。


引理2：记s[i][j]=ks[i][j]=ks[i][j]=k为f[i][j]f[i][j]f[i][j]取得最小值的kkk，如果f[i][j]f[i][j]f[i][j]满足四边形不等式，有：

s[i][j−1]≤k≤s[i+1][j]s[i][j-1]\le k\le s[i+1][j]
s[i][j−1]≤k≤s[i+1][j]
速记：左中区间≤\le≤ 大区间≤\le≤ 右中区间。

对于求最大值：
f[i][j]=max⁡k=ij−1(f[i][k]+f[k+1][j]+w[i][j])=max⁡k=ij−1(f[i][k]+f[k+1][j])+w[i][j]\begin{aligned}
f[i][j]&amp; =\max_{k=i}^{j-1}(f[i][k]+f[k+1][j]+w[i][j])\newline
&amp; = \max_{k=i}^{j-1}(f[i][k]+f[k+1][j])+w[i][j]
\end{aligned}f[i][j]​=k=imaxj−1​(f[i][k]+f[k+1][j]+w[i][j])​=k=imaxj−1​(f[i][k]+f[k+1][j])+w[i][j]​
需要满足反四边形不等式与最大值的单调性。
单调性即：
对于任意a≤b≤c≤d,w(a,d)≤w(b,c)\text{对于任意}a\le b\le c\le d,w(a,d)\le w(b,c )
对于任意a≤b≤c≤d,w(a,d)≤w(b,c)
速记：小区间≥\ge≥大区间。反过来即可。
如果w(i,j)w(i,j)w(i,j)满足反四边形不等式和单调性，那么我们用dpdpdp计算的时间复杂度是O(n2)O(n^2)O(n2)。

引理3：如果w(i,j)w(i,j)w(i,j)满足反四边形不等式和单调性，则f[i][j]=max⁡k=ij−1(f[i][k]+f[k+1][j]+w[i][j])f[i][j]=\max_{k=i}^{j-1}(f[i][k]+f[k+1][j]+w[i][j])f[i][j]=maxk=ij−1​(f[i][k]+f[k+1][j]+w[i][j])也满足反四边形不等式。


引理4：记s[i][j]=ks[i][j]=ks[i][j]=k为f[i][j]f[i][j]f[i][j]取得最大值的kkk，如果f[i][j]f[i][j]f[i][j]满足四边形不等式，有：

s[i][j−1]≤k≤s[i+1][j]s[i][j-1]\le k\le s[i+1][j]
s[i][j−1]≤k≤s[i+1][j]
速记：左中区间≤\le≤ 大区间≤\le≤ 右中区间。这个是一样的。
 3.2 区间决策点单调性模板题
石子合并，只求最小，有环，但n≤5000n\le 5000n≤5000，喜欢我O(n2)O(n^2)O(n2)吗？
不难发现这个转移方程是很明显满足四边形不等式的，毕竟本身就有单调性。
所以怎么实现呢，根据上面的引理，我们只需要在[s[i][j−1],s[i+1][j]][s[i][j-1],s[i+1][j]][s[i][j−1],s[i+1][j]]这个区间内进行遍历即可，顺便记录一下决策点，这个可比1D/1D好写多了，只需要开个数组记录就可以。
代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=5125,INF=1e9;int f[MN][MN],p[MN][MN],n,s[MN];int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;s[i];        s[i]+=s[i-1];        p[i][i]=i;    &#125;    for(int len=2;len&lt;=n;len++)&#123;        for(int l=1;l+len-1&lt;=n;l++)&#123;            int r=l+len-1;            f[l][r]=INF;            for(int k=p[l][r-1];k&lt;=p[l+1][r];k++)&#123;                int t=f[l][k]+f[k+1][r]+s[r]-s[l-1];                if(f[l][r]&gt;t)&#123;                    f[l][r]=t;                    p[l][r]=k;                &#125;            &#125;        &#125;    &#125;    cout&lt;&lt;f[1][n];    return 0;&#125;
为啥没说最大值，最大值不满足最大值的单调性，所以不行只能O(n3)O(n^3)O(n3)。
 4.写在最后
感谢阅读！
本文章素材来源：

算法竞赛进阶指南
しずり雪 の Blog，大佬图太好了！
洛谷日报，但是不知道哪篇www

]]></content>
      <categories>
        <category>DP优化</category>
      </categories>
      <tags>
        <tag>DP优化</tag>
        <tag>四边形不等式</tag>
      </tags>
  </entry>
  <entry>
    <title>基环树</title>
    <url>/posts/70f2f90a/</url>
    <content><![CDATA[ 0. 前言
你需要的知识点：

图的遍历与存储（这都会吧。。。）
树的直径与树上最大独立集（没有上司的舞会）等树形DP基础芝士
环的认识

 1. 基环树基本芝士
 1.1 概念
想必都知道树结构的特点吧。

给定一张 nnn 个点，n−1n-1n−1 条边的无向图，…

这个就是树的特点，有 n−1n-1n−1 条边。而基环树呢？就是在原先树的情况上加了一条边，于是基环树的特点就是：

给定一张 nnn 个点，nnn 条边的无向（或有向）图，…

那长什么样？

那有人就会说链，这根本就不是树啊，这有环怎么能叫树呢？事实上也是这样的，人家是个图吗。
比一般的树多一条边，这导致这个基环树图上出现了一个唯一的环，这个的前提是图联通。如果不联通，就会出现多个环，例如下图：

当然，基环树也有有向图的版本，这个版本有2个，一个叫内向基环树，一个叫外向基环树。

 1.2 找环
我们对于基环树的处理一般是找到他最特殊的地方，也就是他的环。
怎么找环呢？其实也很简单，我们分无向的和有向的来分别说。
 1.2.1 并查集（无向图）
复杂度均摊O(1)O(1)O(1)。
无向图我们可以使用并查集来判断联通性，这也是找环的一个方法。我们在读取边的时候就可以使用并查集判断，如果发现u,vu,vu,v的并查集节点一致，那么他们互相联通，已经成环，此时u−vu-vu−v组成的边就是环边的一部分，也就是那一条加入的非树边。
int n,pre[MN];vector&lt;int&gt; adj[MN];int root(int x)&#123;    if(x==pre[x]) return x;    else return pre[x]=root(pre[x]);&#125;void init()&#123;    for(int i=1;i&lt;=n;i++)&#123;        pre[i]=i;    &#125;&#125;int main()&#123;        cin&gt;&gt;n;    init();    for(int i=1;i&lt;=n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        int ru=root(u),rv=root(v);        if(ru==rv)&#123;            cir.push_back(pir(ru,v));// 找到环边            continue;        &#125;else pre[rv]=ru;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    return 0;&#125;
 1.2.2 拓扑排序（无向图）
复杂度O(n)O(n)O(n)
一个显然的想法就是将无向图转化成有向图去做，把无向图转化成两条有向边，当一个节点的入度大于等于2时，点在环上。用的不算太多，不给出代码了。
 1.2.3 LCA (无向图)
复杂度O(n)−O(nlog⁡n)O(n)-O(n\log n)O(n)−O(nlogn)

显然？只需要找到最短路径即可，但是没太大啥用。
 1.2.4 DFS序（无向图）
复杂度O(n)O(n)O(n)
这需要我们记录2个变量：dfn,fadfn,fadfn,fa，分别代表DFS序（时间戳）与父亲节点编号。
不难发现如果我们下一个访问的节点已经被访问过，说明已经成环，我们可以借助这个来实现找环。
void dfs(int u,int pre)&#123;    dfn[u]=++tot;    fa[u]=pre;    for(auto v:adj[u])&#123;        if(v==pre) continue;        if(dfn[v])&#123;            if(dfn[v]&lt;dfn[u]) continue; // 为什么这里continue？            lp[++htot]=v;            for(;v!=u;v=fa[v]) lp[++htot]=fa[v];	        &#125;else dfs(v,u);    &#125;&#125;
有些人会对if(dfn[v]&lt;dfn[u]) continue;这一句感到疑惑，为什么要这么搞？
仔细思考，当dfn[v]&lt;dfn[u]时其实就是vvv是uuu的祖先节点（不是父亲节点），这个其实就是返祖边，如果我们只靠返祖边来判断环肯定是不对的，我们需要跳过所有祖先节点，避免跨代误判。如果去掉，则会出现路径记录不全的情况，甚至会将树边误判为环边。
 1.2.5 自底向上（有向图）
有向图最简单的算法，不需要太多解释，你发现有个节点之前被访问过那么肯定成环：
int getlp(int u)&#123;    vis[u]=1;    if(vis[fa[u]]) return u;    else return getlp(fa[u]);&#125;
 1.3 基环树问题解法
问题解法有哪些呢，一般来说我们有2个思想（计数的滚出去(#`Д´)ﾉ）：

借鉴环形DP两次DP，在环一个位置强制断开（或忽略）成树跑一遍计算答案。第二次通过适当的改动算出的答案等价于把断开的边强制相连。
把基环树的环给提起来，这样提起来的树换上的节点挂着一个一个对应的子树，先算子树的答案，在合并到环上的节点，最后就变成链环上问题。例如下图：


 2. 基环树的例题
 2.1 基环树直径——洛谷P4381
基环树的直径指基环树中最长的简单路径被称为基环树的最长链，其长度就是基环树直径。
基环树的直径的答案可能出现在2个位置：

单个子树中（不跨环）
跨子树（跨环）

我们利用第二个方法：
先找出基环树的环，让后先对环上的节点跑树形DP求树的直径，记为DiD_iDi​。
对于答案1，即为ans1=max⁡i=1lenDians1=\max\limits_{i=1}^{len} D_ians1=i=1maxlen​Di​，其中 lenlenlen 为记录的环节点个数（即环长）。
而对于跨子树，答案即为：
f[i]=max⁡j=1,j≠ilenDi+Dj+dis(i,j)f[i]=\max\limits_{j=1,j\neq i}^{len} D_i+D_j+dis(i,j)
f[i]=j=1,j=imaxlen​Di​+Dj​+dis(i,j)
对于dis(i,j)dis(i,j)dis(i,j)，有逆时针和顺时针两种走法，走最长的。
O(n2)O(n^2)O(n2) 有点炸裂，而且环不好处理，我们可以考虑一个环形DP最常用的方法，断环复制1分。让后因为 DiD_iDi​ 是定值可以提出来。
不难有：
f[i]=Di+max⁡j=1i−1Dj+dis(i,j)f[i]=D_i+\max\limits_{j=1}^{i-1} D_j+dis(i,j)
f[i]=Di​+j=1maxi−1​Dj​+dis(i,j)
到这里还看不出来怎么优化的（没学过没关系可以看我的DP优化博客)，这不就是最标准1D/1D单调队列优化模型吗？复杂度O(n)O(n)O(n)结束。
但是原题其实是个基环树森林，每一次统计一遍答案就可以了。
当然，还记得我们提到的那个小可爱二元环吗，那个需要特判，在大部分题中作为一个普遍的hack数据出现，请大家特别注意。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=1e6+15;struct Edge&#123;    int v,w;&#125;;int n,len,fa[MN],dfn[MN],tot,lp[MN];ll d[MN];vector&lt;Edge&gt; adj[MN];ll q[MN&lt;&lt;1],s[MN&lt;&lt;1],ql,qr,anszj;bool vis[MN];void dfs(int u,int pre)&#123;    dfn[u]=++tot;    fa[u]=pre;    for(auto e:adj[u])&#123;        if(e.v==pre) continue;        if(dfn[e.v])&#123;            if(dfn[e.v]&lt;dfn[u]) continue;            lp[++len]=e.v;            for(;e.v!=u;e.v=fa[e.v]) lp[++len]=fa[e.v];	        &#125;else dfs(e.v,u);    &#125;&#125;void getzj(int u,int pre)&#123;    vis[u]=1;    for(auto e:adj[u])&#123;        if(e.v==pre||vis[e.v]) continue;        getzj(e.v,u);        anszj=max(anszj,1ll*d[u]+d[e.v]+e.w);        d[u]=max(d[u],d[e.v]+e.w);    &#125;&#125;ll solve(int rt)&#123;    ll ans1=0,ans2=0;    len=tot=0;    dfs(rt,0);    lp[0]=lp[len];    for(int i=1;i&lt;=len;i++)&#123;        vis[lp[i]]=1;    &#125;    for(int i=1;i&lt;=len;i++)&#123;        anszj=0;        getzj(lp[i],0);        ans1=max(ans1,anszj);    &#125;    if(len==2)&#123;// 特判小可爱        for(auto e:adj[lp[1]])&#123;            if(e.v==lp[2]) ans2=max(ans2,1ll*d[lp[1]]+d[lp[2]]+e.w);        &#125;        return max(ans1,ans2);    &#125;    for(int i=1;i&lt;=len;i++)&#123;        for(auto e:adj[lp[i]])&#123;            if(e.v==lp[i-1])&#123;// 考虑前缀和优化dis计算                s[i]=s[i-1]+e.w;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=len;i++)&#123;// 复制        s[len+i]=s[len]+s[i];    &#125;    ql=1,qr=0;    q[++qr]=0;    for(int i=1;i&lt;=len*2;i++)&#123;        while(ql&lt;=qr&amp;&amp;q[ql]&lt;=i-len) ql++;        ans2=max(ans2,d[lp[q[ql]%len]]+d[lp[i%len]]+s[i]-s[q[ql]]);        while(ql&lt;=qr&amp;&amp;s[q[qr]]-d[lp[q[qr]%len]]&gt;=s[i]-d[lp[i%len]]) qr--;        q[++qr]=i;    &#125;    return max(ans1,ans2);&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        int v,w;        cin&gt;&gt;v&gt;&gt;w;        adj[i].push_back(&#123;v,w&#125;);        adj[v].push_back(&#123;i,w&#125;);    &#125;    ll ans=0;    for(int i=1;i&lt;=n;i++)&#123;        if(!vis[i]) ans+=solve(i);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 2.2 基环树找环 洛谷P8655
无向图找环，可以作为试验场。记得排序后输出。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,dfn[MN],lp[MN],fa[MN],htot,tot;vector&lt;int&gt; adj[MN];template&lt;typename type&gt;inline void read(type &amp;x)&#123;    x=0;bool flag(0);char ch=getchar();    while(!isdigit(ch)) flag=ch==&#x27;-&#x27;,ch=getchar();    while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();    flag?x=-x:0;&#125;void dfs(int u,int pre)&#123;    dfn[u]=++tot;    fa[u]=pre;    for(auto v:adj[u])&#123;        if(v==pre) continue;        if(dfn[v])&#123;            if(dfn[v]&lt;dfn[u]) continue;            lp[++htot]=v;            for(;v!=u;v=fa[v]) lp[++htot]=fa[v];	        &#125;else dfs(v,u);    &#125;&#125;int main()&#123;    read(n);    for(int i=1;i&lt;=n;i++)&#123;        int u,v;        read(u);        read(v);        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs(1,0);    sort(lp+1,lp+1+htot);    for(int i=1;i&lt;=htot;i++) cout&lt;&lt;lp[i]&lt;&lt;&quot; &quot;;    return 0;&#125;
 2.3 无向基环树最大独立集  洛谷P2607
相互厌恶的骑士之间建无向边，但是没说联通，是基环树森林。
其实我们想跑没有上司的舞会，但是因为不是树不好做，我们用第一种方法，强制不选，另外一个随便。这样就可以分别统计了。
#include&lt;bits/stdc++.h&gt;#define ll long long#define pir pair&lt;int,int&gt;using namespace std;const int MN=1e6+15;struct circle&#123;    int u,v;&#125;;struct edge&#123;    int v,id;&#125;;int n,pre[MN];ll val[MN],f[MN][2];vector&lt;edge&gt; adj[MN];vector&lt;pir&gt; cir;int root(int x)&#123;    if(x==pre[x]) return x;    else return pre[x]=root(pre[x]);&#125;void init()&#123;    for(int i=1;i&lt;=n;i++)&#123;        pre[i]=i;    &#125;&#125;void dfs(int u,int fa)&#123;    f[u][0]=0;    f[u][1]=val[u];    for(auto e:adj[u])&#123;        int v=e.v,id=e.id;        if(v==fa) continue;        dfs(v,u);        f[u][1]+=f[v][0];        f[u][0]+=max(f[v][0],f[v][1]);    &#125;&#125;int main()&#123;    ios::sync_with_stdio(0);    cin&gt;&gt;n;    init();    for(int i=1;i&lt;=n;i++)&#123;        int v;        cin&gt;&gt;val[i]&gt;&gt;v;        int ri=root(i),rv=root(v);        if(ri==rv)&#123;            cir.push_back(pir(i,v));            continue;        &#125;else pre[rv]=ri;        adj[i].push_back(&#123;v,i&#125;);        adj[v].push_back(&#123;i,i&#125;);    &#125;    ll ans=0;    for(auto awa:cir)&#123;        dfs(awa.first,0);        ll ret=f[awa.first][0];        dfs(awa.second,0);        ans+=max(ret,f[awa.second][0]);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 2.4 有向基环树最大独立集改编——洛谷P10933
一个显然的想法就是 i→A[i]i\rightarrow A[i]i→A[i]连边，但是发现是内向基环树有一点难做，我们不妨反过来连边，这样就变成了上面提到的有向基环树。
考虑转移方程，定义和最大独立集差不太多，但是方程有细微的变化。
f[u][0]=∑v∈son(u)max⁡(f[v][0],f[v][1])f[u][0]=\sum\limits_{v\in son(u)}\max(f[v][0],f[v][1])
f[u][0]=v∈son(u)∑​max(f[v][0],f[v][1])
f[u][1]=1+∑v∈son(u)f[v][0]+∑v′∈son(u),v′≠vmax⁡(f[v′][0],f[v′][1])f[u][1]=1+\sum\limits_{v\in son(u)}f[v][0]+\sum\limits_{v&#x27; \in son(u),v&#x27;\neq v}\max(f[v&#x27;][0],f[v&#x27;][1])
f[u][1]=1+v∈son(u)∑​f[v][0]+v′∈son(u),v′=v∑​max(f[v′][0],f[v′][1])
第二个方程就是当前选了其他可以任意选择，因为题面说了只能限制一个。
但是O(n2)O(n^2)O(n2)我们不喜欢可以改变以下：
f[u][1]=1+f[u][0]−min⁡v∈son(u)(max⁡(f[v][0],f[v][1])−f[v][0])f[u][1]=1+f[u][0]-\min\limits_{v\in son(u)} ( \max(f[v][0],f[v][1])-f[v][0] ) 
f[u][1]=1+f[u][0]−v∈son(u)min​(max(f[v][0],f[v][1])−f[v][0])
当然这个和2.3一样我们也需要考虑，但这里我们是忽略了uuu可以限制vvv的条件，我们可以强制限制计算。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,fa[MN],f[MN][2];bool vis[MN];vector&lt;int&gt; adj[MN];int dodp(int u,int mode,int rt)&#123;    f[u][0]=f[u][1]=0;    vis[u]=1;    int minp=1e9;    for(auto v:adj[u])&#123;        if(v==rt) continue;        int ret=dodp(v,mode,rt);        minp=min(minp,ret-f[v][0]);        f[u][0]+=ret;    &#125;    f[u][1]=f[u][0]+1-(mode&amp;&amp;u==fa[rt]?0:minp);    return max(f[u][0],f[u][1]);&#125;int getlp(int u)&#123;    vis[u]=1;    if(vis[fa[u]]) return u;    else return getlp(fa[u]);&#125;int solve(int u)&#123;    int lp=getlp(u);    int ret1=dodp(lp,0,lp),ret2=dodp(lp,1,lp);    return max(ret1,f[lp][0]);&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;fa[i];        adj[fa[i]].push_back(i);    &#125;    int ans=0;    for(int i=1;i&lt;=n;i++)&#123;        if(!vis[i]) ans+=solve(i);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 3. 总结
好了差不多就是这样，基环树的解法都离不开2个方法，好了请大家自行练手吧。byebye~
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束系统</title>
    <url>/posts/1149ba34/</url>
    <content><![CDATA[ 0. 前言
你需要知道：

SPFA
图论基础建模
不等式基础

 1. 负环
为什么先讲负环啦？是因为差分约束是要用负环的。
给定一张有向图（无向图看作两条等权边），每条边有权值。若一个边权值是负数，那么我们称这个边为负权边。
若图中存在一个环，如果环上的边有负权边，那么我们称这个为负环。

例如4,5,7构成负环，而5,8,1构成正环
我们可以用最短路算法来跑判断负环，什么你跟我说拓扑排序？如果一张图既有正环也有负环那判断不出来啊，拓扑只能判环不能判是哪个类型的。
但是不是所有都能用…



算法
适用条件
时间复杂度




Dijkstra
不可以，负边权会对之后结果造成影响不一定最小。
O(n2)→O(mlog⁡n)O(n^2)\rightarrow O(m \log n)O(n2)→O(mlogn)


Bellman-Ford
可以，无负环的时候最短路边数一定小于 nnn ，无负环的情况下走n−1n-1n−1 次后一定收敛。
O(nmO(nmO(nm)


SPFA
同Bellman-Ford
O(nm)→O(km)O(nm)\rightarrow O(km)O(nm)→O(km)



所以也就只能用SPFA了…
所以怎么判断？很简单，只需要开个桶，如果一个点走了不少于 nnn 次那么一定有负环。那么就可以了。
bool spfa()&#123; //1有负环 0无负环    queue&lt;int&gt; q;    while(!q.empty())&#123;        int u=q.front();        q.pop();        vis[u]=0;        for(auto e:adj[u])&#123;            if(dis[e.v]&lt;dis[u]+e.w)&#123;                dis[e.v]=dis[u]+e.w;                if(!vis[e.v])&#123;                    vis[e.v]=1;                    q.push(e.v);                    cnt[e.v]++;                    if(cnt[e.v]&gt;=n) return 1; // 不少于n次一定有                &#125;            &#125;        &#125;    &#125;    return 0;&#125;
你跟我说负边权图被卡SPFA了？可以考虑一下DAG跑。
 2.差分约束系统
差分约束系统是一种特殊的 NNN 元一次不等式组，有NNN 个变量与 MMM 个约束条件（其实就是不等式）。
所以为什么叫差分约束呢？是因为每一个不等式都是两个变量作差得到的：
{X2−X1≤C1X3−X2≤C2X4−X3≤C3\begin{cases}
 X_2-X_{1} \le C_{1} \\
X_3-X_{2}\le C_{2} \\
X_4-X_{3}\le C_{3} \\
\end{cases}
⎩⎪⎪⎨⎪⎪⎧​X2​−X1​≤C1​X3​−X2​≤C2​X4​−X3​≤C3​​
如上，都是作差得到的，所以叫差分约束了。
我们取第一个出来，我们变变形：
X2≤X1+C1X_2 \le X_{1}+C_{1}
X2​≤X1​+C1​
是不是有点像dis[e.v]&lt;dis[u]+e.w，及其相似。
我们怎么求解这些方程组呢？我们可以像上面的式子一样，我们就让后面的连前面的，例如下面的式子：
Xi−Xj≤CiX_i-X_{j}\le C_i
Xi​−Xj​≤Ci​
我们从Xj→XiX_j\rightarrow X_iXj​→Xi​ 连边，边权为CiC_iCi​。这样就可以了，但是这个有多组解（两边统一加上一个常数 ddd 不等式仍然成立），而且还有负数解，我们不喜欢负数解，但是我们可以加一个源点 X0X_0X0​，我们不妨令 X0=0X_0=0X0​=0 ，让后显然有 Xi−X0≤0X_i-X_{0}\le 0Xi​−X0​≤0 ，那么0→i0\rightarrow i0→i 连边权为 000 的边，这样就可以保证都是整数解了。
不妨设 dis[0]=0dis[0]=0dis[0]=0 ，让后以此为起点跑单源最短路，这样我们就能求出一组解了。如果有负环那么说明不等式不成立，那么就无解。
 2.1 大于等于推导
当然做题你会发现如下的式子：
Xi−Xj≥CiX_i-X_{j}\ge C_i
Xi​−Xj​≥Ci​
这个时候有两个方法，第一个两边都取负，不等式变号，就有Xj−Xi≤−CiX_j-X_{i}\le -C_iXj​−Xi​≤−Ci​，九二可以连边了；第二种方法就是改成跑单源最长路，如果有正环说明无解。
 2.2 等于式推导
还有如下的式子：
Xi=XjX_i=X_j
Xi​=Xj​
其实可以转化成：
Xi=Xj⇒{Xi−Xj≤0Xj−Xi≤0X_i=X_{j}\Rightarrow 
\begin{cases}
 X_i-X_{j}\le 0 \\
X_j-X_{i}\le 0
\end{cases}
Xi​=Xj​⇒{Xi​−Xj​≤0Xj​−Xi​≤0​
 2.3 分式推导
更有甚者：
XiXj≤Ci\frac{X_i}{X_{j}}\le C_i
Xj​Xi​​≤Ci​
这是差分约束吗？其实也可以变变形，回忆对数相减代表这什么，其实就可以转化为：
log⁡XiXj=log⁡aXi−log⁡aXj≤log⁡aCi\log\frac{X_i}{X_{j}}=\log_aX_i-\log_aX_{j}\le \log_{a}C_i
logXj​Xi​​=loga​Xi​−loga​Xj​≤loga​Ci​
做就可以了，这个 aaa 取大于0的实数即可，但是取2就可以了。
总结一下：



差分约束
转化后
连边(w为边权)




Xi−Xj≥ciX_i-X_j\ge c_iXi​−Xj​≥ci​
Xj−Xi≤−CiX_j-X_{i}\le -C_iXj​−Xi​≤−Ci​
i→j,wi=−Cii \rightarrow j,w_i=-C_ii→j,wi​=−Ci​


Xi−Xj≤CiX_i-X_{j}\le C_iXi​−Xj​≤Ci​
同前
j→i,wi=Cij \rightarrow i,w_i=C_ij→i,wi​=Ci​


Xi=XjX_i=X_jXi​=Xj​
Xi−Xj≤0,Xj−Xi≤0X_i-X_{j}\le 0,X_j-X_{i}\le 0Xi​−Xj​≤0,Xj​−Xi​≤0
i↔j,wi=0i \leftrightarrow j,w_i=0i↔j,wi​=0


XiXj≤Ci\frac{X_i}{X_{j}}\le C_iXj​Xi​​≤Ci​
logaXi−log⁡aXj≤log⁡aCilog_aX_i-\log_aX_{j}\le \log_{a}C_iloga​Xi​−loga​Xj​≤loga​Ci​
j→i,wi=log⁡aCij\rightarrow i,w_i=\log_a C_ij→i,wi​=loga​Ci​



让后跑spfa就可以了www。
 2.1 例题——Interval
例题：六倍经验——SP116 Interval

有 nnn 个区间，在区间 [ai,bi][a_i,b_i][ai​,bi​] 中至少取任意互不相同的 cic_ici​ 个整数。求在满足 nnn 个区间的情况下，至少要取多少个正整数。

做法1：差分约束
其实就是让我们选数，变量就是数的数量。
不难发现有x[bi]−x[ai−1]≥cix[b_i]-x[a_{i-1}]\ge c_ix[bi​]−x[ai−1​]≥ci​，但是为了保证我们的解有意义，我们还需要添加$ 1≥s[i]−s[i−1]≥01\ge s[i]-s[i-1] \ge 01≥s[i]−s[i−1]≥0，保证不能选负数个数，又不能多选出来。
但是0≤ai≤5×1040\le a_{i}\le 5\times 10^40≤ai​≤5×104，所以我们要从−1-1−1开始，很难受，其实也很简单，只需要都加上一即可让后从0开始即可了。
故代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=5e4+15,INF=1e9;struct Edge&#123;    int v,w;&#125;;int n,T,dis[MN];vector&lt;Edge&gt; adj[MN];bool vis[MN];void init()&#123;    for(int i=1;i&lt;=n;i++)&#123;        adj[i].clear();        dis[i]=-INF;        vis[i]=0;    &#125;&#125;void spfa()&#123;    queue&lt;int&gt; q;    q.push(0);    vis[0]=1;    dis[0]=0;    while(!q.empty())&#123;        int u=q.front();        q.pop();        vis[u]=0;        for(auto e:adj[u])&#123;            if(dis[e.v]&lt;dis[u]+e.w)&#123;                dis[e.v]=dis[u]+e.w;                if(!vis[e.v])&#123;                    q.push(e.v);                    vis[e.v]=1;                &#125;            &#125;        &#125;    &#125;&#125;void solve()&#123;    int maxp=-1;    cin&gt;&gt;n;    init();    for(int i=1;i&lt;=n;i++)&#123;        int a,b,c;        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;        adj[a].push_back(&#123;b+1,c&#125;);        maxp=max(maxp,b+1);    &#125;    for(int i=1;i&lt;=maxp;i++)&#123;        adj[i-1].push_back(&#123;i,0&#125;);        adj[i].push_back(&#123;i-1,-1&#125;);    &#125;    spfa();    cout&lt;&lt;dis[maxp]&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 2.2 强联通分量优化——洛谷P10935，3275

我们用一个正整数来表示恒星的亮度，数值越大则恒星就越亮，恒星的亮度最暗是 111。
现在对于 NNN 颗我们关注的恒星，有 MMM 对亮度之间的相对关系已经判明。
你的任务就是求出这 NNN 颗恒星的亮度值总和至少有多大。
输入格式：
第一行给出两个整数 NNN 和 MMM。
之后 MMM 行，每行三个整数 T,A,BT, A, BT,A,B，表示一对恒星 (A,B)(A, B)(A,B) 之间的亮度关系。恒星的编号从 111 开始。
如果 T=1T = 1T=1，说明 AAA 和 BBB 亮度相等。
如果 T=2T = 2T=2，说明 AAA 的亮度小于 BBB 的亮度。
如果 T=3T = 3T=3，说明 AAA 的亮度不小于 BBB 的亮度。
如果 T=4T = 4T=4，说明 AAA 的亮度大于 BBB 的亮度。
如果 T=5T = 5T=5，说明 AAA 的亮度不大于 BBB 的亮度。
无解输出−1-1−1
1≤N≤105,1≤M≤1061\le N \le 10^5,1\le M \le 10^61≤N≤105,1≤M≤106

首先我们归类一下能直接看出来的式子，这里我们先都转成大于式子，不知道大于式子怎么差分约束的看2.1：
{XA−XB≥0,XB−XA≥0A=B?A&lt;BXA−XB≥0A≥B?A&gt;BXB−XA≥0A≤B\begin{cases}
X_A-X_B\ge0,X_B-X_{A} \ge 0 &amp; A=B \\
? &amp; A&lt;B \\
X_A-X_{B} \ge 0 &amp; A\ge B \\
? &amp; A&gt;B  \\
X_B-X_{A}\ge 0 &amp; A\le B
\end{cases}
⎩⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎧​XA​−XB​≥0,XB​−XA​≥0?XA​−XB​≥0?XB​−XA​≥0​A=BA&lt;BA≥BA&gt;BA≤B​
我们解决一下小于和大于的情况：
XA−XB&lt;0XB−XA&gt;0∵XB,XA∈Z∴XB−XA∈Z∴XB−XA≥1\begin{aligned}
X_A-X_{B}&amp; &lt; 0 \\ 
X_B-X_{A}&amp; &gt; 0 \\
\because X_B,X_{A} &amp; \in \mathbb{Z} \\
\therefore X_B-X_{A} &amp; \in \mathbb{Z} \\
\therefore X_B-X_{A}&amp; \ge 1
\end{aligned}
XA​−XB​XB​−XA​∵XB​,XA​∴XB​−XA​∴XB​−XA​​&lt;0&gt;0∈Z∈Z≥1​
大于情况同理。
整理一下：
{XA−XB≥0,XB−XA≥0A=BXB−XA≥1A&lt;BXA−XB≥0A≥BXA−XB≥1A&gt;BXB−XA≥0A≤B\begin{cases}
X_A-X_B\ge0,X_B-X_{A} \ge 0 &amp; A=B \\
X_B-X_{A}\ge 1 &amp; A&lt;B \\
X_A-X_{B} \ge 0 &amp; A\ge B \\
X_A-X_{B}\ge 1 &amp; A&gt;B  \\
X_B-X_{A}\ge 0 &amp; A\le B
\end{cases}
⎩⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎧​XA​−XB​≥0,XB​−XA​≥0XB​−XA​≥1XA​−XB​≥0XA​−XB​≥1XB​−XA​≥0​A=BA&lt;BA≥BA&gt;BA≤B​
让后我们就可以用SPFA跑，于是代码如下…？怎么N≤105N \le 10^5N≤105。
O(NM)O(NM)O(NM)炸掉了呜呜呜。怎么做？
观察原图，不难发现每个边的边权不是1就是0，我们判断无解怎么判断？那当然是找环，不难发现如果有环并且环上一旦有权为1的边就是无解（正环无解）。
但是怎么求有向图的环呢？而且复杂度还不能O(NM)O(NM)O(NM)…Tarjan大法好！强联通分量复杂度O(N+M)O(N+M)O(N+M)。
但是不对啊，还有有解的情况呢？怎么求，其实也好，如果有解那么一个强联通分量的答案一定是相同的（因为要求最小所以都填一样就行了），那么直接缩点，缩点完后就是一个DAG，跑拓扑排序单源最长路就可以了。
什么？你不会DAG的单源最长路？
dis[v]=max⁡v∈son(u)(dis[v],dis[u]+wedge)dis[v]=\max\limits_{v\in son(u)}(dis[v],dis[u]+w_{edge})
dis[v]=v∈son(u)max​(dis[v],dis[u]+wedge​)
这是递推公式，因为初始 XXX 最小为1，所以初始化入度为0的节点 dis[u]=0dis[u]=0dis[u]=0 ，答案怎么算？也很简单。
ans=∑i=1dcccnti×disians=\sum\limits_{i=1}^{dcc}cnt_{i} \times dis_i
ans=i=1∑dcc​cnti​×disi​
其中 dccdccdcc 是强联通分量的个数，cntcntcnt 是强联通分量节点个数。
所以代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;struct Edge&#123;    int v,w;&#125;;int n,m,tot,dcc,top,s[MN],color[MN],in[MN],low[MN],dfn[MN],f[MN];vector&lt;Edge&gt; adj[MN],adj2[MN];vector&lt;int&gt; vdcc[MN];bool vis[MN];void tarjan(int u)&#123;    low[u]=dfn[u]=++tot;    s[++top]=u;    vis[u]=1;    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(!dfn[v])&#123;            tarjan(v);            low[u]=min(low[u],low[v]);        &#125;else if(vis[v])&#123;            low[u]=min(low[u],dfn[v]);        &#125;    &#125;    if(low[u]==dfn[u])&#123;        dcc++;        int p;        do        &#123;            p=s[top--];            color[p]=dcc;            vdcc[dcc].push_back(p);            vis[p]=0;        &#125; while (p!=u);            &#125;&#125;void toposort()&#123;    queue&lt;int&gt; q;    for(int i=1;i&lt;=dcc;i++)&#123;        if(!in[i])&#123;            q.push(i);            f[i]=1;        &#125;    &#125;    while(!q.empty())&#123;        int u=q.front();        q.pop();        for(auto e:adj2[u])&#123;            in[e.v]--;            f[e.v]=max(f[e.v],f[u]+e.w);            if(!in[e.v]) q.push(e.v);        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int mode,u,v;        cin&gt;&gt;mode&gt;&gt;u&gt;&gt;v;        if(mode==1)&#123;            adj[v].push_back(&#123;u,0&#125;);            adj[u].push_back(&#123;v,0&#125;);            //cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; 0\n&quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;u&lt;&lt;&quot; 0\n&quot;;        &#125;        if(mode==2)&#123;            adj[u].push_back(&#123;v,1&#125;);            //cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; 1\n&quot;;        &#125;        if(mode==3)&#123;            adj[v].push_back(&#123;u,0&#125;);            // cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; 0\n&quot;;        &#125;        if(mode==4)&#123;            adj[v].push_back(&#123;u,1&#125;);            // cout&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;u&lt;&lt;&quot; 1\n&quot;;        &#125;        if(mode==5)&#123;            adj[u].push_back(&#123;v,0&#125;);            // cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; 0\n&quot;;        &#125;    &#125;    //for(int i=1;i&lt;=n;i++) adj[0].push_back(&#123;i,1&#125;);    for(int i=1;i&lt;=n;i++)&#123;        if(!dfn[i]) tarjan(i);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(auto e:adj[i])&#123;            if(color[i]!=color[e.v])&#123;                adj2[color[i]].push_back(&#123;color[e.v],e.w&#125;);                in[color[e.v]]++;            &#125;            if(color[i]==color[e.v]&amp;&amp;e.w==1)&#123;                cout&lt;&lt;-1;                return 0;            &#125;        &#125;    &#125;    toposort();    int ans=0;    for(int i=1;i&lt;=dcc;i++)&#123;        ans+=f[i]*vdcc[i].size();    &#125;    cout&lt;&lt;ans;    return 0;&#125;
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>广义圆方树</title>
    <url>/posts/23139b1/</url>
    <content><![CDATA[ 0. 前言
我们主要讨论的就是广义的圆方树。
 1. 介绍
广义圆方树是刻画图上点连通性的工具，是 Tarjan 算法的一个强有力拓展。广义圆方树能够述原图任意两点之间的所有割点，即路径 u→vu\to vu→v 上所有必须经过的点。下面有一张图来举例：

图的问题我们不好处理，但是众所周知，树上问题是比普通的图论问题处理起来方便得多的。所以我们将图转化为圆方树的意义就是在于通过树上的算法简化问题。
广义圆方树中的节点分为两类：圆点和方点，在上图中所表示出来。圆点就是原本图上的点，而每个方点都代表了一个点双联通分量。将每个方点和所有在这个联通分量中的点连起来。
注意，只有原图联通的时候才能是一棵树，如果不连通的话那么会形成森林。
我们在求解点双的时候可以顺便建出圆方树，以下为代码，adjadjadj 为原图，GGG 为圆方树。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,m;vector&lt;int&gt; adj[MN],G[MN];namespace YFTree&#123;    int dfn[MN],low[MN],s[MN],top,dtot,ftot;    void init()&#123;        ftot=n;    &#125;    void tarjan(int u)&#123;        cerr&lt;&lt;&quot;ENTER: &quot;&lt;&lt;u&lt;&lt;&#x27;\n&#x27;;        low[u]=dfn[u]=++dtot;        s[++top]=u;        for(auto v:adj[u])&#123;            if(!dfn[v])&#123;                tarjan(v);                low[u]=min(low[u],low[v]);                if(low[v]==dfn[u])&#123;                    ++ftot;                    cerr&lt;&lt;&quot;FOUND NEW BCC &quot;&lt;&lt;ftot-n&lt;&lt;&#x27;\n&#x27;;                    int p;                    while(p!=v)&#123;                        p=s[top--];                        G[ftot].push_back(p);                        G[p].push_back(ftot);                        cerr&lt;&lt;ftot&lt;&lt;&quot; &quot;&lt;&lt;p&lt;&lt;&#x27;\n&#x27;;                    &#125;                    G[ftot].push_back(u);                    G[u].push_back(ftot);                    cerr&lt;&lt;ftot&lt;&lt;&quot; &quot;&lt;&lt;u&lt;&lt;&#x27;\n&#x27;;                &#125;            &#125;else low[u]=min(low[u],dfn[v]);        &#125;    &#125;&#125;using namespace YFTree;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    init();    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(!dfn[i]) tarjan(i),--top;    &#125;    return 0;&#125;
 2. 例题
在说明例题之前，完全有必要说明一个结论：

若在圆方树上 zzz 是 x,yx,yx,y 的必经点，则原图 zzz 是 x,yx,yx,y 的必经点，且为割点。

 P4630
考虑两圆点在圆方树上的简单路径，与路径上经过的方点相邻的圆点的集合，即为原图此简单路径上的点集。
对于题目中三元组 (s,c,f)(s,c,f)(s,c,f)，考虑固定 s,fs,fs,f，求 ccc 的数量。答案就是 s,fs,fs,f 之间简单路径并集的数量减去 2。
我们考虑如何用圆方树实习这一过程，这里有一个圆方树的 Trick：在路径统计时，给点附上合适的点权。
本题中，我们方点赋权为点双大小，而圆点赋值为 -1，这样问题转化为了统计圆方树上两圆点之间简单路径权值和，时间复杂度是 O(n2log⁡n)O(n^2 \log n)O(n2logn) 的，无法通过，考虑优化。我们考虑把贡献分摊到每个点上，每个点对答案的贡献就是通过他的路径条数乘上它的权值，而路径条数围为： (所有以此点为根的树中每两个子树中圆点个数相乘再相加，再加上每个子树中圆点个数与不属于这个点的树的圆点个数相乘) ×2\times 2×2。
也可以用换根 DP 解决，时间复杂度都是 O(n+m)O(n+m)O(n+m)。
 P4606 战略游戏
扣掉这个节点后 uuu 不能到达 vvv，说明该点为 u→vu\to vu→v 路径上的一个必经点，转化一下题意就是割点。考虑建广义圆方树，那么原题转化为求点集 SSS 的虚树上不包含属于 SSS 的圆点数量。每次统计虚树上的点数即可，复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
如果你不想建虚树，不妨考虑做树上距离前缀和即可。
 P4334
考虑建广义圆方树。

第二问：即判断圆方树两点路径上是否存在点 ccc，可以用树剖解决。

具体的，我们在树刨求 LCA⁡(x,y)\operatorname{LCA}(x,y)LCA(x,y) 的时候，跳深度大的点 xxx 的时候，若 ccc 和当前要跳的点 xxx 在一条链上并且深度比 xxx 小，那么存在。否则一直判断，直到 x,yx,yx,y 在同一链上的时候（仍令 depx&lt;depydep_x &lt; dep_ydepx​&lt;depy​），判断 x,yx,yx,y 和 ccc 是否在一条链上并且 depc∈[depx,depY]dep_c \in [dep_x,dep_Y]depc​∈[depx​,depY​] 即可。


第一问：首先判断 G1→G2G_1 \to G_2G1​→G2​ 是否为割边（对应到圆方树就是点双大小为 2），若是，则判断其对应的方点是否在路径上，问题转化为第二问。

时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
 P3225 矿场搭建
以下 nnn 为图的点数。
并非板子，考虑题目希望我们给出一种选择关键点的方式，满足删去任何一个点后形成的每个连通块内都存在至少一个关键点。
非割点是没有营养的，割点是十分有的，那么命题等价为删掉任意一个割点之后连通块存在关键点。
考虑最好情况，整个图是点双连通分量，那么答案就是 (n2)\dbinom{n}{2}(2n​)。
考虑不是，那么注意到是和割点有关的信息，考虑建出广义圆方树。让后我们要对这个圆方树进行一些小操作，即把所有叶子都给删掉，即原图的非割点，我们得到了广义圆方树的由原图割点和点双方点构成的树。
我们在这颗树上搞事情，那么命题相当于在上面任意删掉一个圆点，连通块存在关键点。有一个方案就是将这颗树的叶子（即叶子方点）放一个关键点，证明这个方案是最少的。反证法可以证明。
那么令叶子对应点双大小为 s1,s2,…,sks_1,s_2,\dots,s_ks1​,s2​,…,sk​，那么若第一问答案为 kkk，第二问的答案就是 ∏i=1k(si−1)\prod_{i=1}^k (s_i -1)∏i=1k​(si​−1)。
 CF487E
点赋权与树分治 Trick 应用。
ccc 在 a→ba\to ba→b 的简单路径上当且仅当 ccc 和 a→ba\to ba→b 某个方点相邻，令方点的权值为对应点双所有节点对应权值最小值，将圆方树树剖求路径最小值即可回答询问。
但是有修改哎，怎么办，修改点权时可能影响到很多方点权值，无法承受。我们可以考虑类似于树分治的思想，只维护儿子的信息，我们将方点维护一个 multiset，里面存所有与之相邻的圆点权值，然后权值就是 multiset 中的最小值，修改圆点权值时修改其父节点的 multiset 并更新其父节点权值。
同理求点权最小值即可，时间复杂度 O(((n+q)log⁡n)log⁡n)O(((n+q)\log n)\log n)O(((n+q)logn)logn)。
 P8456
好题，但是做这个题的时候脑子特别困，浪费了这个题了呜呜呜。
先建出圆方树，那么原命题可以分类讨论成两种情况：在一个点双和不在一个点双。

在一个点双：如何点双里面所有颜色都相同那么就完蛋了。如果两种颜色都有的话，你可能和我一样点双内部点都合法，但是分析一下发现不是这样。例如一个二元环，但有 d 和 D 的边，就炸杠了。考虑这个反例会对答案如何贡献，发现这个反例有且仅有一个，也就是说如果一个点双里有且只有两个点满足其既有 D 也有 d 的出边，那么其对答案的贡献就是 (siz2)−1\dbinom{siz}{2}-1(2siz​)−1，否则贡献的就是 (siz2)\dbinom{siz}{2}(2siz​)。
不在一个点双：我们把点双分类：全 d 点双，全 D 点双，混合点双。论是如果两点在圆方树上的路径上全是黑点双，或者全是白点双的时候才不合法。证明见 Alex_weiのSolution

实现上我们容斥，不合法的首先有形如同色点双构成的极大同色连通块，可以通过圆方树上 dp 求解贡献，再对每个非同色点双看看是否要减去一对 u,v 的贡献即可。
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>序理论与dilworth定理</title>
    <url>/posts/87bd8cf4/</url>
    <content><![CDATA[ 0. 引入
你需要的前置：

一颗清醒的大脑（因为这是抽象的东西）
概念基础辨析
集合（高一数学必修一）

 1. 序理论
 1.1 定义与二元关系

序理论是研究捕获数学排序的直觉概念的各种二元关系的数学分支。——百度百科

数学排序？这个我会啊，不就是排序吗…？
其实这里并不指的是单独的排序。
既然有不同的点，那么特殊在哪里？
先来一个小定义：

笛卡尔积：设 X,YX,YX,Y 两个集合，那么存在一个集合，它的元素是用 XXX 中元素为第一元素，YYY 中元素为第二元素组成的有序二元组，称它为集合X,YX,YX,Y的笛卡尔积集，记为 X×YX\times YX×Y。
X×Y={(a,b)∣a∈X,b∈Y}X\times Y=\left\{ (a,b)|a\in X,b\in Y \right\}X×Y={(a,b)∣a∈X,b∈Y}

怎么理解？类比一下C++中的pair容器吗。
例如 X={1,2},Y={a,b,c}X=\left\{ 1,2 \right\},Y=\left\{ a,b,c \right\}X={1,2},Y={a,b,c}，那么有X×Y={(1,a),(1,b),(1,c),(2,a),(2,b),(2,c)}X\times Y=\left\{ (1,a),(1,b),(1,c),(2,a),(2,b),(2,c) \right\}X×Y={(1,a),(1,b),(1,c),(2,a),(2,b),(2,c)}。
接下来是正式的定义：

二元关系：集合 XXX 与集合 YYY 上的二元关系是R=(X,Y,G(R))R=(X,Y,G(R))R=(X,Y,G(R))，其中G(R)G(R)G(R)，称为R的图称为R的图称为R的图，是笛卡尔积 X×YX×YX×Y 的子集。若 (x,y)∈G(R)(x,y) \in G(R)(x,y)∈G(R) ，则称 xxx 是 RRR 关系于 yyy ，并记作xRyx R yxRy或R(x,y)R(x,y)R(x,y)。否则称 xxx 与 yyy 无关系 RRR。但经常地我们把关系与其图等同起来，即：若R⊆X×YR⊆X×YR⊆X×Y，则 RRR 是一个关系。

什么？看不懂？没关系我也看不懂www。举个例子吧，例如在 N+\mathbb{N}_{+}N+​ 自然数集合上的小于等于关系就是一个二元关系，例如对于R⇒≤R \Rightarrow \leR⇒≤，对于 2,32,32,3 来说是有关系，而对于3,23,23,2 来说不行，因为 3≤23\le 23≤2 不满足，所以称他们无关系。
到现在应该有一点模糊的理解了吧，那么对于那个图 GGG 怎么说呢？我理解的就是满足 RRR 关系的集合（事实也是这样的，并且这个集合还是类似于一个pair），比如说上面的 (2,3)(2,3)(2,3) 他就属于 G(R)G(R)G(R)，而 (3,2)(3,2)(3,2) 不属于因为它不满足我们上面提到的 “ RRR ” 关系。
 1.2 二元关系的性质
一般来说我们研究关系会研究有没有一些特殊性质。我们对于集合 SSS 上的二元关系 RRR （就是 R⊆S×SR⊆S\times SR⊆S×S）定义以下性质：

自反性：(∀a∈S),(a,a)∈R(\forall a\in S),(a,a)\in R(∀a∈S),(a,a)∈R，例如a≤a,(a∈N+)a\le a,(a\in \mathbb{N}_{+})a≤a,(a∈N+​)。
反自反性：(a,a)∉R,(∀a∈S)(a,a) \notin R,(\forall a \in S)(a,a)∈/R,(∀a∈S) ，例如a&lt;a,(a∈N+)a&lt;a,(a\in \mathbb{N}_+)a&lt;a,(a∈N+​)就不成立。
对称性：(a,b)∈R⇔(b,a)∈R,(a,b∈S)(a,b)\in R \Leftrightarrow (b,a) \in R,(a,b \in S)(a,b)∈R⇔(b,a)∈R,(a,b∈S)，等于关系。
反对称性：(a,b),(b,a)∈R,(a,b∈S)⇒a=b(a,b),(b,a) \in R,(a,b \in S) \Rightarrow a=b(a,b),(b,a)∈R,(a,b∈S)⇒a=b
传递性：(a,b)∈R,(b,c)∈R⇒(a,c)∈R,(a,b,c∈S)(a,b)\in R,(b,c) \in R \Rightarrow (a,c) \in R,(a,b,c \in S)(a,b)∈R,(b,c)∈R⇒(a,c)∈R,(a,b,c∈S)，例如小于等于。

 1.3 偏序关系，偏序集与哈斯图

对于二元关系 R⊆X×XR\subseteq X\times XR⊆X×X，如果 RRR 有自反性，反对称性，传递性，那么 RRR 就是偏序关系。

而偏序集就是 集合 SSS 与 SSS 上的偏序关系 RRR 构成的，记为 (S,R)(S,R)(S,R)。
例如SSS 中的元素x,yx,yx,y ，若(x,y)(x,y)(x,y) 或 (y,x)(y,x)(y,x) 在 RRR 关系下成立，那么我们称 x,yx,yx,y 可比，反之则不可比。
但是太抽象了，我们需要一个更清晰明了的图。

覆盖元素：对于元素 xxx，如果 x&lt;yx&lt;yx&lt;y 不存在 zzz 使得有 x&lt;z&lt;yx&lt;z&lt;yx&lt;z&lt;y 那么我们称 yyy 就是 xxx 的覆盖元素（注意这里的小于号其实是一种关系，不是真的小于！），在哈斯图中连出 x→yx\rightarrow yx→y 的有向边，这种关系生成的图叫做哈斯图。

借用Tofu大佬的图：
例如集合 {1,2,3,4,6,7，8，9}\left\{ 1,2,3,4,6,7，8，9 \right\}{1,2,3,4,6,7，8，9} 上的关系 {(a,b)∣a整除b}\left\{ (a,b)|a\text{整除}b \right\}{(a,b)∣a整除b}。左侧图即为：

实际中我们不标注方向，所以一般来说我们将较大的元放在上面，隐式的表达有向。
不难发现这其实是一个DAG(有向无环图)。
对于右面那个图是另外一个东西，我们设定的关系是“属于关系”，可以自己对比以下。
 2. Dilworth定理
 2.1 定义
我们这里阐述以下链和反链的定义：

设 CCC 是偏序集的一个子集，如果 CCC 中元素互相可比，那么称 CCC 是链。反之互相不可比，那么就是反链。

例如oiwiki的图：下面的关系还是我们的属于关系：

例如 {∅,{1},{1,2}}\left\{ \varnothing_,\left\{ 1\right\},\left\{ 1,2\right\} \right\}{∅,​{1},{1,2}}，就是一条链，而{{1},{0,2}}\left\{ \left\{ 1\right\},\left\{ 0,2\right\} \right\}{{1},{0,2}} 就是反链。不难发现这里最长反链长度就是3，我们称最长反链长度为 偏序集 SSS 的宽度。
那么diliworth定理呢？

对于任意有限偏序集，其最大反链中元素的数目必等于最小链划分中链的数目。此定理的对偶形式亦真。

例如下面的整除关系图（tofu大佬orz）：

不难发现最长反链只能是2，而刚好只需要2条链就能覆盖。
证明？自行了解www。
 2.2 例题
P1020——导弹拦截
想当年我做这个题的时候我还根本就不知道DilWorth定理是什么。感慨万千
设高度序列为 P={x1,x2,...,xn}P=\left\{ x_1,x_2,...,x_n \right\}P={x1​,x2​,...,xn​}，集合 S={(i,xi)∣i∈N且1≤i≤N}S=\left\{ (i,x_{i)}| i\in N \text{且} 1\le i\le N \right\}S={(i,xi)​∣i∈N且1≤i≤N}。
那么偏序关系为 R={((i,xi),(j,pj))∣i≤j,xi≥xj}R=\left\{ ((i,x_i),(j,p_{j))}| i\le j,x_{i}\ge x_j \right\}R={((i,xi​),(j,pj))​∣i≤j,xi​≥xj​}。
这时候 (S,R)(S,R)(S,R) 构成一个偏序集，具体含义就是 i≤j,xi≥xji\le j,x_{i}\ge x_ji≤j,xi​≥xj​ 那么就说明拦截了第 iii 个导弹后还可以拦截 第 jjj 个导弹。
对于第一问，就是求最长链的长度，对于第二问，最少拦截系统个数？
最少系统个数其实就是要求每一个系统所管束的链最长，这不就是求最小链覆盖吗。
 2.3 DAG，二分图转化
dilworth的理解另一个形式，链覆盖与二分图匹配的对应关系。
在一个二分图匹配中，非匹配点一定是链的起点，所以链覆盖集的个数就是非匹配节点的个数，而匹配越大，非匹配点越少。那么就有一个及其强有力的结论：
∣链覆盖集∣=∣V∣−∣最大匹配∣|\text{链覆盖集}|=|V|-|\text{最大匹配}|
∣链覆盖集∣=∣V∣−∣最大匹配∣
那怎么用？我们拿一个我想不出来的例题来说：
P12148 【MX-X11-T2】「蓬莱人形 Round 1」所以我放弃了音乐
我们看图，我们把能够访问到的棋子之间从上往下连有向边：

我们对于任意一行，都只能往下取连边不能往左往右连边。
“对于任意……都有唯一……” 这是一个很好的性质，我们可以将它抽象成二分图，这是因为二分图匹配后的每一个匹配点都有唯一一个点与之匹配。
但是我们观察这个，我们变变形：

很像二分图，但其实是k-分图，但是我们可以转成二分图的样式，我们看看题目求什么，要求最小的操作次数…这不就是最小链覆盖吗。
于是就做完了，时间复杂度 O(n)O(n)O(n)。实现带log⁡\loglog。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=2e6+15;struct Node&#123;    int x,y;&#125;nd[MN];int n,maxx;map&lt;pir,int&gt; um;map&lt;pir,bool&gt; vis;set&lt;int,greater&lt;int&gt;&gt; s[MN];signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;nd[i].x&gt;&gt;nd[i].y;        um[pir(nd[i].x,nd[i].y)]=i;        s[nd[i].x].insert(nd[i].y);        maxx=max(maxx,nd[i].x);    &#125;    int ans=n;    for(int i=1;i&lt;maxx;i++)&#123;        for(auto p:s[i])&#123;            if(um[pir(i+1,p+1)]&amp;&amp;!vis[pir(i+1,p+1)])&#123;                ans--;                vis[pir(i+1,p+1)]=1;            &#125;            else if(um[pir(i+1,p)]&amp;&amp;!vis[pir(i+1,p)])&#123;                ans--;                vis[pir(i+1,p)]=1;            &#125;            else if(um[pir(i+1,p-1)]&amp;&amp;!vis[pir(i+1,p-1)])&#123;                ans--;                vis[pir(i+1,p-1)]=1;            &#125;        &#125;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
回头过来思考这个题，其实这个DAG已经说明满足偏序关系了，关系就是 u→vu\rightarrow vu→v谁否能够到达。而我们就是要在这个关系上求解最小链覆盖。
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>换根DP</title>
    <url>/posts/4286fd48/</url>
    <content><![CDATA[ 换根DP
树形 DP 中的换根 DP 问题又被称为二次扫描，通常不会指定根结点，并且根结点的变化会对一些值，例如子结点深度和、点权和等产生影响。
他相比于相比与一般的树形dp拥有以下特点

以树上不同点作为根，他的解不同
求解答案，不能单求解某点的信息，需要求解每个节点的信息。
无法用一次搜索完成答案求解。

难度不算太高
 1.例题引入
  P3478 [POI 2008] STA-Station

给定一个 nnn 个点的树，请求出一个结点，使得以这个结点为根时，所有结点的深度之和最大。
一个结点的深度之定义为该节点到根的简单路径上边的数量。

我们先假设某个节点为根（例如1为根），将无根树转换为有根树，再通过一次DFS搜索出以该节点的深度和，时间复杂度O(n)O(n)O(n)
但问题是我们无法确定以该点为根时一定能得到最优解，如果可以的话可以拿样例推推，可以显然发现以任意点为根无法确定是最优解（例如从1开始）

没错这个树长得很奇怪。
我们可以在第二次搜索时完成对答案的统计。

我们假设第一次搜索我们从1号节点出发，通过一次搜索我们就可以获得所有节点子树的大小与节点深度，代码如下：

void dfs1(int u,int fa)&#123;    siz[u]=1;    dep[u]=dep[fa]+1;    for(auto v:adj[u])&#123;        if(fa!=v)&#123;            dfs1(v,u);            siz[u]+=siz[v];        &#125;    &#125;&#125;


第二次搜索依旧从1号节点开始，若1号节点与节点x联通，我们考虑能不能从1号节点的答案推出节点x的答案，如下图



假设这时候我们将根节点换为xxx节点，那么该节点子树就会分成两部分。一部分是原来的子树，一部分是1号节点的其他子树

根从1号节点变为xxx节点的时候，我们发现xxx原来的子树的深度都降低了1，而111号节点的深度增加1。



递推公式即可得:ans[v]=ans[u]−siz[v]+(siz[1]−siz[v])ans[v]=ans[u]-siz[v]+(siz[1]-siz[v])ans[v]=ans[u]−siz[v]+(siz[1]−siz[v])
不了解？我们一个一个来解释
首先我们要求解的是深度和，我们由uuu推的vvv的答案，那么我们首先需要以uuu作为根节点的答案。
减去siz[v]siz[v]siz[v]是因为对于vvv节点的原子树，我们对其在处理深度时应当全部减1，故减去siz[v]siz[v]siz[v]（根节点自己也算，他的深度减去就是0）
siz[1]siz[1]siz[1]表示这个图所有的点数，减去siz[v]siz[v]siz[v]就是除原子树外与vvv节点链接的其他子树，可以相当于上图的橙色链。
化简即得ans[v]=ans[u]+siz[1]−2×siz[v]ans[v]=ans[u]+siz[1]-2\times siz[v]ans[v]=ans[u]+siz[1]−2×siz[v]
故代码如下
#include&lt;iostream&gt;#include&lt;vector&gt;#define ull long longusing namespace std;const int MN=1e6+15;vector&lt;int&gt; adj[MN];ull n,ans[MN],siz[MN],dep[MN];void dfs1(int u,int fa)&#123;    siz[u]=1;    dep[u]=dep[fa]+1;    for(auto v:adj[u])&#123;        if(fa!=v)&#123;            dfs1(v,u);            siz[u]+=siz[v];        &#125;    &#125;&#125;void dfs2(int u,int fa)&#123;    for(auto v:adj[u])&#123;        if(fa!=v)&#123;            ans[v]=ans[u]+siz[1]-2*siz[v];            dfs2(v,u);        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs1(1,0);    for(int i=1;i&lt;=n;i++)&#123;        ans[1]+=dep[i];    &#125;    dfs2(1,0);    ull maxx=-1e13,p;    for(int i=1;i&lt;=n;i++)&#123;        if(ans[i]&gt;maxx)&#123;            maxx=ans[i];            p=i;        &#125;    &#125;    cout&lt;&lt;p;    return 0;&#125;
 2.例题引入的总结
我们看出换根dp的套路

指定某个节点为根节点
第一次搜索完成预处理，处理出子树大小等信息，同时得到该节点的解
第二次搜索进行换根的DP，用已知解的信息推出未知解的答案

 3.例题1——P2986 [USACO10MAR] Great Cow Gathering G

每个奶牛居住在 NNN 个农场中的一个，这些农场由 N−1N-1N−1 条道路连接，并且从任意一个农场都能够到达另外一个农场。道路 iii 连接农场 AiA_iAi​ 和 BiB_iBi​，长度为 LiL_iLi​。集会可以在 NNN 个农场中的任意一个举行。另外，每个牛棚中居住着 CiC_iCi​ 只奶牛。
在选择集会的地点的时候，Bessie 希望最大化方便的程度（也就是最小化不方便程度）。比如选择第 XXX 个农场作为集会地点，它的不方便程度是其它牛棚中每只奶牛去参加集会所走的路程之和（比如，农场 iii 到达农场 XXX 的距离是 202020，那么总路程就是 Ci×20C_i\times 20Ci​×20）。帮助 Bessie 找出最方便的地点来举行大集会。

这个题我们需要维护一个disdisdis变量表示从其他节点走到当前节点的距离，这个变量我们只需要在第一次搜索时使用即可。这个变量是为了统计出其他子树的奶牛到当前节点的距离。
我们考虑递推公式，我们发现在换根的时候会有相应的边权加减，例如下图

故显然得到递推方程
ans[v]=ans[u]+(1−2×siz[v])∗Edge（u,v）ans[v]=ans[u]+(1-2\times siz[v])*Edge_{（u,v）}ans[v]=ans[u]+(1−2×siz[v])∗Edge（u,v）​
也就是说要乘上边权
故有代码：
struct edge&#123;    int v,w;&#125;;ll n,siz[MN],dis[MN],c[MN],ans[MN],minn=1e16;vector&lt;edge&gt; adj[MN];void dfs1(int u,int fa)&#123;    siz[u]=c[u];    for(auto v:adj[u])&#123;        if(v.v!=fa)&#123;            dfs1(v.v,u);            siz[u]+=siz[v.v];            dis[u]+=dis[v.v]+siz[v.v]*v.w;        &#125;    &#125;&#125;void dfs2(int u,int fa)&#123;    for(auto v:adj[u])&#123;        if(v.v!=fa)&#123;            ans[v.v]=ans[u]+(siz[1]-2*siz[v.v])*v.w;            dfs2(v.v,u);        &#125;    &#125;&#125;
初始化ans[1]=dis[1]ans[1]=dis[1]ans[1]=dis[1]
 4.例题2——CF1324F

给定一棵 nnn 个节点无根树，每个节点 uuu 有一个颜色 aua_uau​，若 aua_uau​ 为 000 则 uuu 是黑点，若 aua_uau​ 为 111 则 uuu 是白点。
对于每个节点 uuu，选出一个包含 uuu 的连通子图，设子图中白点个数为 cnt1cnt_1cnt1​，黑点个数为 cnt2cnt_2cnt2​，请最大化 cnt1−cnt2cnt_1 - cnt_2cnt1​−cnt2​。并输出这个值。
1≤n≤2×1051 \leq n \leq 2 \times 10^51≤n≤2×105，0≤au≤10 \leq a_u \leq 10≤au​≤1。

要求最大化cnt1−cnt2cnt_1-cnt_2cnt1​−cnt2​，不妨设白点带来的权值是+1+1+1，黑点带来的权值是−1-1−1。
对于这道题而言，我们任意选取节点作为根，所得到的答案也各不相同。
故设状态f[u]f[u]f[u]表示以u为根节点，走uuu子树能得到的最大值，故初始值我们就设f[u]=color[u]f[u]=color[u]f[u]=color[u]，color就是上面颜色所带来的权值，这里我们先设根节点为1，故第一次dfs我们能得到f[1]f[1]f[1]的答案，但是对于其他节点来时f[v]f[v]f[v]并不是以u为根节点，而是只走其子树的答案。不理解看下图：

但是我们维护的是最大值，也就是说我们尽量不加答案为负的子树的答案，也就是我们需要判断以下，看代码。
void dfs1(int u,int fa)&#123;    f[u]=c[u] ? 1 : -1;    for(auto v:adj[u])&#123;        if(fa==v) continue;        dfs1(v,u);        f[u]+=max(f[v],0);    &#125;&#125;
我们开始考虑转移，我们开始考虑每个子树对于根节点的贡献，我们发现在第一次dfs如果权值为正那么子树答案是必定算上的。故如果当前节点的f[v]f[v]f[v]为正的话那么f[u]f[u]f[u]应当减去当前节点的贡献。
计算完毕后我们开始考虑以当前点为根，还是和第一次dfs转移一样，尽量不加答案为负子树的答案，这点同样适用于f[v]f[v]f[v]从f[u]f[u]f[u]转移过来。


故代码如下：
void dfs2(int u,int fa)&#123;    for(auto v:adj[u])&#123;        if(fa==v) continue;        int fu=f[u],fv=f[v];        if(fv&gt;0)&#123;            fu-=fv;        &#125;        if(fu&gt;0)&#123;            fv+=fu;        &#125;        f[v]=ans[v]=fv;        dfs2(v,u);    &#125;&#125;

参考：【朝夕的ACM笔记】动态规划-换根DP
]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>数位DP</title>
    <url>/posts/a3781d1f/</url>
    <content><![CDATA[ 0.引入的引入
数位是指把一个数字按照个、十、百、千等等一位一位地拆开，关注它每一位上的数字。如果拆的是十进制数，那么每一位数字都是 0~9，其他进制可类比十进制。
而数位DP，就是解决在区间[L,R][L,R][L,R]这个范围内，求满足某种约束的数字的数量或总和或乘积或平方这一类问题。
两种写法，一种是记忆化搜索，一种是迭代写法。这里是记忆化搜索，优点是好写好维护。
 1.由例题引入数位DP
数位DP有一个通用的技巧，就是利用前缀和的思想，先求出[1,R][1,R][1,R]区间的满足约束的数字答案，再处理[1,L−1][1,L-1][1,L−1]的满足约束的数字答案，这样Ans[R]−Ans[L−1]Ans[R]-Ans[L-1]Ans[R]−Ans[L−1]所求得的区间就是[L,R][L,R][L,R]区间的答案。
所以我们要求解的内容就变为了求[0/1,x][0/1,x][0/1,x]这一区间满足限定的答案，其实0/1表示可以区间取0或1作为开始
在代码中表现为

a[1...len]a[1...len]a[1...len]表示将数分解成R进制（一般为10进制或者2进制），用数组存储，表示数字分解为R进制下的第aia_iai​位，或者也可以说是系数
最高位为a[len]a[len]a[len]，最低位为a[1]a[1]a[1]。
例如我们将1145转化为10进制下的数位

pos:1 2 3 4a:  1 1 4 5
代码写起来是这样的
ll solve(ll x)&#123;    int len=0;    while (x&gt;0)    &#123;        a[++len]=x%10;        x/=10;    &#125;    return dfs(...)&#125;
填数的话我们从高位往低位去填
例题：[洛谷P4999]

求解区间[L,R][L,R][L,R]中所有数的数位和之和
数位和就是把一个数所有数位上的数字加起来，例如1145-&gt;1+1+4+5=11

既然是记忆化搜索，我们一层一层搜索，我们先来定义一些状态能够跑起来再说。

pospospos：整形变量，表示当前枚举的位置，一般从高位到低位

我们假设x=2048x=2048x=2048，用？表示仍未填写的位数,目前一位都没有填，所以是???
我们从高位往低位取填，第一步填写最高位，很显然我们只能填[0,2][0,2][0,2]的数

若填写[0,1][0,1][0,1]的数，则我们可以从[0,1999][0,1999][0,1999]都可以取到
若填写222，则我们只能从[2000,2048][2000,2048][2000,2048]，我们发现对于一般情况，可以做到[1,9][1,9][1,9]随便填写，但是这里因为有着上界的限制，2???后面的三位只能最高填到048，所以我们需要记录一个变量limitlimitlimit来表示当前数位是否可以任意填写



limitlimitlimit：布尔变量，表示当前的第pos位是否收到取值限制

当为True表示取的数不能大于当前的数位，为true时表示[pos+1,R][pos+1,R][pos+1,R]取的都是aia_iai​的限制，



当我们搜索到pos=0pos=0pos=0的时候表示所有数位填写完毕，这是一个递归边界，我们需要返回枚举的结果，在传递结果的时候我们需要一个变量进行存储

sumsumsum: 整形变量，表示[pos+1,len][pos+1,len][pos+1,len]填写完毕所获得的结果答案，这个题表示的是数位和

以上是最普通的暴搜，但是鉴于我们有着101810^{18}1018的上界，所以我们需要暴力枚举。
我们观察枚举的数位，我们发现如下案例
03?? 12?? 30?? 21??
我们发现其实他们的结果都是一样的！因为对于后面未填写的结果，只要没有上界的限制，都会取到[0,99][0,99][0,99]，因为我们关注的是数位和，所以只需要前面数字数位和一样，并且没有限制(limit=falselimit=falselimit=false)就可以记录答案！
设状态f[pos][sum]f[pos][sum]f[pos][sum]

位置[pos+1,len][pos+1,len][pos+1,len]已经填写完毕，在没有最高数位限制的情况下，我对于[1,pos][1,pos][1,pos]进行任意填写，满足约束的所有数位和。


我们可以大致写出记忆化搜索的代码啦，这里我们先初始化fff数组为−1-1−1，即全为非法状态。

小技巧，~xxx是按位取反操作，该操作返回0时当且仅当x=−1x=-1x=−1，用来判断值是否为−1-1−1
代码如下

ll dfs(int pos,bool limit,int sum)&#123;    if(!pos)&#123;//递归边界为0        return sum;    &#125;    if(!limit&amp;&amp;~f[pos][sum])&#123;//如果没有最高限制并且有记录        return f[pos][sum];    &#125;    int up;    if(limit)&#123;//如果有最高位限制        up=a[pos];    &#125;else up=9;//baka    ll ret=0;    for(int i=0;i&lt;=up;i++)&#123;        //要求当这个位取到最高位并且limit也是1才能往下继续limit        ret=(ret+dfs(pos-1,limit&amp;&amp;i==up,sum+i))%mod;    &#125;    if(!limit)&#123;//如果没有最高位限制就是一般性答案，可以记录        f[pos][sum]=ret;    &#125;    return ret;&#125;
等会，初始状态怎么办，limitlimitlimit怎么处理！
我们想一想，我们发现对于上界最大取多少完全取决于limitlimitlimit，如果limit=falselimit=falselimit=false则上界可以取到999，如果limit=truelimit=truelimit=true，则上界只能取到数位的值。
也就是说，如果我们初始状态我们设limit=falselimit=falselimit=false的话，那最高位的枚举就会取到[1,9][1,9][1,9]，这样答案就会错误！
所以我们在初始化时limit=truelimit=truelimit=true，pos=lenpos=lenpos=len，sum=0sum=0sum=0。
代码solve函数即如下
ll solve(ll x)&#123;    int len=0;    while (x&gt;0)    &#123;        a[++len]=x%10;        x/=10;    &#125;    return dfs(len,true,0);    //先从最高位开始，肯定有limit=1不然如果出来个不是9的最高位直接炸了&#125;
那么如何证明我这个并没有退化成暴搜呢
考虑fff状态数量，数字上界为101810^{18}1018，18个9时是sumsumsum最大，结果即为9×18+19 \times 18 + 19×18+1即163
总状态数即为19×163=309719 \times 163=309719×163=3097，很少
计算复杂度时，我们考虑一个状态计算值时，需访问多少个状态，由数位一般性取值下为[0,9][0,9][0,9]，容易得到为10个状态。
可得计算出fff的时间复杂度为O(len×sum×R)O(len\times sum \times R)O(len×sum×R)，也就是共有3097×10=309703097\times 10=309703097×10=30970个状态
是否会存在limitlimitlimit为truetruetrue的节点过多导致状态记录不符合一般性退化成暴力搜索呢，我们显然可以发现

limit=truelimit=truelimit=true在全部数位都是truetruetrue的情况下只能是一条链！链的长度就是lenlenlen，也就是说扣除最右边那条链，剩下的状态数量也是不会超过len×sum×Rlen\times sum \times Rlen×sum×R的，黑色部位的连边我们默认认为O(1)O(1)O(1)复杂度，就是假设已经算完。
所以我们为什么要设置limit=falselimit=falselimit=false才能使用状态？

多组数据下这个状态是可以复用的
我们发现当limit=truelimit=truelimit=true属于是特殊情况，这种情况出现只是因为数位的限制，这些状态不符合一般性能取到[0,9][0,9][0,9]的情况，这些情况我们是不能复用的，记录上还浪费我们的空间。
所以你不会在任何数位dp题目中见到将limitlimitlimit作为状态的

完整代码如下,一般来说我们是需要开long long的
#include&lt;iostream&gt;#include&lt;cstring&gt;#define ll long longusing namespace std;int T;const ll ML=20,mod=1e9+7,MZ=9*18+5;int a[ML],f[ML][MZ];ll dfs(int pos,bool limit,int sum)&#123;    if(!pos)&#123;//递归边界为0        return sum;    &#125;    if(!limit&amp;&amp;~f[pos][sum])&#123;//如果没有最高限制并且有记录        return f[pos][sum];    &#125;    int up;    if(limit)&#123;//如果有最高位限制        up=a[pos];    &#125;else up=9;//baka    ll ret=0;    for(int i=0;i&lt;=up;i++)&#123;        //要求当这个位取到最高位并且limit也是1才能往下继续limit        ret=(ret+dfs(pos-1,limit&amp;&amp;i==up,sum+i))%mod;    &#125;    if(!limit)&#123;//如果没有最高位限制就是一般性答案，可以记录        f[pos][sum]=ret;    &#125;    return ret;&#125;ll solve(ll x)&#123;    int len=0;    while (x&gt;0)    &#123;        a[++len]=x%10;        x/=10;    &#125;    return dfs(len,true,0);    //先从最高位开始，肯定有limit=1不然如果出来个不是9的最高位直接炸了&#125;int main()&#123;    memset(f,-1,sizeof(f));    cin&gt;&gt;T;    while (T--)    &#123;        ll l,r;        cin&gt;&gt;l&gt;&gt;r;        ll ans=(solve(r)-solve(l-1)+mod)%mod;        cout&lt;&lt;ans&lt;&lt;endl;    &#125;        return 0;&#125;
 例题实践
 例题1——windy数

不含前导零且相邻两个数字之差至少为 2 的正整数被称为 windy 数。windy 想知道，在 aaa 和 bbb 之间，包括 aaa 和 bbb ，总共有多少个 windy 数？(1≤a≤b≤2×1091\le a \le b \le 2\times 10^91≤a≤b≤2×109)
我们发现有了相邻数位的约束，
所以我们需要加上前面是否有前导0——lead0lead0lead0和上一位填写的数字——lastlastlast

注意lastlastlast初始赋值不能赋值−1-1−1！不然最高位就取不到−1,0,1-1,0,1−1,0,1。
我们可以知道约束条件体现在[pos+1,len][pos+1,len][pos+1,len]上，[1,pos][1,pos][1,pos]任意填写，这里的约束条件就是lastlastlast
故设状态f[pos][last]f[pos][last]f[pos][last]，表示[pos+1,len][pos+1,len][pos+1,len]已经填写完毕，[1,pos][1,pos][1,pos]任意填写，上一位数为lastlastlast的情况下windy数共有多少
不难写出代码
#include&lt;iostream&gt;#include&lt;cstring&gt;#define ll long longusing namespace std;const int MN=15,INF=1e9+7;int f[MN][MN],a[MN];//f[pos,last]表示[pos+1,len]都已经填写，且pos+1位填写的是last//的windy数数量，即以last开头的windy数的数量ll dfs(int pos,bool limit,bool lead0,int last)&#123;    if(!pos) return 1;    if(!limit&amp;&amp;last!=INF&amp;&amp;~f[pos][last])&#123;	    //如果无限制并且last填链并且状态合法        return f[pos][last];    &#125;    int up,ret=0;    if(limit)&#123;        up=a[pos];    &#125;else up=9;    for(int i=0;i&lt;=up;i++)&#123;        if(lead0)&#123;//如果是前导0表示还没填数，不能约束下一个数！	        //所以i=0时我们将last传递就行，如果不是0就传递i            ret=ret+dfs(pos-1,limit&amp;&amp;i==up,lead0&amp;&amp;i==0,i==0 ? last : i);        &#125;else if(abs(last-i)&gt;=2)&#123;            ret=ret+dfs(pos-1,limit&amp;&amp;i==up,0,i);        &#125;    &#125;    if(!limit&amp;&amp;last!=INF)&#123;	    //如果前一位填并且无限制适用于一般性情况        f[pos][last]=ret;    &#125;    return ret;&#125;int solve(ll x)&#123;    int len=0;    while (x&gt;0)    &#123;        a[++len]=x%10;        x/=10;    &#125;    //这里前导0也要设置不然前导0的情况算不上，和上面例0的情况差不多    return dfs(len,1,1,INF);&#125;int main()&#123;    memset(f,-1,sizeof(f));    ll l,r;    cin&gt;&gt;l&gt;&gt;r;    cout&lt;&lt;solve(r)-solve(l-1);    return 0;&#125;
 例题2:花神的数论题P4317

设  sum(i)\text{sum}(i)sum(i)  表示  iii  的二进制表示中  111  的个数。给出一个正整数  NNN  ，花神要问你  ∏i=1Nsum(i)\prod_{i=1}^{N}\text{sum}(i)∏i=1N​sum(i) ，也就是  sum(1)∼sum(N)\text{sum}(1)\sim\text{sum}(N)sum(1)∼sum(N)  的乘积。

注意这题的不同点是求乘积
我们仔细想一下其实差不多，我们在统计递归树子树答案结果用的是和，这里我们只需要改为乘就可以了
但是，如果我们仍设ret=0ret=0ret=0的话那0×x=00\times x=00×x=0啊，没关系只需要设ret=1ret=1ret=1就可以了
类似例子0，但这里是二进制，只有1，而1出现次数就是数码和
故设状态f[pos][cnt]f[pos][cnt]f[pos][cnt]，表示[pos+1,len][pos+1,len][pos+1,len]体经填写了cntcntcnt个1，[1,pos][1,pos][1,pos]填写，所有合法方案的乘积
故不难写出代码
#include&lt;iostream&gt;#include&lt;cstring&gt;#define ll long longusing namespace std;const int mod=1e7+7,MN=110;ll f[MN][MN],a[MN];ll dfs(int pos,bool limit,int cnt)&#123;    if(!pos)&#123;        return max(cnt,1);    &#125;    if(!limit&amp;&amp;~f[pos][cnt])&#123;        return f[pos][cnt];    &#125;    ll up,ret=1;    if(limit)&#123;        up=a[pos];    &#125;else up=1;    for(int i=0;i&lt;=up;i++)&#123;        ret=(ret*dfs(pos-1,limit&amp;&amp;i==up,cnt+(i==1)))%mod;    &#125;    if(!limit)&#123;        f[pos][cnt]=ret;    &#125;    return ret;&#125;ll solve(ll x)&#123;    int len=0;    while (x&gt;0)    &#123;        a[++len]=x%2;        x/=2;    &#125;    return dfs(len,true,0);&#125;int main()&#123;    memset(f,-1,sizeof(f));    ll x;    cin&gt;&gt;x;    cout&lt;&lt;solve(x);    return 0;&#125;
 例题3:启示录

古代人认为 666666666 是属于魔鬼的数。
不但如此，只要某数字的十进制表示中有三个连续的 666，古代人也认为这是个魔鬼的数，比如 666,1666,6663,16666,6660666666,1666,6663,16666,6660666666,1666,6663,16666,6660666 等等。
古代典籍中经常用“第 XXX 小的魔鬼的数”来指代这些数，这给研究人员带来了极大的不便。
现在请编写一个程序，可以实现输入 XXX，输出对应的魔鬼数。

不难设状态为f[pos][lst1][lst2]f[pos][lst1][lst2]f[pos][lst1][lst2]，表示[pos+1,len][pos+1,len][pos+1,len]填写完毕，对于pospospos的上一位lst1lst1lst1是否是6（lst1=0/1lst1=0/1lst1=0/1，bool变量），对于pospospos的上上一位lst2lst2lst2是否为6（lst2=0/1lst2=0/1lst2=0/1)，的蘑菇数的个数。
不难有dfs：
ll f[MN][2][2];ll dfs(int pos,bool lt1,bool lt2,bool lim)&#123;    if(!pos) return 1;    if(!lim&amp;&amp;~f[pos][lt1][lt2]) return f[pos][lt1][lt2];    int up;    if(lim) up=a[pos];    else up=9;    ll ret=0;    for(int i=0;i&lt;=up;i++)&#123;        if(lt1&amp;&amp;lt2&amp;&amp;i==6) continue;//蘑菇数状态重复了，要排了        ret+=dfs(pos-1,i==6,lt1,lim&amp;&amp;i==up);    &#125;    if(!lim) f[pos][lt1][lt2]=ret;    return ret;&#125;ll solve(ll x)&#123;    int len=0;    while(x&gt;0)&#123;        a[++len]=x%10;        x/=10;    &#125;    return dfs(len,0,0,1);&#125;
考虑第xxx小如何求出，不难发现值域上对于次数，右边界扩大那么一定有单调性。我们实际上可以考虑在值域上二分，每一次二分DFS求出个数，mid+1−dfsmid+1-dfsmid+1−dfs即为次数，我们要求二分恰好到xxx，那么当mid+1−dfs≥xmid+1-dfs\ge xmid+1−dfs≥x时才能更新rrr，否则更新lll
那么代码如下：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=20;int a[MN],T;ll f[MN][2][2];ll dfs(int pos,bool lt1,bool lt2,bool lim)&#123;    if(!pos) return 1;    if(!lim&amp;&amp;~f[pos][lt1][lt2]) return f[pos][lt1][lt2];    int up;    if(lim) up=a[pos];    else up=9;    ll ret=0;    for(int i=0;i&lt;=up;i++)&#123;        if(lt1&amp;&amp;lt2&amp;&amp;i==6) continue;        ret+=dfs(pos-1,i==6,lt1,lim&amp;&amp;i==up);    &#125;    if(!lim) f[pos][lt1][lt2]=ret;    return ret;&#125;ll solve(ll x)&#123;    int len=0;    while(x&gt;0)&#123;        a[++len]=x%10;        x/=10;    &#125;    return dfs(len,0,0,1);&#125;int main()&#123;    memset(f,-1,sizeof(f));    cin&gt;&gt;T;    while(T--)&#123;        int x;        cin&gt;&gt;x;        ll l=665,r=1e18;        while(l+1&lt;r)&#123;            ll mid=(l+r)&gt;&gt;1;            if(mid+1-solve(mid)&lt;x)&#123;                l=mid;            &#125;else r=mid;        &#125;        cout&lt;&lt;l+1&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 形参设定
以下为记忆化搜索dfsdfsdfs常设定的形参

pospospos：整形，表示当前枚举的位置，一般从高到低
limitlimitlimit：布尔，表示当前pospospos位是否收到限制

为truetruetrue时表示当前取得位数不能大于a[pos]a[pos]a[pos]，只有在[pos+1,len][pos+1,len][pos+1,len]的值填写的数都是aia_iai​的时候该值才能为truetruetrue，在递归树上表示为一条链


lastlastlast：整形，表示上一位填写的值（即pos+1pos+1pos+1填写的值）
lead0lead0lead0：布尔，表示是否有前导零，即在len→(pos+1)len\rightarrow (pos+1)len→(pos+1)的位置是否都是前导0

基于尝试，我们往往认为一个数没有前导0，最高位不能为0.在只有没有前导0的时候，才能够计算0的贡献，那么前导0什么时候会和答案有关，有以下情况

统计0的出现次数
相邻数值的差值
以最高位为起点确定的奇偶位




sumsumsum：整形，表示len→(pos+1)len\rightarrow (pos+1)len→(pos+1)的数位和
rrr：整形变量，表示整个数前缀取模mmm所得的余数

这种情况下一般用在约束中出现了能被mmm整除


ststst：整形变量，用于状态压缩

对一个集合的数在数位上的出现次数的奇偶性有要求时，其二进制形式就可以表示每个数出现的奇偶性
3



 参考
GhostXL算法学习笔记——数位DP
]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数位DP</tag>
      </tags>
  </entry>
  <entry>
    <title>数论从入门到入坟</title>
    <url>/posts/88d351e8/</url>
    <content><![CDATA[ 数论——从入门到入坟

注：线性代数并不算于这篇文章

 0.前言
数论应该算是oi里面一个比较算是重要的章节了吧，他在大纲内标得难度居然比平衡树还简单？听老师说这个难度其实是按学起来的难度表的。应用起来和平衡树的区间操作一样难。
故借一个下午，整理数论笔记，重新思考思考一下吧。
数论研究的是整数的性质，但是性质要好多啊啊啊。一个一个慢慢学吧.
 1.扬帆启航——整除
整除应该早就在小学中学过他的概念了。这里我们添加几个符号来表示整除，并且重新复述一遍定义。
若aaa和bbb为整数，aaa整除bbb。则b是a的倍数，a是b的约数（或者也可以叫做因数），我们记为a∣ba|ba∣b。整除的大部分性质都是显而易见的，如下
 1.任意性
若a∣ba|ba∣b，则对于任意非零整数mmm，有am∣bmam|bmam∣bm。
 2.传递性
若a∣ba|ba∣b且b∣cb|cb∣c，则a∣ca|ca∣c。
 3.可消性
若a∣bca|bca∣bc且aaa与ccc互素，则a∣ba|ba∣b
 4.组合性
若c∣ac|ac∣a且c∣bc|bc∣b，对于任意整数m,nm,nm,n，有c∣(ma+nb)c|(ma+nb)c∣(ma+nb)
 2.数论的基础——素数
 1.素数的定义


素数又称质数，其满足性质就是大于等于2，并且除了1和他本身外不能被其他的任何自然数整除。


不满足该性质的数为合数，但是1既不是素数又不是合数


2是唯一的偶素数


随着整数的增大，素数的分布越来越稀疏。随机整数xxx是素数的概率是1log2x\frac{1}{log_2x}log2​x1​，


 2.素数判定
怎样取判定一个数是否为素数？我们先从定义来看，素数表示只能被1和自己整除的正整数。那我们就可以得到如下的做法

朴素判定：对nnn做[2,n)[2,n)[2,n)范围的余数判定，如果至少一个数取余nnn后为0，则nnn为合数，反之为素数，时间复杂度O(n)O(n)O(n)。

我们考虑一下优化，假设一个数能够整除nnn，即a∣na|na∣n，那么na\frac{n}{a}an​也一定能够整除aaa，那么不妨设a≤naa\le \frac{n}{a}a≤an​ ，可得a2≤na^2\le na2≤n，可得a≤na\le \sqrt{n}a≤n​ ，也就是说我们只需要筛到n\sqrt{n}n​就可以了，时间复杂度就降到了n\sqrt{n}n​，

优化判定:对nnn做[2,n][2,\sqrt{n}][2,n​]的判定，同朴素筛法取余，时间复杂度O(n)O(\sqrt{n})O(n​)

要不要再快点？我们显然可得如果n是合数，那么必然有一个小于等于n\sqrt{n}n​的素银子，只需要对n\sqrt{n}n​范围内的素数进行测试即可，假设该范围内的素数个数为sss，则时间复杂度为O(s)O(s)O(s)
不过，我们发现这个的复杂度只能在101210^{12}1012内管用，往外就超时了，我们可以使用Miller_Rabin算法来求解，下文在费马小定理会提到。
 3.素数筛法
给定nnn，求[2,n][2,n][2,n]内所有素数
像上面一样逐个判断会很慢，我们可以用“筛子”，来一起筛所有的整数，把合数都筛掉。常用的两种算法分别为埃式筛和欧拉筛。
 1.埃式筛
我们直接利用素数的定义，即除了1和他本身外不能被其他的任何自然数整除。可以得出他的倍数都是合数。
步骤如下


用一个标记数组f[maxn]f[maxn]f[maxn]，其中f[i]=0f[i]=0f[i]=0表示iii为素数否则为非素数。首先先把f[0]=f[1]=1f[0]=f[1]=1f[0]=f[1]=1，因为他们都不是素数


从未被标记的数中找到最小的数，为2，它不是任何（除1与其本身）数的倍数，所以2是素数，这时候我们将4，6，8，10，…等2的倍数标记为1


从未被标记的数中找到最小的数，为3.它也是素数，我们把它的倍数也标记上，6，9，12…


从未被标记的数中找到最小的数，为5，它也是素数，我们标记他的倍数，10，15，20，25…


…



这种方式我们遍历完标记数组f[i]f[i]f[i]，如果没有标记1，就是素数。这种的时间复杂度就是O(nloglogn)O(nloglogn)O(nloglogn)，已经十分接近线性了。
如果我们对于fff数组使用vector&lt;bool&gt;vector&lt;bool&gt;vector&lt;bool&gt;或者bitsetbitsetbitset进行优化可以将效率大幅提高。
vector&lt;int&gt; prime;vector&lt;bool&gt; notprime(100000000);void aishi(int n)&#123;    for(int i=2;i&lt;=n;i++)&#123;        if(notprime[i]!=1)&#123;            prime.push_back(i);            for(int j=i*2;j&lt;=n;j+=i)&#123;                notprime[j]=1;            &#125;        &#125;    &#125;&#125;
但是带log，当数量级增大的时候就会TLE。我们考虑上面的情况（重复划掉），我们发现有重复的数组被筛掉，我们能否优化掉这一过程呢
 2.欧拉筛（线性筛）
原理就是一个合数肯定有一个最小质因数。让每个合数被他的最小质因数筛选一次，以达到不重复筛的目的，步骤如下


逐一检查[2,n)[2,n)[2,n)的所有数，第一个数2是素数，取出来


当检查到第iii个数的时候，利用已经求过的素数取筛到对应的合数xxx，而且用xxx的最小质因数取筛


代码如下
vector&lt;bool&gt; notprime(MN+5);vector&lt;int&gt; prime;void shai()&#123;    for(int i=2;i&lt;=n;i++)&#123;        if(!notprime[i])&#123;            prime.push_back(i);        &#125;        for(int j=0;j&lt;prime.size();j++)&#123;            if(i*prime[j]&gt;n) break;            notprime[i*prime[j]]=1;            if(i%prime[j]==0)&#123;                break;            &#125;        &#125;    &#125;&#125;
我们可以比较一下埃式筛和线性筛的性能差距，都使用了vector优化
线性筛

埃式筛

飞快
 3.算数唯一分解定理
我们来看素数真正的定义，也就是算数基本引理

设ppp是素数，若p∣a1a2p|a_1 a_2p∣a1​a2​那么p∣a1p|a_1p∣a1​和p∣a2p|a_2p∣a2​至少有一个成立

算数唯一分解定理表示如下


设正整数aaa，都可以唯一分解成素数的乘积，如下


n=p1p2p3...pkn=p_1p_2p_3...p_kn=p1​p2​p3​...pk​（p1≤p2≤p3≤...≤pkp_1\le p_2\le p_3\le...\le p_kp1​≤p2​≤p3​≤...≤pk​），这里素数并不要求是一样的，我们可以将相同的素数合并变成幂的形式，如下


n=p1e1p2e2...pkekn=p^{e_1}_{1}p^{e_2}_{2}...p^{e_k}_{k}n=p1e1​​p2e2​​...pkek​​ 。


遇到一个数不要只把它当作一个普普通通的数，要想到算数唯一分解定理。
 4.素因子分解
还是靠经典的试除法，考虑朴素算法，因数是成对分布的， 的所有因数可以被分成两块，即[2,n][2,\sqrt{n}][2,n​]和 [n+1,n][\sqrt{n}+1,n][n​+1,n]。只需要把[2,n][2,\sqrt{n}][2,n​]里的数遍历一遍，再根据除法就可以找出至少两个因数了。这个方法的时间复杂度为 O(n)O(\sqrt{n})O(n​)。
代码如下(粘贴自oiwiki)
vector&lt;int&gt; breakdown(int N) &#123;  vector&lt;int&gt; result;  for (int i = 2; i * i &lt;= N; i++) &#123;    if (N % i == 0) &#123;  // 如果 i 能够整除 N，说明 i 为 N 的一个质因子。      while (N % i == 0) N /= i;      result.push_back(i);    &#125;  &#125;  if (N != 1) &#123;  // 说明再经过操作之后 N 留下了一个素数    result.push_back(N);  &#125;  return result;&#125;
证明result中所有元素是NNN的全体素因数


首先考察 N 的变化。当循环进行到 i 结束时，由于刚执行结束 while(N % i == 0) N /= i 部分，i 不再整除 N。而且，每次除去一个因子，都能够保证 N 仍整除 。这两点保证了，当循环进行到 i 开始时，N 是  的一个因子，且不被任何小于 i 的整数整除。


其次证明 result 中的元素均为  的因子。当循环进行到 i 时，能够在 result 中存入 i 的条件是 N % i == 0，这说明 i 整除 N，且已经说明 N 是  的因子，故而有 i 是  的因子。当对 i 的循环结束时，若 N 不为一，也会存入 result。此时它根据前文，也必然是  的一个因子。


其次证明 result 中均为素数。我们假设存在一个在 result 中的合数 ，则必然存在 i 不超过 ，满足 i 是 K 的一个因子。这样的  不可能作为循环中的某个 i 存入 result，因为第一段已经说明，当循环到  时，N 不被任何小于  的 i 整除。这样的  也不可能在循环结束后加入，因为循环退出的条件是 i * i &gt; N，故而已经遍历完了所有不超过  的 i，而且据上文所说， 这些 i 绝不能整除目前的 N，亦即 。


最后证明，所有  的素因子必然出现在 result 中。不妨假设  是  的一个素因子，但并没有出现在 result 中。根据上文的讨论， 不可能是循环中出现过的 i。设 i 是退出循环前最后的 i，则 i 严格小于 ，而退出循环后的 N 不被之前的 i 整除，故而  整除 N。所以最后的 N 大于一，则根据前文所述，它必然是素数，则 N 就等于 ，必会在最后加入 result，与假设矛盾。


 5.素因子个数
 1.朴素求法
还是试除法，我们套用优化枚举[1,n][1,\sqrt{n}][1,n​]即可，时间复杂度O(n)O(\sqrt{n})O(n​)
 2.素数分解法
根据算数基本定理可得，nnn的因子一定是p1,p2...pkp_1,p_2...p_kp1​,p2​...pk​的组合，而且例如p1p_1p1​取得个数为[0,e1][0,e_1][0,e1​]，p2p_2p2​是[0,e2][0,e_2][0,e2​]，以此类推。
由乘法原理可得，设总因子个数为g(n)g(n)g(n)，等于ei+1e_i+1ei​+1的连乘，即表示如下
g(n)=∏i=1k(ei+1)g(n)=\prod_{i=1}^{k}(e_i+1)g(n)=∏i=1k​(ei​+1)
时间复杂度即求素因子分解的复杂度O(s)O(s)O(s)
 6.GCD与LCM
 1.模运算
对于一个正整数ppp，任意一个整数nnn，一定存在等式n=kp+rn=kp+rn=kp+r，其中k,rk,rk,r是整数，且0≤r&lt;p0\le r&lt;p0≤r&lt;p，称kkk为nnn除以ppp的商，rrr为nnn除以ppp的余数，表示为n mod p=rn\,mod\,p =rnmodp=r

我们定义正整数和整数a,ba,ba,b满足如下运算
a mod pa\,mod\,pamodp表示a除以p所得的余数
以下公式分别是模p加法，减法，乘法和幂模p

模运算满足结合律，交换律与分配律。
我们用a≡b (mod m)a\equiv b\,(mod\,m)a≡b(modm)表示aaa与bbb模mmm意义下同余，说人话就是aaa和bbb除以mmm的余数相等
对于同余有如下性质


自反性：若a是整数，则a≡a (mod m)a\equiv a\,(mod\, m)a≡a(modm)


对称性：若a和b是整数，且a≡b (mod m)a\equiv b\,(mod\,m)a≡b(modm)，则b≡a (mod m)b\equiv a\,(mod\,m)b≡a(modm)


传递性：若a,b,c是整数，且a≡b (mod m)a\equiv b\,(mod\,m)a≡b(modm),b≡c (mod m)b\equiv c\,(mod\,m)b≡c(modm)，则a≡c (mod m)a\equiv c\,(mod\,m)a≡c(modm)。


关于同余的加减乘除，若a，b，c，d和m是整数，m&gt;0m&gt;0m&gt;0，且a≡b (mod m)a\equiv b\,(mod\,m)a≡b(modm),c≡d (mod m)c\equiv d\,(mod\,m)c≡d(modm)


加：a+c≡b+d (mod m)a+c\equiv b+d\,(mod\,m)a+c≡b+d(modm)


减：a−c≡b−d (mod m)a-c\equiv b-d\,(mod\,m)a−c≡b−d(modm)


乘：ac≡bd (mod m)ac\equiv bd\,(mod\,m)ac≡bd(modm)


除：在模的左右都同除一个数不能保证同余，后面会讲模除法


 2.最大公约数
寻求最大公约数是人民民主的真谛…
最大的正整数ddd使得d∣ad|ad∣a并且d∣bd|bd∣b，则称ddd是a,ba,ba,b的最大公约数，记作gcd(a,b)gcd(a,b)gcd(a,b)，则k∣ak|ak∣a和k∣bk|bk∣b就等价于k∣gcd(a,b)k|gcd(a,b)k∣gcd(a,b)
由算数基本定理可得，有如下公式满足：


a=p1x1p2x2p3x3...pkxka=p_1^{x_1}p_2^{x_2}p_3^{x_3}...p_k^{x_k}a=p1x1​​p2x2​​p3x3​​...pkxk​​


b=p1y1p2y2p3y3...pkykb=p_1^{y_1}p_2^{y_2}p_3^{y_3}...p_k^{y_k}b=p1y1​​p2y2​​p3y3​​...pkyk​​


那么gcd(a,b)gcd(a,b)gcd(a,b)可以表示为以下形式，这个形式思考很好用！
gcd(a,b)=p1min(x1,y1)p2min(x2,y2)p3min(x3,y3)...pkmin(xk,yk)gcd(a,b)=p_1^{min(x_1,y_1)}p_2^{min(x_2,y_2)}p_3^{min(x_3,y_3)}...p_k^{min(x_k,y_k)}gcd(a,b)=p1min(x1​,y1​)​p2min(x2​,y2​)​p3min(x3​,y3​)​...pkmin(xk​,yk​)​
需要说明的是这里aaa和bbb的分解式中指数可以为0。
 2.1 辗转相除法求最大公约数

当b≠0b\ne0b=0时，我们令a=kb+ra=kb+ra=kb+r，其中k=⌊ab⌋，r=a mod bk=\lfloor\frac{a}{b}\rfloor，r=a\,mod\,bk=⌊ba​⌋，r=amodb，并且满足(0≤r&lt;b)(0\le r&lt;b)(0≤r&lt;b)，当一个数c即使a的约数也是b的约数，那么则必然也是a−kba-kba−kb的约数，即r的约数。那么a和b的最大公约数=b和r的最大公约数。表示如下

gcd(a,b)=gcd(b,a mod b)gcd(a,b)=gcd(b,a\,mod\,b)gcd(a,b)=gcd(b,amodb)
但是假设建立在b≠0b\ne0b=0的情况下，而b=0b=0b=0的情况，答案显然为a，对于上述gcd函数，可以表示为如下递归式子。
gcd(a,b)={ab=0gcd(b,a mod b)b≠0gcd(a,b)=\begin{cases} a &amp; b=0 \\ gcd(b,a\,mod\,b) &amp; b\ne 0 \end{cases}gcd(a,b)={agcd(b,amodb)​b=0b=0​
写成代码就是如下
int gcd(int a, int b) &#123;    return !b ? a : gcd(b, a % b);&#125;
也可以用std实现的std::__gcd(a,b)加下划线是不推荐使用因为没有安全保护，但毕竟我们又不是写多线程，直接用就完了。
gcd具有结合律，如下
gcd(a,b,c,d,e,f,g)=gcd(gcd(a,b),c,d,e,f,g)gcd(a,b,c,d,e,f,g)=gcd(gcd(a,b),c,d,e,f,g)gcd(a,b,c,d,e,f,g)=gcd(gcd(a,b),c,d,e,f,g)
P10463 Interval GCD

给定一个长度为 NNN 的数列 AAA，以及 MMM 条指令，每条指令可能是以下两种之一：




C l r d，表示把 A[l],A[l+1],…,A[r]A[l],A[l+1],…,A[r]A[l],A[l+1],…,A[r] 都加上 ddd。


Q l r，表示询问 A[l],A[l+1],…,A[r]A[l],A[l+1],…,A[r]A[l],A[l+1],…,A[r] 的最大公约数(GCD)。


显然线段树，根据gcd的结合律，我们可以进行暴力的单点修改，gcd根据结合律进行维护：
#include&lt;bits/stdc++.h&gt;#define ll long long#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1#define gcd(a,b) __gcd(abs(a),abs(b))#define pir pair&lt;int,int&gt;using namespace std;const int MN=5e5+15;struct segtree&#123;    int l,r;    ll sum,d;&#125;t[MN&lt;&lt;2];  int n,m;ll a[MN];  void pushup(int p)&#123;    t[p].sum=t[ls].sum+t[rs].sum;    t[p].d=gcd(t[ls].d,t[rs].d);&#125;    void build(int p,int l,int r)&#123;    t[p].l=l;    t[p].r=r;    if(l==r)&#123;        t[p].d=t[p].sum=a[l]-a[l-1];        return;    &#125;    int mid=l+r&gt;&gt;1;    build(ls,l,mid);    build(rs,mid+1,r);    pushup(p);&#125;  void modify(int p,int x,ll k)&#123;    if(t[p].l==t[p].r)&#123;        t[p].sum+=k;        t[p].d+=k;        return;    &#125;    int mid=t[p].l+t[p].r&gt;&gt;1;    if(mid&gt;=x) modify(ls,x,k);    else modify(rs,x,k);    pushup(p);&#125;  ll querys(int p,int fl,int fr)&#123;    if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;        return t[p].sum;    &#125;    int mid=t[p].l+t[p].r&gt;&gt;1;    ll ret=0;    if(mid&gt;=fl)&#123;        ret+=querys(ls,fl,fr);    &#125;    if(mid&lt;fr)&#123;        ret+=querys(rs,fl,fr);    &#125;    return ret;&#125;  ll queryd(int p,int fl,int fr)&#123;    if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;        return t[p].d;    &#125;    ll ret=0;    int mid=t[p].l+t[p].r&gt;&gt;1;    if(mid&gt;=fl)&#123;        ret=gcd(ret,queryd(ls,fl,fr));    &#125;    if(mid&lt;fr)&#123;        ret=gcd(ret,queryd(rs,fl,fr));    &#125;    return ret;&#125;int main()&#123;    ios::sync_with_stdio(0);    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    char op;    int l,r;    ll v;    build(1,1,n);    while (m--)    &#123;        cin&gt;&gt;op&gt;&gt;l&gt;&gt;r;        if(op==&#x27;C&#x27;)&#123;            cin&gt;&gt;v;            modify(1,l,v);            if(r!=n) modify(1,r+1,-v);        &#125;else&#123;            cout&lt;&lt;gcd(queryd(1,l+1,r),querys(1,1,l))&lt;&lt;&#x27;\n&#x27;;        &#125;    &#125;    return 0;&#125;
 3.最小公倍数
两个数a和b的最小公倍数是指同时被a和b整除的最小倍数，记为lcm(a,b)lcm(a,b)lcm(a,b)。
特殊的，当a和b互素时，lcm(a,b)=ablcm(a,b)=ablcm(a,b)=ab
求LCM需要先求gcd，所以易得
lcm(a,b)=abgcd(a,b)lcm(a,b)=\frac{ab}{gcd(a,b)}lcm(a,b)=gcd(a,b)ab​
由算数唯一分解定理可得如下公式：


a=p1x1p2x2p3x3...pkxka=p_1^{x_1}p_2^{x_2}p_3^{x_3}...p_k^{x_k}a=p1x1​​p2x2​​p3x3​​...pkxk​​


b=p1y1p2y2p3y3...pkykb=p_1^{y_1}p_2^{y_2}p_3^{y_3}...p_k^{y_k}b=p1y1​​p2y2​​p3y3​​...pkyk​​


那么gcd(a,b)和lcm(a,b)gcd(a,b)和lcm(a,b)gcd(a,b)和lcm(a,b)可以表示为如下式子


gcd(a,b)=p1min(x1,y1)p2min(x2,y2)p3min(x3,y3)...pkmin(xk,yk)gcd(a,b)=p_1^{min(x_1,y_1)}p_2^{min(x_2,y_2)}p_3^{min(x_3,y_3)}...p_k^{min(x_k,y_k)}gcd(a,b)=p1min(x1​,y1​)​p2min(x2​,y2​)​p3min(x3​,y3​)​...pkmin(xk​,yk​)​


lcm(a,b)=p1max(x1,y1)p2max(x2,y2)p3max(x3,y3)...pkmax(xk,yk)lcm(a,b)=p_1^{max(x_1,y_1)}p_2^{max(x_2,y_2)}p_3^{max(x_3,y_3)}...p_k^{max(x_k,y_k)}lcm(a,b)=p1max(x1​,y1​)​p2max(x2​,y2​)​p3max(x3​,y3​)​...pkmax(xk​,yk​)​


需要说明的是这里aaa和bbb的分解式中指数可以为0。
我们将gcd和lcm相乘，由下列公式可得
min(x,y)+max(x,y)=x+ymin(x,y)+max(x,y)=x+ymin(x,y)+max(x,y)=x+y
可得lcm(a,b)×gcd(a,b)=ablcm(a,b)\times gcd(a,b)=ablcm(a,b)×gcd(a,b)=ab
等式两边同除gcd(a,b)gcd(a,b)gcd(a,b)
lcm(a,b)=abgcd(a,b)lcm(a,b)=\frac{ab}{gcd(a,b)}lcm(a,b)=gcd(a,b)ab​
代码如下
int lcm(int a, int b) &#123;    return a / gcd(a, b) * b;&#125;
 7.拓展欧几里得定理——裴蜀定理
裴蜀定理是关于GCD的一个定理。


对于整数a和ba和ba和b，一定存在整数x,yx,yx,y使得ax+by=gcd(a,b)ax+by=gcd(a,b)ax+by=gcd(a,b)成立


推论：当a和b互素（即gcd(a,b)=1gcd(a,b)=1gcd(a,b)=1时）ax+by=1ax+by=1ax+by=1


或另一种形式

对于任意x,yx,yx,y，d=ax+byd=ax+byd=ax+by，ddd一定是gcd(a,b)gcd(a,b)gcd(a,b)的整数倍，最小的d就是gcd(a,b)gcd(a,b)gcd(a,b)，即可得ax+by=k×gcd(a,b)  (k≥1)ax+by=k\times gcd(a,b)\,\,(k \ge 1)ax+by=k×gcd(a,b)(k≥1)

证明如下

例题： P4549 【模板】裴蜀定理

给定一个包含 nnn 个元素的整数序列 AAA，记作 A1,A2,A3,...,AnA_1,A_2,A_3,...,A_nA1​,A2​,A3​,...,An​。



求另一个包含 nnn 个元素的待定整数序列 XXX，记 S=∑i=1nAi×XiS=\sum\limits_{i=1}^nA_i\times X_iS=i=1∑n​Ai​×Xi​，使得 S&gt;0S&gt;0S&gt;0 且 SSS 尽可能的小

我们可以发现，这个Ai×XiA_i\times X_iAi​×Xi​很类似于ax+byax+byax+by，并且这里的a和ba和ba和b给出了。这样Ai×XiA_i\times X_iAi​×Xi​就处理成了gcd(A1,A2)gcd(A_1,A_2)gcd(A1​,A2​)。

引理：gcd(a1,a2,...ak)=gcd(gcd(a1,a2),gcd(a3,a4)...gcd(ak−1,ak))gcd(a_1,a_2,...a_k)=gcd(gcd(a_1,a_2),gcd(a_3,a_4)...gcd(a_{k-1},a_k))gcd(a1​,a2​,...ak​)=gcd(gcd(a1​,a2​),gcd(a3​,a4​)...gcd(ak−1​,ak​))

那么只需要合并结果就可以了
代码如下
#include&lt;iostream&gt;#include&lt;cmath&gt;#define ll long longusing namespace std;ll gcd(ll x,ll y)&#123;    if(y==0) return x;    return gcd(y,x%y);&#125;ll ans,awa;int n;int main()&#123;    cin&gt;&gt;n;    cin&gt;&gt;ans;    if(n==1)&#123;        cout&lt;&lt;ans;        return 0;    &#125;    for(int i=2;i&lt;=n;i++)&#123;        cin&gt;&gt;awa;        awa=abs(awa);        ans=gcd(ans,awa);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 8.线性同余方程——exgcd求解
 exgcd拓展欧几里得算法
线性同余方程（也叫模线性方程）是最基本的同余方程，即 ax≡b(mod n)ax \equiv b(mod \ n)ax≡b(mod n)
其中 a、b、n 都为常量，x 是未知数，这个方程可以进行一定的转化，得到：ax=kn+bax = kn + bax=kn+b
这里的 k 为任意整数，于是我们可以得到更加一般的形式即：ax+by+c=0ax + by + c = 0ax+by+c=0
求解的第一步就是将原式化为ax+by=cax+by=cax+by=c 。
第二步求出d=gcd(a,b)d=gcd(a,b)d=gcd(a,b)，由裴蜀定理演变式可得如下式子
d(axd+byd)=cd(a \frac xd + b \frac yd) = cd(adx​+bdy​)=c
容易知道(axd+byd)(a \frac xd + b \frac yd)(adx​+bdy​)为整数，如果d不能整除c，则方程无解。
第三步：我们由2步可知方程有解则可以一定能表示成ax+by=c=gcd(a,b)×cax + by = c = gcd(a, b) \times cax+by=c=gcd(a,b)×c，那么如何求解呢，根据欧几里得定理有如下转化
d=gcd(a,b)=gcd(b,a%b)(1)=bx′+(a%b)y′(2)=bx′+[a−b×⌊ab⌋]y′(3)=ay′+b[x′−⌊ab⌋y′](4)\begin{aligned} d &amp;= gcd(a, b) \\&amp;= gcd(b, a\%b) &amp; (1)\\&amp;= bx&#x27; + (a\%b)y&#x27; &amp; (2)\\&amp;= bx&#x27; + [a-b \times \lfloor \frac ab \rfloor]y&#x27; &amp; (3)\\&amp;= ay&#x27; + b[x&#x27; - \lfloor \frac ab \rfloor y&#x27;] &amp; (4)\end{aligned}d​=gcd(a,b)=gcd(b,a%b)=bx′+(a%b)y′=bx′+[a−b×⌊ba​⌋]y′=ay′+b[x′−⌊ba​⌋y′]​(1)(2)(3)(4)​
于是有{x=y′y=x′−⌊ab⌋y′\begin{cases}x &amp;= y&#x27; \\ y &amp;= x&#x27; - \lfloor \frac ab \rfloor y&#x27; \end{cases}{xy​=y′=x′−⌊ba​⌋y′​
需要注意的是，当递归边界即b=1b=1b=1的情况下，此时易得x=1x=1x=1,y=0y=0y=0。
代码也就如下，这样吧xxx和yyy输进去，就得到了一组解
void exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123;    if(!b)&#123;        x=1;        y=0;        return;    &#125;    exgcd(b,a%b,y,x);    y-=a/b*x;&#125;
例如求解方程27x+8y=127x+8y=127x+8y=1
点我观看动画！
   例1：P1082 [NOIP2012 提高组] 同余方程

求关于 xxx 的同余方程 ax≡1(modb)ax \equiv 1 \pmod {b}ax≡1(modb) 的最小正整数解。

显然可以变化为ax+by=1ax+by=1ax+by=1，由裴蜀定理可得gcd(a,b)=1gcd(a,b)=1gcd(a,b)=1，a与b互素，通过exgcd我们能求出这个题的一组解，但是题目要求是最小正整数解，有可能求得的解为负数，也有可能过大。
对于原式ax+by=1ax+by=1ax+by=1，我们做如下变形
ax+by+k×ba−k×ba=1ax+by+k\times ba-k\times ba=1ax+by+k×ba−k×ba=1
a(x+kb)+b(y−ka)=1a(x+kb)+b(y-ka)=1a(x+kb)+b(y−ka)=1
即可得求出的解xxx由x0+kbx_0+kbx0​+kb推得，所以我们可以对得出的结果做如下操作
    ll a,b,x,y;    cin&gt;&gt;a&gt;&gt;b;    exgcd(a,b,x,y);    cout&lt;&lt;(x%b+b)%b;
可以理解为加上b和减去b不会错过任何解
故AC代码如下，套板子就行
#include&lt;iostream&gt;#define ll long longusing namespace std;void exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123;    if(!b)&#123;        x=1;        y=0;        return;    &#125;    exgcd(b,a%b,y,x);    y-=a/b*x;&#125;int main()&#123;    ll a,b,x,y;    cin&gt;&gt;a&gt;&gt;b;    exgcd(a,b,x,y);    cout&lt;&lt;(x%b+b)%b;    return 0;&#125;
仔细看看这个题，是不是有点眼熟，我们把xxx替换为a−1a^{-1}a−1，我们发现这不就是在求模运算的逆元吗！
 例题2：# P5656 【模板】二元一次不定方程 (exgcd)

要求输出ax+by=cax+by=cax+by=c中xxx和yyy的最小解和最大解,无解输出-1

有裴蜀定理可得，如果ccc不是gcd(a,b)gcd(a,b)gcd(a,b)的倍数，方程必定无解。
用exgcd求出ax0+by0=gcd(a,b)ax_0+by_0=gcd(a,b)ax0​+by0​=gcd(a,b)的整数解后，我们开始用这个特殊解取推ax+by=cax+by=cax+by=c的解，也就是求通解
由裴蜀定理推论得ax+by=k×gcd(a,b)  (k≥1)ax+by=k\times gcd(a,b)\,\,(k \ge 1)ax+by=k×gcd(a,b)(k≥1)
所以可得ax+by=cax+by=cax+by=c变形为ax+by=k×gcd(a,b)=cax+by=k\times gcd(a,b)=cax+by=k×gcd(a,b)=c
k×gcd(a,b)=ck\times gcd(a,b)=ck×gcd(a,b)=c
k=cgcd(a,b)k=\frac{c}{gcd(a,b)}k=gcd(a,b)c​
代入原式ax0+by0=gcd(a,b)ax_0+by_0=gcd(a,b)ax0​+by0​=gcd(a,b)
x0cgcd(a,b)a+x0cgcd(a,b)b=c\frac{x_0c}{gcd(a,b)}a+\frac{x_0c}{gcd(a,b)}b=cgcd(a,b)x0​c​a+gcd(a,b)x0​c​b=c
故可得xxx和yyy可以表示为
ax+by=c {x=x0×cgcd(a,b)y=y0×cgcd(a,b) ax+by=c\,\begin{cases} x=x_0\times\frac{c}{gcd(a,b)} \\ y=y_0\times\frac{c}{gcd(a,b)}   \end{cases}ax+by=c{x=x0​×gcd(a,b)c​y=y0​×gcd(a,b)c​ ​
既然我们用x0x_0x0​和y0y_0y0​表示了xxx和yyy，那我们就可以开始找出所有的解
我们开例1推的式子，我们将x0x_0x0​和y0y_0y0​分别代入x和yx和yx和y
不过我们换元求一下k
m=kbm=kbm=kb
n=kan=kan=ka
a(x0+m)+b(y0−n)=ca(x_0+m)+b(y_0-n)=ca(x0​+m)+b(y0​−n)=c
展开可得ax0+by0+am−bn=cax_0+by_0+am-bn=cax0​+by0​+am−bn=c
我们只需要让am−bn=0am-bn=0am−bn=0即可
设gcd(a,b)=dgcd(a,b)=dgcd(a,b)=d，我们让{m=t×bdn=t×ad\begin{cases} m=t\times\frac{b}{d}\\n=t\times\frac{a}{d} \end{cases}{m=t×db​n=t×da​​
代入计算得abd−abd=0\frac{ab}{d}-\frac{ab}{d}=0dab​−dab​=0
这时候我们就证明了一个定理
 由特殊解推到所有整数解的定理

设方程ax+by=cax+by=cax+by=c(其中a，b为非零整数)有一组整数解x=x0,y=y0x=x_0,y=y_0x=x0​,y=y0​，则方程的所有整数解可以表示为x=x0+bgcd(a,b)t，y=y0−agcd(a,b)tx=x_0+\frac{b}{gcd(a,b)}t，y=y_0-\frac{a}{gcd(a,b)}tx=x0​+gcd(a,b)b​t，y=y0​−gcd(a,b)a​t

我们开始考虑最大最小值
{x=x0+t×bdy=y0−t×ad\begin{cases} x=x_0+t\times\frac{b}{d}\\y=y_0-t\times\frac{a}{d} \end{cases}{x=x0​+t×db​y=y0​−t×da​​
我们可以发现当t增大的时候，x越来越大，y越来越小
由于增加减少的值太难写，我们考虑换元法。
令tx=t×bd，ty=t×adt_x=t\times\frac{b}{d}，t_y=t\times\frac{a}{d}tx​=t×db​，ty​=t×da​
既然是正整数，那么即求xmin≥1x_{min}\ge1xmin​≥1
代入上式可得
x0+ktx≥1x_0+kt_x\ge1x0​+ktx​≥1
变形即可得
k≥⌈1−x0tx⌉k\ge\lceil\frac{1-x_0}{t_x}\rceilk≥⌈tx​1−x0​​⌉
为什么是上取整因为k必须大于这个值
可得xmin=x0−⌈1−x0tx⌉x_{min}=x_0-\lceil\frac{1-x_0}{t_x}\rceilxmin​=x0​−⌈tx​1−x0​​⌉
xminx_minxm​in对应的y值正好就是ymaxy_{max}ymax​，若ymax&lt;0y_{max}&lt;0ymax​&lt;0 则无正整数解
懒的敲式子了


代码如下
#include&lt;iostream&gt;#include&lt;cmath&gt;#define ll long longusing namespace std;int T;ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123;    if(!b)&#123;        x=1;        y=0;        return a;    &#125;    ll d=exgcd(b,a%b,y,x);    y-=a/b*x;    return d;//这里求出的是gcd(a,b)&#125;int main()&#123;    cin&gt;&gt;T;ll qp(ll a,ll b,ll mod)&#123;    a%=mod;    ll res=1;    while(b&gt;0)&#123;        if(b&amp;1)&#123;            res=res*a%mod;        &#125;        a=a*a%mod;        b&gt;&gt;=1;    &#125;    return res;&#125;    while (T--)    &#123;        ll a,b,c,x,y;        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;        ll d=exgcd(a,b,x,y);        if(c%d!=0)&#123;//不能整除方程无解            cout&lt;&lt;-1&lt;&lt;endl;            continue;        &#125;        x=x*c/d,y=y*c/d;//求x0和y0        ll tx=b/d,ty=a/d;        ll k=ceil((1.0-x)/tx);        x+=tx*k;        y-=ty*k;//求xmin和ymax        if(y&lt;=0)&#123;//如果ymax&lt;0            ll ansy=y+ty*(ll)1*ceil((1.0-y)/ty);            cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;ansy&lt;&lt;endl;        &#125;else&#123;            cout&lt;&lt;(y-1)/ty+1&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;(y-1)%ty+1&lt;&lt;&quot; &quot;&lt;&lt;x+(y-1)/ty*tx&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;        &#125;    &#125;    return 0;&#125;
总结以下就是这个结论

 9.快速幂

已知三个正整数a,b,c(a,b,c&lt;=105)a,b,c(a,b,c&lt;=10^5)a,b,c(a,b,c&lt;=105) 求abmod  ca^{b}\mod cabmodc

 9.1 朴素算法
直接模拟一个b次的循环，枚举a对b次乘法
int f(int a, int b, int c) &#123;    int ans = 1;    while(b--)        ans = ans * a;    return ans % c;&#125;
显然我们发现1010510^{10^5}10105 肯定在算的时候就炸INT了。
并且时间复杂度是O(b)O(b)O(b)的，时间复杂度不可以接受。
 9.2 模乘
abmod  c=(amod  c)(bmod  c)mod  cab\mod c=(a\mod c)(b\mod c)\mod cabmodc=(amodc)(bmodc)modc
证明贴一个别人的

改进如下
int f(int a, int b, int c) &#123;    a = (a % c + c) % c;    int ans = 1 % c;    while(b--)        ans = ans * a % c;    return ans;&#125;
但是时间复杂度并没有改善。
 9.3 二分快速幂
我们采用二分的思想，对原式进行分治法，有如下公式。
abmod  c={1mod  cb为0a(a(b−12)2mod  cb为奇数(ab/2)2mod  cb为偶数a^{b}\mod c=\begin{cases} 1\mod c &amp; b为0\\a(a^{(b-1}{2})^{2}\mod c &amp; b为奇数 \\ (a^{b/2})^2\mod c &amp; b为偶数 \end{cases}abmodc=⎩⎪⎪⎨⎪⎪⎧​1modca(a(b−12)2modc(ab/2)2modc​b为0b为奇数b为偶数​
于是我们可以利用程序的递归思想，把函数描述成如下形式
f(a,b,c)={1mod  cb为0af(a,b−12,c)2b为奇数f(a,b2,c)2b为偶数f(a,b,c)=\begin{cases} 1\mod c &amp; b为0\\ af(a,\frac{b-1}{2},c)^2 &amp; b为奇数 \\ f(a,\frac{b}{2},c)^2 &amp; b为偶数\end{cases}f(a,b,c)=⎩⎪⎪⎨⎪⎪⎧​1modcaf(a,2b−1​,c)2f(a,2b​,c)2​b为0b为奇数b为偶数​
代码如下：
ll qp(ll a,ll b,ll mod)&#123;    a%=mod;    ll res=1;    while(b&gt;0)&#123;        if(b&amp;1)&#123;            res=res*a%mod;        &#125;        a=a*a%mod;        b&gt;&gt;=1;    &#125;    return res;&#125;
注意如果乘法可能溢出，要使用龟速乘！
 10.欧拉函数
对于正整数nnn，欧拉函数是小于等于n的正整数中与n互素的个数，记为φ(n)\varphi(n)φ(n) (其中φ(1)=1\varphi(1)=1φ(1)=1)
即φ(n)=∑i=1n[gcd(i,n)=1]\varphi(n)=\sum\limits_{i=1}^n[gcd(i,n)=1]φ(n)=i=1∑n​[gcd(i,n)=1]
其中[A][A][A]表示当A成立时，[A]=1，反之[A]=0A成立时，[A]=1，反之[A]=0A成立时，[A]=1，反之[A]=0
对于素数ppp而言，小于等于ppp的数必然与他互素，故
φ(p)=p−1\varphi(p)=p-1φ(p)=p−1
对于素数的幂来说，有
φ(pk)=pk−pk−1\varphi(p^k)=p^k-p^{k-1}φ(pk)=pk−pk−1
对于素数ppp来说，有
φ(2p)=φ(p)\varphi(2p)=\varphi(p)φ(2p)=φ(p)
对于任意正整数n，有
n=∑d∣nφ(d)n=\sum\limits_{d|n}\varphi(d)n=d∣n∑​φ(d)
对于任意两个互素的数p,qp,qp,q，他们乘积的欧拉函数如下
φ(pq)=φ(p)×φ(q)\varphi(pq)=\varphi(p)\times\varphi(q)φ(pq)=φ(p)×φ(q)
利用算数基本定理可得

故有任意正整数n，有
φ(n)=n∏i=1k(1−1pi)\varphi(n)=n\prod^k_{i=1}(1-\frac{1}{p_i})φ(n)=n∏i=1k​(1−pi​1​)
 单个数的欧拉函数求解
我们可以用定义来做，那么只需要枚举iii，并求gcd(n,i)=1gcd(n,i)=1gcd(n,i)=1的满足个数。考虑算数唯一分解定理，和上面的一般式，我们可以枚举素数进行试除法
φ(n)=n∏i=1k(pi−1pi)\varphi(n)=n\prod^k_{i=1}(\frac{p_i-1}{p_i})φ(n)=n∏i=1k​(pi​pi​−1​)


当n=1的时候，返回1


当n&gt;1，用ans来记录最终的欧拉函数值，初始值为n


- 对[2,n][2,\sqrt{n}][2,n​]的素数进行试除，对于素数ppp，若满足p∣np|np∣n，则执行ans=ans/(i−1i)ans=ans/(\frac{i-1}{i})ans=ans/(ii−1​)，n/=in/=in/=i把她质数次方因子筛没

当某个时刻n=1的时候直接返回ans的值。若试除完后还有剩余说明n是一个素数，返回ans/(n−1n)ans/(\frac{n-1}{n})ans/(nn−1​)

代码如下
int phi(int n)&#123;    int ans=n;    for(int i=2;i*i&lt;=n;i++)&#123;        if(n%i==0)&#123;            ans=ans/i*(i-1);            while (n%i==0)            &#123;                n/=i;            &#125;        &#125;    &#125;    if(n&gt;=2)&#123;        ans=ans/n*(n-1);    &#125;    return ans;&#125;
先除后乘防止超Int范围
 欧拉筛
因为欧拉函数是积性函数，φ(xy)=φ(x)φ(y)\varphi(xy)=\varphi(x)\varphi(y)φ(xy)=φ(x)φ(y)
可得如下筛法，时间复杂度O(n)O(n)O(n)
phi[1]=1;    for(int i=2;i&lt;=n;i++)    &#123;        if(!vis[i]) p[++cnt]=i,phi[i]=i-1;//质数只有自身与自己不互质        for(int j=1;p[j]&amp;&amp;i*p[j]&lt;=n;j++)        &#123;            vis[i*p[j]]=1;            if(!(i%p[j]))            &#123;                phi[i*p[j]]=phi[i]*p[j];                //这里是平方因子了，不要减1                break;            &#125;            else phi[i*p[j]]=phi[i]*(p[j]-1);//第一次出现因子，乘p-1        &#125;    &#125;  
 11.积性函数
数论函数指定义域为正整数的函数。
若数论函数 fff 满足当 gcd⁡(a,b)=1\gcd(a,b)=1gcd(a,b)=1 且f(1)=1f(1)=1f(1)=1时 f(ab)=f(a)f(b)f(ab)=f(a)f(b)f(ab)=f(a)f(b)，则 fff 为积性函数。
若数论函数 fff 满足任何正整数 a,ba,ba,b 有 f(ab)=f(a)f(b)f(ab)=f(a)f(b)f(ab)=f(a)f(b)，则 fff 为完全积性函数。
 一些积性函数


单位函数 ϵ(n)=[n=1]\epsilon(n)=[n=1]ϵ(n)=[n=1]（完全积性）


常函数 1(n)=11(n)=11(n)=1（完全积性）


幂函数 Ik(n)=nkI_k(n)=n^kIk​(n)=nk


恒等函数 id(n)=n\mathrm{id}(n)=nid(n)=n，idk(n)=nk\mathrm{id}_k(n)=n^kidk​(n)=nk（完全积性）


因数和函数 σ(n)=∑d∣nd\sigma(n)=\sum_{d|n}dσ(n)=∑d∣n​d，σk(n)=∑d∣ndk\sigma_k(n)=\sum_{d|n}d^kσk​(n)=∑d∣n​dk


约数个数d(n)=σ0(n)=∑d∣n1d(n)=\sigma_0(n)=\sum_{d|n}1d(n)=σ0​(n)=∑d∣n​1


 1-1e18的函数取值对照表
经典永流传~

例题：CF920F

给定nnn个数的数组aaa，mmm次操作，操作有2种(1≤n,m≥3× 105,1≤ai≤1061 \le n,m \ge 3\times  10^5,1\le a_{i}\le 10^61≤n,m≥3× 105,1≤ai​≤106)



将i∈[l,r]i \in [l,r]i∈[l,r]中所有aia_iai​替换为d(ai)d(a_i)d(ai​)




求∑i=lrai\sum\limits_{i=l}^{r}a_ii=l∑r​ai​


这里阐述一个估算d(x)d(x)d(x)的方法


对于任意正整数xxx，一定有d(x)≤3xd(x)\le \sqrt{3x}d(x)≤3x​


对于x&gt;1260x&gt;1260x&gt;1260，一定有d(x)&lt;xd(x)&lt;\sqrt{x}d(x)&lt;x​


那么这个题很好做，不难根据表发现当ai=106,d(ai)=240a_i=10^6,d(a_i)=240ai​=106,d(ai​)=240。线段树维护，单点暴力修改，注意要打tag来保持复杂度。
故有代码：
#include&lt;bits/stdc++.h&gt;#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1#define ll long longusing namespace std;const int MN=3e5+15,MA=1e6+15;template&lt;typename type&gt;inline void read(type &amp;x)&#123;    x=0;bool flag(0);char ch=getchar();    while(!isdigit(ch)) flag=ch==&#x27;-&#x27;,ch=getchar();    while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();    flag?x=-x:0;&#125;struct segtree&#123;    int l,r;    bool isok;    ll sum;&#125;t[MN&lt;&lt;2];ll a[MN];int n,m;  //https://wenku.baidu.com/view/9e336795bb4cf7ec4afed057.html?_wkts_=1739964897460&amp;needWelcomeRecommand=1//对于任意正整数n,有d(n)&lt;=sqrt(3*n)//对于n&gt;1260，有d(n)&lt;sqrt(n)  //d是约数个数，时间复杂度线性筛O(n)// num是最小素因子个数，用于筛约数int d[MA],num[MA];vector&lt;bool&gt; vis(MA);vector&lt;int&gt; prime;  void pushup(int p)&#123;    t[p].sum=t[ls].sum+t[rs].sum;    if(t[ls].isok==1&amp;&amp;t[rs].isok==1)&#123;        t[p].isok=1;    &#125;&#125;  void build(int p,int l,int r)&#123;    t[p].l=l;    t[p].r=r;    if(l==r)&#123;        t[p].sum=a[l];        if(t[p].sum==1||t[p].sum==2)&#123;            t[p].isok=1;        &#125;        return;    &#125;    int mid=l+r&gt;&gt;1;    build(ls,l,mid);    build(rs,mid+1,r);    pushup(p);&#125;  void update(int p,int fl,int fr)&#123;    if(t[p].isok) return;    if(t[p].l==t[p].r)&#123;        t[p].sum=d[t[p].sum];        if(t[p].sum==1||t[p].sum==2) t[p].isok=1;        return;    &#125;    int mid=t[p].l+t[p].r&gt;&gt;1;    if(mid&gt;=fl) update(ls,fl,fr);    if(mid&lt;fr) update(rs,fl,fr);    pushup(p);&#125;  ll query(int p,int fl,int fr)&#123;    if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;        return t[p].sum;    &#125;    ll ret=0;    int mid=t[p].l+t[p].r&gt;&gt;1;    if(mid&gt;=fl)ret+=query(ls,fl,fr);    if(mid&lt;fr) ret+=query(rs,fl,fr);    return ret;&#125;  void getd()&#123;    d[1]=1;    for(int i=2;i&lt;MA;i++)&#123;        if(!vis[i])&#123;            prime.push_back(i);            d[i]=2;            num[i]=1;        &#125;        for(int j=0;1ll*i*prime[j]&lt;MA&amp;&amp;j&lt;prime.size();j++)&#123;            vis[i*prime[j]]=1;            if(i%prime[j]==0)&#123;                num[i*prime[j]]=num[i]+1;                d[i*prime[j]]=d[i]/(num[i]+1)*(num[i*prime[j]]+1);                break;            &#125;else&#123;                d[i*prime[j]]=d[i]*2;                num[i*prime[j]]=1;            &#125;        &#125;    &#125;&#125;  int main()&#123;    ios::sync_with_stdio(0);    getd();    read(n);    read(m);    for(int i=1;i&lt;=n;i++)&#123;        read(a[i]);    &#125;    int op,x,y;    build(1,1,n);    while (m--)    &#123;        read(op);        read(x);        read(y);        if(op==1)&#123;            update(1,x,y);        &#125;else&#123;            cout&lt;&lt;query(1,x,y)&lt;&lt;&#x27;\n&#x27;;        &#125;    &#125;  &#125;
 12.欧拉定理与费马小定理
 12.1 欧拉定理

nnn和aaa为正整数，且n,an,an,a互素，则aφ(n)≡1(mod  n)a^{\varphi(n)} \equiv 1(\mod n)aφ(n)≡1(modn)

证明？

推论：

若正整数 a,ba,ba,b 互质则满足 ax≡1(modb)a^x \equiv 1 \pmod bax≡1(modb) 的最小正整数解 x0x_0x0​ 是 φ(b)\varphi(b)φ(b) 的约数

可以用欧拉定理反证法证明。
例题：洛谷P1463_POI_2001_HAOI_2007_反素数
 12.2 费马小定理

若ppp为素数，gcd(a,p)=1gcd(a,p)=1gcd(a,p)=1，则ap−1≡1(mod  p)a^{p-1}\equiv 1(\mod p)ap−1≡1(modp)
对于任意整数aaa，有ap≡a(mod  p)a^p\equiv a(\mod p)ap≡a(modp)


 12.2.1 判定素数
我们回到判定素数的那一节，如果我们要判定的范围超过的101210^{12}1012，那么就无法使用O(n)O(\sqrt{n})O(n​)的算法来求解。
我们可以用费马小定理，随机找几个和nnn互素的aaa。
计算an−1mod  na^{n-1} \mod nan−1modn
若结果均为1，那么认为nnn，是一个素数。这样的时间复杂度O(Clog2n)O(Clog_2n)O(Clog2​n)，常数C表示找C个a来测试。
但是，以上假设不成立！
因为在费马小定理的条件中，若置换条件。
若ap−1≡1(mod  p)a^{p-1}\equiv 1(\mod p)ap−1≡1(modp)，不能推导出ppp是素数
例如561，这一类数我们称其为伪素数，又称为卡迈克尔数，在 n≤109n\le 10^9n≤109 内有 255 个。
若 nnn 为卡迈克尔数，则 2n−12^n-12n−1 也是卡迈克尔数，故其个数是无穷的。
 12.2.2 Miller_Rabin算法
Miller Rabin素性检验是一种素数判定的法则，由CMU的教授Miller首次提出，并由希大的Rabin教授作出修改，变成了今天竞赛人广泛使用的一种算法，故称Miller Rabin素性检验。
本质其实是随机化算法，能在时间复杂度为 O(Clog⁡3n)O(C \log^3 n)O(Clog3n) 的情况下判断（这里 CCC 同上），但是具有一定错误概率，但是在 OI 范围内能保证步出错。
既然我们单纯费马小定理无法判断，我们只好引入新的定理来提高我们的正确性。

二次探测定理：对于质数 ppp，若 x2≡1(modp)x^2 \equiv 1 \pmod px2≡1(modp)，则小于 ppp 的解只有两个，x1=1,x2=p−1x_1=1,x_2=p-1x1​=1,x2​=p−1。

证明：
x2≡1(modp)x2−1≡0(modp)(x+1)(x−1)≡0(modp)p∣(x+1)(x−1)∵p是质数∴{x1=1x2=p−1\begin{aligned}
x^2 &amp; \equiv 1 \pmod p \\
x^{2}-1 &amp; \equiv 0 \pmod p \\
(x+1)(x-1) &amp; \equiv 0 \pmod p \\
  p   &amp;| (x+1)(x-1) \\ \\
\because  &amp;p \text{是质数} \\ \\
\therefore 
&amp;\begin{cases}
x_1=1  \\
 x_{2}= p-1\\
\end{cases}
\end{aligned}
x2x2−1(x+1)(x−1)p∵∴​≡1(modp)≡0(modp)≡0(modp)∣(x+1)(x−1)p是质数{x1​=1x2​=p−1​​
这个定理有什么用？
如果费马小定理检测得到 ap−1≡1(modp)a^{p-1} \equiv 1 \pmod pap−1≡1(modp)，并且 p−1p-1p−1 为偶数（否则 ppp 为偶数直接被筛了），则 ap−1a^{p-1}ap−1 相当于 x2x^2x2。
拆分为 (ap−12)2≡1(modp)\left(a^{\dfrac{p-1}{2}}\right)^2 \equiv 1 \pmod p⎝⎛​a2p−1​⎠⎞​2≡1(modp)，可以用二次检测定理判断。
如果 ap−12a^{\frac{p-1}{2}}a2p−1​ 在 (modp)\pmod p(modp) 的情况下的解不是 1 或者 p−1p-1p−1，那么 ppp 就不是素数。
如果 (ap−12)2≡1(modp)\left(a^{\frac{p-1}{2}}\right)^2 \equiv 1 \pmod p(a2p−1​)2≡1(modp)，可以模仿之前操作在进行一次检验，变判断 ap−14a^{\frac{p-1}{4}}a4p−1​，不断执行直到为计数。
也就是说，我们可以将 p−1=u×2tp-1=u\times 2^tp−1=u×2t，其中 uuu 为奇数。对于 au,au×2,au×22…a^u,a^{u\times 2},a^{u \times 2^2} \dotsau,au×2,au×22…这一系列数进行检验，他们的解要么是 1 要么出现 p−1p-1p−1 后全是 1 （前面不能出现1），否则就不是素数，当然要注意 p−1p-1p−1 不能出现在最后一个数否则不满足费马小定理，还要注意过程中不能产生 ppp 的倍数。
过程如下：

先特判 3 以下的数和偶数
将 n−1n-1n−1 化为 u×2tu\times 2^tu×2t。
选取多个底数 aaa，对 au,au×2,au×22…a^u,a^{u\times 2},a^{u \times 2^2} \dotsau,au×2,au×22…进行检验，判断解是否全为 1，或在非最后一个数的情况下出现 p−1p-1p−1。
如果都满足，则认为为素数。

板子题：SP288——PON
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr ll prime[]=&#123;2,3,5,7,11,13,17,37&#125;;ll qmul(ll a,ll b,ll MOD)&#123;    ll ret=0;    while(b)&#123;        if(b&amp;1) ret=(ret+a)%MOD;        b&gt;&gt;=1;        a=(a+a)%MOD;    &#125;    return ret;&#125;ll qpow(ll a,ll b,ll MOD)&#123;    ll ret=1;    while(b)&#123;        if(b&amp;1) ret=qmul(ret,a,MOD);        a=qmul(a,a,MOD);        b&gt;&gt;=1;    &#125;    return ret;&#125;bool MillerRabin(ll n)&#123;    if(n&lt;3||n%2==0) return n==2;    ll d=n-1,tot=0;    while(d%2==0) d/=2,++tot;    for(auto p:prime)&#123;        ll v=qpow(p,d,n);        if(v==1||v==n-1||v==0) continue;        for(int j=1;j&lt;=tot;j++)&#123;            v=qmul(v,v,n);            if(v==n-1&amp;&amp;j!=tot)&#123;                v=1;                break;            &#125;            if(v==1) return 0;        &#125;        if(v!=1) return 0;    &#125;    return 1;&#125;int main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        ll n;        cin&gt;&gt;n;        cout&lt;&lt;(MillerRabin(n)?&quot;YES\n&quot;:&quot;NO\n&quot;);    &#125;    return 0;&#125;
 12.2.2 二分快速幂降幂

给出一个大整数n(1≤n≤10100000)n(1\le n \le 10^{100000})n(1≤n≤10100000)


求2nmod  1e9+72^n\mod 1e9+72nmod1e9+7

令x=p−1x=p-1x=p−1，由费马小定理得
2p−1mod  p=12^{p-1}\mod p=12p−1modp=1

m=nmod  (p−1)m=n\mod(p-1)m=nmod(p−1) 可以用大数取余求解，求得的m∈[0,p−1)m \in [0,p-1)m∈[0,p−1)，再利用快速幂求解即可。
 12.3 拓展欧拉定理
说到这里，我们先来看看欧拉定理的局限性

欧拉定理：


nnn和aaa为正整数，且n,an,an,a互素，则aφ(n)≡1(mod  n)a^{\varphi(n)} \equiv 1(\mod n)aφ(n)≡1(modn)

不难发现，局限性在于互素，即gcd(a,n)=1gcd(a,n)=1gcd(a,n)=1，那么如果不互素，怎么办？这时候就要用到“拓展欧拉定理”了
拓展欧拉定理如下：
定义：
ab≡{a(bmod  φ(m))gcd(a,m)=1abgcd(a,m)≠1,b&lt;φ(m)a((b+φ( mod φ(m))gcd(a,m)≠1,(b≥φ(m) (mod    m)a^b \equiv \begin{cases} a^{(b \mod \varphi(m))} &amp; gcd(a,m)=1 \\ a^b &amp; gcd(a,m) \ne 1,b&lt; \varphi(m) \\ a^{((b+\varphi(\,mod \,\varphi(m))} &amp; gcd(a,m)\ne 1,(b\ge \varphi(m)  \end{cases} \quad (mod\,\,\,\,m)
ab≡⎩⎪⎪⎨⎪⎪⎧​a(bmodφ(m))aba((b+φ(modφ(m))​gcd(a,m)=1gcd(a,m)=1,b&lt;φ(m)gcd(a,m)=1,(b≥φ(m) ​(modm)
其中第二行的意思，若gcd(a,m)≠1,b&lt;φ(m)gcd(a,m) \ne 1,b&lt; \varphi(m)gcd(a,m)=1,b&lt;φ(m)那么是不能降幂的。
题目中的mmm不会太大，但是如果b&lt;φ(m)b&lt;\varphi(m)b&lt;φ(m)，复杂度可以用快速幂求解，但是大于那么就会问题，所以就要靠降幂来实现。
证明略（啊？）
应用：
 12.3.1 拓展欧拉定理的应用
P5091 【模板】扩展欧拉定理

求abmod  ma^b \mod mabmodm


其中1≤a≤109,1≤b≤1020000000,1≤m≤1081\le a\le 10^9,1\le b\le10^{20000000},1\le m \le 10^81≤a≤109,1≤b≤1020000000,1≤m≤108

十分甚至九分的恐怖，甚至都没有互素，直接套上去看看。
φ(x)\varphi(x)φ(x)可以用线性筛求得，但是bbb过大，我们可以用边读入边取余的方式。
代码？
#include&lt;iostream&gt;#define ll long longusing namespace std;int phi(int n)&#123;    int ans=n;    for(int i=2;i*i&lt;=n;i++)&#123;        if(n%i==0)&#123;            ans=ans/i*(i-1);            while (n%i==0)            &#123;                n/=i;            &#125;        &#125;    &#125;    if(n&gt;=2)&#123;        ans=ans/n*(n-1);    &#125;    return ans;&#125;inline int read(int mod)&#123;    int x=0;    bool g=false;    char c=getchar();    while(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;) c=getchar();    while(c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;)    &#123;        x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^&#x27;0&#x27;);        if(x&gt;=mod) x%=mod,g=true;//判断是否大于哦啦函数        c=getchar();    &#125;    if(g) return (x+mod);    else return x;&#125;ll quickpow(ll a,ll b,ll mod)&#123;    ll ret=1;    while (b)    &#123;        if (b&amp;1)&#123;            ret=ret*a%mod;        &#125;        a=a*a%mod;        b&gt;&gt;=1;    &#125;    return ret%mod;&#125;int main()&#123;    ll a,mod,cishu;    cin&gt;&gt;a&gt;&gt;mod;    cishu=read(phi(mod));    cout&lt;&lt;quickpow(a,cishu,mod);    return 0;&#125;
 13.逆元与线性同余方程
定义：
形如
ax≡b   (mod m)ax \equiv b \,\,\, (mod \,m)
ax≡b(modm)
的方程称为线性同余方程，其中a,b,ma,b,ma,b,m均已知，但是xxx未知。从[0,m−1][0,m-1][0,m−1]中求解xxx，xxx不唯一需求出全体解。
 13.1 逆元求解
逆元可以理解为模意义下的除法，符号为a−1a^{-1}a−1（暴论）
可以理解为倒数eee，然而实际上不是倒数，人家就叫做逆元。
考虑最简单的情况，gcd(a,m)=1gcd(a,m)=1gcd(a,m)=1即互素时，可以计算aaa的逆元，并将方程两边乘以aaa的逆元，得到唯一解。

线性方程组解的数量等于gcd(a,n)gcd(a,n)gcd(a,n)或等于0（即无解）
 13.2 拓展欧几里得算法求解
我们可以将取余的式子改写为如下的形式：
ax+ny=bax+ny=b
ax+ny=b
不难发现可以用拓展欧几里得算法求解该方程，得一组解，在通过之前上面讲过的单一解求通解，在拓展到全体解，即可得到。
其实说实话这两个不是一种东西吗…
其实是等价的。
例题：
  P1082 [NOIP2012 提高组] 同余方程

求关于 xxx 的同余方程 ax≡1(modb)ax \equiv 1 \pmod {b}ax≡1(modb) 的最小正整数解。

不是这个题怎么又上来了？
然而实际上这个题刚好就能作为例题eee
代码重放
#include&lt;iostream&gt;#define ll long longusing namespace std;void exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123;    if(!b)&#123;        x=1;        y=0;        return;    &#125;    exgcd(b,a%b,y,x);    y-=a/b*x;&#125;int main()&#123;    ll a,b,x,y;    cin&gt;&gt;a&gt;&gt;b;    exgcd(a,b,x,y);    cout&lt;&lt;(x%b+b)%b;    return 0;&#125;
 13.3 快速幂求解逆元
乘法逆元就是求abmod  p=a×xmod  p\frac{a}{b} \mod p=a\times x \mod pba​modp=a×xmodp中的xxx。
那么也就是说ab≡a×x (mod p)\frac{a}{b} \equiv a\times x \,\text{(mod p)}ba​≡a×x(mod p)
那么有1≡b×x (mod p)1\equiv b\times x \,\text{(mod p)}1≡b×x(mod p)
由费马小定理可得当ppp为质数时逆元为x=b(p−2)x=b^{(p-2)}x=b(p−2)
快速幂即可求解。
 13.4 阶乘逆元O(n)
留存一份，一般是先exgcd或快速幂求解f[n]f[n]f[n]，让后倒序递推，一定注意开long long！
    jc[0] = 1;    for (int i = 1; i &lt;= 1e5; i++)    &#123;        jc[i] = (i * jc[i - 1]) % MOD;    &#125;    ll x, y;    inv[100000] = binpow(jc[100000], MOD - 2);    for (int i = 100000 - 1; i &gt;= 0; i--)    &#123;        inv[i] = inv[i + 1] * (i + 1) % MOD;    &#125;
 14.线性同余方程组——中国剩余定理（EXTRA！）

「物不知数」问题：有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？

答：我不会，我不会，我不会，啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊┗( T﹏T )┛
 14.1 中国剩余定理
中国剩余定理可以求解如下的一元线性同余方程组。
{x≡a1mod  n1x≡a2mod  n2     ⋮x≡anmod  nk\begin{cases} x\equiv a_{1} \mod n_{1}\\ x\equiv a_{2} \mod n_{2} \\ \space \space \space\ \ \vdots \\ x\equiv a_{n} \mod n_{k}\end{cases}
⎩⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎧​x≡a1​modn1​x≡a2​modn2​     ⋮x≡an​modnk​​
其中n1,n2…nkn_1,n_{2} \ldots n_{k}n1​,n2​…nk​两两互质
方法：


计算所有模数的积：nnn


对于第iii个方程：


- 计算mi=nnim_i=\frac{n}{n_i}mi​=ni​n​
- 计算mim_imi​在模nin_ini​意义下的逆元mi−1m_i^{-1}mi−1​
- 计算ci=mi∗mi−1c_i=m_{i}* m_i^{-1}ci​=mi​∗mi−1​ (不要取模！)

方程组在模nnn意义下的唯一解为$$x=\sum\limits_{i=1}^k a_ic_i$$

P1495 【模板】中国剩余定理（CRT）/ 曹冲养猪
实现代码如下：
#include&lt;iostream&gt;#define ll long longusing namespace std;const int MN=1e5+15;int a[MN],b[MN],n;ll mt=1;ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123;    if(!b)&#123;        x=1;        y=0;        return a;    &#125;    ll d=exgcd(b,a%b,y,x);    y-=a/b*x;    return d;&#125;ll inv(ll a,ll n)&#123;    ll x,y;    exgcd(a,n,x,y);    return (x%n+n)%n;&#125;long long quick_mul(long long x,long long y,long long mod)&#123;    long long ans=0;    while(y!=0)&#123;        if(y&amp;1==1)ans+=x,ans%=mod;        x=x+x,x%=mod;        y&gt;&gt;=1;    &#125;    return ans;&#125;ll crt()&#123;    ll ans=0;    for(int i=1;i&lt;=n;i++)&#123;        ll m=mt/a[i],invm=inv(m,a[i]);//exgcd求逆元        ll ci=m*invm;        ans=(ans+quick_mul(b[i],ci,mt))%mt;//使用龟速乘    &#125;    return (ans%mt+mt)%mt;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i]&gt;&gt;b[i];        mt*=a[i];    &#125;    cout&lt;&lt;crt();    return 0;&#125;
 14.2 EXCRT拓展中国剩余定理
{x≡a1mod  n1x≡a2mod  n2     ⋮x≡anmod  nk\begin{cases} x\equiv a_{1} \mod n_{1}\\ x\equiv a_{2} \mod n_{2} \\ \space \space \space\ \ \vdots \\ x\equiv a_{n} \mod n_{k}\end{cases}
⎩⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎧​x≡a1​modn1​x≡a2​modn2​     ⋮x≡an​modnk​​
其中n1,n2…nkn_1,n_{2} \ldots n_{k}n1​,n2​…nk​两两互质，这样我们当然是可以用CRT来解决的，但是如果不互质怎么办？就需要用到拓展中国剩余定理。
与中国剩余定理的区别在哪里？在于我们需要合并方程才能做，例如合并上面两个式子：
x≡a1mod  n1x\equiv a_{1} \mod n_{1}x≡a1​modn1​
x≡a2mod  n2x \equiv a_{2}\mod n_2x≡a2​modn2​
合并为：x≡a′mod  (n1n2/gcd(m1,m2))x\equiv a&#x27; \mod (n_1n_{2}/ gcd(m_1,m_2))x≡a′mod(n1​n2​/gcd(m1​,m2​))
若合并了所有方程，那么得到的解即为最终解。
证明：
根据方程可变形为：
x≡a1+n1y1x\equiv a_1+n_1y_1x≡a1​+n1​y1​
x≡a2+n2y2x\equiv a_2+n_2y_2x≡a2​+n2​y2​
可得：a1+n1y1=a2+n2y2⇒n1y1−m2y2=a2−a1a_1+n_1y_1=a_2+n_2y_{2}\Rightarrow n_1y_1-m_2y_2=a_2-a_1a1​+n1​y1​=a2​+n2​y2​⇒n1​y1​−m2​y2​=a2​−a1​
转换为经典的ax+by=cax+by=cax+by=c的格式，先用exgcd求出ax+by=gcd(a,b)ax+by=gcd(a,b)ax+by=gcd(a,b)的解。
通过上面变形过的方程够再出一个mod  m1m2/gcd(m1,m2)\mod m_1m_2/gcd(m_1,m_2)modm1​m2​/gcd(m1​,m2​)的解
即得证。
代码如下：
#include&lt;iostream&gt;#define ll long longusing namespace std;const int MN=1e5+15;ll md[MN],b[MN],mt; // md数组存储模数，b数组存储余数，mt未使用int n; // 同余方程的数量  // 慢速乘法：计算 (a*b) % mod，使用快速乘法算法避免溢出ll slowti(ll a,ll b,ll mod)&#123;    ll ret=0;    while (b&gt;0)    &#123;        if(b&amp;1) ret=(ret+a)%mod; // 如果b的最低位是1，累加a        a=(a+a)%mod; // a乘以2        b&gt;&gt;=1; // b右移一位    &#125;    return ret;&#125;  // 扩展欧几里得算法：解ax + by = gcd(a,b)ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123;    if(!b)&#123;        x=1; // 基础情况处理        y=0;        return a; // 返回gcd    &#125;    // 递归调用，交换x和y的位置    ll ret=exgcd(b,a%b,y,x);    y-=a/b*x; // 更新y的值    return ret;&#125;  // 扩展中国剩余定理(EXCRT)：求解同余方程组ll excrt()&#123;    ll x,y; // 用于存储exgcd的解    ll m1=md[1],b1=b[1]; // 初始化第一个方程    ll ans=(b1%m1+m1)%m1; // 初始解    for(int i=2;i&lt;=n;i++)&#123;        ll m2=md[i],b2=b[i]; // 当前方程的模数和余数        // 合并方程为 m1*x ≡ (b2-b1) mod m2        ll a=m1,b=m2,c=(b2-b1%m2+m2)%m2; // c = (b2-b1) mod m2        // 求解方程 a*x + b*y = c        ll d=exgcd(a,b,x,y); // d是gcd(a,b)        // 如果c不能被d整除，无解        if(c%d!=0)&#123;            return -1;        &#125;        // 调整x的解        x=slowti(x,c/d,b/d);        // 计算新的解        ans=b1+x*m1;        // 更新模数为lcm(m1,m2) = m1*m2/d        m1=m2/d*m1;        // 确保解在模m1意义下最小非负        ans=(ans%m1+m1)%m1;        // 更新b1为当前解        b1=ans;    &#125;    return ans;&#125;  int main()&#123;    cin&gt;&gt;n; // 输入同余方程的数量    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;md[i]&gt;&gt;b[i]; // 输入每个方程的模数和余数    &#125;    cout&lt;&lt;excrt(); // 输出解    return 0;&#125;
 15.数论分块
 15.1 数论分块引入

求∑i=1n⌊ni⌋\sum\limits_{i=1}^n \lfloor \frac{n}{i} \rfloori=1∑n​⌊in​⌋，其中n≤1012n\le 10^{12}n≤1012

第一眼看上去是不可做题，因为如果我们直接暴力枚举的话是肯定不行的，因为我们枚举到10910^9109就做不动了，这个时候就要清楚数论分块。
我们比如果举例一个函数，比如果y=15xy=\frac{15}{x}y=x15​罢，他的函数图像如下：

我们根据题意，把他的下取整表示出来（图中红色）：

有没有发现什么，发现对应的下取整都是一个横线端（这不废话吗)，而且是分成一小段一小段的。
或者我们搬一个图来举例（出处vvauted的数论分块：

没错，数论分块中的分块就是看中的这一点,图像中是被分割成了几个大块，只要我们不断枚举块，就能显著的降低时间复杂度！
但是问题在于我们怎么知道每个块的右端点？这里给出一个引理。
对于任意一个iii，其最大的满足⌊ni⌋=⌊nj⌋\lfloor \frac{n}{i} \rfloor=\lfloor \frac{n}{j} \rfloor⌊in​⌋=⌊jn​⌋的 jjj 满足：
j=⌊n⌊ni⌋⌋j=\lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor}\rfloor
j=⌊⌊in​⌋n​⌋
证明如下：
⌊ni⌋≤ni\lfloor \frac{n}{i} \rfloor \le \frac{n}{i}⌊in​⌋≤in​
⌊n⌊ni⌋⌋≥⌊nni⌋\lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor}\rfloor \ge \lfloor \frac{n}{\frac{n}{i}}\rfloor⌊⌊in​⌋n​⌋≥⌊in​n​⌋
⌊n⌊ni⌋⌋≥i\lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor}\rfloor \ge i⌊⌊in​⌋n​⌋≥i
得证。
复杂度分析：
当x∈[1,⌊n⌋]x\in[1,\lfloor \sqrt{n} \rfloor]x∈[1,⌊n​⌋]的区间时最多有⌊n⌋\lfloor \sqrt{n} \rfloor⌊n​⌋个取值
当x∈[⌊n⌋,n]x\in[\lfloor \sqrt{n} \rfloor,n]x∈[⌊n​⌋,n]同理仍最多有⌊n⌋\lfloor \sqrt{n} \rfloor⌊n​⌋个取值。
共2⌊n⌋2\lfloor \sqrt{n} \rfloor2⌊n​⌋的值，时间复杂度即O(n)O(\sqrt{n})O(n​)
 15.2.1 例题1： 约数研究

求∑i=1nf(i)\sum\limits_{i=1}^{n}f(i)i=1∑n​f(i)，其中n≤106n\le 10^6n≤106


f(i)f(i)f(i)即iii的约束个数

对于iii，我们在[1,n][1,n][1,n]中的约数个数就是⌊ni⌋\lfloor \frac{n}{i} \rfloor⌊in​⌋，那么原命题转化为：
∑i=1nf(i)=∑i=1n⌊ni⌋\sum\limits_{i=1}^n f(i)=\sum\limits_{i=1}^n \lfloor \frac{n}{i} \rfloor
i=1∑n​f(i)=i=1∑n​⌊in​⌋
那么其实可以直接O(n)O(n)O(n)暴力就可以了，所以说吗这个题难度其实是个橙题。
但是如果n≤1014n\le 10^{14}n≤1014呢？那么就可以数论分块楼。
我们考虑一个块怎么贡献，根据式子，其实就是(r−l+1)×⌊ni⌋(r-l+1)\times \lfloor \frac{n}{i} \rfloor(r−l+1)×⌊in​⌋。
那么代码也就如下：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;int main()&#123;    ll n,ans=0;    cin&gt;&gt;n;    for(ll i=1,j;i&lt;=n;i=j+1)&#123;        j=n/(n/i);        ans+=(j-i+1)*(n/i);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 15.2.2 余数求和

给定n,kn,kn,k，求：∑i=1nkmod  n\sum\limits_{i=1}^n k \mod ni=1∑n​kmodn
n,k≤109n,k\le 10^9n,k≤109

这个题很有数论分块的感觉，毕竟这已经不能O(n)O(n)O(n),必须出分块！
简单转换一下，把取模变成如下式子：
∑i=1nk−⌊ki⌋×i\sum\limits_{i=1}^{n} k-\lfloor \frac{k}{i} \rfloor \times i
i=1∑n​k−⌊ik​⌋×i
=n×k−∑i=1n⌊ki⌋×i=n\times k - \sum\limits_{i=1}^n \lfloor \frac{k}{i} \rfloor \times i
=n×k−i=1∑n​⌊ik​⌋×i
直接数论分块就可以了，但是这个我们再算贡献的时候与∑i=lri\sum\limits_{i=l}^r ii=l∑r​i，需要等差数列一下。
那么代码如下：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;ll n,k,ret=0;ll getsum(ll l,ll r)&#123;    if(r&gt;n) r=n;    return (r-l+1)*(l+r)/2;&#125;  int main()&#123;    cin&gt;&gt;n&gt;&gt;k;    ret+=n*k;    for(ll i=1,j;i&lt;=n;i=j+1)&#123;        if(k/i==0) break;        j=k/(k/i);        if(j&gt;n) j=n;        ret-=(k/i)*getsum(i,j);    &#125;    cout&lt;&lt;ret;    return 0;&#125;
 15.2.3 约数求和PLUS

定义f(n)=∑i∣nif(n)=\sum\limits_{i|n} if(n)=i∣n∑​i，给定x,yx,yx,y求区间[x,y][x,y][x,y]的fff和


x,y≤109x,y \le 10^9x,y≤109

简单的拆成两个前缀和的形式，现在只需要求出[1,n][1,n][1,n]的答案怎么求，可以想到转化成如下式子：
∑i=1nf(i)=∑i=1n∑k∣ik\sum\limits_{i=1}^n f(i)=\sum\limits_{i=1}^n\sum\limits_{k|i} k
i=1∑n​f(i)=i=1∑n​k∣i∑​k
交换一下求和顺序：
∑k=1n∑k∣ik(k≤n)\sum\limits_{k=1}^n\sum\limits_{k|i}k(k\le n)
k=1∑n​k∣i∑​k(k≤n)
不难发现转化为了约数为k的数的前缀和，那么直接做就可以了。即为∑k=1nk×⌊nk⌋\sum\limits_{k=1}^{n} k\times \lfloor \frac{n}{k} \rfloork=1∑n​k×⌊kn​⌋
那么直接写就没了。。。代码如下：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;ll n,m;  ll getsum(ll l,ll r)&#123;    return (r-l+1)*(l+r)/2;&#125;  int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    n--;    ll retn=0,retm=0;    for(ll i=1,j;i&lt;=n;i=j+1)&#123;        j=n/(n/i);        retn+=(n/i)*getsum(i,j);    &#125;    for(ll i=1,j;i&lt;=m;i=j+1)&#123;        j=m/(m/i);        retm+=(m/i)*getsum(i,j);    &#125;    cout&lt;&lt;retm-retn;    return 0;&#125;
这个只是属于一个工具，如果考这个复杂度是显然可以观察出来的，往下取整的式子推就可以了。
 16.狄利克雷卷积
证明一般可能省略或给出。
狄利克雷卷积，是定义在数论函数间的一种二元运算，有如下两个等价定义：
(f∗g)(n)=∑xy=nf(x)g(y)(f*g)(n)=\sum\limits_{xy=n}f(x)g(y)
(f∗g)(n)=xy=n∑​f(x)g(y)
或如下等价式：
(f∗g)(n)=∑d∣nf(d)g(nd)(f*g)(n)=\sum\limits_{d|n}f(d)g(\frac{n}{d})
(f∗g)(n)=d∣n∑​f(d)g(dn​)
积性函数之间的狄利克雷卷积有一个重要的性质：

若f,gf,gf,g是积性函数，那么f∗gf*gf∗g也是积性函数。

证明如下：
显然有(f∗g)(1)=f(1)g(1)=1(f*g)(1)=f(1)g(1)=1(f∗g)(1)=f(1)g(1)=1，我们不妨设a,ba,ba,b互质，有：
(f∗g)(a)=∑d∣af(d)g(ad),(f∗g)(b)=∑d∣bf(d)g(bd)(f*g)(a)=\sum\limits_{d|a}f(d)g(\frac{a}{d}),(f*g)(b)=\sum\limits_{d|b}f(d)g(\frac{b}{d})
(f∗g)(a)=d∣a∑​f(d)g(da​),(f∗g)(b)=d∣b∑​f(d)g(db​)
(f∗g)(ab)=∑d∣abf(d)g(abd)(f*g)(ab)=\sum\limits_{d|ab}f(d)g(\frac{ab}{d})
(f∗g)(ab)=d∣ab∑​f(d)g(dab​)
注意到：
\begin{align}
\sum\limits_{d|a}f(d)g(\frac{a}{d}) \cdot \sum\limits_{d|b}f(d)g(\frac{b}{d}) &amp; = \sum\limits_{d_1|a,d_2|b}f(d_1)g(\frac{a}{d_1}) \cdot f(d_2)g(\frac{b}{d_2})\\
\sum\limits_{d|a}f(d)g(\frac{a}{d}) \cdot \sum\limits_{d|b}f(d)g(\frac{b}{d}) &amp; = \sum\limits_{d_1|a,d_2|b}f(d_1d_2)g(\frac{ab}{d_1d_2})
\end{align}

因为a,ba,ba,b互质，那么ababab的因数可以唯一的表示a,ba,ba,b的某个因数。
那么若f,gf,gf,g是积性函数，那么f∗gf*gf∗g也是积性函数这一结论得证，同时我们也证明了如下式子：

(f∗g)(a)⋅(f∗g)(b)=(f∗g)(ab)(f*g)(a) \cdot (f*g)(b) =(f*g)(ab)(f∗g)(a)⋅(f∗g)(b)=(f∗g)(ab)

 16.1 除数函数与幂函数
根据定义有(f∗1)(n)=∑d∣nf(d)1(nd)=∑d∣nf(d)(f*1)(n)=\sum\limits_{d|n}f(d)1(\frac{n}{d})=\sum\limits_{d|n}f(d)(f∗1)(n)=d∣n∑​f(d)1(dn​)=d∣n∑​f(d)
所以得：
(Idk∗1)(n)=∑d∣nIdk(d)=∑d∣ndk=σk(Id_k * 1)(n)  =\sum\limits_{d|n} Id_k(d)  =\sum\limits_{d|n} d^k  = \sigma _k 
(Idk​∗1)(n)=d∣n∑​Idk​(d)=d∣n∑​dk=σk​
 16.2 欧拉函数与恒等函数
因为：
(φ∗1)(n)=∑d∣nφ(d)(\varphi * 1)(n)=\sum\limits_{d|n} \varphi(d)
(φ∗1)(n)=d∣n∑​φ(d)
当d=pmd=p^md=pm时（ppp为质数），有：
∑d∣nφ(d)=φ(1)+∑i=1mφ(pi)=pm=d\sum\limits_{d|n} \varphi(d) =\varphi(1)+\sum\limits_{i=1}^m \varphi(p^i) = p^m  = d
d∣n∑​φ(d)=φ(1)+i=1∑m​φ(pi)=pm=d
那么可得(φ∗1)(pm)=pm(\varphi * 1)(p^m)=p^m(φ∗1)(pm)=pm
那么现在设nnn为任意正整数时，由算数唯一分解定理，并且(φ∗1)(pm)(\varphi * 1)(p^m)(φ∗1)(pm)显然为积性函数，那么根据算数唯一分解定理，因为带入一个质数的任意方仍和原值相同，那么带入之后其实和带入之前是一模一样的，即：
(φ∗1)(Πpm)=Π(φ∗1)(pm)=Πpm(\varphi * 1)(\Pi p^m)=\Pi (\varphi * 1)(p^m)=\Pi p^m
(φ∗1)(Πpm)=Π(φ∗1)(pm)=Πpm
即得：
(φ∗1)(n)=n(\varphi * 1)(n)=n
(φ∗1)(n)=n
φ∗1=Id\varphi * 1 =Id
φ∗1=Id
 16.3 单位函数eee与莫比乌斯函数μ\muμ
有如下关系式：
e=μ∗1=∑d∣nμ(d)e=\mu*1=\sum\limits_{d|n}\mu(d)
e=μ∗1=d∣n∑​μ(d)
证明利用单位元（下面）性质即可，略。
 16.4 狄利克雷卷积的性质
接下来我们来阐述狄利克雷卷积的一些性质：

具有交换性:(f∗g)(n)=(g∗f)(n)(f*g)(n)=(g*f)(n)(f∗g)(n)=(g∗f)(n)
具有结合律:((f∗g)∗h)(n)=(f∗(g∗h))(n)((f*g)*h)(n)=(f*(g*h))(n)((f∗g)∗h)(n)=(f∗(g∗h))(n)
对函数加法的分配率:(f∗(g+h))(n)=(f∗g)(n)+(f∗h)(n)(f*(g+h))(n)=(f*g)(n)+(f*h)(n)(f∗(g+h))(n)=(f∗g)(n)+(f∗h)(n)

单位元：
(ε∗f)(n)=∑d∣nε(d)f(nd)=f(n)(\varepsilon * f)(n)=\sum\limits_{d|n}\varepsilon(d)f(\frac{n}{d})=f(n)
(ε∗f)(n)=d∣n∑​ε(d)f(dn​)=f(n)
故单位函数即为狄利克雷卷积的单位元。
逆元：
假设f∗g=εf*g=\varepsilonf∗g=ε，我们称ggg为fff的狄利克雷逆元，记为f−1f^{-1}f−1。
fff存在狄利克雷卷积的必要条件是f(1)≠0f(1)\neq 0f(1)=0
f−1f^{-1}f−1是积性函数。
对于证明过程可以去网上找，这里就不在叙述了。
 17.莫比乌斯函数及反演
 17.1 莫比乌斯函数的小性质
对于莫比乌斯函数的定义我们这里不在详细叙述，需要去积性函数那里找。
莫比乌斯函数是积性函数，于是我们可以用线性筛来筛！
代码如下：
vector&lt;bool&gt; vis(MN);vector&lt;ll&gt; prime;ll n,mu[MN];void euler()&#123;    vis[1]=1;    mu[1]=1;    for(int i=2;i&lt;=n;i++)&#123;        if(!vis[i])&#123;            prime.push_back(i);            mu[i]=-1;        &#125;        for(auto p:prime)&#123;            if(i*p&gt;n) break;            vis[p*i]=1;            if(i%p==0)&#123;                mu[i*p]=0;                break;            &#125;            mu[i*p]=-mu[i];        &#125;    &#125;&#125;
莫比乌斯函数还具有另一个性质：
∑d∣nμ(d)=[n=1]\sum\limits_{d|n}\mu(d)=[n=1]
d∣n∑​μ(d)=[n=1]
证明需用到组合计数，这里就不在叙述了。
那么我们就能根据推论得到一个反演常用的结论：
∑d∣gcd(i,j)μ(d)=[gcd(i,j)=1]\sum\limits_{d|gcd(i,j)}\mu(d)=[gcd(i,j)=1]
d∣gcd(i,j)∑​μ(d)=[gcd(i,j)=1]
但是到现在我们还并没有说反演到底是啥，我们下面就来说。
 17.2 莫比乌斯反演
设f(n),g(n)f(n),g(n)f(n),g(n)为两个数论函数。
如果有：
f(n)=(g∗1)(n)=∑d∣ng(d)f(n)=(g*1)(n)=\sum\limits_{d|n}g(d)
f(n)=(g∗1)(n)=d∣n∑​g(d)
那么有：
g(n)=(μ∗f)(n)=∑d∣nμ(d)f(nd)g(n)=(\mu * f)(n)=\sum\limits_{d|n}\mu(d) f(\frac{n}{d})
g(n)=(μ∗f)(n)=d∣n∑​μ(d)f(dn​)
证明运用卷积即可。
 17.3 对于一类求和式
有如下式子：
∑i=1n∑j=1mf(gcd(i,j))\sum\limits_{i=1}^{n}\sum\limits_{j=1}^mf(gcd(i,j))
i=1∑n​j=1∑m​f(gcd(i,j))
一般套路：
我们可以尝试构造出函数ggg，使得有如下式子：
f=(g∗1)=∑d∣ng(d)f=(g*1)=\sum\limits_{d|n}g(d)
f=(g∗1)=d∣n∑​g(d)
不难替换：
∑i=1n∑j=1m∑d∣gcd(i,j)g(d)\sum\limits_{i=1}^n\sum\limits_{j=1}^m\sum\limits_{d|gcd(i,j)}g(d)
i=1∑n​j=1∑m​d∣gcd(i,j)∑​g(d)
不难发现当d∣gcd(i,j)d|gcd(i,j)d∣gcd(i,j)成立时，d∣id|id∣i与d∣jd|jd∣j肯定同时成立，考虑调整顺序，d∣id|id∣i与d∣jd|jd∣j同时成立时，才能产生贡献，不难调整。
∑d=1g(d)∑i=1n[d∣i]∑j=1m[d∣j]\sum\limits_{d=1}g(d)\sum\limits_{i=1}^n [d|i]\sum\limits_{j=1}^m [d|j]
d=1∑​g(d)i=1∑n​[d∣i]j=1∑m​[d∣j]
不难发现后面两项就是在枚举约数个数，可以转化为⌊nd⌋⌊md⌋\lfloor\frac{n}{d}\rfloor\lfloor\frac{m}{d}\rfloor⌊dn​⌋⌊dm​⌋
最终式为：
∑d=1g(d)⌊nd⌋⌊md⌋\sum\limits_{d=1}g(d)\lfloor\frac{n}{d}\rfloor\lfloor\frac{m}{d}\rfloor
d=1∑​g(d)⌊dn​⌋⌊dm​⌋
即得，数论分块求解即可。
 17.4 小例题
例1.1 :
∑i=1n∑j=1mgcd(i,j)\sum\limits_{i=1}^n\sum\limits_{j=1}^mgcd(i,j)
i=1∑n​j=1∑m​gcd(i,j)
不难发现其实就是Id(gcd(i,j))Id(gcd(i,j))Id(gcd(i,j))，利用16.2学到的性质，那么就直接发现是欧拉函数，结束。
∑d=1φ(d)⌊nd⌋⌊md⌋\sum\limits_{d=1}\varphi(d)\lfloor\frac{n}{d}\rfloor\lfloor\frac{m}{d}\rfloor
d=1∑​φ(d)⌊dn​⌋⌊dm​⌋
例1.2:
∑i=1n∑j=1m[gcd(i,j)=1]\sum\limits_{i=1}^n\sum\limits_{j=1}^m[gcd(i,j)=1]
i=1∑n​j=1∑m​[gcd(i,j)=1]
不难发现是单位函数eee，那么根据16.3结束。
∑d=1μ(d)⌊nd⌋⌊md⌋\sum\limits_{d=1}\mu(d)\lfloor\frac{n}{d}\rfloor\lfloor\frac{m}{d}\rfloor
d=1∑​μ(d)⌊dn​⌋⌊dm​⌋
例2:
∑x=ab∑y=cd[gcd(x,y)=k]\sum\limits_{x=a}^b\sum\limits_{y=c}^d [gcd(x,y)=k]
x=a∑b​y=c∑d​[gcd(x,y)=k]
其中1≤a,b,c,d,k≤5×1041\le a,b,c,d,k\le 5\times 10^41≤a,b,c,d,k≤5×104
这种区间，我们可以套路的转化为前缀和的形式，用容斥原理求解，那么不难转化：
f(n,m)=∑i=1n∑j=1m[gcd(i,j)=k]f(n,m)=\sum\limits_{i=1}^n\sum\limits_{j=1}^m[gcd(i,j)=k]
f(n,m)=i=1∑n​j=1∑m​[gcd(i,j)=k]
考虑把kkk给提出来，有：
∑i=1⌊nk⌋∑j=1⌊mk⌋[gcd(i,j)=1]\sum\limits_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{m}{k}\rfloor}[gcd(i,j)=1]
i=1∑⌊kn​⌋​j=1∑⌊km​⌋​[gcd(i,j)=1]
套入例1.2
∑i=1⌊nk⌋∑j=1⌊mk⌋∑d∣gcd(i,j)μ(d)\sum\limits_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{m}{k}\rfloor}\sum\limits_{d|gcd(i,j)}\mu(d)
i=1∑⌊kn​⌋​j=1∑⌊km​⌋​d∣gcd(i,j)∑​μ(d)
考虑下取整的式子能否直接代入，其实是可以的。那么有
∑d=1μ(d)⌊nkd⌋⌊mkd⌋\sum\limits_{d=1}\mu(d)\lfloor\frac{n}{kd}\rfloor\lfloor\frac{m}{kd}\rfloor
d=1∑​μ(d)⌊kdn​⌋⌊kdm​⌋
线性筛求μ\muμ让后整除分块即可，瓶颈在线性筛，时间复杂度O(n)O(n)O(n)
例3:
P3768 简单的数学题
∑i=1n∑j=1n(ij∗gcd(i,j))mod  m\sum\limits_{i=1}^n\sum\limits_{j=1}^n(ij*gcd(i,j)) \mod m
i=1∑n​j=1∑n​(ij∗gcd(i,j))modm
上来发现式子有点不像人样，尝试枚举gcd，有：
∑d=1d∑i=1n∑j=1nij[gcd(i,j)=d]\sum\limits_{d=1}d\sum\limits_{i=1}^n\sum\limits_{j=1}^nij[gcd(i,j)=d]
d=1∑​di=1∑n​j=1∑n​ij[gcd(i,j)=d]
我们发现这个式子和例2及其详细，我们可以转化过去，但是注意ij→id∗jdij\rightarrow id*jdij→id∗jd，我们不能一步转化
∑d=1d∑i=1⌊nk⌋∑j=1⌊nk⌋[gcd(i,j)=1]∗id∗jd\sum\limits_{d=1}d\sum\limits_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{n}{k}\rfloor}[gcd(i,j)=1]*id*jd
d=1∑​di=1∑⌊kn​⌋​j=1∑⌊kn​⌋​[gcd(i,j)=1]∗id∗jd
考虑把ddd提出来
∑d=1d3∑i=1⌊nk⌋∑j=1⌊nk⌋[gcd(i,j)=1]∗ij\sum\limits_{d=1}d^3\sum\limits_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{n}{k}\rfloor}[gcd(i,j)=1]*ij
d=1∑​d3i=1∑⌊kn​⌋​j=1∑⌊kn​⌋​[gcd(i,j)=1]∗ij
现在把例二丢进去：
∑d=1d3∑i=1⌊nk⌋∑j=1⌊nk⌋ij∑k∣gcd(i,j)μ(k)\sum\limits_{d=1}d^3\sum\limits_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{n}{k}\rfloor}ij\sum\limits_{k|gcd(i,j)}\mu(k)
d=1∑​d3i=1∑⌊kn​⌋​j=1∑⌊kn​⌋​ijk∣gcd(i,j)∑​μ(k)
如果我们想转化成最终形式，我们考虑ijijij的贡献，其实只是在运算的时候把求和式子中的1变了ijijij，那么不难有。
∑d=1d3∑k=1μ(k)k2∑i=1⌊nkd⌋∑j=1⌊nkd⌋ij\sum\limits_{d=1}d^3\sum\limits_{k=1}\mu(k)k^2\sum\limits_{i=1}^{\lfloor\frac{n}{kd}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{n}{kd}\rfloor}ij
d=1∑​d3k=1∑​μ(k)k2i=1∑⌊kdn​⌋​j=1∑⌊kdn​⌋​ij
有没有发现多了个k2k^2k2，是因为你的ijijij如果都提出来（指求和里的分母kd）里面都有一个kkk，那么提出来就要k2k^2k2
考虑后面式子，后面式子我们其实可以O(1)O(1)O(1)计算，有：
f(⌊nkd⌋,⌊mkd⌋)=∑i=1⌊nkd⌋i∑j=1⌊nkd⌋j=⌊nkd⌋×(⌊nkd⌋+1)2×⌊mkd⌋×(⌊mkd⌋+1)2f(\lfloor\frac{n}{kd}\rfloor,\lfloor\frac{m}{kd}\rfloor)=\sum\limits_{i=1}^{\lfloor\frac{n}{kd}\rfloor}i\sum\limits_{j=1}^{\lfloor\frac{n}{kd}\rfloor}j=\frac{\lfloor\frac{n}{kd}\rfloor\times(\lfloor\frac{n}{kd}\rfloor+1)}{2}\times\frac{\lfloor\frac{m}{kd}\rfloor\times(\lfloor\frac{m}{kd}\rfloor+1)}{2}
f(⌊kdn​⌋,⌊kdm​⌋)=i=1∑⌊kdn​⌋​ij=1∑⌊kdn​⌋​j=2⌊kdn​⌋×(⌊kdn​⌋+1)​×2⌊kdm​⌋×(⌊kdm​⌋+1)​
考虑前面的式子，发现枚举没有上界或者上界很大，我们能不能限制上界？
发现分式中的kdkdkd可以换元，并且换元的上界在nnn，考虑换元为t=kdt=kdt=kd。
考虑枚举ddd，让后kkk能够求出来：
∑t=1n∑d∣td3μ(td)(td)2f(⌊nt⌋,⌊nt⌋)\sum\limits_{t=1}^n\sum\limits_{d|t}d^3\mu(\frac{t}{d})(\frac{t}{d})^2f(\lfloor\frac{n}{t}\rfloor,\lfloor\frac{n}{t}\rfloor)
t=1∑n​d∣t∑​d3μ(dt​)(dt​)2f(⌊tn​⌋,⌊tn​⌋)
考虑把立方和平方消去：
∑t=1nt2f(⌊nt⌋,⌊nt⌋)∑d∣tdμ(td)\sum\limits_{t=1}^nt^2f(\lfloor\frac{n}{t}\rfloor,\lfloor\frac{n}{t}\rfloor)\sum\limits_{d|t}d\mu(\frac{t}{d})
t=1∑n​t2f(⌊tn​⌋,⌊tn​⌋)d∣t∑​dμ(dt​)
后面的式子其实就是∑d∣nId(d)μ(T)=φ(t)\sum\limits_{d|n}Id(d)\mu(T)=\varphi(t)d∣n∑​Id(d)μ(T)=φ(t),反演得到。
不难有：
∑t=1nt2φ(t)f(⌊nt⌋,⌊nt⌋)\sum\limits_{t=1}^{n}t^2\varphi(t)f(\lfloor\frac{n}{t}\rfloor,\lfloor\frac{n}{t}\rfloor)
t=1∑n​t2φ(t)f(⌊tn​⌋,⌊tn​⌋)
到这里我们完成80%，不难发现后面O(1)O(1)O(1)可以求，对于前面，数论函数前缀和，考虑杜教筛。
原式为∑i=1nId2(i)φ(i)\sum\limits_{i=1}^nId_2(i)\varphi(i)i=1∑n​Id2​(i)φ(i)
我们需要构造函数ggg使得：
∑d∣nId2(d)φ(d)g(nd)\sum\limits_{d|n}Id_2(d)\varphi(d)g(\frac{n}{d})
d∣n∑​Id2​(d)φ(d)g(dn​)
能够快速求出。
考虑直接把Id2Id_2Id2​砍了
令g=Id2g=Id_2g=Id2​
那么原式Id2Id_2Id2​拆开：
∑d∣nd2φ(d)(nd)2=n2∑d∣nφ(d)=n3\sum\limits_{d|n}d^2\varphi(d)(\frac{n}{d})^2=n^2\sum\limits_{d|n}\varphi(d)=n^3
d∣n∑​d2φ(d)(dn​)2=n2d∣n∑​φ(d)=n3
最后一个式子考虑反演变为IdIdId
那么这道题做完了，不难发现ggg可以快速预处理，时间复杂度O(n)O(n)O(n)。
代码如下：
#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN = 2e6 + 15;ll inv2, inv6, P, n, fsum[MN + 15], phi[MN + 15];unordered_map&lt;ll, ll&gt; ump;vector&lt;bool&gt; vis(MN + 15);vector&lt;ll&gt; prm;inline ll read()&#123;    ll x = 0, t = 1;    char ch = getchar();    while ((ch &lt; &#x27;0&#x27; || ch &gt; &#x27;9&#x27;) &amp;&amp; ch != &#x27;-&#x27;)        ch = getchar();    if (ch == &#x27;-&#x27;)        t = -1, ch = getchar();    while (ch &lt;= &#x27;9&#x27; &amp;&amp; ch &gt;= &#x27;0&#x27;)        x = x * 10 + ch - 48, ch = getchar();    return x * t;&#125;ll ksm(ll a, ll b)&#123;    ll ret = 1;    while (b)    &#123;        if (b &amp; 1)        &#123;            ret = (ret * a) % P;        &#125;        a = a * a % P;        b &gt;&gt;= 1;    &#125;    return ret;&#125;ll getlf(ll k)&#123;    k %= P;    return ((k * (k + 1) % P * inv2 % P) * (k * (k + 1) % P * inv2 % P)) % P;&#125;ll getpf(ll k)&#123;    k %= P;    return (k * (k + 1) % P * (2 * k + 1) % P * inv6 % P) % P;&#125;void getphi()&#123;    vis[0] = vis[1] = 1;    phi[1] = 1;    for (ll i = 2; i &lt;= MN; i++)    &#123;        if (!vis[i])        &#123;            prm.push_back(i);            phi[i] = i - 1;        &#125;        for (auto p : prm)        &#123;            if (p * i &gt; MN)                break;            vis[p * i] = 1;            if (i % p == 0)            &#123;                phi[i * p] = phi[i] * p;                break;            &#125;            else                phi[i * p] = phi[i] * (p - 1);        &#125;    &#125;    for (ll i = 1; i &lt;= MN; i++)    &#123;        fsum[i] = (fsum[i - 1] + i * i * phi[i] % P) % P;    &#125;&#125;ll dushu(ll k)&#123;    if (k &lt;= MN)        return fsum[k];    if (ump[k])        return ump[k];    ll ans = getlf(k), now, pre;    for (ll i = 2, j; i &lt;= k; i = j + 1)    &#123;        j = k / (k / i);        ans = (ans - (getpf(j) - getpf(i - 1)) % P * dushu(k / i) % P) % P;    &#125;    return ump[k] = (ans + P) % P;&#125;ll solve()&#123;    ll ans = 0, pre = 0, now;    for (ll i = 1, j; i &lt;= n; i = j + 1)    &#123;        j = n / (n / i);        now = dushu(j);        ans = (ans + ((now - pre) * getlf(n / i)) % P) % P;        pre = now;    &#125;    return (ans + P) % P;&#125;int main()&#123;    P = read();    n = read();    getphi();    inv6 = ksm(6, P - 2);    inv2 = ksm(2, P - 2);    cout &lt;&lt; solve();    return 0;&#125;
 18. 二项式反演
 18.1 定义及转化
真服了好多次模拟赛考这个自己都不会转化导致就只能在那里坐牢。
二项式反演用于解决 “某个物品恰好若干个” 这一类计数例题。
我们记 fnf_nfn​ 表示恰好使用 nnn 个有标号的元素形成特定结构的方案数，gng_ngn​ 表示从 nnn 个有标号的元素中选出 i(i≥0)i(i\ge 0)i(i≥0) 个元素形成特定结构的总方案数。
若已知 gng_ngn​，需要求解 fif_ifi​，那么有如下反演公式。
fn=∑i=0n(ni)(−1)n−igif_n=\sum\limits_{i=0}^n \binom{n}{i} (-1)^{n-i} g_i
fn​=i=0∑n​(in​)(−1)n−igi​
证明过程如下：
fn=∑i=0n(ni)(−1)n−igifn=∑i=0n(ni)(−1)n−i[∑j=0i(ij)fj]fn=∑i=0n∑j=0i(ni)(ij)(−1)n−ifj\begin{aligned}
f_n&amp;=\sum\limits_{i=0}^n \binom{n}{i}(-1)^{n-i}g_{i}\\

f_n&amp;=\sum\limits_{i=0}^n \binom{n}{i}(-1)^{n-i} \left[ \sum\limits_{j=0}^i \binom{i}{j}f_{j} \right]\\
f_n&amp;=\sum\limits_{i=0}^n\sum\limits_{j=0}^i \binom{n}{i} \binom{i}{j} (-1)^{n-i} f_j 
\end{aligned}
fn​fn​fn​​=i=0∑n​(in​)(−1)n−igi​=i=0∑n​(in​)(−1)n−i[j=0∑i​(ji​)fj​]=i=0∑n​j=0∑i​(in​)(ji​)(−1)n−ifj​​
考虑交换求和顺序，为了满足 j≤ij\le ij≤i，交换后对于 jjj 需要满足大于等于它的 iii。
fn=∑i=0n∑j=0i(ni)(ij)(−1)n−ifj=∑j=0nfj∑i=jn(ni)(ij)(−1)n−i∵(ni)(ij)=(nj)(n−ji−j)∴∑j=0nfj∑i=jn(nj)(n−ji−j)(−1)n−i=∑j=0n(nj)fj∑i=jn(n−ji−j)(−1)n−i\begin{aligned}
f_n&amp;=\sum\limits_{i=0}^n\sum\limits_{j=0}^i \binom{n}{i} \binom{i}{j} (-1)^{n-i} f_j \\
&amp; = \sum\limits_{j=0}^nf_{j}\sum\limits_{i=j}^n \binom{n}{i} \binom{i}{j} (-1)^{n-i} \\
\\
&amp; \because \binom{n}{i}\binom{i}{j}=\binom{n}{j}\binom{n-j}{i-j} \\

 &amp; \therefore  \sum\limits_{j=0}^nf_{j}\sum\limits_{i=j}^n \binom{n}{j} \binom{n-j}{i-j} (-1)^{n-i} \\ \\
&amp; =\sum\limits_{j=0}^n \binom{n}{j} f_{j}\sum\limits_{i=j}^n  \binom{n-j}{i-j} (-1)^{n-i} \\
\end{aligned}

fn​​=i=0∑n​j=0∑i​(in​)(ji​)(−1)n−ifj​=j=0∑n​fj​i=j∑n​(in​)(ji​)(−1)n−i∵(in​)(ji​)=(jn​)(i−jn−j​)∴j=0∑n​fj​i=j∑n​(jn​)(i−jn−j​)(−1)n−i=j=0∑n​(jn​)fj​i=j∑n​(i−jn−j​)(−1)n−i​
设 k=i−jk=i-jk=i−j , ∵i∈[j,n]\because i\in [j,n]∵i∈[j,n] , ∴k∈[0,n−j]\therefore k\in [0,n-j]∴k∈[0,n−j]。
fn=∑j=0n(nj)fj∑i=jn(n−ji−j)(−1)n−i=∑j=0n(nj)fj∑k=0n−j(n−jk)(−1)n−j−k∵∑i=0n(−1)n−i(ni)=[n=0]∴fn=∑i=0n(nj)fj[n−j=0]=∑i=0n(nj)fj[n=j]=fn∵fn=fn∴得证\begin{aligned}
f_n&amp;=\sum\limits_{j=0}^n \binom{n}{j} f_{j}\sum\limits_{i=j}^n  \binom{n-j}{i-j} (-1)^{n-i} \\

&amp;=\sum\limits_{j=0}^n \binom{n}{j} f_{j}\sum\limits_{k=0}^{n-j}  \binom{n-j}{k} (-1)^{n-j-k} \\

&amp; \because \sum\limits_{i=0}^n (-1)^{n-i}\binom{n}{i}=[n=0] \\ \\
\therefore f_n&amp;=\sum\limits_{i=0}^n \binom{n}{j}f_{j}[n-j=0] \\

&amp; = \sum\limits_{i=0}^n \binom{n}{j}f_{j}[n=j] \\
&amp; =f_{n}\\ \\

&amp; \because f_n=f_{n}\\
&amp; \therefore \text{得证}
\end{aligned}
fn​∴fn​​=j=0∑n​(jn​)fj​i=j∑n​(i−jn−j​)(−1)n−i=j=0∑n​(jn​)fj​k=0∑n−j​(kn−j​)(−1)n−j−k∵i=0∑n​(−1)n−i(in​)=[n=0]=i=0∑n​(jn​)fj​[n−j=0]=i=0∑n​(jn​)fj​[n=j]=fn​∵fn​=fn​∴得证​
而做题过程中往往遇见的是 gng_ngn​ 好求而 fnf_nfn​ 却不好求。
那么二项式反演就是干这个的，利用 gng_ngn​ 去求 fnf_nfn​。
 18.2 二项式反演形式总结
形式1:
gng_ngn​ 表示至多 nnn 个/种的方案数量，fnf_nfn​ 恰好 nnn 个/种方案数量。
gn=∑i=0n(ni)fi⇔fn=∑i=0n(−1)n−i(ni)gig_n=\sum\limits_{i=0}^n \binom{n}{i} f_{i}\Leftrightarrow f_{n}= \sum\limits_{i=0}^n (-1)^{n-i} \binom{n}{i} g_i
gn​=i=0∑n​(in​)fi​⇔fn​=i=0∑n​(−1)n−i(in​)gi​
形式2:
gkg_kgk​ 表示至少 kkk 个/种的方案数量，fkf_kfk​ 恰好 kkk 个/种方案数量。
gk=∑i=kn(ik)fi⇔fk=∑i=0n(−1)i−k(ik)gig_k=\sum\limits_{i=k}^n \binom{i}{k} f_{i}\Leftrightarrow f_{k}= \sum\limits_{i=0}^n (-1)^{i-k} \binom{i}{k} g_i
gk​=i=k∑n​(ki​)fi​⇔fk​=i=0∑n​(−1)i−k(ki​)gi​
 18.3 例题
洛谷P9850
[ICPC 2021 Nanjing R] Ancient Magic Circle in Teyvat

给定 nnn 个点的完全图，其中 mmm 条边为红色边，其余边为蓝色边。
定义以下：
f红色f_{\text{红色}}f红色​ 为四元组 (i,j,k,l)(i,j,k,l)(i,j,k,l)，其中任意两点都有红色边连接的个数。
f蓝色f_{\text{蓝色}}f蓝色​ 为四元组 (i,j,k,l)(i,j,k,l)(i,j,k,l)，其中任意两点都有蓝色边连接的个数。
求 ∣f红色−f蓝色∣|f_{\text{红色}}-f_{\text{蓝色}}|∣f红色​−f蓝色​∣。
其中 1≤n≤105,1≤m≤2×1051\le n \le 10^5,1\le m \le 2\times 10^51≤n≤105,1≤m≤2×105。

赛时没想出正解（废话都没学二项式反演能做？）
发现蓝色很难受，显然可以考虑以下容斥，但是怎么容斥呢？
红色边的信息我们是有的，我们可以通过红色边来容斥。
但是这咋求啊？暴力枚举直接 O(n4)O(n^4)O(n4) 了www。
对于一张存在 jjj 条红色边的图，假设存在 gig_igi​ 个 iii 条边的红色子图，而且只需要满足边颜色都是红色就可以了，那么有 (ji)\binom{j}{i}(ij​) 种选择方法，那么我们不妨设 fif_ifi​ 表示四元组存在 iii 条边的红色子图个数，有下列式子：
gi=∑j=i(ji)fjg_i=\sum\limits_{j=i}\binom{j}{i} f_j
gi​=j=i∑​(ij​)fj​
长的就很二项式反演：
fi=∑j=i(ji)(−1)j−igjf_i=\sum\limits_{j=i}\binom{j}{i} (-1)^{j-i} g_j
fi​=j=i∑​(ij​)(−1)j−igj​
那么 ∣f6−f0∣=∣g0−g1+g2−g3+g4−g5∣|f_6-f_0|=|g_0-g_1+g_2-g_3+g_4-g_5|∣f6​−f0​∣=∣g0​−g1​+g2​−g3​+g4​−g5​∣。不难发现可以一个一个讨论（废话那你怎么求）

g0g_0g0​：不选红色边，瞎选4个点：(n4)\dbinom{n}{4}(4n​)。
g1g_1g1​:选一个的方案数 (m1)\dbinom{m}{1}(1m​)，让后在确定2个端点瞎选：(m1)(n−22)\dbinom{m}{1}\dbinom{n-2}{2}(1m​)(2n−2​)。
g2g_2g2​：分类讨论

如果是一点连两条边，枚举公共点，让后再枚举以该端点出发的两个点，让后再瞎选一个：(n−3)∑i=1n(degi2)(n-3)\sum\limits_{i=1}^{n}\dbinom{deg_i}{2}(n−3)i=1∑n​(2degi​​)，其中 degideg_idegi​ 表示节点 iii 的度数
如果没有公共点，正南则反，就是原图任意选2个边减去有公共点的，即：(m2)−∑i=1n(degi2)\dbinom{m}{2}-\sum\limits_{i=1}^n \dbinom{deg_i}{2}(2m​)−i=1∑n​(2degi​​)。


g3g_3g3​：继续

如果三元环，那就枚举剩下一个点为 (n−3)C3(n-3)C_3(n−3)C3​.
如果是共用一个顶点，那么很简单直接枚举即可，结果 ∑i=1n(n3)\sum\limits_{i=1}^n \binom{n}{3}i=1∑n​(3n​)。
如果是链，注意一下要把三元环的三个情况舍去，结果就是 ∑(u,v)∈E(degu−1)(degv−1)−3C3\sum\limits_{(u,v)\in E}(deg_u-1)(deg_v-1)-3C_3(u,v)∈E∑​(degu​−1)(degv​−1)−3C3​。


g4g_4g4​:

如果四元环，那不用枚举直接 C4C_4C4​.
如果三元环出来一个那就是 ∑i=1nTi(degi−2)\sum\limits_{i=1}^n T_i(deg_i-2)i=1∑n​Ti​(degi​−2)，其中 TiT_iTi​ 为 iii 号点不同三元环的个数


g5g_5g5​ ：只能是两个三元环共用一条边枚举公共边即可，其中 f5=∑i=∈C3(ti2)f_5=\sum\limits_{i=\in \mathbb{C}_3}\binom{t_i}{2}f5​=i=∈C3​∑​(2ti​​) ，其中 C3\mathbb{C}_3C3​ 表示求解三元环完成定向的边集，tit_iti​ 表示覆盖带边 iii 的不同三元环个数。

做完了，直接公式计算即可，注意瓶颈在三元环和四员化计算，不要超过 O(n2)O(n^2)O(n2)：
#include &lt;bits/stdc++.h&gt;#define pir pair&lt;int, int&gt;#define ll long longusing namespace std;constexpr int MN = 1e5 + 15, MM = 2e5 + 15;struct Edge &#123;    int u, v;&#125; e[MM];ll f0, f1, f2, f3, f4, f5;int dg[MN],n,m,top,s[MN],id[MN];ll cp[MN], ce[MM];vector&lt;int&gt; adj[MN];vector&lt;pir&gt; G[MN];ll countthree() &#123;    ll ret = 0;    for (int i = 1; i &lt;= n; i++) &#123;        for (auto p : G[i]) id[p.first] = p.second;        for (auto p : G[i]) &#123;            int v = p.first;            for (auto pv : G[v]) &#123;                int w = pv.first;                if (id[w]) &#123;                    ret++;                    cp[i]++;                    cp[v]++;                    cp[w]++;                    ce[p.second]++;                    ce[pv.second]++;                    ce[id[w]]++;                &#125;            &#125;        &#125;        for (auto p : G[i]) id[p.first] = 0;    &#125;    return ret;&#125;ll countfour() &#123;    memset(id, 0, sizeof(id));    ll ret = 0;    for (int i = 1; i &lt;= n; i++) &#123;        for (int v : adj[i]) &#123;            for (auto p : G[v]) &#123;                int w = p.first;                if (dg[i] &lt; dg[w] || (dg[i] == dg[w] &amp;&amp; i &lt; w)) &#123;                    ret += id[w];                    if (!id[w]) s[++top] = w;                    id[w]++;                &#125;            &#125;        &#125;        for (int j = 1; j &lt;= top; j++) id[s[j]] = 0;        top = 0;    &#125;    return ret;&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= m; i++) &#123;        cin &gt;&gt; e[i].u &gt;&gt; e[i].v;        dg[e[i].u]++;        dg[e[i].v]++;        adj[e[i].u].push_back(e[i].v);        adj[e[i].v].push_back(e[i].u);    &#125;    for (int i = 1; i &lt;= m; i++) &#123;        int u = e[i].u, v = e[i].v;        if ((dg[u] == dg[v] &amp;&amp; u &gt; v) || dg[u] &gt; dg[v])            swap(u, v);        G[u].push_back(&#123;v, i&#125;);    &#125;    ll tri = countthree();    ll quad = countfour();    for (int i = 1; i &lt;= n; i++) &#123;        f2+=1LL * dg[i] * (dg[i] - 1) / 2 * (n - 4);        f3+=1LL * dg[i] * (dg[i] - 1) * (dg[i] - 2) / 6;        f4+=1LL * cp[i] * (dg[i] - 2);        for (auto p : G[i]) &#123;            int v = p.first;            f3+=1LL * (dg[i] - 1) * (dg[v] - 1);        &#125;    &#125;    for (int i = 1; i &lt;= m; i++) &#123;        f5+=1LL * ce[i] * (ce[i] - 1) / 2;    &#125;    f0=(__int128)n * (n - 1) * (n - 2) * (n - 3) / 24;    f1=1LL * m * (n - 2) * (n - 3) / 2;    f2+=1LL * m * (m - 1) / 2;    f3+=tri * (n - 6);    f4+=quad;    cout &lt;&lt; abs(f0 - f1 + f2 - f3 + f4 - f5);    return 0;&#125;
 19. 威尔逊定理
这个定理真的很冷门的……
威尔逊定理给定了判断某个自然是是否是素数的一个充分必要条件。

对于自然数 n&gt;1n&gt;1n&gt;1，当且仅当 nnn 是素数时，(n−1)!≡−1(modn)(n-1)! \equiv -1 \pmod n(n−1)!≡−1(modn)。


逆定理：若 (p−1)!≡−1(modp)(p-1)! \equiv -1 \pmod p(p−1)!≡−1(modp)，则 ppp 是质数。

证明？
 19.1 证明
首先需要说明的是，我们的前提是 n&gt;1,n∈Zn&gt;1,n \in \mathbb{Z}n&gt;1,n∈Z。
我们把非素数分成几类：
非素数{4大于4{完全平方数非完全平方数\text{非素数}
\begin{cases}
4 \\
\text{大于}4 \begin{cases} \text{完全平方数} \\ \text{非完全平方数}  \end{cases}
\end{cases}
非素数⎩⎪⎪⎨⎪⎪⎧​4大于4{完全平方数非完全平方数​​
显然这样分类保证不重不漏
 19.1.1 充分性
当 n=4n=4n=4 时，代入有 (4−1)!≡2(mod4)(4-1)! \equiv 2 \pmod 4(4−1)!≡2(mod4) ,不成立。
当 nnn 为完全平方数，则 p=k2p=k^2p=k2，因为 p&gt;4p&gt;4p&gt;4 那么有 k&gt;2k&gt;2k&gt;2。
让后我们比较 2k,p2k,p2k,p 之间的大小。
2k−p=2k−k2=2k−k2−1+1=−(k−1)2+1&lt;0\begin{aligned}
2k-p &amp; = 2k-k^2 \\
&amp; = 2k-k^2-1+1 \\
&amp; = -(k-1)^2+1&lt;0
\end{aligned}
2k−p​=2k−k2=2k−k2−1+1=−(k−1)2+1&lt;0​
推论既得
∵k&lt;p,2k&lt;p∴(p−1)!=1×2×⋯×k×2k×⋯×(p−1)=k×2k×n=2nk2=2np∴(p−1)!≡0(modp)\begin{aligned}
&amp;\because k&lt;p,2k&lt;p \\
&amp; \therefore (p-1)! \\
&amp; = 1\times 2 \times \dots \times k \times 2k\times \dots \times (p-1) \\
&amp; =k \times 2k \times n \\
&amp; = 2nk^2 \\
&amp; = 2np \\
&amp; \therefore (p-1)! \equiv 0 \pmod p
\end{aligned}
​∵k&lt;p,2k&lt;p∴(p−1)!=1×2×⋯×k×2k×⋯×(p−1)=k×2k×n=2nk2=2np∴(p−1)!≡0(modp)​
若 ppp 不是完全平方数，那么 ppp 必然等于两个完全不相等的数 aaa 和 bbb 的乘积，不妨设 a&lt;ba&lt;ba&lt;b，满足：1&lt;a&lt;b&lt;p1&lt;a&lt;b&lt;p1&lt;a&lt;b&lt;p。
显然有：
(p−1)!=1×2×⋯×a×b×⋯×(p−1)=a×b×n=nab=np∴(p−1)!≡0(modp)\begin{aligned}
(p-1)! &amp; =1\times 2\times \dots \times a\times b \times \dots \times (p-1) \\
&amp; = a\times b\times n \\
&amp; = nab \\
&amp; =np \\
&amp; \therefore (p-1)! \equiv 0 \pmod p
\end{aligned}
(p−1)!​=1×2×⋯×a×b×⋯×(p−1)=a×b×n=nab=np∴(p−1)!≡0(modp)​
 19.1.2 必要性
当 ppp 为素数，考虑二次探测定理：

二次探测定理：对于质数 ppp，若 x2≡1(modp)x^2 \equiv 1 \pmod px2≡1(modp)，则小于 ppp 的解只有两个，x1=1,x2=p−1x_1=1,x_2=p-1x1​=1,x2​=p−1。

再对于 a∈[2,p−2]a\in [2,p-2]a∈[2,p−2]，必然存在一个和它不相登的逆元 a−1∈[2,p−2]a^{-1} \in [2,p-2]a−1∈[2,p−2]，满足
aa−1≡1(modp)aa^{-1} \equiv 1 \pmod p
aa−1≡1(modp)
所以必然有 p−32\frac{p-3}{2}2p−3​ 对数相乘的乘积为 1，即：
(p−2)!≡1(modp)(p-2)! \equiv 1 \pmod p
(p−2)!≡1(modp)
两边同乘 p−1p-1p−1，注意到 (−1+p)mod  p(-1+p) \mod p(−1+p)modp 不就是经典的负数取模吗，直接游戏结束。
(p−1)!≡−1(modp)(p-1)! \equiv -1 \pmod p
(p−1)!≡−1(modp)
 19.2例题
 广义问题
对于 2≤n≤1092\le n \le 10^92≤n≤109，求
(n−1)!mod  n(n-1)! \mod n
(n−1)!modn
建议看证明。
 配合素数判定
UVA1434 YAPTCHA
求下列式子答案：
∑k=1n⌊(3k+6)!+13k+7−⌊(3k+6!)3k+7⌋⌋\sum\limits_{k=1}^n \lfloor \frac{(3k+6)!+1}{3k+7} -\lfloor \frac{(3k+6!)}{3k+7} \rfloor \rfloor
k=1∑n​⌊3k+7(3k+6)!+1​−⌊3k+7(3k+6!)​⌋⌋
我们对于上面定理变个形式：
(n−1)!+1≡0(modn)(n-1)!+1\equiv 0 \pmod n
(n−1)!+1≡0(modn)
到这里你回看上面这个式子，是不是直接就秒了。
别急，我们分类讨论：

当 kkk 为质数，显然 (3k+6)!+13k+7\dfrac{(3k+6)!+1}{3k+7}3k+7(3k+6)!+1​ 这个式子是整除式子，得到的是整数，而对于后面的式子不难想出来下取整为 一定比前面式子小，但两者之差绝对值不会不是 1 （有疑惑自行举例自己想）。
当 kkk 不为质数，显然 (3k+6)!+13k+7\dfrac{(3k+6)!+1}{3k+7}3k+7(3k+6)!+1​ 得到为的数就不是整除式子其结果就大于 0 了，而且还不是整数，而对于后面的式子呢？其实他们下取证的结果是一样的，差1不会影响。所以得到的结果为0

源命题转化为，统计素数问题，线性筛即可。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=3e6+100;int T,cnt[MN];vector&lt;bool&gt; notprime(MN+5),isprime(MN+15);vector&lt;int&gt; prime;void shai(int n)&#123;    for(int i=2;i&lt;=n;i++)&#123;        if(!notprime[i])&#123;            isprime[i]=1;            prime.push_back(i);        &#125;        for(auto p:prime)&#123;            if(i*p&gt;n) break;            notprime[i*p]=1;            if(i%p==0) break;        &#125;    &#125;&#125;int main()&#123;    shai(3e6+15);    for(int i=1;i&lt;=1e6;i++)&#123;        cnt[i]=cnt[i-1]+isprime[3*i+7];    &#125;    cin&gt;&gt;T;    while (T--)    &#123;        int x;        cin&gt;&gt;x;        cout&lt;&lt;cnt[x]&lt;&lt;&#x27;\n&#x27;;    &#125;        return 0;&#125;
 20.BSGS 与 exBSGS
补天坑
我们能够解决线性同余方程，这很好，我们来解决高级一点的——高次同余方程。
高次同余方程，有 ax≡b(modp)a^x \equiv b \pmod pax≡b(modp) 和 xa≡b(modp)x^a \equiv b \pmod pxa≡b(modp) 这两个形式，其中 xxx 均为未知数，前面就是我们要讲的 BSGS，而后面就是我们大名鼎鼎的原根，这里我们讨论BSGS。
 20.1 BSGS
问题：
给定整数 a,b,pa,b,pa,b,p，其中 a,pa,pa,p 互质，求 ax≡b(modp)a^x \equiv b \pmod pax≡b(modp) 的非负整数解。
因为 a,pa,pa,p 互质，我们可以在模 ppp 意义下瞎搞乘除运算。
 暴力做法
当然我们可以暴力枚举 xxx 计算，根据欧拉定理我们给出推论这个 xxx 是 O(φ(p))O(\varphi(p))O(φ(p)) 级别的，暴力枚举即可。
 BSGS
虽然 O(φ(p))O(\varphi(p))O(φ(p)) 的枚举可以解决这个问题，但是性能肯定不行，我们需要一个更优雅的暴力来解决这个问题。
什么，优雅的暴力？那不就是分块吗。
我们不妨把待求的 xxx 分解以下，给定一个 AAA，那么就能分解成 x=mA−nx=mA-nx=mA−n 的形式，原式为：
amA−n≡b(modp)amA≡ban(modp)\begin{aligned}
a^{mA-n} &amp; \equiv b \pmod p \\
a^{mA} &amp; \equiv ba^{n} \pmod p
\end{aligned}
amA−namA​≡b(modp)≡ban(modp)​
显然这里的 nnn 应该不大于 A,m≤⌈pA⌉A,m\le \lceil \frac{p}{A} \rceilA,m≤⌈Ap​⌉。
我们考虑暴力枚举每一个 nnn ，把 banmod  pba^n \mod pbanmodp 的值用哈希表存起来让后再枚举每一个 mmm 判断 amAmod  pa^{mA} \mod pamAmodp 在哈希表中有没有对应的元素。
枚举 nnn 的复杂度为 O(A)O(A)O(A)，枚举 mmm 的复杂度为 O(pA)O(\frac{p}{A})O(Ap​)。
注意到 A+nAA+\frac{n}{A}A+An​，当 A=nA=\sqrt{n}A=n​ 时取最小值，复杂度即为优秀的 O(n)O(\sqrt{n})O(n​)。
所以为什么是大步小步呢，你看 ana^nan 枚举 nnn 是小小的枚举 aaa 的指数，而 amAa^{mA}amA  是以 aAa^AaA 的指数一大步一大步枚举，所以形象的称为大步小步算法。
代码如下,实现因为用了 map 所以多一个 log⁡\loglog ：
map&lt;int,int&gt; mp; // 注意爆long long!int BSGS(int a,int b,int p)&#123;    mp.clear();    b%=p;    int t=sqrt(p)+1;    for(int j=0;j&lt;t;j++)&#123;        int val=(long long)b*qpow(a,j,p)%p;        mp[val]=j;    &#125;    a=qpow(a,t,p);    if(a==0) return b==0?1:-1;    for(int i=0;i&lt;t;i++)&#123;        int val=qpow(a,i,p);        int j=mp.find(val)==mp.end()?-1:mp[val];        if(j&gt;=0&amp;&amp;i*t-j&gt;=0) return i*t-j;    &#125;    return -1;&#125;
 20.2 exBSGS
就和拓展中国剩余定理一样，我们这里的拓展就是不互质的情况下，那怎么做？
注意到，我们当然互质不能做（废话），我们考虑怎么改写。
咱们可以换成求解线性同余方程的形式，变形为：
ax+kp=na^x +kp =n
ax+kp=n
当 gcd⁡(a,n)∣n\gcd(a,n)|ngcd(a,n)∣n 时有解，否则无解（裴蜀定理）。
由特殊解推一般解公式（还是裴蜀定理那里）得：
ax−1⋅ad+k⋅pd=nda^{x-1} \cdot \frac{a}{d} + k \cdot \frac{p}{d}=\frac{n}{d}
ax−1⋅da​+k⋅dp​=dn​
考虑重新传参，一直递归直到 gcd⁡(a,p)=1\gcd(a,p)=1gcd(a,p)=1，让后做正常的 BSGS。
不妨设递归了 cntcntcnt 次，那么所有次递归的 ddd 的乘积我们设为 d′d&#x27;d′。
原式即为：
ax−cnt⋅acntd′≡nd′(modpd′)a^{x-cnt} \cdot \frac{a^{cnt}}{d&#x27;} \equiv \frac{n}{d&#x27;} \pmod{\frac{p}{d&#x27;}}
ax−cnt⋅d′acnt​≡d′n​(modd′p​)
此时互质，BSGS即可，当然结果要加上 cntcntcnt ，那么代码如下。
int qpow(int a,int b,int MOD)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1)&#123;            ret=ret*a%MOD;        &#125;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;int exgcd(int a,int b,int &amp;x,int &amp;y)&#123;    if(!b)&#123;        x=1,y=0;        return a;    &#125;    int d=exgcd(b,a%b,y,x);    y-=a/b*x;    return d;&#125;int BSGS(int a,int b,int p)&#123;    mp.clear(); // 记得换unordered_map    b%=p;    int t=sqrt(p)+1;    for(int j=0;j&lt;t;j++)&#123;        int val=b*qpow(a,j,p)%p;        mp[val]=j;    &#125;    a=qpow(a,t,p);    if(a==0) return b==0?1:-1;    for(int i=0;i&lt;=t;i++)&#123;        int val=qpow(a,i,p);        int j=mp.find(val)==mp.end()?-1:mp[val];        if(j&gt;=0&amp;&amp;i*t-j&gt;=0) return i*t-j;    &#125;    return -1;&#125;int exBSGS(int a,int b,int p)&#123;    a%=p,b%=p;// 战术取余，因为以及是转线性同余可以这样做    if(b==1||p==1) return 0;    int gcdd,d=1,cnt=0,x,y;    while((gcdd=exgcd(a,p,x,y))^1)&#123;        if(b%gcdd) return -1;// 如果无解        b/=gcdd,p/=gcdd;        cnt++;        d=1ll*d*(a/gcdd)%p; // 累计d        if(d==b) return cnt; // 如果已经有解    &#125;    exgcd(d,p,x,y); // 战术求逆元    int inv=(x%p+p)%p;    b=1ll*b*inv%p;    int ans=BSGS(a,b,p);    if(ans==-1) return -1; // 特别注意不要写错！    else return ans+cnt;&#125;
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>整体DP—从勤拿少取到量大管饱</title>
    <url>/posts/904f5191/</url>
    <content><![CDATA[ 0. 前言
这可能是全网比较全面的整体 DP 思想叙述？话说回来到底什么是整体 DP 啊嘞？
你在做 DP 题的时候。如果熟练的话，常常会写出正确的 DP 方程，却因为状态太多或过多的重复转移而超时。而整体 DP 的思想就是一种化繁为简的思路，我们把原本需要逐个处理的状态或子问题，放进一个整体里批量处理。本蒟蒻遇到的情况大致可以分为以下两类：

转移整体化：将逐点更新的转移，通过改写转移方程，转化通过数据结构上的批量操作替代逐点枚举，用数据结构一次性完成转移从而达到复杂度的优化。
多次转移合并：将多次重复的转移，转化为不再对每个问题单独求解，而是把所有子问题作为整体嵌入同一个 DP 过程。

上述的所有过程，都体现整体 DP 的思想中的核心——整体：用一次整体操作代替多次操作，避免重复计算。
想这些概括的词很累的呜呜呜。
 1. 转移整体化
 1.1 概述
转移整体化是什么呢？你看上面不说人话的大范围概括，其实就是通过类似数据结构维护序列的方式将 DP 状态中的一维压入数据结构，并通过批量操作（整体修改、整体查询）优化。其中最常见的就是线段树合并优化转移。
同时不难发现，我们由于是要求对整体进行转移，我们需要的是这个转移具有一定的固定性，即有大量相同或者说相似转移的 dp，这样才可以优化。若某一维（通常是后一维）的转移具有较强的共性时，可以考虑利用整体 dp 优化。
一般的，使用整体 dp 的题目有以下几个步骤：

写出朴素 DP；
发现朴素 DP 转移具有大量重复同样的操作，或将朴素 DP 通过前缀和等方式将转移具有一定的固定性。
出 dp 状态中转移具有共性的一维，使用数据结构维护这一维。具体地，随着其它维的变化，在数据结构上执行各种修改操作，动态维护此时此刻，当压进数据结构一维的下标为某个值时的 dp 值。

接下来我们将会以例题来详细解释这种整体转移的优化。
 1.2 例题
 线段树维护整体位移—P9400
显然的 DP，设 f(i,j)f(i,j)f(i,j) 表示考虑到前 iii 个数，最后的 jjj 个大于 bbb 的方案数，有转移：
f(i,j)=f(i−1,j−1)⋅v1j&gt;0f(i,0)=∑j=0ai−1f(i−1,j)⋅v2\begin{aligned}
f(i,j)&amp;=f(i-1,j-1)\cdot v_{1} &amp; j&gt;0 \\
f(i,0) &amp; = \sum\limits_{j=0}^{a_{i}-1} f(i-1,j)\cdot v_{2}
\end{aligned}
f(i,j)f(i,0)​=f(i−1,j−1)⋅v1​=j=0∑ai​−1​f(i−1,j)⋅v2​​j&gt;0
其中 v1=max⁡(0,ri−max⁡{li−1,b})v_{1}=\max(0,r_{i}-\max\{l_{i}-1,b\})v1​=max(0,ri​−max{li​−1,b})，v2=(ri−li+1)−max⁡(0,ri−max⁡{li−1,b})v_{2}=(r_{i}-l_{i}+1)-\max(0,r_{i}-\max\{l_{i}-1,b\})v2​=(ri​−li​+1)−max(0,ri​−max{li​−1,b})。时间复杂度 O(n2)O(n^2)O(n2)，考虑优化，注意到第二个转移可以通过前缀和 O(1)O(1)O(1) 求出，那么不难发现所有转移都由上一层转移过来，并且所有转移 O(1)O(1)O(1) 进行。考虑整体 DP，对于第一个方程可以看作整体向后移动一次然后整体乘上 v1v_{1}v1​，对于第二个转移就是更新以前的值乘上权值单点更新。
故我们需要维护一个支持单点插、单点删、区间位移、区间乘、区间求和的数据结构，用 FHQ-Treap 简单可以做到，但是有更简单的做法，由于序列长度始终为 aaa，且位移最多 nnn 次，因此我们用线段树维护一个长度为 n+an+an+a 的序列，类似于滑动窗口一样的维护当前的有效区间，每次操作先算出新的 f(i,0)f(i,0)f(i,0)，然后移动指针整体向左移动，将左侧新增的位置设置为 f(i,0)f(i,0)f(i,0)，具体实现见代码，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e5+15,MOD=998244353;int n,a,b,L[MN],R[MN];struct Segment&#123;    #define ls p&lt;&lt;1    #define rs p&lt;&lt;1|1    struct Node&#123;        int l,r,val,tag;    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].val=(t[ls].val+t[rs].val)%MOD;    &#125;    void domul(int p,int k)&#123;        t[p].val=t[p].val*k%MOD;        t[p].tag=t[p].tag*k%MOD;    &#125;    void pushdown(int p)&#123;        if(t[p].tag!=1)&#123;            domul(ls,t[p].tag);            domul(rs,t[p].tag);            t[p].tag=1;        &#125;    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        t[p].tag=1;        if(l==r) return;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void modify(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            domul(p,k);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) modify(ls,fl,fr,k);        if(mid&lt;fr) modify(rs,fl,fr,k);        pushup(p);    &#125;    void change(int p,int pos,int k)&#123;        if(t[p].l==t[p].r)&#123;            t[p].val=k;            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=pos) change(ls,pos,k);        else change(rs,pos,k);        pushup(p);    &#125;    int query(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].val;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1,ret=0;        if(mid&gt;=fl) (ret+=query(ls,fl,fr))%=MOD;        if(mid&lt;fr) (ret+=query(rs,fl,fr))%=MOD;        return ret;    &#125;&#125;sg;signed main()&#123;    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;L[i]&gt;&gt;R[i];    &#125;    sg.build(1,1,n+a);    int ql=n+1,qr=n+a;    sg.change(1,n+1,1);    for(int i=1;i&lt;=n;i++)&#123;        int sum=sg.query(1,ql,qr);        ql--,qr--;        int val=max(0ll,R[i]-max(b,L[i]-1));        if(ql+1&lt;=qr)&#123;            sg.modify(1,ql+1,qr,val);        &#125;        val=max(0ll,min(b,R[i])-L[i]+1)*sum%MOD;        sg.change(1,ql,val);    &#125;    cout&lt;&lt;sg.query(1,ql,qr)&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 线段树维护复杂转移—P8476
显然有一个 O(nV2)O(nV^2)O(nV2) 的 DP 就是设 f(i,j)f(i,j)f(i,j) 表示前 iii 个数最后一个 bi−1b_{i-1}bi−1​ 的值为 jjj 的最小答案。显然有转移：
f(i,j)=min⁡k=jnf(i−1,k)+w(i,j)f(i,j)=\min\limits_{k=j}^n f(i-1,k)+w(i,j)
f(i,j)=k=jminn​f(i−1,k)+w(i,j)
其中 w(i,j)w(i,j)w(i,j) 表示将 aia_{i}ai​ 改为 jjj 的代价。
注意到 V=109V=10^9V=109 很难泵，不过我们可以通过离散化 aaa 将时间复杂度做到 O(n3)O(n^3)O(n3)。考虑优化，注意到这个 min⁡\minmin 操作是一个后缀 min⁡\minmin，而且转移都是逐层转移的。考虑整体 DP，可以用线段树简单维护这个转移因为没有位移操作，但注意到 www 是一个分段函数，我们考虑 ai=ja_{i}=jai​=j 的位置作为分界点，对于这个位置之前的所有下标操作代价都是 CCC，区间价即可。
而对于后面的所有下标 xxx，每个位置需要加上 bx−aib_{x}-a_{i}bx​−ai​，首先 −ai-a_{i}−ai​ 的部分可以区间加。现在问题在于如何快速处理 bxb_{x}bx​ 的操作，注意到后缀 min⁡\minmin 会导致 DP 值单调递增，所以修改后的最小值一定取在区间的最左端点处。可以直接打 Tag 即可。
现在问题还有一个后缀 min⁡\minmin，不难发现，修改后 j&lt;aij&lt;a_{i}j&lt;ai​ 和 j&gt;aij&gt;a_{i}j&gt;ai​ 的位置分别单调递增，于是直接找到 j≥aij\ge a_{i}j≥ai​ 部分的最小值，并在 j&lt;aij&lt;a_{i}j&lt;ai​ 二分找到大于右侧最小值的部分，区间赋值抹平即可。时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2e5+15;int n,tot,C,a[MN],b[MN];struct Segment&#123;    #define ls p&lt;&lt;1    #define rs p&lt;&lt;1|1    struct Node&#123;        int l,r,mn,mx,cov,add1,add2;    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].mn=min(t[ls].mn,t[rs].mn);        t[p].mx=max(t[ls].mx,t[rs].mx);    &#125;    void docov(int p,int k)&#123;        t[p].cov=k;        t[p].mn=t[p].mx=k;        t[p].add1=t[p].add2=0;    &#125;    void doadd1(int p,int k)&#123;        t[p].add1+=k;        t[p].mn+=1ll*k*b[t[p].l];        t[p].mx+=1ll*k*b[t[p].r];    &#125;    void doadd2(int p,int k)&#123;        t[p].add2+=k;        t[p].mn+=k;        t[p].mx+=k;    &#125;    void pushdown(int p)&#123;        if(t[p].l==t[p].r) return;        if(~t[p].cov)&#123;            docov(ls,t[p].cov);            docov(rs,t[p].cov);            t[p].cov=-1;        &#125;        if(t[p].add1)&#123;            doadd1(ls,t[p].add1);            doadd1(rs,t[p].add1);            t[p].add1=0;        &#125;        if(t[p].add2)&#123;            doadd2(ls,t[p].add2);            doadd2(rs,t[p].add2);            t[p].add2=0;        &#125;    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        t[p].cov=-1;        if(l==r) return;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void cover(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            docov(p,k);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) cover(ls,fl,fr,k);         if(mid&lt;fr) cover(rs,fl,fr,k);        pushup(p);    &#125;    void add1(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            doadd1(p,k);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) add1(ls,fl,fr,k);        if(mid&lt;fr) add1(rs,fl,fr,k);        pushup(p);    &#125;    void add2(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            doadd2(p,k);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) add2(ls,fl,fr,k);        if(mid&lt;fr) add2(rs,fl,fr,k);        pushup(p);    &#125;    int querymn(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].mn;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        int ret=1e18;        if(mid&gt;=fl) ret=min(ret,querymn(ls,fl,fr));        if(mid&lt;fr) ret=min(ret,querymn(rs,fl,fr));        return ret;    &#125;    int binary(int p,int k)&#123;        if(t[p].mx&lt;k) return t[p].r+1;        if(t[p].l==t[p].r) return t[p].l;        pushdown(p);        if(t[ls].mx&gt;=k) return binary(ls,k);        else return binary(rs,k);    &#125;&#125;sg;signed main()&#123;    cin&gt;&gt;n&gt;&gt;C;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        b[i]=a[i];    &#125;    sort(b+1,b+1+n);    tot=unique(b+1,b+1+n)-b-1;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=lower_bound(b+1,b+tot+1,a[i])-b;    &#125;    sg.build(1,1,tot);    for(int i=1;i&lt;=n;i++)&#123;        if(a[i]!=1)&#123;            sg.add2(1,1,a[i]-1,C);         &#125;        sg.add2(1,a[i],tot,-b[a[i]]);        sg.add1(1,a[i],tot,1);         int rm=sg.querymn(1,a[i],tot);         int pos=sg.binary(1,rm);        if(pos&lt;a[i]) sg.cover(1,pos,a[i]-1,rm);    &#125;    cout&lt;&lt;sg.t[1].mn&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 线段树合并维护—P6733
首先考虑发掘性质，题目叽里咕噜看不懂，但是有几个性质挺好：

对于一个 vvv 及其配对祖先 uuu，我们只需要选择最深的 uuu 即可满足限制。
一个点 uuu 将其下属边置为 111，会影响其子树内部分点的限制，但这个限制影响当且仅当范围包含 uuu（即最深祖先仍在 uuu 上方）。这个操作一开始看见有 “存在” 我就哈气，直接就转为钦定边为 111。

第二个性质是第一个性质的推论，其本质就点明了子问题的设计，即限制影响的设计。
两个性质启示我们 DP 状态的设计应当包含这个限制影响范围。设 f(u,i)f(u,i)f(u,i) 表示 uuu 子树内限制祖先深度最远到了深度为 jjj 的祖先，其他我们都保证合法的方案数。
转移考虑一个一个子树合并，利用性质 2 我们可以枚举边权设置为为 0/10/10/1 转移。

边权为 111：我们把儿子一些不合法的情况清楚，如果比 depudep_{u}depu​ 还大那就没法解决，统计为 f′(u,i)=f(u,i)×(∑j=0depuf(v,j))f&#x27;(u,i)=f(u,i)\times (\sum\limits_{j=0}^{dep_{u}}f(v,j))f′(u,i)=f(u,i)×(j=0∑depu​​f(v,j))。
边权为 000，考虑合并并且讨论大小关系：

f′(u,i)=f(u,i)×∑j≤if(v,j)f&#x27;(u,i)=f(u,i)\times \sum\limits_{j\le i}f(v,j)f′(u,i)=f(u,i)×j≤i∑​f(v,j)；
f′(u,j)=(∑i&lt;jf(u,i))×f(v,j)f&#x27;(u,j)=(\sum\limits_{i&lt;j}f(u,i))\times f(v,j)f′(u,j)=(i&lt;j∑​f(u,i))×f(v,j)。



时间复杂度为 O(n2)O(n^2)O(n2)，但是发现转移是一个区间形式的转移，考虑用线段树优化这一过程，第一个式子是全局乘，第二个式子是前后缀乘法，可以利用线段树合并动态维护值优化这一过程。时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
在一些和祖先带相关限制的树形 DP 中，我们会遇到一种现象就是子树内部能解决一部分限制，但有些限制不能在当前子树内解决，只能依赖于祖先去兜底。所以 DP 状态不能只描述当前子树内部已经解决的情况，还必须记录子树内尚未解决、但需要祖先去兜底的残余需求。在下一道例题中我们会再次叙述。
如果你还需要一些线段树合并维护转移的题目，我们还有更厉害的：P5298 [PKUWC2018] Minimax
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2e6+15,MOD=998244353;int n,m,mx[MN],rt[MN];vector&lt;int&gt; adj[MN];struct Segment&#123;    #define ls t[p].lson    #define rs t[p].rson    struct Node&#123;        int lson,rson,val,tag=1;    &#125;t[MN&lt;&lt;3];    int tot,tmp;    void pushup(int p)&#123;        t[p].val=(t[ls].val+t[rs].val)%MOD;    &#125;        void domul(int p,int k)&#123;        t[p].val=t[p].val*k%MOD;        t[p].tag=t[p].tag*k%MOD;    &#125;    void pushdown(int p)&#123;        if(t[p].tag!=1)&#123;            domul(ls,t[p].tag);            domul(rs,t[p].tag);            t[p].tag=1;        &#125;    &#125;    void update(int &amp;p,int l,int r,int pos,int k)&#123;        if(!p) p=++tot;        if(l==r)&#123;            t[p].val=k;            return;        &#125;        pushdown(p);        int mid=(l+r)&gt;&gt;1;        if(mid&gt;=pos) update(ls,l,mid,pos,k);        else update(rs,mid+1,r,pos,k);        pushup(p);    &#125;    int query(int p,int l,int r,int fl,int fr)&#123;        if(l&gt;=fl&amp;&amp;r&lt;=fr)&#123;            return t[p].val;        &#125;        pushdown(p);        int mid=(l+r)&gt;&gt;1,ret=0;        if(mid&gt;=fl) (ret+=query(ls,l,mid,fl,fr))%=MOD;        if(mid&lt;fr) (ret+=query(rs,mid+1,r,fl,fr))%=MOD;        return ret;    &#125;    int merge(int x,int y,int l,int r,int s1,int s2)&#123;        if(!x&amp;&amp;!y) return 0;        if(!x)&#123;            domul(y,s2);            return y;        &#125;        if(!y)&#123;            domul(x,s1+tmp);            return x;        &#125;        if(l==r)&#123;            t[x].val=(t[x].val*(s1+t[y].val+tmp)%MOD+t[y].val*s2)%MOD;            return x;        &#125;        int mid=(l+r)&gt;&gt;1;        pushdown(x);        pushdown(y);        t[x].rson=merge(t[x].rson,t[y].rson,mid+1,r,(s1+t[t[y].lson].val)%MOD,(s2+t[t[x].lson].val)%MOD);        t[x].lson=merge(t[x].lson,t[y].lson,l,mid,s1,s2);        pushup(x);        return x;    &#125;&#125;sg;namespace Tree&#123;    int dep[MN];        void dfs1(int u,int pre)&#123;        dep[u]=dep[pre]+1;        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs1(v,u);        &#125;    &#125;    void dfs2(int u,int pre)&#123;        sg.update(rt[u],0,n,mx[u],1);        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs2(v,u);            sg.tmp=sg.query(rt[v],0,n,0,dep[u]);            rt[u]=sg.merge(rt[u],rt[v],0,n,0,0);        &#125;    &#125;&#125;using namespace Tree;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs1(1,0);    cin&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        mx[v]=max(mx[v],dep[u]);    &#125;    dfs2(1,0);    cout&lt;&lt;sg.query(rt[1],0,n,0,0);    return 0;&#125;
 用堆维护—CF671D
祖先限制，考虑 DP，设 f(u,i)f(u,i)f(u,i) 表示 uuu 子树内全部覆盖，其限制向上延伸到了深度为 jjj 的祖先的最小花费，其中 jjj 满足 j≤depij\le dep_{i}j≤depi​。那么有转移方程：
f(u,i)=min⁡v∈son(u){f(u,i)+min⁡j=0depif(v,j),f(v,i)+min⁡j=0depif(u,j)}f(u,i)=\min\limits_{v\in son(u)} \{f(u,i)+\min\limits_{j=0}^{dep_{i}}f(v,j),f(v,i)+\min\limits_{j=0}^{dep_{i}}f(u,j)\}
f(u,i)=v∈son(u)min​{f(u,i)+j=0mindepi​​f(v,j),f(v,i)+j=0mindepi​​f(u,j)}
即我们考虑合并子节点的答案，答案合并的时候可能从 f(u)f(u)f(u) 或者 f(v)f(v)f(v) 一个产生。我们不难发现有两个前缀 min⁡\minmin 的操作，并且操作为子树合并取 min⁡\minmin 操作，考虑线段树合并，对合并时可能产生的情况进行分类讨论即可，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)，但是显然有点过于难了不是吗？
我们还有跟简单的方法，注意到我们操作每次取操作的时前缀 min⁡\minmin，而且在子树合并过程中 depidep_{i}depi​ 单调不升，我们可以考虑用堆来维护这个操作，对于 j&gt;depij&gt;dep_{i}j&gt;depi​ 的操作我们考虑懒惰删除（我们用的时候在排除不合法状态）。因此我们在每个节点上维护一个堆，堆里装所有的第二维状态和值即可。使用左偏树可以做到 O(nlog⁡n)O(n\log n)O(nlogn)，使用堆或 set 加启发式合并可以做到 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=3e5+15;struct Node&#123;    int j,cst;    bool operator&lt;(const Node &amp;x)const&#123;        return cst&lt;x.cst;    &#125;&#125;;int n,m,dep[MN],ans,tag[MN];bool flag=1;vector&lt;int&gt; adj[MN];vector&lt;pir&gt; path[MN];multiset&lt;Node&gt; st[MN];void merge(int x,int y)&#123;    if(st[x].size()&lt;st[y].size()) swap(st[x],st[y]),swap(tag[x],tag[y]);     int mnx=(!st[x].size())?0:(*st[x].begin()).cst,mny=(!st[y].size())?0:(*st[y].begin()).cst;    while(!st[y].empty())&#123;        auto tp=(*st[y].begin());        st[y].erase(st[y].begin());        tp.cst+=mnx-mny;        st[x].insert(tp);    &#125;    tag[x]+=mny+tag[y];&#125;void dfs1(int u,int pre)&#123;    dep[u]=dep[pre]+1;    for(auto v:adj[u])&#123;        if(v==pre||!flag) continue;        dfs1(v,u);        merge(u,v);    &#125;    if(!flag) return;    int minn=0;    if(!st[u].empty()) minn=(*st[u].begin()).cst;    for(auto p:path[u])&#123;        st[u].insert(&#123;p.first,p.second+minn&#125;);    &#125;    if(st[u].empty())&#123;        flag=0;        return;    &#125;    if(u!=1)&#123;        while(!st[u].empty()&amp;&amp;dep[(*st[u].begin()).j]&gt;=dep[u]) st[u].erase(st[u].begin());        if(st[u].empty())&#123;            flag=0;            return;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        path[u].push_back(pir(v,w));    &#125;    dfs1(1,0);    if(!flag)&#123;        cout&lt;&lt;-1;        return 0;    &#125;    else if(m==1) cout&lt;&lt;0;    else cout&lt;&lt;st[1].begin()-&gt;cst+tag[1];    return 0;&#125;
 差分化维护—P6847
今天没有什么太好的性质，考虑 DP，设 f(i,j)f(i,j)f(i,j) 表示 iii 子树内断边在 ≤j\le j≤j 的时间断开，转移：

不获取 u 点的果汁：f(u,i)=∑vf(v,i)f(u,i)=\sum\limits_{v}f(v,i)f(u,i)=v∑​f(v,i)
断开父边，获取 u 点的果汁：f(u,x)=wu+∑vf(v,du)f(u,x)=w_{u}+\sum\limits_{v}f(v,d_{u})f(u,x)=wu​+v∑​f(v,du​)，其中 x≥dux\ge d_{u}x≥du​。
线段树合并来优化，第一种转移就直接线段树合并，第二种转移不能维护区间最值标记。而且合并不太好维护，考虑分析性质，发现 f(u,∗)f(u,*)f(u,∗) 随 iii 增加而单调，那么第二种转移可以考虑成区间赋值。实现中区间赋值不打标记，而是线段树上的点维护 min⁡\minmin 和 max⁡\maxmax，如果 min⁡=max⁡\min=\maxmin=max 的时候就说明这个区间是一个值，线段树合并的时候如果遇到区间同值的情况就打加法标记，修改的时候如果区间同值就新开儿子节点，上传的时候如果发现区间同值可以把儿子节点删掉，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。

更 nb 的，因为 dp 值单调所以可以考虑差分，那么第一种转移就能直接启发式合并，第二种转移是增加 wuw_{u}wu​ 的差分值，直接插入 set 中，这其实是取 max 操作，所以要从后面删除一些差分标记，时间复杂度 O(nlog⁡2n)O(n\log^2 n)O(nlog2n)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e5+15;int n,m,K,rt[MN],d[MN],w[MN];vector&lt;int&gt; adj[MN];struct Segment&#123;    #define ls t[p].lson    #define rs t[p].rson    struct Node&#123;        int lson=0,rson=0;        int mx=0,mn=0,add=0;    &#125;t[MN*50];    int tot=0;    bool isleaf(int p)&#123;        if(!p) return true;        return !t[p].lson &amp;&amp; !t[p].rson;    &#125;    void doadd(int p,int k)&#123;        if(!p) return;        t[p].mn += k;        t[p].mx += k;        t[p].add += k;    &#125;    void pushup(int p)&#123;        int L=t[p].lson, R=t[p].rson;        int mxL = L? t[L].mx : INT_MIN/2;        int mxR = R? t[R].mx : INT_MIN/2;        int mnL = L? t[L].mn : INT_MAX/2;        int mnR = R? t[R].mn : INT_MAX/2;        t[p].mx = max(mxL,mxR);        t[p].mn = min(mnL,mnR);        if(t[p].mx==t[p].mn)&#123;            t[p].lson = t[p].rson = 0;            t[p].add = 0;        &#125;    &#125;    void pushdown(int p)&#123;        if(!p) return;        if(t[p].add)&#123;            doadd(t[p].lson,t[p].add);            doadd(t[p].rson,t[p].add);            t[p].add=0;        &#125;    &#125;    int merge(int x,int y)&#123;        if(!x || !y) return x?x:y;        if(isleaf(y))&#123;            doadd(x,t[y].mx);            return x;        &#125;        if(isleaf(x))&#123;            doadd(y,t[x].mx);            return y;        &#125;        pushdown(x);        pushdown(y);        t[x].lson = merge(t[x].lson, t[y].lson);        t[x].rson = merge(t[x].rson, t[y].rson);        pushup(x);        return x;    &#125;    int query(int p,int l,int r,int k)&#123;        if(!p) return 0;        if(isleaf(p)) return t[p].mx;        pushdown(p);        int mid=(l+r)&gt;&gt;1;        if(k&lt;=mid) return query(t[p].lson,l,mid,k);        else return query(t[p].rson,mid+1,r,k);    &#125;    void modify(int &amp;p,int l,int r,int fl,int fr,int k)&#123;        // non-overlap        if(l&gt;fr || r&lt;fl || !p) return;        // if current interval&#x27;s min already &gt;= k, nothing to do        if(t[p].mn &gt;= k) return;        // fully covered and max &lt;= k -&gt; set to k and clear children        if(l&gt;=fl &amp;&amp; r&lt;=fr &amp;&amp; t[p].mx &lt;= k)&#123;            t[p].mx = t[p].mn = k;            t[p].lson = t[p].rson = t[p].add = 0;            return;        &#125;        pushdown(p);        int mid=(l+r)&gt;&gt;1;        if(isleaf(p))&#123;            t[p].lson = ++tot;            t[p].rson = ++tot;            t[t[p].lson].mx = t[t[p].lson].mn = t[t[p].rson].mx = t[t[p].rson].mn = t[p].mx;            // add/add initialized to 0 by Node default        &#125;        if(fl &lt;= mid) modify(t[p].lson, l, mid, fl, fr, k);        if(fr &gt; mid) modify(t[p].rson, mid+1, r, fl, fr, k);        pushup(p);    &#125;&#125;sg;void dfs(int u,int pre)&#123;    rt[u] = ++sg.tot;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs(v,u);        rt[u] = sg.merge(rt[u], rt[v]);    &#125;    if(d[u])&#123;        int cur = sg.query(rt[u],1,K,d[u]);        int val = w[u] + cur;        sg.modify(rt[u],1,K,d[u],K,val);    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;K;    for(int i=2;i&lt;=n;i++)&#123;        int fa;        cin&gt;&gt;fa;        adj[fa].push_back(i);        adj[i].push_back(fa);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int x;        cin&gt;&gt;x&gt;&gt;d[x]&gt;&gt;w[x];    &#125;    dfs(1,0);    cout&lt;&lt;sg.t[rt[1]].mx&lt;&lt;&quot;\n&quot;;    return 0;&#125;
 1.3 习题与反思
一开始所提到的转移整体化的核心，在于把原本需要在 DP 中逐个状态枚举的转移，用批量可维护的方式交给数据结构来完成，从而让复杂度从 O(n2)O(n^2)O(n2)、O(nV)O(nV)O(nV) 这类指数或平方级，下降到 O(nlog⁡n)O(n\log n)O(nlogn) 甚至更优。对于一类有大量相同或者说相似转移的 dp，把 dp 的一维换成数据结构，用数据结构批量处理相同的转移。
来点习题练练手！

CF490F Treeland Tour
P4577 [FJOI2018] 领导集团问题

 2. 多次转移合并
 2.1 概述
多次转移合并这个名字怎么这么奇怪呢？
回忆我们一开始所提到的：

多次转移合并：将多次重复的转移，转化为不再对每个问题单独求解，而是把所有子问题作为整体嵌入同一个 DP 过程。

换句话说，如果每个问题的转移规则是固定的，那么我们可以把每个问题对答案的贡献统一考虑，通过一次 DP 或一次数据结构操作，计算出全部结果，而不必重复遍历。
这种整体化思想有两种展开（也是本蒟蒻所能够遇见的）：

转移贡献可叠加性：每个询问的转移对最终答案的贡献要独立计算，但所有贡献可以累加到一次 DP 中。我们可以通过合理的初始化，通过一次 DP 计算出所有答案。
多询问整体处理：当存在多个修改或查询时，每次修改只影响少量节点，但转移规则固定。我们可以将每次查询抽象为初始值修改，用数据结构一次性维护所有查询的结果，而不是重复跑 DP。

接下来我们会通过例题详细展开：
 2.2 例题
 转移贡献可叠加性
当 DP 的转移是固定的、局部的贡献可线性累加，就可以用一次整体 DP 代替多次重复计算。这一类常见的就是子区间问题的统计。
 CF1603C Extreme Extension
首先考虑序列给定的话如何计算，显然最后一个值不可能动不然根据调整法不难证明不优。
那么也就是说最后一个值肯定是最大值，然后我们从后往前考虑，不妨记当前最大值为 xxx 每次拆我们尽量往大的拆，那么最少需要拆 k=⌈aix⌉k=\lceil \dfrac{a_{i}}{x} \rceilk=⌈xai​​⌉ 次，而拆值后新的开头 x′=⌊aik⌋x&#x27;=\lfloor \dfrac{a_{i}}{k} \rfloorx′=⌊kai​​⌋。
显然对于每个 iii 其 kkk 与 x′x&#x27;x′ 的取值最多只有 n\sqrt{n}n​ 种，并且计算只和当前开头有关，故设 f(i,j)f(i,j)f(i,j) 表示第 iii 个位置开头数字为 jjj 的方案数。直接做的话是 O(nn)O(n\sqrt{n})O(nn​) 的，但是问题在于子区间统计做的话是 O(n2n)O(n^2\sqrt{n})O(n2n​) 的，注意到我们每次转移都是一致的系数完全一致，考虑整体 DP，在所有右端点处初始化，在左端点处统计答案，由于这个贡献是子区间完全可以累加贡献，只需要做一次 dp 就可以解决问题。时间复杂度 O(nn)O(n\sqrt{n})O(nn​)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e5+15,MOD=998244353;int n,mx,a[MN],f[2][MN],ans;vector&lt;int&gt; vct[2];void initdp()&#123;    ans=0;    vct[0].clear();    vct[1].clear();    mx=0;    for(int i=1;i&lt;=n;i++)&#123;        mx=max(mx,a[i]);    &#125;    for(int i=0;i&lt;=mx;i++)&#123;        f[0][i]=f[1][i]=0;    &#125;&#125;void solve()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    initdp();    int now=0,bef=1;    for(int i=n;i&gt;=1;i--)&#123;        now^=1,bef^=1;        int lst=a[i];        vct[now].push_back(a[i]);        f[now][a[i]]=1;        for(auto p:vct[bef])&#123;            int cnt=ceil(1.0*a[i]/p),val=a[i]/cnt;            f[now][val]=(f[now][val]+f[bef][p])%MOD;            ans=(ans+(cnt-1)*i%MOD*f[bef][p]%MOD)%MOD;                       if(lst!=val)&#123;                vct[now].push_back(val);                lst=val;            &#125;        &#125;        for(auto p:vct[bef]) f[bef][p]=0;        vct[bef].clear();    &#125;    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 CF1142D Foreigner
首先这个玩意过于抽象。但是我们不难发现每一层判断决策只和当前排名个数和上一位是什么有关，而且这个数列是根据生成顺序递增的。考虑增量法，我们考虑计算往数列中第 iii 个数后面接一位 ccc，得到的数字的排名是多少？我们可以考虑计算比它小的合法数量，这里给出式子：
9+∑j=1i−1k mod 11+c+19+\sum\limits_{j=1}^{i-1} k\bmod 11 +c+1
9+j=1∑i−1​kmod11+c+1
但是我们只需要判断一个数是否是合法数字即可，考虑把上面式子放在  mod 11\bmod 11mod11 的意义下进行就可以得到，有：
10+i(i−1)2+c(mod11)10+\dfrac{i(i-1)}{2}+c \pmod{11}
10+2i(i−1)​+c(mod11)
不难发现这个值只和  mod 11\bmod 11mod11 后的值有关，对于原来的计数问题，可以考虑设计一个自动机来转移，说人话，设 f(i,j)f(i,j)f(i,j) 表示前 iii 位中有多少排名  mod 11\bmod 11mod11 为 jjj 的不充分数字。枚举起点然后做时 O(n2)O(n^2)O(n2) 的，但是注意到这是子区间，显然满足贡献可叠加，直接在左端点初始化，走到右端点时上拿答案即可，时间复杂度 O(n)O(n)O(n)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;int n,f[MN][15],ans;string st;int nxt(int x,int c)&#123;	return (x*(x-1)/2+c+10)%11;&#125;signed main()&#123;    cin&gt;&gt;st;    n=st.length();    st=&quot; &quot;+st;    for(int i=1;i&lt;=n;i++)&#123;        int ch=st[i]-&#x27;0&#x27;;        if(ch&gt;0) f[i][ch]++;        for(int j=ch+1;j&lt;=10;j++)&#123;            f[i][nxt(j,ch)]+=f[i-1][j];        &#125;        for(int j=0;j&lt;=10;j++) ans+=f[i][j];    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 P3352 线段树
需要把这些序列大小要整合到一起，不知道用什么处理？笛卡尔树？bro 有点难。咱们还是考虑 01 序列怎么做吧。
首先没有概率，就是纯纯的求方案数乘上权值。考虑值域为 {0,1}\{0,1\}{0,1} 的时候怎么做，不难发现对答案造成贡献必定是 000 段和 111 段合并，并且发现 000 段必定会被 111 段给包夹（边界位置设置为 111)。考虑到每次操作 111 段大小单调不降，000 段大小单调不升，我们考虑 DP 主体应该为 000 段，有状态 f(i,l,r)f(i,l,r)f(i,l,r) 表示 iii 操作后 000 段缩小到 [l,r][l,r][l,r] 的方案数，有转移：
dp[i][l][r]←{dp[i−1][l][r]⋅l(l+1)+(n−r+1)(n−r+2)+(r−l)(r−l−1)2QwQdp[i−1][l′][r]⋅l′l′&lt;ldp[i−1][l][r′]⋅(n−r′+1)r′&gt;rdp[i][l][r]\leftarrow\begin{cases}dp[i-1][l][r]\cdot\frac{l(l+1)+(n-r+1)(n-r+2)+(r-l)(r-l-1)}{2} &amp; \text{QwQ}\\dp[i-1][l&#x27;][r]\cdot l&#x27; &amp; l&#x27;&lt;l \\ dp[i-1][l][r&#x27;]\cdot (n-r&#x27;+1) &amp; r&#x27;&gt; r\end{cases}
dp[i][l][r]←⎩⎪⎪⎨⎪⎪⎧​dp[i−1][l][r]⋅2l(l+1)+(n−r+1)(n−r+2)+(r−l)(r−l−1)​dp[i−1][l′][r]⋅l′dp[i−1][l][r′]⋅(n−r′+1)​QwQl′&lt;lr′&gt;r​
不难发现可以用前缀和优化转移，时间复杂度 O(n2q)O(n^2q)O(n2q)，拓展到一般序列上我们把 www 的贡献拆为 max⁡ai−max⁡i=0max⁡ai[w&lt;i]\max a_{i}-\max_{i=0}^{\max a_{i}} [w&lt;i]maxai​−maxi=0maxai​​[w&lt;i]，即把所有 ≥i\ge i≥i 的位置标为 1，把所有 &lt;i&lt;i&lt;i 的位置标为 0。此时我们就可以算出每一个位置 &lt;i&lt;i&lt;i 的方案数，时间复杂度 O(n3q)O(n^3q)O(n3q)，数据随机可过。
显然太吃运气了，考虑优化！发现所有的 dp 值的转移柿子都完全一致而且系数完全固定，只有转移是不同的！所以我们可以把所有初始值放到同一个 dp 数组里面，然后通过合理初始化进行一次整体的 dp，就可以求出答案。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=520,MOD=1e9+7,INV2=500000004;struct Node&#123;    int v,id;&#125;a[MN];int n,q,ans[MN],f[MN][MN],s1[MN][MN],s2[MN][MN],v[MN];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;int w(int l,int r)&#123;    return (l*(l+1)%MOD+(n-r+1)*(n-r+2)%MOD+(r-l-1)*(r-l)%MOD)*INV2%MOD;&#125;bool cmp(Node x,Node y)&#123;    return x.v&lt;y.v;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;q;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i].v;        a[i].id=i;    &#125;    sort(a+1,a+1+n,cmp);    v[n+1]=1;    for(int i=n;i&gt;=1;i--)&#123;        int lst=0;        v[a[i].id]=1;        for(int j=1;j&lt;=n+1;j++)&#123;            if(v[j])&#123;                f[lst][j]+=a[i].v-a[i-1].v;                lst=j;            &#125;        &#125;    &#125;    ans[1]=a[n].v*ksm(n*(n+1)%MOD*INV2%MOD,q);    for(int i=2;i&lt;=n;i++) ans[i]=ans[1];    for(int i=1;i&lt;=q;i++)&#123;        for(int j=0;j&lt;=n;j++)&#123;            for(int k=n+1;k&gt;j+1;k--)&#123;                if(j)&#123;                    s1[j][k]=(s1[j-1][k]+f[j][k]*j%MOD)%MOD;                &#125;else s1[j][k]=f[j][k]*j%MOD;                if(k&lt;=n)&#123;                    s2[j][k]=(s2[j][k+1]+f[j][k]*(n-k+1)%MOD)%MOD;                &#125;else s2[j][k]=(f[j][k]*(n-k+1)%MOD)%MOD;            &#125;        &#125;        for(int j=0;j&lt;=n;j++)&#123;            for(int k=j+2;k&lt;=n+1;k++)&#123;                f[j][k]=f[j][k]*w(j,k)%MOD;                if(j)&#123;                    f[j][k]=(f[j][k]+s1[j-1][k])%MOD;                &#125;                if(k&lt;=n) f[j][k]=(f[j][k]+s2[j][k+1])%MOD;            &#125;        &#125;    &#125;    for(int i=0;i&lt;=n;i++)&#123;        for(int j=i+2;j&lt;=n+1;j++)&#123;            for(int k=i+1;k&lt;j;k++)&#123;                ans[k]=(ans[k]-f[i][j]+MOD)%MOD;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27; &#x27;;    return 0;&#125;
 多询问整体处理
每次修改只影响少量节点，但转移规则固定。这就是核心，对于一些只有状态上的值不同而转移方程完全相同的 DP 可以考虑使用这个 trick。接下来我们会以保卫王国这道经典题来作为叙述。
 P5024 保卫王国
显然可以写出朴素转移方程，设 f(i,0/1)f(i,0/1)f(i,0/1) 表示 iii 子树中，钦定 iii 不选或选的最小代价，有转移：
f(u,0)=∑v∈son(u)f(v,1)f(u,1)=∑v∈son(u)min⁡{f(v,0),f(v,1)}\begin{aligned}
f(u,0) &amp;=\sum\limits_{v\in son(u)} f(v,1) \\
f(u,1) &amp;= \sum\limits_{v\in son(u)} \min\{f(v,0),f(v,1)\}
\end{aligned}
f(u,0)f(u,1)​=v∈son(u)∑​f(v,1)=v∈son(u)∑​min{f(v,0),f(v,1)}​
显然转移都是 O(n)O(n)O(n) 的，如果对于每个询问直接强制钦定然后重新 DP 的话时间复杂度是 O(n2)O(n^2)O(n2) 的，无法通过。
我们发现尽管强制钦定之后转移仍是固定的，虽然在每次询问中，某些节点被强制钦定，但转移方程本身从来没有变过，变的只是某些节点的取值。例如对于每个节点 uuu，正常的 DP 状态就是 f(u,∗)f(u,*)f(u,∗)，这是在没有任何强制约束时的最优值。当一条询问出现，比如强制 uuu 不选，这其实就是把 f(u,1)f(u,1)f(u,1) 赋为 ∞\infty∞；同理强制 uuu 必须选，就是把 f(u,0)f(u,0)f(u,0) 赋为 ∞\infty∞**。
如果我们对于每个询问都从根重新跑一次树形 DP，复杂度就是 O(nm)O(nm)O(nm)。但是发现每次询问都只是修改了少量个别节点的 DP 初值；而且合并答案的规则是固定的。
我们可以将 DP 方程改写为矩阵形式，这里矩阵运算为 (min⁡,+)(\min,+)(min,+) 广义矩阵乘法，这里不再列举。此时，强制钦定相当于在某个叶子节点上乘一个特殊矩阵，例如强制不选：[f(0),f(1)]×[∞∞∞0][f(0), f(1)] \times \begin{bmatrix}\infty &amp; \infty \\ \infty &amp; 0\end{bmatrix}[f(0),f(1)]×[∞∞​∞0​]；这样我们就能通过矩阵的形式表达对于某个节点的 DP 修改，并且这种修改是可以自下而上合并的。
如果对每个询问单独做矩阵 DP，复杂度仍高。但是我们发现只有少量的值会被修改，而且每次询问吧修改至多是 222 次单点修改，既然修改只发生在极少数节点，我们能不能把询问当作一堆修改，整体放到同一套 DP 里？正难则反！我们不考虑对每个询问求 DP 的值，而是在 DP 过程中维护每个询问情况下所对应的值！我们可以批量地对所有需要进行这一转移的 DP 进行转移，从而加快速度。
那如果我们现在拿着所有询问的 dp 值组成的一个数组，那么发现如果一个儿子没有成为过特殊点，它的转移显然用固定的转移矩阵维护就可以了；如果它成为过特殊点，我们可以单独转移它成为特殊点的那几次，就像上面特殊的用矩阵乘上。
暴力转移是 O(n2)O(n^2)O(n2) 的，如何更快地维护呢，例如 O(log⁡n)O(\log n)O(logn)？我们有很多次修改，每次询问对应修改几个节点的 DP 初值；还需要快速把这些修改合并到全局结果里，这不线段树合并吗！
具体的，我们对于树上每个节点开一个线段树，让线段树上第 iii 个叶子表示第 iii 次询问的 DP 值，即 [f(0),f(1)][f(0), f(1)][f(0),f(1)]。注意这里的线段树仅仅是一个分治结构，而不是什么维护区间结合律信息的数据结构，也就是没有 pushup 这种玩意。它存在的意义就是利用结构一致和深度为 O(log⁡n)O(\log n)O(logn) 来支持快速的单点修改和合并答案两个操作。
合并的时候，因为我们只关心叶子的信息，也就是 DP 值，考虑如果两棵线段树上有一棵有某个叶子 uuu，而另一棵没有，那么这个 uuu 的值应该没有变化，所以合并的时候不用管它如果两棵上都有 uuu，那么我们应该进行一个转移，我们记录这个 DP 值是属于哪一种转移，然后由于合并算法确实会走到这里，我们走到这里再执行转移就好了。
这个就是多询问整体处理的一个思想，其本质就是把多次 DP 叠加，转化为一次带修改的数据结构维护问题。在固定转移下，把多组独立询问抽象为初值修改，然后用线段树把它们整体维护起来，实现一次 DP 覆盖所有询问。
代码如下：
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e5+15;const int INF=1e18;int ans[MN],a[MN],n,m,rt[MN];vector&lt;int&gt; adj[MN];vector&lt;pir&gt; qry[MN];struct Matrix&#123;    int mat[2][2];    Matrix(int x=0)&#123;        mat[0][0]=mat[0][1]=mat[1][0]=mat[1][1]=x;    &#125;    Matrix(int x1,int y1,int x2,int y2)&#123;        mat[0][0]=x1;mat[0][1]=y1;mat[1][0]=x2;mat[1][1]=y2;    &#125;    Matrix(int x,int y)&#123;        mat[0][0]=x;mat[1][1]=y;mat[0][1]=mat[1][0]=INF;    &#125;    friend bool operator==(const Matrix &amp;x,const Matrix &amp;y)&#123;        for(int i=0;i&lt;2;i++) for(int j=0;j&lt;2;j++) if(x.mat[i][j]!=y.mat[i][j]) return 0;        return 1;    &#125;    friend Matrix operator*(const Matrix &amp;x,const Matrix &amp;y)&#123;        Matrix ret(INF);        for(int i=0;i&lt;2;i++) for(int j=0;j&lt;2;j++) for(int k=0;k&lt;2;k++)            ret.mat[i][j]=min(ret.mat[i][j],x.mat[i][k]+y.mat[k][j]);        return ret;    &#125;&#125;;const Matrix MINF=Matrix(0,INF,INF,0);struct Segment&#123;    #define ls t[p].lson    #define rs t[p].rson    struct Node&#123;        int lson,rson;        Matrix val;    &#125;t[MN*30];    int tot;    void init(int x)&#123;t[x].lson=t[x].rson=0;t[x].val=MINF;&#125;    void pushdown(int p)&#123;        if(t[p].val==MINF) return;        if(!ls) ls=++tot,init(ls);        if(!rs) rs=++tot,init(rs);        t[ls].val=t[ls].val*t[p].val;        t[rs].val=t[rs].val*t[p].val;        t[p].val=MINF;    &#125;    void modify(int &amp;p,int l,int r,int pos,const Matrix &amp;k)&#123;        if(!p) p=++tot,init(p);        if(l==r)&#123;            t[p].val=t[p].val*k;            return;        &#125;        pushdown(p);        int mid=(l+r)&gt;&gt;1;        if(pos&lt;=mid)&#123;            modify(ls,l,mid,pos,k);        &#125;else&#123;            modify(rs,mid+1,r,pos,k);        &#125;    &#125;    int merge(int x,int y)&#123;        if(!x||!y) return x|y;        if(!t[x].lson&amp;&amp;!t[x].rson) swap(x,y);        if(!t[y].lson&amp;&amp;!t[y].rson)&#123;            t[x].val=t[x].val*Matrix(t[y].val.mat[0][0],t[y].val.mat[0][1]);            return x;        &#125;        pushdown(x);        pushdown(y);        t[x].lson=merge(t[x].lson,t[y].lson);        t[x].rson=merge(t[x].rson,t[y].rson);        return x;    &#125;    void solve(int p,int l,int r)&#123;        if(l==r)&#123;            ans[l]=t[p].val.mat[0][1];            return;        &#125;        pushdown(p);        int mid=(l+r)&gt;&gt;1;        if(ls) solve(ls,l,mid);        if(rs) solve(rs,mid+1,r);    &#125;&#125;sg;void dfs(int u,int pre)&#123;    rt[u]=++sg.tot;    sg.init(rt[u]);    sg.t[rt[u]].val=Matrix(0,a[u],0,0);    for(auto v:adj[u]) if(v!=pre)&#123;        dfs(v,u);        rt[u]=sg.merge(rt[u],rt[v]);    &#125;    for(auto pr:qry[u])&#123;        if(pr.first==0) sg.modify(rt[u],1,m,pr.second,Matrix(0,INF));        else sg.modify(rt[u],1,m,pr.second,Matrix(INF,0));    &#125;    sg.t[rt[u]].val=sg.t[rt[u]].val*Matrix(INF,0,0,0);&#125;signed main()&#123;    string tmp;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;tmp;    for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i];    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int x1,v1,x2,v2;        cin&gt;&gt;x1&gt;&gt;v1&gt;&gt;x2&gt;&gt;v2;        qry[x1].push_back(&#123;v1,i&#125;);        qry[x2].push_back(&#123;v2,i&#125;);    &#125;    sg.init(0);    dfs(1,0);    if(rt[1]) sg.solve(rt[1],1,m);    for(int i=1;i&lt;=m;i++) cout&lt;&lt;(ans[i]&gt;=INF?-1:ans[i])&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 P2495 消耗战
虚树？不不不这是整体 DP！
先考虑一次询问怎么做，设 f(u)f(u)f(u) 表示子树 uuu 内所有关键点到 uuu 的路径切断的最小代价，转移方程显然：

若 uuu 的儿子是关键点，那么 f(u)f(u)f(u) 加上 w(u,v)w(u,v)w(u,v)；
否则，f(u)f(u)f(u) 加上 min⁡{w(u,v),f(v)}\min\{w(u,v),f(v)\}min{w(u,v),f(v)}。
特别的，若 uuu 为关键点，那么 f(u)=∞f(u)=\inftyf(u)=∞。

可以发现，这个 DP 的过程非常简洁，由几个简单的操作组成：求和，取 min。不难可以写成 O(1)O(1)O(1) 转移式子或者矩阵形式，然后用上面的技巧维护，取 min 就是全局取 min，求和就是线段树合并的时候对应位置相加。时间复杂度 O(mlog⁡m)O(m\log m)O(mlogm)。
代码咕咕咕，如果想要可以参考 Fuyuki 的文章。
 3. 参考与后言
上面说这么多，归根结底，这种方法的精髓在于将重复工作转化为一次统一处理。整体思想，就是在于整体处理，整体转移。种性质允许我们将原本需要多次重复计算的子问题，整合到一次整体 DP 中处理，从而大幅提升效率，避免重复操作。
这个博客提到的整体 DP 感觉可以单开一章，不过有点看不懂了，大家可以作为饭后作业 www。
求赞 QwQ。

「学习笔记」整体 dp - xgzc
高级算法指北——浅谈整体dp - 烟山嘉鸿
整体dp学习笔记——Querainy
zxy的思维技巧 - C202044zxy
DP 优化方法大杂烩——Alex_Wei
【学习笔记】(27) 整体 DP - Aurora-JC
保卫王国 整体 DP 做法——xxseven
「Tricks」整体DP——cirnovsky
NOIP2018 D2T3 题解 + 关于动态 DP 等科技的一些总结 -immortalCO的博客
题解 P2495 【[SDOI2011]消耗战】——Fuyuki

]]></content>
      <categories>
        <category>DP优化</category>
      </categories>
      <tags>
        <tag>DP优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>斜率优化与WQS带权二分优化DP</title>
    <url>/posts/91825b20/</url>
    <content><![CDATA[ 1.前言
本文章图较多！
动态规划在转移的时候，我们称最终转移过来的状态为决策点。
而对于斜率优化和WQS带权二分都是利用凸包和切线的概念来优化DP

[!WARNING]
斜率优化和WQS带权二分几乎完全不同，请不要混淆！

 2.凸包与切线
 2.1 凸包
凸包是什么呢？其实就是字面意思，一个凸起的小包，但是这个是描述图形的。如下图：

严谨来说，应当是其图形的切线斜率是具有单调性，其导函数f′(x)f&#x27;(x)f′(x)具有单调性。
但是在OI中一般凸包都不是光滑的，如下图。

但是也还是可以满足定义的即：

经过相邻两点的直线斜率有单调性

 2.2 切线与一次函数
 2.2.1 一次函数
y=kx+by=kx+b
y=kx+b

kkk：斜率
bbb：截距（yyy 轴交点）

 2.2.2 切线
对于切线来说，不阐述概念，但是我们可以观察一下性质。
我们让一个固定斜率kkk的直线取切这个二次函数（也是个凸包）

发现什么？当恰好在切点时，截距bbb 最大，这是条基本也是条很重要的性质。
 3. 斜率优化
 3.1 k与x同单调
来做DP题。

nnn 个任务排成一个序列在一台机器上等待完成（顺序不得改变），这 nnn 个任务被分成若干批，每批包含相邻的若干任务。
从零时刻开始，这些任务被分批加工，第 iii 个任务单独完成所需的时间为 tit_iti​。在每批任务开始前，机器需要启动时间 sss，而完成这批任务所需的时间是各个任务需要时间的总和（同一批任务将在同一时刻完成）。
每个任务的费用是它的完成时刻乘以一个费用系数 cic_ici​。请确定一个分组方案，使得总费用最小。
1≤n≤50001\le n \le 50001≤n≤5000，0≤s≤500 \le s \le 500≤s≤50，1≤ti,fi≤1001\le t_i,f_i \le 1001≤ti​,fi​≤100。

我们无论怎么分段和后面没有任何关系，每一个分段问题都是一个子问题且满足无后效性，我们其实没有必要单独设计分的段数这一状态来记录，不难设计转移方程：
f(i)=min⁡j=1i−1f[j]+sumT[i]∗(sumC[i]−sumC[j])+S∗(sumC[n]−sumC[j])f(i)=\min\limits_{j=1}^{i-1} f[j]+sumT[i]*(sumC[i]-sumC[j])+S*(sumC[n]-sumC[j])
f(i)=j=1mini−1​f[j]+sumT[i]∗(sumC[i]−sumC[j])+S∗(sumC[n]−sumC[j])

f(i)f(i)f(i)：表示把前iii个任务分成若干批执行的最小费用。
sumTsumTsumT：tit_iti​的前缀和
sumCsumCsumC：cic_ici​的前缀和

其实这里有一个费用提前计算的思想，观察转移方程后面部分的S∗(sumC[n]−sumC[j])S*(sumC[n]-sumC[j])S∗(sumC[n]−sumC[j])。我们并不知道前面启动过几次及其，但是执行任务花费的启动时间SSS必定会对后面的计算造成影响，累加贡献。
显然时间复杂度O(n2)O(n^2)O(n2)，代码如下：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=5125;int n,s;ll a[MN],sumt[MN],sumc[MN],f[MN];int main()&#123;    cin&gt;&gt;n&gt;&gt;s;    for(int i=1;i&lt;=n;i++)&#123;        ll t,c;        cin&gt;&gt;t&gt;&gt;c;        sumt[i]=sumt[i-1]+t;        sumc[i]=sumc[i-1]+c;    &#125;    memset(f,0x3f,sizeof(f));    f[0]=0;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=0;j&lt;i;j++)&#123;            f[i]=min(f[i],f[j]+sumt[i]*(sumc[i]-sumc[j])+s*(sumc[n]-sumc[j]));        &#125;    &#125;    cout&lt;&lt;f[n];    return 0;&#125;
但是我们如果要求时间复杂度O(n)O(n)O(n)呢？
我们观察以下这个式子，首先这个min⁡\minmin太难受了，反正我知道要取就行：
f(i)=f[j]+sumT[i]∗(sumC[i]−sumC[j])+S∗(sumC[n]−sumC[j])f(i)=f[j]+sumT[i]*(sumC[i]-sumC[j])+S*(sumC[n]-sumC[j])
f(i)=f[j]+sumT[i]∗(sumC[i]−sumC[j])+S∗(sumC[n]−sumC[j])
我们拆一下这个式子，移个项。
f[i]=f[j]+sumT[i]∗sumC[i]−sumT[i]∗sumC[j]+S∗sumc[n]−S∗sumc[j]f[j]=(S+sumT[i])∗sumC[j]+f[i]−sumT[i]∗sumC[i]−S∗sumC[n]\begin{aligned}
f[i] &amp; =f[j]+sumT[i]*sumC[i]-sumT[i]*sumC[j]+S*sumc[n]-S*sumc[j] \\
f[j] &amp; = (S+sumT[i])*sumC[j]+f[i]-sumT[i]*sumC[i]-S*sumC[n]
\end{aligned}f[i]f[j]​=f[j]+sumT[i]∗sumC[i]−sumT[i]∗sumC[j]+S∗sumc[n]−S∗sumc[j]=(S+sumT[i])∗sumC[j]+f[i]−sumT[i]∗sumC[i]−S∗sumC[n]​
观察以下这个式子，首先sumT[i],sumC[n],sumC[i],i,nsumT[i],sumC[n],sumC[i],i,nsumT[i],sumC[n],sumC[i],i,n 我们肯定都是知道的（外层循环iii不变吗），但是其中唯一一个遍历jjj 的我们不知道，我们观察这个式子。有没有发现什么？
我们不妨设k=S+sumT[i],b=f[i]−sumT[i]∗sumC[i]−S∗sumC[n]k=S+sumT[i],b=f[i]-sumT[i]*sumC[i]-S*sumC[n]k=S+sumT[i],b=f[i]−sumT[i]∗sumC[i]−S∗sumC[n]
原式就有：
f[j]=k∗sumC[j]+bf[j]=k*sumC[j]+b
f[j]=k∗sumC[j]+b
这不是一次函数吗！
而且k,bk,bk,b我们肯定都是知道的，那么这个问题就变成一次函数的形式了，其图像是在以sumC[j]sumC[j]sumC[j]为横坐标f[j]f[j]f[j]为纵坐标的平面直角坐标系上。
根据我们开头提到的决策点，实际上每一个决策都对应坐标系的一个点(sumC[j],f[j])(sumC[j],f[j])(sumC[j],f[j])，每一个我想求解的f[i]f[i]f[i]一定对应这一个直线的截距。我们搬一下oiwiki的图。

这些黑点都是当前f[i]f[i]f[i]待选择的决策点。
我们的斜率kkk肯定是固定的，但是我们的bbb不一定。我们实际上就是在拿一条线从下去往上平移，并且要求我们的bbb最小（因为bbb里面有f[i]f[i]f[i]，我们要求f[i]f[i]f[i]的最小值），那么会靠到哪个点成为最优的呢？

我们连一下，发现了一个凸包，那么我们想想一条直线从下往上去平移。什么点会成为其决策呢？

不难发现就是凸包的切线！
所以我们可以通过构造像这样的“凸包”我们解可以快速找到这条切线使得截距bbb最小，但是有的时候并不是一个凸壳内所有点都能被切到，如蓝书上的图：

我们其实不难发现，要想获得最优决策，我们应当维护一个斜率单调递增的下凸壳，且顶点才能成为最优决策。
怎么求顶点，其实很简单？观察直线，最优决策点左边线斜率比kkk小，而右边大：

怎么维护？斜率单调递增，横坐标也肯定单调递增？比当前kkk小的会被排除不被选择…单调队列！
只需要维护一个单调队列，每一次新循环排除斜率 k′≤kk&#x27;\le kk′≤k 的决策，那么队列头即为顶点，即最优决策。
那么我们只需要这么维护：

检查队头2个决策变量，若他们构成的斜率k′≤kk&#x27; \le kk′≤k，直接out！
取队头计算f[i]f[i]f[i]
插入决策点iii，检查插入的时候队尾2个决策和 iii 满不满足斜率单调递增，不满足就把q[r]q[r]q[r] out了继续检查。

这样的时间复杂度就是O(n)O(n)O(n)
#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN = 3e5+15;int n, s;ll a[MN], sumt[MN], sumc[MN], f[MN], q[MN];int main()&#123;    cin &gt;&gt; n &gt;&gt; s;    for (int i = 1; i &lt;= n; i++)    &#123;        ll t, c;        cin &gt;&gt; t &gt;&gt; c;        sumt[i] = sumt[i - 1] + t;        sumc[i] = sumc[i - 1] + c;    &#125;    memset(f, 0x3f, sizeof(f));    f[0] = 0;    // O(n^2)    // for(int i=1;i&lt;=n;i++)&#123;    //     for(int j=0;j&lt;i;j++)&#123;    //         f[i]=min(f[i],f[j]+sumt[i]*(sumc[i]-sumc[j])+s*(sumc[n]-sumc[j]));    //     &#125;    // &#125;    // O(n)    int l = 1, r = 0;    q[++r]=0;    for (int i = 1; i &lt;= n; i++)    &#123;        ll k=s+sumt[i];        while (l &lt; r &amp;&amp; (f[q[l + 1]] - f[q[l]]) &lt;= k * (sumc[q[l + 1]] - sumc[q[l]]))        &#123;            // 除法转乘法避免小数            l++;        &#125;        f[i] = f[q[l]] - k * sumc[q[l]] + sumt[i] * sumc[i] + s * sumc[n];        while (l &lt; r &amp;&amp; (f[q[r]] - f[q[r - 1]]) * (sumc[i] - sumc[q[r]]) &gt;= (f[i] - f[q[r]]) * (sumc[q[r]] - sumc[q[r - 1]]))            r--;        // 分式交叉相乘避免小数        q[++r] = i;    &#125;    cout &lt;&lt; f[n];    return 0;&#125;
坑点解析：

为什么单调队列循环中是l&lt;rl&lt;rl&lt;r，因为你判断斜率至少要2个决策点才能判断。
单调队列需在其中至少插入一个元素，默认为0
可以不用乘法，除法注意精度（long double）

这道题也是做完了。
总结一下，我们和单调队列优化相比，我们这里的单调性依赖的是元素的比值，因为这个对应斜率，我们称之为斜率优化。
 3.2 k不单调，x单调
什么意思，就是斜率不再单调了但是横坐标还是单调递增，那么不能像之前这样贸然的取队头了，我们无法从上一轮的最优点开始，直接往后在凸壳上找到这一轮的最优点。也就是说，必须搜索当前的整个凸壳！
作者：しずり雪博客的图

但其实维护凸壳的时候斜率函数单调递增，我们可以借助这个二分，找到顶点就可以了，其实二分也可以套在 kkk 与 xxx 同单调的地方，芝士没有那么优罢了。
时间复杂度显然O(nlog⁡n)O(n\log n)O(nlogn)
例题：

同上题，但：1≤n≤3×1051 \le n \le 3 \times 10^51≤n≤3×105，1≤s≤281 \le s \le 2^81≤s≤28，∣Ti∣≤28\left| T_i \right| \le 2^8∣Ti​∣≤28，0≤Ci≤280 \le C_i \le 2^80≤Ci​≤28。

sumTsumTsumT有可能是负数，不再单调递增，所以考虑二分。
代码如下：
#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN = 3e5+15;int n, s,l,r;ll a[MN], sumt[MN], sumc[MN], f[MN], q[MN];ll binsearch(ll k)&#123;    if(l==r) return q[l];    int L=l,R=r;    while (L&lt;R)    &#123;        int mid=L+R&gt;&gt;1;        //        if(f[q[mid+1]]-f[q[mid]]&gt;k*(sumc[q[mid+1]]-sumc[q[mid]])) R=mid;        else L=mid+1;    &#125;    return L;&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt; s;    for (int i = 1; i &lt;= n; i++)    &#123;        ll t, c;        cin &gt;&gt; t &gt;&gt; c;        sumt[i] = sumt[i - 1] + t;        sumc[i] = sumc[i - 1] + c;    &#125;    memset(f, 0x3f, sizeof(f));    f[0] = 0;    // O(n^2)    // for(int i=1;i&lt;=n;i++)&#123;    //     for(int j=0;j&lt;i;j++)&#123;    //         f[i]=min(f[i],f[j]+sumt[i]*(sumc[i]-sumc[j])+s*(sumc[n]-sumc[j]));    //     &#125;    // &#125;    l=1,r=0;    q[++r]=0;    // O(n) 没有维护下凸包只有上凸包    // for (int i = 1; i &lt;= n; i++)    // &#123;    //     ll k=s+sumt[i];    //     //为什么这里是l&lt;r? l&lt;r 能保证队列中至少有2个数，我们比较斜率是 delta(y)/delta(x) 2个值凑delta    //     while (l &lt; r &amp;&amp; (f[q[l + 1]] - f[q[l]]) &lt;= k * (sumc[q[l + 1]] - sumc[q[l]]))    //     &#123;    //         // 除法转乘法避免小数    //         l++;    //     &#125;    //     f[i] = f[q[l]] - k * sumc[q[l]] + sumt[i] * sumc[i] + s * sumc[n];    //     while (l &lt; r &amp;&amp; (f[q[r]] - f[q[r - 1]]) * (sumc[i] - sumc[q[r]]) &gt;= (f[i] - f[q[r]]) * (sumc[q[r]] - sumc[q[r - 1]]))    //         r--;    //     // 分式交叉相乘避免小数    //     q[++r] = i;    // &#125;    // O(nlogn) 维护下凸包与上凸包，因为sumt不再具有单调性，不再是只有上凸包还有下凸包    // 还是考虑维护单调递增的k，不过这次我们要二分查找了因为队首不再是最优决策了    for(int i=1;i&lt;=n;i++)&#123;        ll k=s+sumt[i];        ll p=binsearch(k);        f[i] = f[q[p]] - k * sumc[q[p]] + sumt[i] * sumc[i] + s * sumc[n];        while (l &lt; r &amp;&amp; (f[q[r]] - f[q[r - 1]]) * (sumc[i] - sumc[q[r]]) &gt;= (f[i] - f[q[r]]) * (sumc[q[r]] - sumc[q[r - 1]]))            r--;        q[++r]=i;    &#125;    cout &lt;&lt; f[n];    return 0;&#125;
 3.3 k单调x不单调
也就是kkk还有单调性，但是xxx没有单调性。这个时候可能在任意一个点插，我们需要动态维护凸包。

k：对于斜率因为还是有单调性，我们可以像3.2一样直接二分
x：我们不能用单调队列来优化了，必须出动高级算法：

李超线段树 时间复杂度O(nlog⁡n)O(n\log n)O(nlogn)
CDQ分治O(nlog⁡n)O(n\log n)O(nlogn)
set维护 O(nlog⁡n)O(n\log n)O(nlogn)



选择你喜欢的英雄，反正我选了李超www。
来做题：P4655

有 nnn 根柱子依次排列，每根柱子都有一个高度。第 iii 根柱子的高度为 hih_ihi​。
现在想要建造若干座桥，如果一座桥架在第 iii 根柱子和第 jjj 根柱子之间，那么需要 (hi−hj)2(h_i-h_j)^2(hi​−hj​)2​​ 的代价。
在造桥前，所有用不到的柱子都会被拆除，因为他们会干扰造桥进程。第 iii 根柱子被拆除的代价为 wiw_iwi​，注意 wiw_iwi​ 不一定非负，因为可能政府希望拆除某些柱子。
现在政府想要知道，通过桥梁把第 111 根柱子和第 nnn 根柱子连接的最小代价。注意桥梁不能在端点以外的任何地方相交。

不难有转移方程：
f[i]=min⁡j=1i−1f[j]+hi2−2hihj+hJ2+si−1−sjf[i]=\min\limits_{j=1}^{i-1} f[j]+h_{i^2}-2h_ih_j+h_J^2+s_{i-1}-s_j
f[i]=j=1mini−1​f[j]+hi2​−2hi​hj​+hJ2​+si−1​−sj​
其中sss 为www的前缀和。
式子化简有：
f[i]=hi2+si−1+min⁡(f[j]−2hihj+hj2−sj)f[i]=h_i^2+s_{i-1}+\min({f[j]-2h_ih_j+h_j^2-s_j})
f[i]=hi2​+si−1​+min(f[j]−2hi​hj​+hj2​−sj​)
显然斜率肯定递增，但是hhh不一定，我们考虑李超，李超的作用是什么？多条线段单点最值，我们的单点的xxx是必须固定。
令k=−2hj,b=fj+hJ2−sjk=-2h_j,b=f_j+h_J^2-s_jk=−2hj​,b=fj​+hJ2​−sj​
有$$f[i]=h_i^2+s_{i-1}+min(k*h_i+b)$$
李超即可。
#include&lt;bits/stdc++.h&gt;#define ll long long#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1using namespace std;const ll MN=1e6+15,INF=1e18,M=1e6;struct line&#123;    ll k,b;&#125;ln[MN];struct node&#123;    int l,r,id;&#125;t[MN&lt;&lt;2];ll f[MN],h[MN],s[MN];int n;ll clac(int id,int x)&#123;    return ln[id].k*x+ln[id].b;&#125;void build(int p,int l,int r)&#123;    t[p].l=l;    t[p].r=r;    if(l==r) return;    int mid=(l+r)&gt;&gt;1;    build(ls,l,mid);    build(rs,mid+1,r);&#125;void update(int p,int i)&#123;        if(t[p].l==t[p].r)&#123;            if(clac(i,t[p].l)&lt;clac(t[p].id,t[p].l)) t[p].id=i;            return;        &#125;        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(clac(i,mid)&lt;clac(t[p].id,mid))&#123;            swap(i,t[p].id);        &#125;        if(clac(i,t[p].l)&lt;clac(t[p].id,t[p].l))&#123;            update(ls,i);        &#125;        if(clac(i,t[p].r)&lt;clac(t[p].id,t[p].r))&#123;            update(rs,i);        &#125;        return;&#125;ll query(int p,ll k)&#123;    ll ret=INF;    if(t[p].id) ret=clac(t[p].id,k);    if(t[p].l==t[p].r) return ret;    int mid=(t[p].l+t[p].r)&gt;&gt;1;    if(mid&gt;=k) ret=min(ret,query(ls,k));    else ret=min(ret,query(rs,k));    return ret;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;h[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;s[i];        s[i]+=s[i-1];    &#125;    ln[0].b=INF;    build(1,0,M);    ln[1].k=-2*h[1];    ln[1].b=h[1]*h[1]-s[1];    update(1,1);    for(int i=2;i&lt;=n;i++)&#123;        f[i]=query(1,h[i])+s[i-1]+h[i]*h[i];        ln[i].k=-2*h[i];        ln[i].b=f[i]-s[i]+h[i]*h[i];        update(1,i);    &#125;    cout&lt;&lt;f[n];    return 0;&#125;
 3.4 k不单调，x不单调
其实和3.3差不太多。
 3.5 补充例题
 矩阵优化+斜率优化 CF1067D
首先这个升级显然是吓唬你的，因为我可以一直选一个游戏 van，所以我只需要看 bipib_{i}p_{i}bi​pi​ 最大就可以了。但是这里我们并不能考虑贪心，因为在时间短的情况下可能升级升不了，还是要 dp 的。
不难有 dp 方程如下，设 f(t)f(t)f(t) 表示还剩下 ttt 秒的最大期望，vvv 表示 bipib_{i}p_ibi​pi​ 的最大值：
f(t+1)=max⁡i=1n{pi(tv+ai)⏟升级成功+（1−pi)ft⏟升级失败}f(t+1)= \max_{i=1}^n \left\{ \underbrace{p_{i}(tv+a_i)}_{\text{升级成功}} +  \underbrace{（1-p_{i})f_t}_{\text{升级失败}}  \right\}
f(t+1)=i=1maxn​⎩⎪⎨⎪⎧​升级成功pi​(tv+ai​)​​+升级失败（1−pi​)ft​​​⎭⎪⎬⎪⎫​
时间复杂度 O(nt)O(nt)O(nt) ，这太 ntntnt 了www
不难看出来可以斜率优化啊，但是我们要变下形式：
f(t+1)=max⁡i=1n{pi(tv+ai)+(1−pi)ft}=pitv+piai+ft−pift=pi(tv−ft)+piai+ft\begin{aligned}
f(t+1) &amp; = \max_{i=1}^n \left\{ p_{i}(tv+a_i) +  (1-p_{i})f_t  \right\} \\
&amp; = p_{i}tv+p_{i}a_{i}+f_t-p_{i}f_{t} \\
&amp; = p_{i}(tv-f_t)+p_{i}a_{i}+f_t
\end{aligned}
f(t+1)​=i=1maxn​{pi​(tv+ai​)+(1−pi​)ft​}=pi​tv+pi​ai​+ft​−pi​ft​=pi​(tv−ft​)+pi​ai​+ft​​
因为 ftf_{t}ft​ 是已知的，所以这个就是一个显然的斜率优化式子，通过将 pip_ipi​ 排序可以满足 kkk 单调，但是 xxx 呢？其实也是一样的：
tv−ft≥(t−1)v−ft−1tv−ft≥tv−v−ft−1ft−1−ft≤v\begin{aligned}
tv-f_{t}&amp; \ge (t-1)v-f_{t-1} \\
tv-f_{t}&amp; \ge tv-v-f_{t-1} \\
f_{t-1}-f_{t} &amp; \le v
\end{aligned}tv−ft​tv−ft​ft−1​−ft​​≥(t−1)v−ft−1​≥tv−v−ft−1​≤v​
因为两个游戏之间获得的收益不可能比玩最大收益（最大的 bipib_{i}p_{i}bi​pi​ 的游戏）还大，所以式子成立，xxx 单调不降。
故单调队列优化，时间复杂度 O(t+n)O(t+n)O(t+n)…t≤1010t\le 10^{10}t≤1010？
这个数据范围已经不行了，必须出矩阵优化…等会矩阵怎么斜率优化？
首先我们先把转移的矩阵搞出来，推啊推：
[fi−1i−11]×[(1−pi)00piv10(pi−ai)11]=[fii1]\begin{bmatrix}
 f_{i-1} &amp; i-1 &amp; 1 
\end{bmatrix}
\times 
\begin{bmatrix}
 (1-p_i) &amp; 0 &amp; 0\\
 p_i v &amp; 1 &amp; 0\\
 (p_i-a_i) &amp; 1 &amp; 1
\end{bmatrix}
=
\begin{bmatrix}
 f_{i} &amp; i &amp; 1 
\end{bmatrix}[fi−1​​i−1​1​]×⎣⎢⎡​(1−pi​)pi​v(pi​−ai​)​011​001​⎦⎥⎤​=[fi​​i​1​]
其实也不是很难推，有啥加啥，因为少个 1 直接加上去就行。
如果我们想找出来有哪些游戏是我们在斜率优化需要的，可以利用单调栈（不能用单调队列我们要存下来的）来记录我们斜率从那些点转移过来，现在问题在于如何确定什么时候从一个点转移到另一个点。
回忆一下这张图：

在斜率优化上，我们能用单调队列来做是因为对于每一个点上的斜率，它有一定转移的边界，在这之前是这个斜率，在之后就不是了。
说的好听矩阵怎么做？首先一个游戏的转移矩阵肯定不会变。问题在于我们怎么像单调队列优化一样找到所谓的边界呢？
首先单调队列不太行因为它不适用于矩阵这种玩意，那怎么办，矩阵这玩意也不能上不单调三小将…………二分？

但其实维护凸壳的时候斜率函数单调递增，我们可以借助这个二分，找到顶点就可以了，其实二分也可以套在 kkk 与 xxx 同单调的地方，芝士没有那么优罢了 —— 3.2 k不单调 x单调

我们可以二分矩阵快速幂的幂，到哪个幂的时候转移是最优的！这样的时间复杂度是 O(nlog⁡2t)O(n \log^2 t)O(nlog2t)，可以通过。
我们不妨快点，不难发现幂其实是一个倍增的形式，我们可以利用倍增的形式二分，首先预处理矩阵快速幂后的各个幂对应的矩阵，从大到小枚举倍增的幂，不断检查是否合法（即是否 &lt;t&lt;t&lt;t )，让后检查是否更优，直接赋值即可！时间复杂度 O(nlog⁡t)O(n \log t)O(nlogt)，其中 log⁡t=33\log t=33logt=33 可以通过。
代码如下，注意精度！！！！！：
#include&lt;bits/stdc++.h&gt;#define ll long long#define double long doubleusing namespace std;constexpr int MN=6e5+15;constexpr double eps=1e-13;struct Node&#123;    double k,b;&#125;ln[MN],cl[MN],s[MN];ll n,t,top,tot,now;double v;struct Matrix&#123;    double mat[5][5];    Matrix operator *(const Matrix &amp;x)const&#123;        Matrix ret;        memset(ret.mat,0,sizeof(ret.mat));        for(int i=1;i&lt;=3;i++)&#123;            for(int j=1;j&lt;=3;j++)&#123;                for(int k=1;k&lt;=3;k++)&#123;                    ret.mat[i][j]+=mat[i][k]*x.mat[k][j];                &#125;            &#125;        &#125;        return ret;    &#125;&#125;g[40],f;bool cmp(Node x,Node y)&#123;    if(fabs(x.k-y.k)&lt;eps) return x.b&lt;y.b;    return x.k&lt;y.k;&#125;int ck(double x)&#123;    if(fabs(x)&lt;eps) return 0;    return x&gt;0?1:-1;&#125;double gety(Node x,Node y)&#123;    return (x.b-y.b)/(y.k-x.k);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;t;    for(int i=1;i&lt;=n;i++)&#123;        double a,b,p;        cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;        v=max(v,b*p);        ln[i].k=p;        ln[i].b=p*a;    &#125;    sort(ln+1,ln+1+n,cmp);    for(int i=1;i&lt;=n;i++)&#123;	    // 先把那些相等斜率的全排了        if(i == n || ck(ln[i].k - ln[i+1].k) != 0) cl[++tot]=ln[i];    &#125;    for(int i=1;i&lt;=tot;i++)&#123;	    // 单调栈处理转移的点        while(top&gt;1&amp;&amp;ck(gety(s[top],s[top-1])-gety(cl[i],s[top-1]))&gt;=0) top--;        s[++top]=cl[i];    &#125;    // f 为 初始矩阵    f.mat[1][3]=1;    for(int i=1;i&lt;=top;i++)&#123;        double x=now*v-f.mat[1][1];        while(i&lt;top&amp;&amp;ck(x-gety(s[i],s[i+1]))&gt;=0) i++;// 先把过时决策排了        if(i&lt;top) x=gety(s[i],s[i+1]);        g[0].mat[1][2]=g[0].mat[1][3]=g[0].mat[2][3]=0;        g[0].mat[2][2]=g[0].mat[3][2]=g[0].mat[3][3]=1;        g[0].mat[1][1]=1-s[i].k,g[0].mat[2][1]=s[i].k*v,g[0].mat[3][1]=s[i].b;// 初始化矩阵        for(int j=1;j&lt;=35;j++) g[j]=g[j-1]*g[j-1];        for(int j=35;j&gt;=0;j--)&#123;            ll np=now+(1ll&lt;&lt;j);            if(np&gt;=t) continue;            // 如果决策更优或已经到头了即可转移            if(i==top||ck(x-np*v+(f*g[j]).mat[1][1])&gt;=0)&#123;                f=f*g[j];                now=np;            &#125;        &#125;        f=f*g[0];        now++;        if(now==t) break;    &#125;    cout&lt;&lt;fixed&lt;&lt;setprecision(10)&lt;&lt;f.mat[1][1];    return 0;&#125;
 3.6 总结
对于求最小值，应当维护下凸包，而最大值维护上凸包。
特征方程：f[i]=min⁡j=1i−1f[j]−a[i]d[j]f[i]=\min_{j=1}^{i-1} f[j]-a[i]d[j]f[i]=minj=1i−1​f[j]−a[i]d[j]
特点存在既有iii又有jjj的项a[i]d[j]a[i]d[j]a[i]d[j],并且两项均单调不减。
主要尝试把式子化成一个y=kx+by=kx+by=kx+b的形式，有的时候bbb可能会带高次项，不要怕当成整体看就可以了。
 4.WQS带权二分
特征：f(i,j)=min/max(g(i,k)+w(i,j)) , j∈[1,i],w(i,j)f(i,j)=min/max(g(i,k)+w(i,j))\,,\,j\in[1,i],w(i,j)f(i,j)=min/max(g(i,k)+w(i,j)),j∈[1,i],w(i,j)无明显性质。
当iii固定时，f(i,j)f(i,j)f(i,j)为凸函数。
当不限定jjj时，f(i)f(i)f(i)能够O(n)O(n)O(n)计算。
例题：

给定nnn个物品，每个物品有价值www（www可以小于0），从中选mmm个物品求最大价值。

这不是背包吗？但是我要求你O(nlog⁡n)O(n\log n)O(nlogn)呢？
一个简单的思路是wiw_iwi​排序，但是简单地排序无法保证正确性。
有朴素转移方程,时间复杂度O(n2)O(n^2)O(n2)：
f(i,j)=max⁡j=1i(f(i−1,j),f(i,j−1)+w(i))f(i,j)=\max\limits_{j=1}^i (f(i-1,j),f(i,j-1)+w(i))
f(i,j)=j=1maxi​(f(i−1,j),f(i,j−1)+w(i))
解题思路：
 1. 检查f(k,j)关于j的凸性
既然优化，我们需要挖掘性质来进行优化。
这里的f(k,j)关于j的凸性是什么意思呢，实际上就是我们固定f(i,j)f(i,j)f(i,j)其中的i=ki=ki=k，根据jjj的变化我们来看满足什么性质。
显然为上凸函数，因为我少选还不如多选吗，我选的越多肯定我拿到的钱就最多吗。

 2. 不限制 j 的时候f(i)很好算
如果不限制的化，那么很简单。
f(i)=max⁡(f(i−1),f(i−1)+wi)f(i)=\max (f(i-1),f(i-1)+w_i)
f(i)=max(f(i−1),f(i−1)+wi​)
时间复杂度O(n)O(n)O(n)，目标f(n)f(n)f(n)。
如果f(n)f(n)f(n)代表的刚好就是选mmm个物品时的最大价值，那不就可以了吗。
萧苯单，谁跟你说一定是mmm个了，往上看看题目后面对于www说的什么，wiw_iwi​可能为负数，不限制取那么肯定不选负数价值的。那怎么办？
 3. 直线切点求截距
还是一张图(实际上你是求不出来点的大致画一下就可以了），这里f(x)f(x)f(x)与g(x)g(x)g(x)是相同的：

我们用一条直线y=kx+by=kx+by=kx+b去切一个点(x,g(x))(x,g(x))(x,g(x))，显然有g(x)=kx+bg(x)=kx+bg(x)=kx+b，那么这个点可以表示为(x,kx+b)(x,kx+b)(x,kx+b)。
因为凸包有个性质，我们和这个凸包的顶点相切那么截距bbb肯定最大，这个在斜率优化里面提到过，假设我们知道kkk，只要我们求出最大的bbb并知道顶点xxx，就能确定具体坐标g(x)g(x)g(x)了。不难发现和斜率优化类似的一点是kkk具有单调性，所以我们只需要去二分kkk，就可以了。
问题在于怎么求最大截距bmaxb_{max}bmax​?
这个凸包我们根本都不知道长啥，如果先求出来那复杂度肯定会爆炸。
不难发现b=g(i)−kxb=g(i)-kxb=g(i)−kx，考虑再重新设转移方程，设h(i)h(i)h(i)表示当前g(i)g(i)g(i)的最大截距。显然有h(i)=g(i)−kxh(i)=g(i)-kxh(i)=g(i)−kx。我们求hih_ihi​并没有规定非要选多少个，而且不难发现h(i)h(i)h(i)是可以DP出来的，并且只是源问题的转换：

给定nnn个物品，每个物品有价值www（www可以小于0），同时选择物品会带有kkk的负权值，任意选择求最大价值。

不难有转移方程：
h(i)=max⁡(h(i−1),h(i−1)+w(i)−k)h(i)=\max (h(i-1),h(i-1)+w(i)-k)
h(i)=max(h(i−1),h(i−1)+w(i)−k)
每个都减去kkk其实就是kxkxkx，解释以下。
问题在于如果这么搞的这h(i)h(i)h(i)还是个凸函数吗，我们还想要他的极值点呢。
显然是的，可以看看下面的图，利用二次函数来模拟：

不难发现其实还是凸函数
那么用他的最值点来求f(i,j)f(i,j)f(i,j)，求h(x)h(x)h(x)显然为O(n)O(n)O(n)，转化为O(1)O(1)O(1)。
但是还是有一个问题，我怎么知道它能够恰好选到mmm个物品呢？这个时候−k-k−k的作用就体现在这里了，我们每选取一个物品，额外减少kkk的价值，间接限制DP对物品的选取数量，如下图：

并且不难发现一个性质，他的极值点随kkk增大而减少，这是因为fff的凸性造成的。
我们可以在一定范围内对kkk进行二分，直到找到某个hk(n)h_k(n)hk​(n)的极大值点刚好对应选mmm个物品，这样我们就获得了f(n,m)f(n,m)f(n,m)的值，二分时间复杂度O(log⁡n)O(\log n)O(logn)，一次DP求最大bbb时间复杂度O(n)O(n)O(n)，时间复杂度O(nlog⁡n)O(n\log n)O(nlogn)。我们搜索范围最大为[0,max(w(i))][0,max(w(i))][0,max(w(i))]。如果斜率存在小数我们需要实数二分，反之整数二分。
 特别注意！
如果是总代价最小化，我们需要加上kkk的代价。
如果是总代价最大化，我们需要减去kkk的代价。
这其实很好理解可以画画图，下凸壳和上凸壳的维护是不同的。
你的整数二分要和hkh_khk​的计算要匹配，如果hhh出现多点共线，整数二分只能获取到左右端点，搜索出来的选取个数不一定为mmm，但是可以算中间的点因为获得hhh是一样的，只是加上的kxkxkx不同。
如图：

注意有没有可能mmm永远无法取到，如果t&lt;m,m&lt;tt&lt;m,m&lt;tt&lt;m,m&lt;t任意一个成立，其中ttt为极致点选取的物品个数，那么mmm对应的h(n,m)h(n,m)h(n,m)百分百与h(n,t)h(n,t)h(n,t)（这里加上第二维是指极致点共选了多少个，不是状态中原本就有这个）共线，所以需要特别考虑。
 WQS模板题
 P6246 [IOI 2000] 邮局

高速公路旁边有 nnn 个村庄。高速公路表示为整数轴，每个村庄的位置用单个整数坐标标识。两个位置之间的距离是其整数坐标差的绝对值。
现在要建立  mmm 个邮局，邮局将建在一些，但不一定是所有的村庄中。为了建立邮局，应选择他们建造的位置，使每个村庄与其最近的邮局之间的距离总和最小。
你要编写一个程序，已知村庄的位置和邮局的数量，计算每个村庄和最近的邮局之间所有距离的最小可能的总和。

邮局肯定放在一个区间的中间（中位数？），那么显然有朴素状态转移方程：设f(i,j)f(i,j)f(i,j)表示到了第iii个村庄，共放了jjj个邮局，有：
f(i,j)=min⁡j=1i−1f(j,i−1)+dis(j,i)f(i,j)=\min\limits_{j=1}^{i-1}f(j,i-1)+dis(j,i)
f(i,j)=j=1mini−1​f(j,i−1)+dis(j,i)
有人会问不是可以不放吗，你不放距离肯定大啊不是最优解，这里埋个铺垫后面会提到。
不难发现disdisdis其实可以O(n2)O(n^2)O(n2)预处理。
DP3维枚举时间复杂度O(n3)O(n^3)O(n3)
考虑优化，不难发现disdisdis满足四边形不等式，可以优化到O(n2log⁡n)O(n^2\log n)O(n2logn)，进一步可以优化到O(n2)O(n^2)O(n2)。这个复杂度还是不好，不能满足我们对于NOI的胃口。
“有人会问不是可以不放吗，你不放距离肯定大啊不是最优解”，这句话说明什么？
f(i,j)f(i,j)f(i,j)有凸性！而且还是刚好mmm个邮局，和上面我们提到的问题是一样的，不难推出h(i)h(i)h(i)的图像其实是一个下凸壳，不难发现h(i)h(i)h(i)还可以继续用四边形不等式优化，复杂度O(nlog⁡n)O(n\log n)O(nlogn)。故时间复杂度为O(nlog⁡nlog⁡∣V∣)O(n \log n \log |V|)O(nlognlog∣V∣)，其中VVV为值域。
很难发现disdisdis可以O(1)O(1)O(1)计算。怎么算看题解把（雾）
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=5e5+15;struct queueueue&#123;    int l,r,j;&#125;q[MN];int n,m,ql,qr;ll pos[MN],sump[MN],ans[MN];ll f[MN];ll w(int l,int r)&#123;    int p=(l+r+1)&gt;&gt;1;    return (sump[r]-sump[p])-(ll)pos[p]*(r-p)+(ll)pos[p]*(p-l)-(sump[p]-sump[l]);&#125;void insert(int x)&#123;    int pos=n+1;    while(ql&lt;=qr&amp;&amp;f[x]+w(x,q[qr].l)&lt;=f[q[qr].j]+w(q[qr].j,q[qr].l)) pos=q[qr--].l;    if(ql&lt;=qr&amp;&amp;f[x]+w(x,q[qr].r)&lt;=f[q[qr].j]+w(q[qr].j,q[qr].r))&#123;        int l=q[qr].l,r=q[qr].r;        while(l+1&lt;r)&#123;            int mid=(l+r)&gt;&gt;1;            if(f[x]+w(x,mid)&lt;=f[q[qr].j]+w(q[qr].j,mid)) r=mid;            else l=mid;        &#125;        q[qr].r=r-1;        pos=r;    &#125;    if(pos!=n+1)&#123;        q[++qr]=&#123;pos,n,x&#125;;    &#125;&#125;bool check(ll k)&#123;    ql=1,qr=0;    q[++qr]=&#123;1,n,0&#125;;    for(int i=1;i&lt;=n;i++)&#123;        while(ql&lt;=qr&amp;&amp;q[ql].r&lt;i) ql++;        f[i]=f[q[ql].j]+w(q[ql].j,i)+k;        ans[i]=ans[q[ql].j]+1;        insert(i);// 可以看蓝书的四边形不等式教程，照这写的    &#125;    // cout&lt;&lt;ans[n]&lt;&lt;&quot; &quot;;    return ans[n]&gt;=m;//我们需要&gt;=m的决策&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;pos[i];    &#125;    sort(pos+1,pos+1+n);    for(int i=1;i&lt;=n;i++)&#123;        sump[i]=sump[i-1]+pos[i];    &#125;    ll l=0,r=8e11;    while(l+1&lt;r)&#123;        ll mid=(l+r)&gt;&gt;1;        if(check(mid)) l=mid;        else r=mid;    &#125;    check(l);    cout&lt;&lt;f[n]-m*l;// 减去kx    return 0;&#125;
 CF739E Gosha is hunting

你要抓神奇宝贝！ 现在一共有 nnn 只神奇宝贝。 你有 aaa 个『宝贝球』和 bbb 个『超级球』。 『宝贝球』抓到第 iii 只神奇宝贝的概率是  只神奇宝贝的概率是  只神奇宝贝的概率是 p_i​，『超级球』抓到的概率则是 ​，『超级球』抓到的概率则是 ​，『超级球』抓到的概率则是 u_i$​。 不能往同一只神奇宝贝上使用超过一个同种的『球』，但是可以往同一只上既使用『宝贝球』又使用『超级球』（都抓到算一个）。 请合理分配每个球抓谁，使得你抓到神奇宝贝的总个数期望最大，并输出这个值，注意概率为实数。1≤n≤20001\le n\le 20001≤n≤2000

期望DP，我们先列个小方程出来。设f(i,j,k)f(i,j,k)f(i,j,k)表示第iii只神奇宝贝，总共用了jjj个宝贝球与kkk个超级球，显然有：
f(i,j,k)=max⁡{f(i−1,j,k)不选f(i−1,j−1,k)+Pi用宝贝球f(i−1,j,k−1)+Ui用超级球f(i−1,j−1,k−1)+1−(1−Pi)(1−Ui)都用f(i,j,k)=\max
\begin{cases}
f(i-1,j,k) &amp; \text{不选} \\ f(i-1,j-1,k)+P_i &amp; \text{用宝贝球} \\ f(i-1,j,k-1)+U_i &amp; \text{用超级球} \\ f(i-1,j-1,k-1)+1-(1-P_i)(1-U_i) &amp; \text{都用}
\end{cases}
f(i,j,k)=max⎩⎪⎪⎪⎪⎨⎪⎪⎪⎪⎧​f(i−1,j,k)f(i−1,j−1,k)+Pi​f(i−1,j,k−1)+Ui​f(i−1,j−1,k−1)+1−(1−Pi​)(1−Ui​)​不选用宝贝球用超级球都用​
不难发现还是有凸性的，但是有两个限制变量，怎么办？那就WQS二分套WQS二分！
f(i)=max⁡{f(i−1)不选f(i−1)+Pi−ka宝贝球f(i−1)+Ui−kb超级球f(i−1)+Pi+Ui−PiUi−ka−kb都用f(i)=\max
\begin{cases}
f(i-1) &amp; \text{不选} \\
f(i-1)+P_i-k_a &amp; \text{宝贝球} \\
f(i-1)+U_i-k_b &amp; \text{超级球} \\
f(i-1)+P_i+U_i-P_iU_i-k_a-k_b &amp; \text{都用}
\end{cases}
f(i)=max⎩⎪⎪⎪⎪⎨⎪⎪⎪⎪⎧​f(i−1)f(i−1)+Pi​−ka​f(i−1)+Ui​−kb​f(i−1)+Pi​+Ui​−Pi​Ui​−ka​−kb​​不选宝贝球超级球都用​
本题有实数二分，注意精度问题，并且要滚动数组一下不然会炸空间。
#include&lt;bits/stdc++.h&gt;#define pir pair&lt;double,double&gt;using namespace std;constexpr int MN=2501;constexpr double eps=1e-8;double p[MN],q[MN];double f,pref;int n,a,b;pir check(double ka,double kb)&#123;    pref=0;    int cnta=0,cntb=0;    for(int i=1;i&lt;=n;i++)&#123;        //pref即f[i-1]        f=max(&#123;pref,pref+p[i]-ka,pref+q[i]-kb,pref+p[i]+q[i]-p[i]*q[i]-ka-kb&#125;);        if(f-(pref+p[i]-ka)&lt;eps)&#123;            cnta++;        &#125;else if(f-(pref+q[i]-kb)&lt;eps) cntb++;        else if(f-(pref+p[i]+q[i]-p[i]*q[i]-ka-kb)&lt;eps)&#123;            cnta++;            cntb++;        &#125;        pref=f;    &#125;    return pir(cnta,cntb);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;p[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;q[i];    &#125;    double la=0,ra=1,lb,rb,mida,midb;    while(la+eps&lt;ra)&#123;//先a        mida=(la+ra)/2;        lb=0,rb=1;        pir ansb;        while(lb+eps&lt;rb)&#123;// 后b            midb=(lb+rb)/2;            ansb=check(mida,midb);            if(ansb.second&gt;b) lb=midb;            else if(ansb.second&lt;b)rb=midb;            else break;//如果找到了就退出        &#125;        if(ansb.first&gt;a) la=mida;        else if(ansb.first&lt;a)ra=mida;        else break;    &#125;    cout&lt;&lt;f+mida*a+midb*b;//因为我们取最小，h(i)是减去k，这里要加上    return 0;&#125;
 UVA1537 Picnic Planning

给定一张 n 个点 n 条边的无向图，正边权，求出无向图的一棵最小生成树，满足一号节点的度数不超过给定的整数 s.
n≤20n\le 20n≤20

这不对啊这个和DP有什么关系？这不是显然有后效性吗。而且这题正解什么时候是WQS了。
事实上WQS二分可以套在许多类型的题上，不仅仅局限于DP.(只是没打标签而已)
观察这个题，又是我们熟悉的强迫sss，要求最小值。
考虑在不限制 sss 的情况下显然变为最小生成树模板可以O(mlog⁡m)O(m \log m)O(mlogm)做。
观察当我们选择加入最小生成树，连一号节点的边数越多，总边权越来越大（正边权），显然是个凸函数，考虑WQS二分消去sss的限制。
首先我们计算时需要统计一号节点的度数cntcntcnt，如果 cnt≤Scnt\le Scnt≤S，显然不用算。反之，进行WQS二分。
我们的权值kkk加的情况，当且仅当边连的是一号节点我们才加上权值。在排序的时候记得要加上特判。
时间复杂度多少？一次kru显然O(mlog⁡m)O(m\log m)O(mlogm)，总时间复杂度显然为O(Tmlog⁡mlog⁡∣V∣)O(Tm\log m \log |V|)O(Tmlogmlog∣V∣)，其中VVV为值域。
故代码如下：
#include&lt;bits/stdc++.h&gt;#define getid(x) (!ump[x]?ump[x]=++umptot:ump[x])#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1314;struct Edge&#123;    int u,v,w;&#125;e[MN];int pre[MN],n,k,T,umptot,s;unordered_map&lt;string,int&gt; ump;int root(int x)&#123;    if(pre[x]==x) return pre[x];    else return pre[x]=root(pre[x]);&#125;void initpre()&#123;    for(int i=1;i&lt;=umptot;i++)&#123;        pre[i]=i;    &#125;&#125;bool cmp(Edge x,Edge y)&#123;    if(x.w+k*(x.u==1)==y.w+k*(y.u==1)) return x.u!=1;    return x.w+k*(x.u==1)&lt;y.w+k*(y.u==1);&#125;pir kru()&#123;    int ans=0,cnt=0;    initpre();    sort(e+1,e+1+n,cmp);    for(int i=1;i&lt;=n;i++)&#123;        int ru=root(e[i].u),rv=root(e[i].v);        if(ru==rv) continue;        pre[rv]=ru;        ans+=e[i].w;        if(e[i].u==1)&#123;            cnt++;            ans+=k;        &#125;    &#125;    //cout&lt;&lt;&quot;K:&quot;&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;&quot; &quot;&lt;&lt;cnt&lt;&lt;&#x27;\n&#x27;;    return pir(ans,cnt);&#125;void solve()&#123;    ump.clear();    umptot=1;    ump[&quot;Park&quot;]=1;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        string u,v;        int w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        e[i].u=getid(u);        e[i].v=getid(v);        e[i].w=w;                if(e[i].u&gt;e[i].v) swap(e[i].u,e[i].v);        //cout&lt;&lt;e[i].u&lt;&lt;&quot; &quot;&lt;&lt;e[i].v&lt;&lt;&quot; &quot;&lt;&lt;e[i].w&lt;&lt;&#x27;\n&#x27;;    &#125;    cin&gt;&gt;s;    int l=0,r=1000;    k=0;    if(kru().second&lt;=s)&#123;        cout&lt;&lt;&quot;Total miles driven: &quot;&lt;&lt;kru().first&lt;&lt;&#x27;\n&#x27;;        if(T) cout&lt;&lt;&#x27;\n&#x27;;        return;    &#125;    //cout&lt;&lt;umptot&lt;&lt;&#x27;\n&#x27;;    while(l+1&lt;r)&#123;        int mid=(l+r)&gt;&gt;1;        k=mid;        if(kru().second&gt;s) l=mid;        else r=mid;    &#125;    k=r;    cout&lt;&lt;&quot;Total miles driven: &quot;&lt;&lt;kru().first-s*k&lt;&lt;&#x27;\n&#x27;;    if(T) cout&lt;&lt;&#x27;\n&#x27;;&#125;int main()&#123;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 WQS总结
主要是利用凸包这一特性来消除掉选mmm的特性，适用的问题一般是nnn个里面强制选mmm个的问题，求最大最小价值，并且如果可以随便选可以很简单的做的题。最难的是发现性质。
主要注意二分斜率时的细节。
 写在最后
感谢阅读！
本文章素材来源：

算法竞赛进阶指南
FloatingLife的WQS二分博客,链接
しずり雪 の Blog

本文章遵循开源协议——[知识共享署名-相同方式共享 4.0 国际许可协议]。
]]></content>
      <categories>
        <category>DP优化</category>
      </categories>
      <tags>
        <tag>DP优化</tag>
      </tags>
  </entry>
  <entry>
    <title>树上差分</title>
    <url>/posts/5cb487af/</url>
    <content><![CDATA[ 1.树上差分概念
树上差分，字面意思就是在树上做差分。
所以她能干啥能，举个例子，如果题目问经过树上某个点或某个边的次数，树上差分就可以派上用场啦。
树上差分就是利用差分的性质，前缀和的思想。只对树上一部分节点进行修改。而不是暴力全改，能将O(n)O(n)O(n)的修改降为O(1)O(1)O(1)
这个在日后会经常用到，要好好学习。

 2.点差分
咱们一个一个加肯定包会TLE的，但是我们在讲树上差分啊！
那么我们如何进行差分呢，差分是在一条链上的在树上怎么操作呢？唉！就是将树拆成链
如下

对路径3→63\rightarrow 63→6路径进行加一的操作我们先找到3和6的LCA即2，将这个路径转化为2条链，一个是2→32\rightarrow 32→3和5→65\rightarrow 65→6，如下

让后分别进行差分，红色和橙色对应上面的链

等会，为什么非要是5→65\rightarrow 65→6而不是2→62\rightarrow 62→6呢？因为2→32\rightarrow 32→3的路径已经将2已经加过了啊。
为什么我们用LCA呢，我们假设2种情况，第一种情况就是要加的树都在一个链上，这时候LCA就是深度最小节点的的父亲，例如对2→32\rightarrow 32→3进行操作。第二种就是像上述3→63\rightarrow 63→6拐过来，我们用LCA就可以求出这个路径的拐点，拐点就是LCA(3,6)=2LCA(3,6)=2LCA(3,6)=2。让后像上面一样拆成2条链
让后跑一遍Dfs就可以统计出来答案啦。
例题P3128 [USACO15DEC] Max Flow P
其实就是上面的点差分经典例题
这里LCA我们使用的是倍增求LCA
小技巧：
__lg(x)
这个函数可以直接搞出来整数的log2xlog_2xlog2​x
#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;int n,m;const int MN=5e4+15,ML=40;int fa[MN][ML],dep[MN],ml,sum[MN],ans=-1;vector&lt;int&gt; adj[MN];void dfs(int u,int pre)&#123;    fa[u][0]=pre;    dep[u]=dep[pre]+1;    for(int i=1;i&lt;=ml;i++)&#123;        fa[u][i]=fa[fa[u][i-1]][i-1];    &#125;    for(auto v:adj[u])&#123;        if(v!=pre)&#123;            dfs(v,u);        &#125;    &#125;&#125;int lca(int x,int y)&#123;    if(dep[x]&gt;dep[y])&#123;        swap(x,y);    &#125;    for(int i=ML-1;i&gt;=0;i--)&#123;        if(dep[fa[y][i]]&gt;=dep[x])&#123;            y=fa[y][i];        &#125;    &#125;    if(x==y) return x;    for(int i=__lg(dep[x]);i&gt;=0;i--)&#123;        if(fa[x][i]!=fa[y][i])&#123;            x=fa[x][i];            y=fa[y][i];        &#125;    &#125;    return fa[x][0];&#125;void dfss(int u,int fa)&#123;    for(auto v:adj[u])&#123;        if(v!=fa)&#123;            dfss(v,u);            sum[u]+=sum[v];        &#125;    &#125;    ans=max(ans,sum[u]);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    ml=__lg(n);    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs(1,0);    while (m--)    &#123;        int s,t;        cin&gt;&gt;s&gt;&gt;t;        int l=lca(s,t);        sum[s]++;        sum[t]++;        sum[l]--;        if(l!=1)&#123;            sum[fa[l][0]]--;        &#125;    &#125;    dfss(1,0);    cout&lt;&lt;ans;    return 0;&#125;
双倍经验 P3258 [JLOI2014] 松鼠的新家
 3.边差分
其实差不多
还是上面那个图

这回紫色使我们要访问的边，并加上1的边权。但是我们不能给边加边权不然不太好差分，我们只能把边权硬塞给点。

发现这不刚好可以拆成两条“链”吗，一个就是单独的333，一个5→65\rightarrow 65→6，那我们只需要sum[3]sum[3]sum[3]++，sum[6]sum[6]sum[6]–,sum[LCA(3,6)]sum[LCA(3,6)]sum[LCA(3,6)]-=2就ok啦
同样也只需要dfs1遍就可以统计出来答案啦（十分甚至九分的厉害）
至于为啥操作不同请自行用拆链的思想思考
 4.BB
树上差分之后用处很多的，尤其是重复的区间操作或贡献问题，有的时候其实也可用树链剖分取做（但是我不会），如果对您有帮助，请不要忘了点赞！(≧∇≦)ﾉ
]]></content>
      <categories>
        <category>图论</category>
      </categories>
  </entry>
  <entry>
    <title>树状数组</title>
    <url>/posts/59a0de58/</url>
    <content><![CDATA[ 1.概念与代码
 1.0导入
树状数组是一种支持 单点修改 和 区间查询 的，代码量小的数据结构。利用数的二进制特性进行检索的一种树状的结构

显然可得树状数组是多叉树
如图，我们对 t[7]t[7]t[7] 进行检索
查询的过程就是每次去掉最后的二进制位的1，例如我们对7进行前缀和求值。sum(7)=t[7]+t[6]+t[4]

7的二进制是111 去掉最后的1，得110 即6
去掉6的二进制最后一个1，即100，即4
显然4不能再去1了，再去1就是0了

接下来进行维护（加），维护的过程就是每次在二进制的最后的1再加1.例如更新了a3a_3a3​ 就要修改t[3]t[3]t[3]，t[4]t[4]t[4]，t[8]t[8]t[8]

3的二进制是11，在最后的1加上1就是100 即4，更新
4的二进制是100，在最后的1加上1就是1000，即8，更新
8的二进制再加就超范围了，这时停止

显然这里有一个关键问题，如何找到二进制1，就是lowbit
 1.1 lowbit
这里先给出代码
int lowbit(int x)&#123;    return x &amp; -x;&#125;
功能就是找到二进制下最后一个1，自行证明一下。

 1.2 代码
P3374 单点修改区间查询（原汁原味）
#include&lt;iostream&gt;using namespace std;const int MN=5e5+15;int lowbit(int x)&#123;    return x &amp; -x;&#125;int t[MN],n,m;void add(int x,int k)&#123;    while (x&lt;=n)//防止超出边界    &#123;        //加值让后加上末尾的1        t[x]+=k;        x+=lowbit(x);    &#125;&#125;int sum(int x)&#123;    int ans=0;    while (x&gt;0)    &#123;        //加值让后减去末尾的1        ans+=t[x];        x-=lowbit(x);    &#125;    return ans;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        int t;        cin&gt;&gt;t;        add(i,t);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int x,y,op;        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;        if(op==1)&#123;            add(x,y);        &#125;else&#123;//区间查询，sum代表1~k的前缀和            cout&lt;&lt;sum(y)-sum(x-1)&lt;&lt;endl;        &#125;    &#125;&#125;
0为下表的树状数组，感谢牢学长（@Renamoe）
0-index
 2.应用
 1.区间修改+单点查询
HDU-1556

N个气球排成一排，从左到右依次编号为1,2,3…N.每次给定2个整数 aaa ,bbb ( a&lt;=ba &lt;= ba&lt;=b ),lele便为骑上他的“小飞鸽&quot;牌电动车从气球a开始到气球b依次给每个气球涂一次颜色。但是 NNN 次以后lele已经忘记了第 III 个气球已经涂过几次颜色了，你能帮他算出每个气球被涂过几次颜色吗？
Input
每个测试实例第一行为一个整数 N,(N&lt;=100000)N,(N &lt;= 100000)N,(N&lt;=100000) .接下来的N行，每行包括2个整数 aaa,bbb (1&lt;=a&lt;=b&lt;=N)(1 &lt;= a &lt;= b &lt;= N)(1&lt;=a&lt;=b&lt;=N) 。
当 N=0N = 0N=0 ，输入结束。

31 12 23 331 11 21 30

Output


每个测试实例输出一行，包括 NNN 个整数，第 III 个数代表第 III 个气球总共被涂色的次数。

1 1 13 2 1
定义a[i]a[i]a[i]为气球涂色的次数，若用暴力法求解显然复杂度是O(n2)O(n^2)O(n2) 过不去。我们用上面提到的，单点修改区间查询，显然修改是O(n)O(n)O(n)的，那么反而更差，最终即为O(n2log2n)O(n^2log_2n)O(n2log2​n)，难受
对于一段区间重复操作，我们考虑差分。差分是一个很神奇的东西，能将区间问题转换为端点问题。自己先看看定义吧（其实是我懒）

代码如下
#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;const int MN=1e5+15;int t[MN],n;int lowbit(int x)&#123;    return x &amp; -x;&#125;void add(int x,int k)&#123;    while (x&lt;=n)    &#123;        t[x]+=k;        x+=lowbit(x);    &#125;&#125;int ask(int x)&#123;    int ans=0;    while (x&gt;0)    &#123;        ans+=t[x];        x-=lowbit(x);    &#125;    return ans;&#125;int main()&#123;    while (1)    &#123;        memset(t,0,sizeof(t));        cin&gt;&gt;n;        if(!n) break;        for(int i=1;i&lt;=n;i++)&#123;            int a,b;//a-&gt;L b-&gt;R            cin&gt;&gt;a&gt;&gt;b;            add(a,1);            add(b+1,-1);        &#125;        for(int i=1;i&lt;=n;i++)&#123;            cout&lt;&lt;ask(i)&lt;&lt;&quot; &quot;;        &#125;        cout&lt;&lt;endl;    &#125;        return 0;&#125;
显然两个for循环时间复杂度均为O(nlog2n)O(nlog_2n)O(nlog2​n) 可以啦
（不是哥们为啥这个差分题非要用树状数组+差分做啊）
 2.区间修改+区间查询
老生常谈线段树

已知一个数列，你需要进行下面两种操作：

将某区间每一个数加上 kkk。
求出某区间每一个数的和。

第一行包含两个整数 n,mn, mn,m，分别表示该数列数字的个数和操作的总个数。
第二行包含 nnn 个用空格分隔的整数，其中第 iii 个数字表示数列第 iii 项的初始值。
接下来 mmm 行每行包含 333 或 444 个整数，表示一个操作，具体如下：

1 x y k：将区间 [x,y][x, y][x,y] 内每个数加上 kkk。
2 x y：输出区间 [x,y][x, y][x,y] 内每个数的和。

输入
5 51 5 4 2 32 2 41 2 3 22 3 41 1 5 12 1 4
输出
11820
对于 30%30\%30% 的数据：n≤8n \le 8n≤8，m≤10m \le 10m≤10。
对于 70%70\%70% 的数据：n≤103n \le {10}^3n≤103，m≤104m \le {10}^4m≤104。
对于 100%100\%100% 的数据：1≤n,m≤1051 \le n, m \le {10}^51≤n,m≤105。
保证任意时刻数列中所有元素的绝对值之和 ≤1018\le {10}^{18}≤1018。

这里我们需要进一步强化对于差分的理解，你已经理解了差分是干嘛的，接下来差分我们显然可得两个性质

aia_iai​的值是bib_ibi​的前缀和，即an=∑i=1nbia_n=\sum_{i=1}^nb_ian​=∑i=1n​bi​
计算aka_kak​的前缀和sum=∑i=1kai=∑i=1k∑j=1ibi=∑i=1k(n−i+1)bisum=\sum_{i=1}^ka_i=\sum_{i=1}^k\sum_{j=1}^ib_i=\sum_{i=1}^k(n-i+1)b_isum=∑i=1k​ai​=∑i=1k​∑j=1i​bi​=∑i=1k​(n−i+1)bi​

ok这里直接放推导过程
a1+a2+a3+...+aka_1+a_2+a_3+...+a_ka1​+a2​+a3​+...+ak​
由性质2可得
=kB1+(k−1)B2+(k−2)B3+...+(k−(k−1))Bk=kB_1+(k-1)B_2+(k-2)B_3+...+(k-(k-1))B_k=kB1​+(k−1)B2​+(k−2)B3​+...+(k−(k−1))Bk​
=k(B1+B2+B3+...+Bk)−(B2−2B3−...−(k−1)Bk)=k(B_1+B_2+B_3+...+B_k)-(B_2-2B_3-...-(k-1)B_k)=k(B1​+B2​+B3​+...+Bk​)−(B2​−2B3​−...−(k−1)Bk​)
=k∑i=1kBi−∑i=1k(i−1)Bi=k\sum_{i=1}^kB_i-\sum_{i=1}^k(i-1)B_i=k∑i=1k​Bi​−∑i=1k​(i−1)Bi​
显然我们可以用2个树状数组来维护前缀和
代码如下
#include&lt;iostream&gt;#define ll long longusing namespace std;ll lowbit(ll x)&#123;    return x &amp; -x;&#125;const int MN=1e5+15;ll t1[MN],t2[MN],m,n,a[MN];void add(ll *t,ll x,ll k)&#123;    while (x&lt;=n)    &#123;        t[x]+=k;        x+=lowbit(x);    &#125;&#125;ll ask(ll *t,ll x)&#123;    ll ans=0;    while (x&gt;0)    &#123;        ans+=t[x];        x-=lowbit(x);    &#125;    return ans;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(ll i=1,pre=0;i&lt;=n;i++)&#123;        ll t;        cin&gt;&gt;t;        //差分数组定义        add(t1,i,t-pre);        add(t2,i,(i-1)*(t-pre));        pre=t;    &#125;    while (m--)    &#123;        ll q,l,r,k;        cin&gt;&gt;q&gt;&gt;l&gt;&gt;r;        if(q==1)&#123;            cin&gt;&gt;k;            add(t1,l,k);            add(t1,r+1,-k);            add(t2,l,k*(l-1));            add(t2,r+1,-k*r);//-k*r=-k*(r+1-1)        &#125;else&#123;            cout&lt;&lt;r*ask(t1,r)-(l-1)*ask(t1,l-1)-ask(t2,r)+ask(t2,l-1)&lt;&lt;endl;//这里把括号去掉了        &#125;    &#125;        return 0;&#125;
 3.偏序问题（逆序对+离散化）
其实偏序问题应当用CDQ分治去做的，但是对于一维的来说，树状数组显然复杂度更优（O(nn)O(n\sqrt n)O(nn​) &lt; O(nlog2n)O(nlog_2n)O(nlog2​n)）
P1908
对于给定的一段正整数序列，逆序对就是序列中 ai&gt;aja_i&gt;a_jai​&gt;aj​ 且 i&lt;ji&lt;ji&lt;j 的有序对。
算出给定的一段正整数序列中逆序对的数目。注意序列中可能有重复数字。
用这个解逆序对问题用到一个技巧，即对值域建树状数组
这样就很好处理了，每处理一个数字，树状数组下表所对应的元素数值加一，统计前缀和，就是逆序对的数量
这里倒序处理，注意离散化
#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int MN=5e5+15;struct node&#123;    int v,id;&#125;;int n,t[MN],rnk[MN];node a[MN];int lowbit(int x)&#123;    return x &amp; -x;&#125;int ask(int x)&#123;    int ans=0;    while (x&gt;0)    &#123;        ans+=t[x];        x-=lowbit(x);    &#125;    return ans;&#125;void add(int x,int k)&#123;    while (x&lt;=n)    &#123;        t[x]+=k;        x+=lowbit(x);    &#125;&#125;bool cmp(node x,node y)&#123;    if(x.v==y.v)&#123;        return x.id&lt;y.id;    &#125;    return x.v&lt;y.v;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i].v;        a[i].id=i;    &#125;    sort(a+1,a+1+n,cmp);    for(int i=1;i&lt;=n;i++)&#123;        rnk[a[i].id]=i;    &#125;    long long ans=0;    for(int i=n;i&gt;0;i--)&#123;        add(rnk[i],1);        ans+=ask(rnk[i]-1);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 3.总结
树状数组优点在于

好写
常数小
1倍空间

大多数用来代替简单求和的线段树，但是复杂问题还是要上线段树
用树状数组解问题的关键就是如何把答案贡献转化为一个前缀和
若遇到许多区间计算，可以考虑使用差分来降低复杂度。
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组进阶使用</title>
    <url>/posts/b8c8d3e3/</url>
    <content><![CDATA[ 0. 前言
你需要知道树状数组
 1. 树状数组二分
 1.1 概念
类似于线段树二分，树状数组当然也可以二分。
它解决的是如下一类问题：

对于序列 aaa，存在分割点 qqq 使得 ≤q\le q≤q 的位置满足某个限制而 &gt;q&gt;q&gt;q 的位置不满足限制，求 qqq。
（注意是整个序列 aaa 找分割点），要求 O(nlog⁡n)O(n\log n)O(nlogn)。
nnn 类似于长度。

如果你是从某个位置开始二分，那这个就做不到，你可以考虑转化到整个序列二分。
考虑最后一个前缀和 ≤v\le v≤v 的位置，满足序列每个元素非负，则存在分割点 qqq 满足 ≤q\le q≤q 的位置的前缀和 ≤v\le v≤v ，而  &gt;q&gt;q&gt;q 的位置的前缀和 &gt;v&gt;v&gt;v ，那么 qqq 即为所求。
我们初始化两个变量，当前位置 ppp 和对应的前缀和 sss，初始权为 0。
我们从大到小枚举 1≤2k≤n1\le 2^k \le n1≤2k≤n，尝试将 ppp 加上 2k2^k2k。检查 s+∑i=p+1p+2kai≤vs+\sum\limits_{i=p+1}^{p+2^k} a_{i}\le vs+i=p+1∑p+2k​ai​≤v 是否成立，因为 kkk 从小到大枚举，此时 lowbit(p)&gt;2klowbit(p)&gt;2^klowbit(p)&gt;2k，那么显然有 lowbit(p+2k)=2klowbit(p+2^k)=2^klowbit(p+2k)=2k，因为树状数组中 t[i]t[i]t[i] 中填的是 [i−lowbit(i)+1,i][i-lowbit(i)+1,i][i−lowbit(i)+1,i] 这个区间的信息，那么也就是说 t[p+2k]=∑i=p+1p+2kait[p+2^k]=\sum\limits_{i=p+1}^{p+2^k} a_{i}t[p+2k]=i=p+1∑p+2k​ai​。
那么就可以这么做：

初始化两个变量，当前位置 ppp 和对应的前缀和 sss，初始权为 0。
从大到小枚举 1≤2k≤n1\le 2^k \le n1≤2k≤n。

若 p+2k≤np+2^k\le np+2k≤n 且 s+t[p+2k]≤vs+t[p+2^k]\le vs+t[p+2k]≤v。则 p←p+2k,s←s+t[p+2k]p\leftarrow p+2^k,s\leftarrow s+t[p+2^k]p←p+2k,s←s+t[p+2k]。
若 p+2k&gt;np+2^k&gt;np+2k&gt;n，啥也不做。



ppp 一定等于最终求的 qqq，否则 ppp 在过程一定会变得更大。
 1.2 例题
 [省选联考 2020 A/B 卷] 冰火战士
经典畅谈。
一个显然能看出来，我们要二分温度 kkk。
首先考虑能不能三分，显然不行这个是离散的，但是对于冰的能量求和 ficef_{ice}fice​ 是单调不降的，而 ffiref_{fire}ffire​ 是单调不升的。如果画出来的话就是两个函数打叉，我们就是要找那个叉。
借用 duyi大佬的图：


我们要找的就是这个叉，但是这个叉直接二分求有点难找。
我们可以两次二分，第一次找最大的 kkk 使得 fice(k)&lt;ffire(k)f_{ice}(k) &lt; f_{fire}(k)fice​(k)&lt;ffire​(k)，以此为左边界，第二次找最小的 kkk 使得 fice(k)≥ffire(k)f_{ice}(k)\ge f_{fire}(k)fice​(k)≥ffire​(k) 。

不难发现可以离线询问，我们考虑怎么维护这个区间修改 fff ，其实也很简单，差分就可以了。但是这里面有一个后缀和耶？那怎么办？其实后缀和就是总和-前缀和，让后做完了。
对于倍增查询，时间复杂度因为查询的是树状数组的数据，可以做到 O(log⁡q)O(\log q)O(logq) ，所以总时间复杂度为 O(qlog⁡q)O(q \log q)O(qlogq)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MQ=2e6+15;int q,a[MQ],tot,sum1;struct query&#123;    int op,t,x,y;&#125;qry[MQ];struct BIT&#123;    private:        int t[MQ];    public:    inline int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void update(int pos,int k)&#123;        while(pos&lt;MQ)&#123;            t[pos]+=k;            pos+=lowbit(pos);        &#125;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    int get(int x)&#123;        return t[x];    &#125;&#125;t0,t1;template&lt;typename type&gt;void read(type &amp;x)&#123;    x=0;bool flag(0);char ch=getchar();    while(!isdigit(ch)) flag=ch==&#x27;-&#x27;,ch=getchar();    while(isdigit(ch)) x=(x&lt;&lt;3)+(x&lt;&lt;1)+(ch^48),ch=getchar();    flag?x=-x:0;&#125;void lisan()&#123;    sort(a+1,a+1+tot);    tot=unique(a+1,a+1+tot)-a-1;    for(int i=1;i&lt;=q;i++)&#123;        if(qry[i].op==2) continue;        qry[i].x=lower_bound(a+1,a+1+tot,qry[i].x)-a;    &#125;&#125;signed main()&#123;    read(q);    for(int i=1;i&lt;=q;i++)&#123;        read(qry[i].op);        if(qry[i].op==1)&#123;            // cin&gt;&gt;qry[i].t&gt;&gt;qry[i].x&gt;&gt;qry[i].y;            read(qry[i].t);            read(qry[i].x);            read(qry[i].y);            a[++tot]=qry[i].x;        &#125;else read(qry[i].t);    &#125;    lisan();    for(int i=1;i&lt;=q;i++)&#123;        if(qry[i].op==1)&#123;            if(qry[i].t)&#123;                t1.update(qry[i].x+1,qry[i].y);                sum1+=qry[i].y;            &#125;else t0.update(qry[i].x,qry[i].y);        &#125;else&#123;            int p=qry[i].t;            if(qry[p].t)&#123;                t1.update(qry[p].x+1,-qry[p].y);                sum1-=qry[p].y;            &#125;else t0.update(qry[p].x,-qry[p].y);        &#125;        int s0=0,s1=sum1,f0=0,f1=0,p0=0,p1=0;        for(int j=20;j&gt;=0;j--)&#123;            int np=p0+(1&lt;&lt;j),ns0=s0+t0.get(np),ns1=s1-t1.get(np);            if(np&gt;tot) continue;            if(ns0&lt;ns1)&#123;                p0=np;                s0=ns0,s1=ns1;            &#125;        &#125;        f0=s0,s0=0,s1=sum1;        if(p0&lt;tot)&#123;            f1=min(t0.query(p0+1),sum1-t1.query(p0+1));            for(int j=20;j&gt;=0;j--)&#123;                int np=p1+(1&lt;&lt;j),ns0=s0+t0.get(np),ns1=s1-t1.get(np);                if(np&gt;tot) continue;                if(ns0&lt;ns1)&#123;                    p1=np;                    s0=ns0,s1=ns1;                &#125;else if(min(ns0,ns1)==f1)&#123;                    p1=np;                    s0=ns0,s1=ns1;                &#125;            &#125;        &#125;        if(max(f0,f1)==0) cout&lt;&lt;&quot;Peace\n&quot;;        else if(f0&gt;f1) cout&lt;&lt;a[p0]&lt;&lt;&quot; &quot;&lt;&lt;f0*2&lt;&lt;&#x27;\n&#x27;;// 最小的能量消耗一定消耗完了，并且两边消耗同样做小        else cout&lt;&lt;a[p1]&lt;&lt;&quot; &quot;&lt;&lt;f1*2&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 [USACO03Open] Lost Cows
虽然原题是 O(n2)O(n^2)O(n2) 就能做，但是这里我们强制要求 O(nlog⁡n)O(n\log n)O(nlogn)。
但是我们先从暴力开始做，首先观察到如果正着做太难了而且后效性太大了受不了。正难则反，考虑倒着走，发现倒着走很好做啊，因为原题中的 aia_iai​ 看得是前面而不是后面，这样我们就可以利用后面占用的信息往前推过去了。
一个显然 O(n2)O(n^2)O(n2) 的做法就是考虑怎么分配编号，直接开 visvisvis 数组记录编号谁占了，其实就是找在 visvisvis 数组前缀和为 ai+1a_{i}+1ai​+1 的位置（随便找就行），找到后标 1 即可。
我们考虑怎么优化，上述瓶颈的过程在于查询前缀和，观察数组的性质，不难发现是一个 01 序列， 那么对于前缀和的形式我们可以直接转化成查询第 ai+1a_{i}+1ai​+1 个的 1 的位置，让后单点修改为 1 即可。
综上，我们要造一个数据结构，满足能够支持查询第 kkk 个 1 的位置（k∈N+k\in \mathbb{N}^+k∈N+），并且支持单调修改，时间复杂度要求操作都为 log⁡n\log nlogn 的时间复杂度。
不难发现它找的就是：满足在 ≤pos\le pos≤pos 的位置 vvv 的前缀和 ≤k\le k≤k，而在 &gt;pos&gt;pos&gt;pos 的位置 vvv 的前缀和 &gt;k&gt;k&gt;k，找的就是这个分界点。
这里我们可以用 树状数组+真正的二分 来做，其实也很简单，直接考虑二分答案，用查询函数 queryqueryquery 查询里面的数据就能获得前 midmidmid 有多少个 1 ，让后直接比较大小二分即可，但是这样的时间复杂度是 O(nlog⁡2n)O(n\log ^2 n)O(nlog2n)。
考虑用我们讲的方法，直接做，时间复杂度分析和上面题一样为 O(nlog⁡n)O(n \log n)O(nlogn)，其实到这里你应该能发现树状数组恰好为我们维护了区间长度为 222 的次幂的一些信息，所以我们不需要二分，直接利用树状数组这个特性倍增就能完成和真正二分一样的效果。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,a[MN],ans[MN];struct BIT&#123;    int t[MN];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;&#125;bit;int main()&#123;    cin&gt;&gt;n;    bit.update(1,1);    for(int i=2;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        bit.update(i,1);    &#125;    for(int i=n;i&gt;=1;i--)&#123;        int p=0,s=0;        for(int j=20;j&gt;=0;j--)&#123;            int np=p+(1&lt;&lt;j);            if(np&gt;n) continue;            int ns=s+bit.t[np];            if(ns&lt;a[i]+1)&#123;                s=ns;                p=np;            &#125;        &#125;        p++;        bit.update(p,-1);        ans[i]=p;    &#125;    for(int i=1;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 [POI 2015] LOG

维护一个长度为 nnn 的序列，一开始都是 000，支持以下两种操作：

U k a 将序列中第 kkk 个数修改为 aaa。
Z c s 在这个序列上，每次选出 ccc 个正整数，并将它们都减去 111，询问能否进行 sss 次操作。
询问独立。
时间复杂度要求 O(nlog⁡n)O(n\log n)O(nlogn)，都是正整数不是正数。
but：1≤n≤106,1≤k,c≤n,1≤a,s≤1091\le n \le 10^6,1\le k,c\le n,1 \le a,s \le 10^91≤n≤106,1≤k,c≤n,1≤a,s≤109。


可以先自己想想。
这里的 sss 次操作选出的正数可以不同。
提示：贪心复杂度走不了思考一下排序是为了什么。
一个贪心的思路就是每次排序，找最大的那几个往后数，这个显然是正确的，但是这样的时间复杂度是 O(n2log⁡n)O(n^2 \log n)O(n2logn)，不能通过。
虽然贪心过不去，但是我们可以借鉴贪心中排序，我们排序是为了什么，其实就是为了发掘性质。实际上，我们不难发现每一次排序中总有数会被选择，那么就是那些 ≥s\ge s≥s 的数一定会被选择（长的高天塌下来先砸到他们www），一旦他们能够承受 sss 次操作的话那么万事大吉，如果一旦都 GG 了就得让 &lt;s&lt;s&lt;s 的承受了，我们考虑这个承受能否，如何判断？其实也很简单，如果每个数最终都减到 0 了还是不够那就完蛋，如果没有那就还是可以的。所以我们需要 &lt;s&lt;s&lt;s 的数的和 sumsumsum，判断一下就可以了。
等一下，到底怎么判断？
实际上，我们假设一个极端情况，就是那些大于等于 sss 的数都等于 sss，在这个极端情况下，必须保证 sum≥(c−x)×ssum\ge (c-x)\times ssum≥(c−x)×s，其中 xxx 为 ≥s\ge s≥s 的数的个数，只有这样才能保证可以，如果不是极端情况，那么最少也有 ⌈sums−1⌉\lceil \dfrac{sum}{s-1} \rceil⌈s−1sum​⌉ 个数，如果满足 sum≥(c−x)×ssum\ge (c-x)\times ssum≥(c−x)×s，那么满足 ⌈sums−1⌉&gt;c−x\lceil \dfrac{sum}{s-1} \rceil &gt; c-x⌈s−1sum​⌉&gt;c−x，这个时候肯定有解的。
有如下做法：

在线做法，平衡树或动态开点值域线段树瞎做，时间复杂度显然 O(nlog⁡n)O(n\log n)O(nlogn)。
离线下来，值域树状数组做，时间复杂度在离散化后也为 O(nlog⁡n)O(n \log n)O(nlogn)。这个做法是最简单的。
离线离散化，树状数组二分找这个 ≥s\ge s≥s 的数的个数，其实个上面第二个例题差不太多，只不过是倒着找，但是本质不如第二个做法简单。时间复杂度仍为 O(nlog⁡n)O(n \log n)O(nlogn)。

第二种我写的，代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;struct query&#123;    int op,k,a,c,s;&#125;q[MN];int n,m,tot,ls[MN],a[MN];struct BIT&#123;    private:        int t[MN];    public:    inline int lowbit(int x)&#123;        return x&amp;-x;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int get(int x)&#123;        return t[x];    &#125;&#125;b1,b2;void lisan()&#123;    sort(ls+1,ls+1+tot);    tot=unique(ls+1,ls+1+tot)-ls-1;    for(int i=1;i&lt;=m;i++)&#123;        if(q[i].op)&#123;            q[i].s=lower_bound(ls+1,ls+1+tot,q[i].s)-ls;        &#125;else q[i].a=lower_bound(ls+1,ls+1+tot,q[i].a)-ls;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        char op;        int x,y;        cin&gt;&gt;op;        if(op==&#x27;U&#x27;)&#123;            q[i].op=0;            cin&gt;&gt;q[i].k&gt;&gt;q[i].a;            ls[++tot]=q[i].a;        &#125;else&#123;            q[i].op=1;            cin&gt;&gt;q[i].c&gt;&gt;q[i].s;            ls[++tot]=q[i].s;        &#125;    &#125;    lisan();    for(int i=1;i&lt;=m;i++)&#123;        if(q[i].op==0)&#123;            int x=0;            if(x=a[q[i].k])&#123;                b1.update(x,-1);                b2.update(x,-ls[x]);            &#125;            x=a[q[i].k]=q[i].a;            b1.update(x,1);            b2.update(x,ls[q[i].a]);        &#125;else&#123;            int x=b1.query(tot)-b1.query(q[i].s-1);            int sum=q[i].s?b2.query(q[i].s-1):0;            if(sum&gt;=(q[i].c-x)*ls[q[i].s])&#123;                cout&lt;&lt;&quot;TAK\n&quot;;            &#125;else cout&lt;&lt;&quot;NIE\n&quot;;        &#125;    &#125;    return 0;&#125;
 普通平衡树
洒洒水啦，复杂度依旧是 O(qlog⁡n)O(q\log n)O(qlogn)。
#include &lt;bits/stdc++.h&gt;using namespace std;constexpr int MN = 1e5 + 15;int n, m, tot, op[MN], a[MN], b[MN];struct BIT&#123;    int t[MN];    int lowbit(int x)    &#123;        return x &amp; -x;    &#125;    void update(int x, int k)    &#123;        while (x &lt; MN)        &#123;            t[x] += k;            x += lowbit(x);        &#125;    &#125;    int query(int x)    &#123;        int ret = 0;        while (x)        &#123;            ret += t[x];            x -= lowbit(x);        &#125;        return ret;    &#125;    int getkth(int x)    &#123;        int p = 0, s = 0;        for (int i = 20; i &gt;= 0; i--)        &#123;            int np=p+(1&lt;&lt;i);            if(np&gt;tot) continue;            int ns=s+t[np];            if(ns&lt;x)&#123;                s=ns;                p=np;            &#125;        &#125;        return p+1;    &#125;&#125; bit;int main()&#123;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++)    &#123;        cin &gt;&gt; op[i] &gt;&gt; a[i];        b[i] = a[i];    &#125;    sort(b + 1, b + 1 + n);    tot = unique(b + 1, b + 1 + n) - b - 1;    for (int i = 1; i &lt;= n; i++)    &#123;        if (op[i] == 4)            continue;        a[i] = lower_bound(b + 1, b + 1 + tot, a[i]) - b;    &#125;    for (int i = 1; i &lt;= n; i++)    &#123;        if (op[i] == 1)        &#123;            bit.update(a[i], 1);        &#125;        if (op[i] == 2)        &#123;            bit.update(a[i], -1);        &#125;        if (op[i] == 3)        &#123;            cout &lt;&lt; bit.query(a[i] - 1)+1&lt;&lt; &#x27;\n&#x27;;        &#125;        if (op[i] == 4)        &#123;            cout&lt;&lt;b[bit.getkth(a[i])]&lt;&lt;&#x27;\n&#x27;;        &#125;        if(op[i]==5)&#123;            cout&lt;&lt;b[bit.getkth(bit.query(a[i]-1))]&lt;&lt;&#x27;\n&#x27;;        &#125;        if(op[i]==6)&#123;            cout&lt;&lt;b[bit.getkth(bit.query(a[i])+1)]&lt;&lt;&#x27;\n&#x27;;        &#125;    &#125;    return 0;&#125;
 2. 维护矩形
对于普通 BIT 来说，满足的就是一维度（其实就是数组）的区间查询与单点修改。
对于二维 BIT 来说，它可以做到单点加矩形查询，只需要差分就能做到对任意矩形求和，对于查询修改时间复杂度都是优秀的 O(log⁡2n)O(\log^2 n)O(log2n)。
但是我们给它上上难度呢？
P4514 上帝造题的七分钟

给定矩阵大小为 n×mn\times mn×m，你需要写一个 O(qlog⁡nlog⁡m)O(q\log n \log m)O(qlognlogm)（其中 qqq 为询问个数)，的数据结构维护如下操作
L a b c d k —— 代表将 (a,b),(c,d)(a,b),(c,d)(a,b),(c,d) 为顶点的矩形区域内的所有数字加上 kkk。
k a b c d     —— 代表求 (a,b),(c,d)(a,b),(c,d)(a,b),(c,d) 为顶点的矩形区域内所有数字的和。

矩形加矩形求和，就是维护二维差分数据的二阶二维前缀和，考虑 (i,j)(i,j)(i,j) 的差分修改对 (x,y)(x,y)(x,y) 查询的贡献，不难发现总共加了 (x−i+1)(y−j+1)k(x-i+1)(y-j+1)k(x−i+1)(y−j+1)k 个数。展开有 (x+1)(y+1)k−(y+1)ik−(x+1)jk+ijk(x+1)(y+1)k-(y+1)ik-(x+1)jk+ijk(x+1)(y+1)k−(y+1)ik−(x+1)jk+ijk，维护 k,ik,jk,ijkk,ik,jk,ijkk,ik,jk,ijk 的二维前缀和即可。
故代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15;struct query&#123;    int op,k,a,c,s;&#125;q[MN];int n,m,tot,ls[MN],a[MN];struct BIT&#123;    private:        int t[MN];    public:    inline int lowbit(int x)&#123;        return x&amp;-x;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;    void update(int x,int k)&#123;        while(x&lt;MN)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int get(int x)&#123;        return t[x];    &#125;&#125;b1,b2;void lisan()&#123;    sort(ls+1,ls+1+tot);    tot=unique(ls+1,ls+1+tot)-ls-1;    for(int i=1;i&lt;=m;i++)&#123;        if(q[i].op)&#123;            q[i].s=lower_bound(ls+1,ls+1+tot,q[i].s)-ls;        &#125;else q[i].a=lower_bound(ls+1,ls+1+tot,q[i].a)-ls;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        char op;        int x,y;        cin&gt;&gt;op;        if(op==&#x27;U&#x27;)&#123;            q[i].op=0;            cin&gt;&gt;q[i].k&gt;&gt;q[i].a;            ls[++tot]=q[i].a;        &#125;else&#123;            q[i].op=1;            cin&gt;&gt;q[i].c&gt;&gt;q[i].s;            ls[++tot]=q[i].s;        &#125;    &#125;    lisan();    for(int i=1;i&lt;=m;i++)&#123;        if(q[i].op==0)&#123;            int x=0;            if(x=a[q[i].k])&#123;                b1.update(x,-1);                b2.update(x,-ls[x]);            &#125;            x=a[q[i].k]=q[i].a;            b1.update(x,1);            b2.update(x,ls[q[i].a]);        &#125;else&#123;            int x=b1.query(tot)-b1.query(q[i].s-1);            int sum=q[i].s?b2.query(q[i].s-1):0;            if(sum&gt;=(q[i].c-x)*ls[q[i].s])&#123;                cout&lt;&lt;&quot;TAK\n&quot;;            &#125;else cout&lt;&lt;&quot;NIE\n&quot;;        &#125;    &#125;    return 0;&#125;
 3. 带修主席树
我们总结一下之前学过的：

静态整个序列的 k 小，排序即可。
动态整个序列的 k 小，平衡树或权值线段树即可。
静态区间的 k 小，主席树即可。
动态区间的 k 小？

P2617 Dynamic Rankings

给定一个含有 nnn 个数的序列 a1,a2…ana_1,a_2 \dots a_na1​,a2​…an​，需要支持两种操作：
Q l r k 表示查询下标在区间 [l,r][l,r][l,r] 中的第 kkk 小的数
C x y 表示将 axa_xax​ 改为 yyy
强制在线
1≤n,m≤1051\le n,m \le 10^51≤n,m≤105，1≤l≤r≤n1 \le l \le r \le n1≤l≤r≤n，1≤k≤r−l+11 \le k \le r-l+11≤k≤r−l+1，1≤x≤n1\le x \le n1≤x≤n，0≤ai,y≤1090 \le a_i,y \le 10^90≤ai​,y≤109。

所谓动态，就是多了个单点修改。
我们考虑静态是怎么做的，我们对于每个点以其前缀开权值线段树，任意一个区间可以表示为两个权值线段树作差，即 Rt[R]−Rt[L−1]Rt[R]-Rt[L-1]Rt[R]−Rt[L−1]。
但是如果我们有了修改呢，如果我们还是用之前的做法，我们要对所有区间的前缀都要做一次修改，极端情况下在下表为 1 的位置修改，我们的一次修改是 O(nlog⁡n)O(n\log n)O(nlogn)，实际上就是 O(qnlog⁡n)O(qn\log n)O(qnlogn)。
那怎么办？
我们考虑怎么优化这个前缀修改过程…树状数组？
发现上面的前缀的形式都是 [1,p][1,p][1,p]，这直接树状数组套上去就好了！
这样的话我们修改就能拆成 log⁡n\log nlogn 个区间，这样的化修改的时间复杂度就是 O(log⁡2n)O(\log ^2 n)O(log2n) 。时间复杂度就是 O(qlog⁡2n)O(q\log^2 n)O(qlog2n)。
但是查询的时候有一点变化，相减是肯定和上面是一样的，但是我们这里不再是两个权值线段树作差，而是两个 log⁡n\log nlogn 颗线段树作差，所以我们再跳的时候要跳 log⁡n\log nlogn 个儿子。
代码如下，可以看看查询函数：
#include&lt;bits/stdc++.h&gt;#define lowbit(x) (x&amp;(-x))#define ls t[p].lson#define rs t[p].rsonusing namespace std;const int MN=1e6+15,INF=INT_MAX;int n,m,tot,a[MN],rt[MN],now[MN],past[MN],ncnt,pcnt,LM;vector&lt;int&gt; lsan;struct segtree&#123;    int lson,rson,val;&#125;t[MN*100];struct querynode&#123;    int op,x,y,z;&#125;q[MN];void dolisan()&#123;    sort(lsan.begin(),lsan.end());    LM=unique(lsan.begin(),lsan.end())-lsan.begin();    for(int i=1;i&lt;=n;i++)&#123;        a[i]=lower_bound(lsan.begin(),lsan.begin()+LM,a[i])-lsan.begin();    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(q[i].op==2) q[i].y=lower_bound(lsan.begin(),lsan.begin()+LM,q[i].y)-lsan.begin();    &#125;    //for(int i=1;i&lt;=n;i++)&#123;    //    cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;    //&#125;    //cout&lt;&lt;&#x27;\n&#x27;;&#125;void change(int &amp;p,int l,int r,int pos,int k)&#123;    if(!p) p=++tot;    t[p].val+=k;    if(l==r) return;    int mid=(l+r)&gt;&gt;1;    if(mid&gt;=pos) change(ls,l,mid,pos,k);    else change(rs,mid+1,r,pos,k);&#125;int kth(int l,int r,int k)&#123;    if(l==r) return l;    int sum=0;    for(int i=1;i&lt;=ncnt;i++)&#123;        sum+=t[t[now[i]].lson].val;    &#125;    for(int i=1;i&lt;=pcnt;i++)&#123;        sum-=t[t[past[i]].lson].val;    &#125;    int mid=(l+r)&gt;&gt;1;    if(sum&gt;=k)&#123;        for(int i=1;i&lt;=ncnt;i++)&#123;            now[i]=t[now[i]].lson;        &#125;        for(int i=1;i&lt;=pcnt;i++)&#123;            past[i]=t[past[i]].lson;        &#125;        return kth(l,mid,k);    &#125;else&#123;        for(int i=1;i&lt;=ncnt;i++)&#123;            now[i]=t[now[i]].rson;        &#125;        for(int i=1;i&lt;=pcnt;i++)&#123;            past[i]=t[past[i]].rson;        &#125;        return kth(mid+1,r,k-sum);    &#125;&#125;void build()&#123;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=i;j&lt;=n;j+=lowbit(j))&#123;            change(rt[j],1,LM-1,a[i],1);        &#125;    &#125;&#125;int main()&#123;    lsan.push_back(-INF);    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        lsan.push_back(a[i]);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        char op;        cin&gt;&gt;op;        if(op==&#x27;Q&#x27;)&#123;            q[i].op=1;            cin&gt;&gt;q[i].x&gt;&gt;q[i].y&gt;&gt;q[i].z;        &#125;else&#123;            q[i].op=2;            cin&gt;&gt;q[i].x&gt;&gt;q[i].y;            lsan.push_back(q[i].y);        &#125;    &#125;    dolisan();    build();    for(int i=1;i&lt;=m;i++)&#123;        if(q[i].op==1)&#123;            pcnt=ncnt=0;            for(int j=q[i].x-1;j&gt;0;j-=lowbit(j))&#123;                past[++pcnt]=rt[j];            &#125;            for(int j=q[i].y;j&gt;0;j-=lowbit(j))&#123;                now[++ncnt]=rt[j];            &#125;            cout&lt;&lt;lsan[kth(1,LM-1,q[i].z)]&lt;&lt;&#x27;\n&#x27;;        &#125;else&#123;            for(int j=q[i].x;j&lt;=n;j+=lowbit(j))&#123;                change(rt[j],1,LM-1,a[q[i].x],-1);            &#125;            for(int j=q[i].x;j&lt;=n;j+=lowbit(j))&#123;                change(rt[j],1,LM-1,q[i].y,1);            &#125;            a[q[i].x]=q[i].y;        &#125;    &#125;    return 0;&#125;
练习：动态逆序对。
 4. 后言
树状数组的应用还是有很多很多，这里提了几个进阶应用的例子，之后也会稍加整理，感谢阅读！
参考：

qAlex_Weiq大佬的树状数组进阶

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分</title>
    <url>/posts/7e454910/</url>
    <content><![CDATA[ 0.前言
你需要的必备芝士：

图的存储与遍历。
DFS序。
线段树的基础应用。
LCA的概念与性质。

准备好了？Let’s GO!
 1.重链剖分
什么是树链剖分？他是干什么的？
树链剖分，字面意思就是将树剖成一条一条链，让后我们利用这些链来维护树上路径的信息。
那我们举个例子吧。

nnn 个点的树，有 mmm 次操作，每一次操作将树上 x→yx\rightarrow yx→y 的路径都加 111 的权值 ，求树所有节点的权值之和。

不难发现树上差分。直接差分做一做就可以了，不知道的可以看我的博客。
但是如果我想求路径的值呢？

nnn 个点的树，有 mmm 次操作，每一次操作将树上 x→yx\rightarrow yx→y 的路径都加 111 的权值 。
给定 qqq 次询问，询问最短路径 u→vu\rightarrow vu→v上的权值之和

这个时候问题就不一样了，仅靠差分的话复杂度会炸成 O(nq)O(nq)O(nq)，怎么办？如果这个问题我们不放到树上，我们就是一个数组的操作，很简单对吧，线段树和树状数组都可以轻轻松松的做到，但是放到树上怎么做我们肯定是不会的。接下来我们要介绍树链剖分是如何做到这一点的。

树链剖分，就是把树剖分成若干条链，使其组合成线性结构，让后用数据结构维护链的信息。 ——OI Wiki

说人话就是：把一颗树拆成若干个不相交的链，让后用数据结构维护链的信息。
说到底为什么我们非要拆成链来维护呢？回忆树上差分，差分本质上我们只能在一个线性结构比如说数组上维护，但是放在树上我们不会做。但是我们可以把一条路径在LCA处劈成2半，分别进行拆分，如下图。我们将这颗树的 3→63\rightarrow 63→6的路径都加上 111 。我们拆成了3→2,5→63 \rightarrow 2,5\rightarrow 63→2,5→6，2条线性的链，这样我们进行差分就十分方便了。

让后差分的结果如下：

而对于路径信息的维护也很好说，就像差分拆成链的思想一样，我们也用链来去维护。上文我们提到了如果我们不放到树上就很好做，只需要用线段树来去维护就可以了，问题在于树不是像数组。但是我们可以利用拆链的思想，把它拆成一条一条链，这样不就类似于数组了吗，让后我们维护数组的信息，就可以了。
现在问题在于我们怎么把树拆成一条一条链？而且这个链应该怎么拆才能保证我的复杂度不会炸掉？
我们有2种方法，一种叫重链剖分，一种叫长链剖分。我们先讲重链剖分。
先来几个概念，别怕会有图辅助理解的：

重儿子（hsonhsonhson数组记录）：该节点子树中，节点个数最多的子树的根节点，即为该节点的重儿子。


对于上面的树结构，节点 111 的重儿子就是 222 因为节点个数有4个，而对于节点 222 的重儿子是 555 ，因为有2个比3号点要大。而对于3，6，5号点没有重儿子，因为他们是叶子节点。

重边：连接该节点与它重儿子的边

就像上面，例如1→2,2→51\rightarrow 2,2\rightarrow 51→2,2→5。

重链（toptoptop数组记录顶端）：由一系列重边相连得到的链。特别的，落单的节点也是重链。
轻链：由一系列非重边相连得到的链。

借用OI-Wiki的图：

这样就不难得到拆树的方法。对于每个节点我们只需要找出它的重儿子，让后就可以根据这些信息拆成许多许多链了。
话是这么说但是到底咋求？
我们要分成2次来DFS进行求，我们需要维护如下信息。



名称
变量名
含义
维护方式




子树大小
sizsizsiz
子树节点的数量，用于判断轻重儿子
自底向上统计（第一次DFS）


重儿子
hsonhsonhson
一个节点的重儿子，若无默认为0
用子树大小sizsizsiz计算取siz[v]siz[v]siz[v]最大的vvv（第一次DFS）


节点深度
depdepdep
节点在树的深度
自上向下计算（第一次DFS）


节点的父亲
fafafa
父亲节点
字面意思维护即可（第一次DFS）


重链
toptoptop
一条重链的顶端节点，其中top[u]top[u]top[u]表示uuu号点所在链的顶端
遍历重儿子赋值即可（第二次DFS）


按照链遍历的DFS序
ididid
重链优先遍历的DFS序
字面意思先遍历重边在遍历轻边（第二次DFS）



根据这个表，我们能够很轻松的设计出第一个DFS函数：
void dfs1(int u,int pre)&#123;// u号节点，父亲节点是pre    dep[u]=dep[pre]+1;// 深度    siz[u]=1;// 子树大小    fa[u]=pre;// 父亲    int maxp=-1;//初始化最大sizv为-1    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs1(v,u);        siz[u]+=siz[v];        if(maxp&lt;siz[v])&#123;// 更新hson            maxp=siz[v];            hson[u]=v;        &#125;    &#125;&#125;
而对于第二次的DFS函数，也是很好设计。
void dfs2(int u,int ltop)&#123;    id[u]=++cnt;// 设置id，因为我们优先遍历重链所以是重链优先的dfn序    top[u]=ltop;//节点u所在链的顶端    if(!hson[u]) return;//如果没有重儿子显然叶子节点    dfs2(hson[u],ltop);// 先剖重链    for(auto v:adj[u])&#123;        if(v==fa[u]||v==hson[u]) continue; // 别忘了排除重儿子！        dfs2(v,v);//处理轻链    &#125;&#125;
toptoptop 还好说，为什么要设计 ididid ？别忘了，我们最终是要用线段树等数据结构来进行维护，这样维护的话一条链在 ididid 上是排成一个连续区间（即DFS序是连续的），这样就方便了。
我们建一颗支持区间加的线段树，让后我们考虑怎么维护树上的操作。
回顾上面的图，我们其实对于路径来说就是根据LCA拆成2条链进行操作。
问题来了，怎么求LCA？
一个很显然的想法就是倍增求LCA，但是我跟你说这个也可以同时求出LCA呢？
我们对上面的图进行小小的改编，并进行重链剖分。对于6号点也是可以作为最长重链的终点，不过链不能分叉。

我们不妨借鉴倍增求LCA的思想：2个节点借助fafafa数组跳到同一个节点。对于重链剖分来说，就是在不同重链的节点，我们让他们不断的跳直到处于同一重链（如果一开始就是同一重链，想一想还用跳吗？）。还记得我们求的 toptoptop 数组吗？这个就是替代倍增fafafa的关键。我们直接跳到链的顶端，这样就可以有像倍增跳fafafa一样的效果了！当然和倍增算法一样，我们让dep[top[x]],dep[top[y]]dep[top[x]],dep[top[y]]dep[top[x]],dep[top[y]]中深度大的往上跳。
跳到最后会出现一个情况，虽然x,yx,yx,y在一条链上但不一定重合，此时lcalcalca就是深度小的节点。
不难有lcalcalca函数：
int lca(int x,int y)&#123;    while(top[x]!=top[y])&#123;//如果不在一条链就继续跳        if(dep[top[x]]&lt;dep[top[y]])&#123;// 优先跳深度大的            swap(x,y);        &#125;        x=fa[top[x]];    &#125;    return dep[x]&lt;dep[y]?x:y;// 深度小的即为LCA&#125;
等会，时间复杂度多少？这个我们待会再说。
LCA求完那就都好说，直接LCA维护就可以了。
例如路径加：
void addchain(int x,int y,ll k)&#123;    while(top[x]!=top[y])&#123;        if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);        sg.add(1,id[top[x]],id[x],k);// x跳的过程中我们就要加上权值，顺序不要搞反了。        x=fa[top[x]];    &#125;    if(dep[x]&gt;dep[y]) swap(x,y);    sg.add(1,id[x],id[y],k);    // 处理路径LCA-&gt;y的权值，因为LCA与y已经在一条链上所以可以直接加&#125;
有的人会说，你这个跳LCA的时候会更换x,yx,yx,y，难道不会重复加吗？这种问题的解法可以自己模拟一遍LCA的跳法，看看是否会重复加区间，显然是不会的。
到这里前面2个问题就解决完毕了，但是我还有一个问题。如果我要加子树的权值呢。

给定节点uuu，将uuu的子树内权值都加上wiw_iwi​。特别的，叶子节点的子树就是节点本身。

我们思考一个问题，重链优先遍历在子树内的DFS序是连续的吗？
显然是连续的，这里不再证明。
那么就好说了，直接对[id[x],id[x]+siz[x]−1][id[x],id[x]+siz[x]-1][id[x],id[x]+siz[x]−1]维护即可。减一是因为sizsizsiz包含自己xxx。
void addchild(int x,ll k)&#123; //加    sg.add(1,id[x],id[x]+siz[x]-1,k);&#125;ll querychild(int x)&#123; // 查    return sg.query(1,id[x],id[x]+siz[x]-1)%MOD;&#125;
所以时间复杂度到底是多少？
有一个性质：向下经过一条 轻边 时，所在子树的大小至少会除以二。
这个是根据性质来说的，那么不难发现，我们拆LCA路径的做法只需要最多走O(log⁡n)O(\log n)O(logn)次，树上每条路径最多可以划分成不超过O(log⁡n)O(\log n)O(logn)条重链。
来做题，P3884:

nnn个节点的树，根节点为RRR，树节点有初始权值wiw_iwi​。mmm次操作:
1 x y z，表示将树从 xxx 到 yyy 结点最短路径上所有节点的值都加上 zzz。
2 x y，表示求树从 xxx 到 yyy 结点最短路径上所有节点的值之和。
3 x z，表示将以 xxx 为根节点的子树内所有节点值都加上 zzz。
4 x 表示求以 xxx 为根节点的子树内所有节点值之和。
数据对给定的模数PPP取模。
1≤n,m≤105,1≤R≤n,1≤P≤2301\le n,m \le 10^5,1\le R \le n,1\le P \le 2^{30}1≤n,m≤105,1≤R≤n,1≤P≤230

照着写就可以了。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=5e5+15;int n,m,rt,MOD,cnt,dep[MN],siz[MN],fa[MN],id[MN],hson[MN],top[MN];ll w[MN];vector&lt;int&gt; adj[MN];struct segtree&#123;    #define ls p&lt;&lt;1    #define rs p&lt;&lt;1|1    struct&#123;        int l,r;        ll sum,add;    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].sum=(t[ls].sum+t[rs].sum)%MOD;    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        if(l==r)&#123;            t[p].sum=0;            return;        &#125;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void pushdown(int p)&#123;        if(t[p].add)&#123;            t[ls].sum=(t[ls].sum+(t[ls].r-t[ls].l+1)*t[p].add)%MOD;            t[rs].sum=(t[rs].sum+(t[rs].r-t[rs].l+1)*t[p].add)%MOD;            t[ls].add=(t[ls].add+t[p].add)%MOD;            t[rs].add=(t[rs].add+t[p].add)%MOD;            t[p].add=0;        &#125;    &#125;    void add(int p,int fl,int fr,ll k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            t[p].add=(t[p].add+k)%MOD;            t[p].sum=(t[p].sum+(t[p].r-t[p].l+1)*k)%MOD;            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) add(ls,fl,fr,k);        if(mid&lt;fr) add(rs,fl,fr,k);        pushup(p);    &#125;    ll query(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].sum;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        ll ret=0;        if(mid&gt;=fl) ret=(ret+query(ls,fl,fr))%MOD;        if(mid&lt;fr) ret=(ret+query(rs,fl,fr))%MOD;        return ret;    &#125;    #undef ls    #undef rs&#125;sg;void dfs1(int u,int pre)&#123;    dep[u]=dep[pre]+1;    siz[u]=1;    fa[u]=pre;    int maxp=-1;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs1(v,u);        siz[u]+=siz[v];        if(maxp&lt;siz[v])&#123;            maxp=siz[v];            hson[u]=v;        &#125;    &#125;&#125;void dfs2(int u,int ltop)&#123;    id[u]=++cnt;    top[u]=ltop;    if(w[u]!=0)&#123;        sg.add(1,id[u],id[u],w[u]);    &#125;    if(!hson[u]) return;    dfs2(hson[u],ltop);    for(auto v:adj[u])&#123;        if(v==fa[u]||v==hson[u]) continue;        dfs2(v,v);    &#125;&#125;void addchain(int x,int y,ll k)&#123;    while(top[x]!=top[y])&#123;        if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);        sg.add(1,id[top[x]],id[x],k);        x=fa[top[x]];    &#125;    if(dep[x]&gt;dep[y]) swap(x,y);    sg.add(1,id[x],id[y],k);&#125;ll querychain(int x,int y)&#123;    ll ret=0;    while(top[x]!=top[y])&#123;        if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);        ret=(ret+sg.query(1,id[top[x]],id[x]))%MOD;        x=fa[top[x]];    &#125;    if(dep[x]&gt;dep[y]) swap(x,y);    ret=(ret+sg.query(1,id[x],id[y]))%MOD;    return ret;&#125;void addchild(int x,ll k)&#123;    sg.add(1,id[x],id[x]+siz[x]-1,k);&#125;ll querychild(int x)&#123;    return sg.query(1,id[x],id[x]+siz[x]-1)%MOD;&#125;int main()&#123;    // freopen(&quot;ans.in&quot;,&quot;r&quot;,stdin);    cin&gt;&gt;n&gt;&gt;m&gt;&gt;rt&gt;&gt;MOD;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;w[i];    &#125;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    sg.build(1,1,n);    dfs1(rt,0);    dfs2(rt,rt);    while(m--)&#123;        int op,x,y;        ll z;        cin&gt;&gt;op&gt;&gt;x;        if(op==1)&#123;            cin&gt;&gt;y&gt;&gt;z;            addchain(x,y,z%MOD);        &#125;        if(op==2)&#123;            cin&gt;&gt;y;            cout&lt;&lt;querychain(x,y)%MOD&lt;&lt;&#x27;\n&#x27;;        &#125;        if(op==3)&#123;            cin&gt;&gt;z;            addchild(x,z);        &#125;        if(op==4)&#123;            cout&lt;&lt;querychild(x)%MOD&lt;&lt;&#x27;\n&#x27;;        &#125;    &#125;    return 0;&#125;
 1.1 例题
CF1555F:

有一含 n 个点的带权无向图。
一个简单环被定义为图上一没有重复顶点的环。令这样的一个环的权重为它环上所有边的权值的异或和。
若一个图中全部简单环的权重都是 1 ，那么我们称这个图为好图，而一个图若不是好图，那么这个图则是坏图。
最开始，图是空的。接着会有 q 个询问。每个询问为以下格式：
u v x — 若不会使图变成坏图，则在点 u 与点 v 间加一条权值为 x 的边。
对于每一个询问输出到底加不加这条边。

这个不是图论吗？和树上路径有什么关系？
针对环的问题我们有一个套路就是：离线造生成树。
环用并查集判断联通性。
我们考虑什么边能加进来，第一类就是生成树本来的边是可以加；第二类就是这条非树边加入所构成的环不与其他的任何环相交，并且路径异或和为1即可。
非树边的加入我们可以考虑转化成线段树最大值/和来维护，我们把在环上的边赋值为1，不再的赋值为0，可以加入的条件就是路径上所有边权值都是0，考虑树剖。路径异或和为1考虑树上前缀异或和。
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=5e5+15,MQ=5e5+15;int n,m,cnt,id[MN],sum[MN],hson[MN],pre[MN],top[MN],dep[MN],siz[MN],fa[MN];bool isok[MN];struct qedge&#123;    int u,v,w;&#125;q[MQ];struct edge&#123;    int v,w;&#125;;vector&lt;edge&gt; adj[MN];struct segtree&#123;    #define ls p&lt;&lt;1    #define rs p&lt;&lt;1|1    struct&#123;        int l,r,val,cov;    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].val=max(t[ls].val,t[rs].val);    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        t[p].cov=-1;        if(l==r)&#123;            t[p].val=0;            return;        &#125;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void pushdown(int p)&#123;        if(t[p].cov!=-1)&#123;            t[ls].val=t[ls].cov=t[rs].val=t[rs].cov=t[p].cov;            t[p].cov=-1;        &#125;    &#125;    void update(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            t[p].val=t[p].cov=k;            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) update(ls,fl,fr,k);        if(mid&lt;fr) update(rs,fl,fr,k);        pushup(p);    &#125;    int queryone(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].val;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r&gt;&gt;1);        if(mid&gt;=fl&amp;&amp;queryone(ls,fl,fr)) return 1;        if(mid&lt;fr&amp;&amp;queryone(rs,fl,fr)) return 1;        return 0;    &#125;    #undef ls    #undef rs&#125;sg;void initpre()&#123;    for(int i=1;i&lt;=n;i++) pre[i]=i;&#125;void dfs1(int u,int pree)&#123;    dep[u]=dep[pree]+1;    siz[u]=1;    fa[u]=pree;    int maxp=-1;    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(v==pree) continue;        sum[v]=sum[u]^w;        dfs1(v,u);        siz[u]+=siz[v];        if(maxp&lt;siz[v])&#123;            maxp=siz[v];            hson[u]=v;        &#125;    &#125;&#125;void dfs2(int u,int ltop)&#123;    id[u]=++cnt;    top[u]=ltop;    if(!hson[u]) return;    dfs2(hson[u],ltop);    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(v==hson[u]||v==fa[u]) continue;        dfs2(v,v);    &#125;&#125;int root(int x)&#123;    if(pre[x]==x) return x;    else return pre[x]=root(pre[x]);&#125;int ask(int x,int y)&#123;    while(top[x]!=top[y])&#123;        if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);        if(sg.queryone(1,id[top[x]],id[x])) return 1;        x=fa[top[x]];    &#125;    if(dep[x]&gt;dep[y]) swap(x,y);    if(id[x]+1&lt;=id[y]&amp;&amp;sg.queryone(1,id[x]+1,id[y])) return 1;    return 0;&#125;void modify(int x,int y,int k)&#123;    while(top[x]!=top[y])&#123;        if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);        sg.update(1,id[top[x]],id[x],1);        x=fa[top[x]];    &#125;    if(dep[x]&gt;dep[y]) swap(x,y);    if(id[x]+1&lt;=id[y])sg.update(1,id[x]+1,id[y],k);&#125;int main()&#123;    //freopen(&quot;ans.in&quot;,&quot;r&quot;,stdin);    cin&gt;&gt;n&gt;&gt;m;    sg.build(1,1,MQ);    initpre();    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;q[i].u&gt;&gt;q[i].v&gt;&gt;q[i].w;        int ru=root(q[i].u),rv=root(q[i].v);        if(ru!=rv)&#123;            isok[i]=1;            // cout&lt;&lt;q[i].u&lt;&lt;&quot; &quot;&lt;&lt;q[i].v&lt;&lt;&quot; &quot;&lt;&lt;q[i].w&lt;&lt;&#x27;\n&#x27;;            adj[q[i].u].push_back(&#123;q[i].v,q[i].w&#125;);            adj[q[i].v].push_back(&#123;q[i].u,q[i].w&#125;);            pre[rv]=ru;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(!dep[i])&#123;            dfs1(i,0);            dfs2(i,i);        &#125;    &#125;    //cout&lt;&lt;cnt&lt;&lt;&#x27;\n&#x27;;    for(int i=1;i&lt;=m;i++)&#123;        if(isok[i]) cout&lt;&lt;&quot;YES\n&quot;;        else&#123;            if(!(sum[q[i].u]^sum[q[i].v]^q[i].w)) cout&lt;&lt;&quot;NO\n&quot;;            else&#123;                if(ask(q[i].u,q[i].v))&#123;                    cout&lt;&lt;&quot;NO\n&quot;;                &#125;else&#123;                    modify(q[i].u,q[i].v,1);                    cout&lt;&lt;&quot;YES\n&quot;;                &#125;            &#125;        &#125;    &#125;    return 0;&#125;
 1.2 LCA
根据我们上面说的求就可以了，这里给出一个模板。
时间复杂度预处理O(n)O(n)O(n)，查询O(log⁡n)O(\log n)O(logn)，常数小，代码简单。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=5e5+15;int n,m,s;int hson[MN],dep[MN],top[MN],fa[MN],siz[MN];vector&lt;int&gt; adj[MN];void dfs1(int u,int pre)&#123;    siz[u]=1;    fa[u]=pre;    dep[u]=dep[pre]+1;    int maxp=-1;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs1(v,u);        siz[u]+=siz[v];        if(maxp&lt;siz[v])&#123;            hson[u]=v;            maxp=siz[v];        &#125;    &#125;&#125;void dfs2(int u,int ltop)&#123;    top[u]=ltop;    if(!hson[u]) return;    dfs2(hson[u],ltop);    for(auto v:adj[u])&#123;        if(v==fa[u]||v==hson[u])&#123;            continue;        &#125;        dfs2(v,v);    &#125;&#125;int lca(int x,int y)&#123;    while(top[x]!=top[y])&#123;        if(dep[top[x]]&lt;dep[top[y]])&#123;            swap(x,y);        &#125;        x=fa[top[x]];    &#125;    return dep[x]&lt;dep[y]?x:y;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs1(s,0);    dfs2(s,s);    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        cout&lt;&lt;lca(u,v)&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 2.长链剖分
 2.1 介绍
长链剖分和重链剖分不一样的一点，前者以子树深度最大的儿子为重儿子，而后者以子树大小最大的儿子为重儿子。
举个例子，例如下面这棵树，绿色的边就是长链：

我们定义一个节点和它的长儿子节点相连的边（就是上图绿色的边）为实边，其他为虚边。
以下是代码实现，和重链剖分差不太多：
namespace Tree&#123;    int dep[MN],fa[MN],mxdep[MN],htop[MN],len[MN],hson[MN];    void dfs1(int u,int pre)&#123;        fa[u]=pre;        dep[u]=mxdep[u]=dep[pre]+1;        for(int i=hd[u];i;i=nxt[i])&#123;            int v=to[i];            if(v==pre) continue;            dfs1(v,u);            if(mxdep[u]&lt;mxdep[v]) mxdep[u]=mxdep[v],hson[u]=v;        &#125;        len[u]=mxdep[u]-dep[u]+1;    &#125;    void dfs2(int u,int ltop)&#123;        htop[u]=ltop;        if(!hson[u])&#123;return;&#125;        dfs2(hson[u],ltop);        for(int i=hd[u];i;i=nxt[i])&#123;            int v=to[i];            if(v==fa[u]||v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;&#125;using namespace Tree;
 2.2 长链剖分的性质
长链剖分有如下的性质：

从根节点到任意叶子结点经过的轻边条数不超过 n\sqrt{n}n​，比重链剖分的 log⁡n\log nlogn 有点劣。
一个节点的 kkk 级祖先所在长链长度一定不小于 kkk。
每个节点所在长链末端为其子树内最深节点。
选一个节点能覆盖它到根的所有节点。选 kkk 个节点，覆盖的最多节点数就是前 kkk 条长链长度之和，选择的节点即 kkk 条长链末端。

 2.3 应用
 2.3.1 树上 k 级祖先
首先 O(nlog⁡n)O(n\log n)O(nlogn) 的倍增预处理求出每个节点 uuu 的 2k2^k2k 级祖先，以及对于每一条长链，从长链向上向下 iii 步分别能走到哪个节点，其中 iii 不超过长链深度。此外预处理每个数在二进制下的最高位（即 ⌊log⁡2i⌋\lfloor \log_2 i \rfloor⌊log2​i⌋，不想预处理的可以用 __lg 函数） lgilg_ilgi​。预处理为 O(nlog⁡n)+O(n)+O(n)O(n \log n)+O(n)+O(n)O(nlogn)+O(n)+O(n)。
一次查询 (u,k)(u,k)(u,k)，首先跳到 uuu 的 2lgk2^{lg_k}2lgk​ 级祖先 fafafa，由于我们与处理了从 fafafa 所在长链顶端 ttt 向上/下走不超过链长步分别到哪个节点，故不难直接查询，故查询时间复杂度为 O(1)O(1)O(1)。
#include&lt;bits/stdc++.h&gt;#define ui unsigned intusing namespace std;constexpr int MN=1e6+15;int n,q,rt,hb[MN];ui s;long long ans;vector&lt;int&gt; adj[MN];namespace Tree&#123;    int dep[MN],mxdep[MN],fa[21][MN],hson[MN],htop[MN];    vector&lt;int&gt; up[MN],dw[MN];    void dfs1(int u,int pree)&#123;        dep[u]=mxdep[u]=dep[pree]+1;        fa[0][u]=pree;        for(int i=1;i&lt;=20;i++)&#123;            fa[i][u]=fa[i-1][fa[i-1][u]];        &#125;        for(auto v:adj[u])&#123;            if(v==pree) continue;            dfs1(v,u);            if(mxdep[v]&gt;mxdep[u])&#123;                mxdep[u]=mxdep[v];                hson[u]=v;            &#125;        &#125;    &#125;    void dfs2(int u,int ltop)&#123;        htop[u]=ltop;        if(u==ltop)&#123;            for(int i=0,it=u;i&lt;=mxdep[u]-dep[u];i++)&#123;                up[u].push_back(it),it=fa[0][it];            &#125;            for(int i=0,it=u;i&lt;=mxdep[u]-dep[u];i++)&#123;                dw[u].push_back(it),it=hson[it];            &#125;        &#125;        if(hson[u]) dfs2(hson[u],ltop);        for(auto v:adj[u])&#123;            if(v==fa[0][u]||v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;    int query(int x,int k)&#123;        if(!k) return x;        x=fa[__lg(k)][x];        k-=1&lt;&lt;(__lg(k));        k-=dep[x]-dep[htop[x]];        x=htop[x];        return k&gt;=0?up[x][k]:dw[x][-k];    &#125;&#125;using namespace Tree;ui get(ui x)&#123;	x ^= x &lt;&lt; 13;	x ^= x &gt;&gt; 17;	x ^= x &lt;&lt; 5;	return s = x; &#125;signed main()&#123;    read(n,q,s);    for(int i=1;i&lt;=n;i++)&#123;        int faa;        read(faa);        if(!faa)&#123;            rt=i;            continue;        &#125;        adj[faa].push_back(i);        adj[i].push_back(faa);    &#125;    dfs1(rt,0);    dfs2(rt,rt);    int lst=0;    for(int i=1;i&lt;=q;i++)&#123;        int x,k;        x=(get(s)^lst)%n+1;        k=(get(s)^lst)%dep[x];        lst=query(x,k);        ans^=1ll*i*(lst);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 2.3.2 长链剖分优化 DP
长链剖分的价值主要体现在于能够优化树上有关深度的 DP，如果子树内每个深度仅对应一个信息，我们就可以用长链剖分优化。
一般形式为：f(i,j)f(i,j)f(i,j) 表示以 iii 为根的子树内，深度为 jjj 节点的贡献。
下面以一道例题来看：
CF1009F
先考虑 ddd 怎么求，有一个显然的转移方程：
d(i,j)=∑x∈son(i)d(x,j−1)d(i,j)=\sum_{x\in son(i)} d(x,j-1)
d(i,j)=x∈son(i)∑​d(x,j−1)
初始化 f(i,0)=1f(i,0)=1f(i,0)=1。
然而是 O(n2)O(n^2)O(n2) 的，无法承受，注意到这个信息子树深度有且仅对应顶点个数这一个信息而非具体是哪些顶点，因此子树内深度相同的点等价。考虑长链剖分优化 DP。
具体的，类似于 DSU on Tree，我们直接继承重儿子的答案，让后将所有轻儿子的答案合并过来，因为每个点 uuu 最多合并一次，即合并 uuu 所在重链顶端 toptoptop 的父亲 fafafa 与 ttt 时，uuu 所包含的信息就和 dfad_{fa}dfa​ 在 depu−depfadep_u -dep_{fa}depu​−depfa​ 处的信息融为了一体，相当于点 uuu 直接消失了，时间复杂时优秀的 O(n)O(n)O(n)。
具体实现上，如何继承重儿子的 DP 值，一个解决方案就是用指针申请内存，对于一条重链，共用一个大小为其长度的数组。这同时解决了上述两个问题。实现时需要特别注意开足空间，并弄清转移方向。
另一个方法就是 vector，不过通用性没那么好，这里就不再赘述了。
 2.4 例题
 CF1009F
提交记录
 P4292 重建计划
直接 01 分数规划上来就是一个二分答案，让后将减掉 midmidmid 后问题转化为求一个长度在 [L,U][L,U][L,U] 之间且边权非负的路径。考虑 DP，设 f(i,j)f(i,j)f(i,j) 表示 iii 子树内深度为 jjj 的最大路径权值和，转移是显然的，也容易看出来我们求的是最大值，每一个长度只会贡献唯一一个信息。
考虑长链剖分优化 DP，合并子树的时先遍历轻儿子的答案，这个需要我们求重链的一段区间 dp 值的最大值，若轻儿子对应位置比重儿子更大就修改，所以我们还需要区间单点修改，考虑线段树维护。线段树上我们可以通过给每一个节点赋一个 dfs 序，那么线段树上对应的位置就是 (dfn[x]+j)(dfn[x]+j)(dfn[x]+j)（jjj 为 dp 里面的），时间复杂度 O(nlog⁡2n)O(n \log^2 n)O(nlog2n)
#include&lt;bits/stdc++.h&gt;#define double long double#define int long longusing namespace std;constexpr int MN=1e5+15;constexpr double eps=1e-6;struct Edge&#123;    int v,w;&#125;;int n,L,R;double tmp[MN],V;vector&lt;Edge&gt; adj[MN];struct Segment&#123;#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1    struct Node&#123;        int l,r;        double val;    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].val=max(t[ls].val,t[rs].val);    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        t[p].val=-1e18;        if(l==r) return;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);    &#125;    void modify(int p,int pos,double k)&#123;        if(t[p].l==t[p].r)&#123;            t[p].val=max(t[p].val,k);            return;        &#125;        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=pos) modify(ls,pos,k);        else modify(rs,pos,k);        pushup(p);    &#125;    double query(int p,int fl,int fr)&#123;        if(fl&gt;fr) return -1e18;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].val;        &#125;        int mid=(t[p].l+t[p].r)&gt;&gt;1;        double ret=-1e18;        if(mid&gt;=fl) ret=query(ls,fl,fr);        if(mid&lt;fr) ret=max(ret,query(rs,fl,fr));        return ret;    &#125;#undef ls#undef rs&#125;sg;namespace Tree&#123;    int htop[MN],hson[MN],dep[MN],mxdep[MN],val[MN],len[MN],fa[MN],dfn[MN],dtot;    double dis[MN],ret;    void dfs1(int u,int pre)&#123;        fa[u]=pre;        dep[u]=mxdep[u]=dep[pre]+1;        for(auto e:adj[u])&#123;            int v=e.v,w=e.w;            if(v==pre) continue;            dfs1(v,u);            if(mxdep[u]&lt;mxdep[v])&#123;                mxdep[u]=mxdep[v];                hson[u]=v;                val[v]=w;            &#125;        &#125;        len[u]=mxdep[u]-dep[u];    &#125;    void dfs2(int u,int ltop)&#123;        dfn[u]=++dtot;        if(hson[u]) dfs2(hson[u],ltop);        for(auto e:adj[u])&#123;            int v=e.v,w=e.w;            if(v==fa[u]||v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;    void dfs3(int u,int pre)&#123;        sg.modify(1,dfn[u],dis[u]);        if(hson[u])&#123;            dis[hson[u]]=dis[u]+val[hson[u]]-V;            dfs3(hson[u],u);        &#125;        for(auto e:adj[u])&#123;            int v=e.v,w=e.w;            if(v==fa[u]||v==hson[u]) continue;            dis[v]=dis[u]+e.w-V;            dfs3(v,u);            for(int i=1;i&lt;=len[v]+1;i++)&#123;                tmp[i]=sg.query(1,dfn[v]+i-1,dfn[v]+i-1);            &#125;            for(int i=1;i&lt;=min(len[v]+1,R);i++)&#123;                ret=max(ret,tmp[i]+sg.query(1,dfn[u]+L-i,min(dfn[u]+R-i,dfn[u]+len[u]))-2*dis[u]);            &#125;            for(int i=1;i&lt;=len[v]+1;i++)&#123;                sg.modify(1,dfn[u]+i,tmp[i]);            &#125;        &#125;        ret=max(ret,sg.query(1,dfn[u]+L,min(dfn[u]+R,dfn[u]+len[u]))-dis[u]);    &#125;&#125;using namespace Tree;bool check(double x)&#123;    sg.build(1,1,n);    V=x,ret=-1e18;    dfs3(1,0);    return ret&gt;=0;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;L&gt;&gt;R;    for(int i=1;i&lt;n;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        adj[u].push_back(&#123;v,w&#125;);        adj[v].push_back(&#123;u,w&#125;);    &#125;    dfs1(1,0);    dfs2(1,1);    double l=0,r=1e7;    while(r-l&gt;eps)&#123;        double mid=(l+r)/2;        if(check(mid)) l=mid;        else r=mid;    &#125;    cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;l;    return 0;&#125;
 P5904 HOT-Hotels
手摸样例启示我们在三个点的 LCA 处统计贡献，直接统计的话虽然解决了三个点到 LCA 距离相等的情况，但是没有统计一个点离 LCA 远，另外两个点离 LCA 距离近一点的形态。考虑用 DP 统计答案，设 f(i,j)f(i,j)f(i,j) 表示 iii 子树内，距离为 jjj 的节点个数，让后再来一个转台处理离远一点的信息，设 g(i,j)g(i,j)g(i,j) 表示 iii 子树内来一个长度为 jjj 的链凑成 3 元组的数量。fff 的转移时显然的，而 ggg 不太好从儿子转移过来。
遇到这种不太好从儿子转移到父亲的节点的 DP 我们可以考虑合并儿子和父亲子树的信息。有如下分类讨论：
g(i,j)←∑x,y∈son(u),x≠yf(x,j−1)×f(y,j−1)g(i,j)\leftarrow \sum_{x,y \in son(u),x\neq y} f(x,j-1)\times f(y,j-1)
g(i,j)←x,y∈son(u),x=y∑​f(x,j−1)×f(y,j−1)
g(i,j)←∑x∈son(u)f(x,j−1)g(i,j)\leftarrow \sum_{x\in son(u)} f(x,j-1)
g(i,j)←x∈son(u)∑​f(x,j−1)
统计答案也需要分类讨论：
ans←g(i,0)ans\leftarrow g(i,0)
ans←g(i,0)
ans←∑x,y∈son(u),x≠yf(x,j−1)×g(y,j+1)ans\leftarrow \sum_{x,y \in son(u),x\neq y} f(x,j-1)\times g(y,j+1)
ans←x,y∈son(u),x=y∑​f(x,j−1)×g(y,j+1)
时间复杂度经优化后达到 O(n)O(n)O(n)。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=3e6+15;int n;ll buf[MN],ans,*f[MN],*g[MN],*now;vector&lt;int&gt; adj[MN];namespace Tree&#123;    int dep[MN],mxdep[MN],len[MN],fa[MN],hson[MN];    void dfs1(int u,int pre)&#123;        fa[u]=pre;        dep[u]=mxdep[u]=dep[pre]+1;        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs1(v,u);            if(mxdep[u]&lt;mxdep[v])&#123;                mxdep[u]=mxdep[v];                hson[u]=v;            &#125;        &#125;        len[u]=mxdep[u]-dep[u]+1;    &#125;    void dfs3(int u,int pre)&#123;        if(hson[u])&#123;            f[hson[u]]=f[u]+1;            g[hson[u]]=g[u]-1;            dfs3(hson[u],u);        &#125;        f[u][0]=1;        ans+=g[u][0];        for(auto v:adj[u])&#123;            if(v==pre||v==hson[u]) continue;            f[v]=now;            now+=len[v]&lt;&lt;1;            g[v]=now;            now+=len[v]&lt;&lt;1;            dfs3(v,u);            for(int i=0;i&lt;len[v];i++)&#123;                if(i)&#123;                    ans+=f[u][i-1]*g[v][i];                &#125;                ans+=g[u][i+1]*f[v][i];            &#125;            for(int i=0;i&lt;len[v];i++)&#123;                g[u][i+1]+=f[u][i+1]*f[v][i];                if(i) g[u][i-1]+=g[v][i];                f[u][i+1]+=f[v][i];            &#125;        &#125;    &#125;&#125;using namespace Tree;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs1(1,0);    now=buf;    f[1]=now;    now+=len[1]&lt;&lt;1;    g[1]=now;    now+=len[1]&lt;&lt;1;    dfs3(1,0);    cout&lt;&lt;ans;    return 0;&#125;
 P3441 [POI2006]MET-Subway
形式化题面如下：

给定一棵有 nnn 个节点的无向树和一个整数 kkk，选出最多 kkk 条不分叉的路径（即简单链），使得这些路径覆盖的不同节点数尽可能多。输出最多能覆盖的节点数。

DP 显然不太好，考虑贪心，那么贪心尽量让链长。考虑直径一定作为答案的一部分出现，而剩下的就是直径上的分支，分支跨直径配对成路径。考虑这个如何配对，其实就是不同链的叶子两两配对，考虑以直径一端点为根，长链剖分加排序（链长大到小）取 2L−12L-12L−1 个叶子即可。
实现丑了会卡常，请大家注意常数和空间。
#include&lt;bits/stdc++.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e6+1520;int n,L,rt,ftot,ans;pir lvf[MN];bool vis[MN];int hd[MN],nxt[MN&lt;&lt;1],to[MN&lt;&lt;1],tot;void add(int u,int v)&#123;to[++tot]=v,nxt[tot]=hd[u],hd[u]=tot;&#125;namespace ZJTree&#123;    struct Node&#123;int u,fa,len;&#125;;    int bfs(int st)&#123;        queue&lt;Node&gt; q;        int ans1=-1e9,ans2=1;        q.push(&#123;st,0,0&#125;);        while(!q.empty())&#123;            auto [u,fa,w]=q.front();q.pop();            if(w&gt;ans1) ans1=w,ans2=u;            for(int i=hd[u];i;i=nxt[i])&#123;                int v=to[i];                if(v==fa) continue;                q.push(&#123;v,u,w+1&#125;);            &#125;        &#125;        return ans2;    &#125;&#125;namespace Tree&#123;    int dep[MN],fa[MN],mxdep[MN],htop[MN],len[MN],hson[MN];    void dfs1(int u,int pre)&#123;        fa[u]=pre;        dep[u]=mxdep[u]=dep[pre]+1;        for(int i=hd[u];i;i=nxt[i])&#123;            int v=to[i];            if(v==pre) continue;            dfs1(v,u);            if(mxdep[u]&lt;mxdep[v]) mxdep[u]=mxdep[v],hson[u]=v;        &#125;        len[u]=mxdep[u]-dep[u]+1;    &#125;    void dfs2(int u,int ltop)&#123;        htop[u]=ltop;        if(!hson[u])&#123;lvf[++ftot]=pir(len[htop[u]],u);return;&#125;        dfs2(hson[u],ltop);        for(int i=hd[u];i;i=nxt[i])&#123;            int v=to[i];            if(v==fa[u]||v==hson[u]) continue;            dfs2(v,v);        &#125;    &#125;&#125;using namespace Tree;bool cmp(pir x,pir y)&#123;return x.first&gt;y.first;&#125;int main()&#123;    read(n,L);    for(int i=1,u,v;i&lt;n;i++) read(u,v),add(u,v),add(v,u);    rt=ZJTree::bfs(1);    dfs1(rt,0);    dfs2(rt,rt);    sort(lvf+1,lvf+1+ftot,cmp);    for(int i=1;i&lt;=(L&lt;&lt;1)-1;i++)&#123;        if(i==1) vis[rt]=1,ans+=len[rt];        else&#123;            int p=lvf[i].second;            while(!vis[htop[p]]) vis[htop[p]]=1,ans+=len[htop[p]],p=fa[htop[p]];        &#125;    &#125;    put(ans);    return 0;&#125;
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>根号分治</title>
    <url>/posts/6889ca89/</url>
    <content><![CDATA[ 1. 介绍与引入
没有前言，懒得写了。
根号分治，本质是平衡规划思想（大纲 9 级），在预处理和询问复杂度中寻找平衡，我们通常用根号作为问题规模的分界线。我们确定一个界限 BBB，小于 BBB 的暴力预处理，大于的回答一次时间只需要 nB≤n\dfrac{n}{B}\le \sqrt{n}Bn​≤n​ ，那么整个题目就可以做到 O(nn)O(n \sqrt{n})O(nn​)。
根号平衡思想，是平衡规划思想中重要的内容，例如空间平衡，时间平衡，根号滚动数组，都可以用这种思想。
我们以一道例题引入：CF797E Array Queries
这种操作我们发现没有什么很好的性质来维护，因为 apa_{p}ap​ 和变化的 ppp 是有关的。这两个关系是相互制约的，如果我们只关注一个肯定是不行的。怎么办？
首先我们先想暴力，我们有两种想法：

预处理所有 p,kp,kp,k 的答案。
暴力模拟。

第一个虽然可以 O(1)O(1)O(1) 回答但是预处理时间空间复杂度 O(nk)O(nk)O(nk) 无法承受，而暴力算法时间复杂度一次是 O(nk)O(\dfrac{n}{k})O(kn​)，是无法承受的。
我们怎么平衡这一算法呢，通过基本不等式 k+nk≥2b×nk=2nk+\dfrac{n}{k}\ge 2\sqrt{b\times \dfrac{n}{k}}=2\sqrt{n}k+kn​≥2b×kn​​=2n​， 当 k=nk=\sqrt{n}k=n​ 是取等号。也就是我们当 k≤nk\le \sqrt{n}k≤n​，我们可以使用预处理的答案，空间是 O(nn)O(n\sqrt{n})O(nn​)，而 k&gt;nk&gt;\sqrt{n}k&gt;n​ 的时候我们暴力模拟即可。故时间空间复杂度为 O(nn)O(n\sqrt{n})O(nn​)。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e5+15,MB=300;int n,m,a[MN],f[MB+15][MN];int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=1;i&lt;=MB;i++)&#123;        for(int j=n;j&gt;=1;j--)&#123;            f[i][j]=(j+a[j]+i&gt;n)?1:f[i][j+a[j]+i]+1;        &#125;    &#125;    cin&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int p,k,ans=0;        cin&gt;&gt;p&gt;&gt;k;        if(k&gt;=MB)&#123;            while(p&lt;=n)&#123;                ans++;                p+=a[p]+k;            &#125;        &#125;else ans=f[k][p];        cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
我们简单回顾一下这道题，我们通过将两种看似暴力的算法结合起来，形成了一个时间复杂度为 O(nn)O(n\sqrt{n})O(nn​) 的高效的算法，相互制约的关系我们很难用常规的数据结构进行处理，因为只关心一个的话另一个就会制约你的复杂度。这个时候我们利用平衡规划思想，我们通过制约关系设计出两种算法：O(nk)O(nk)O(nk) 与 O(n2k)O(\dfrac{n^2}{k})O(kn2​) 的算法，但是我们通过基本不等式算出分界点，通过这个分界点来进行所谓的 “分治”，数据小的跑预处理，大的进行暴力。
这一类思想，就是根号分治的思想，平衡规划。而一般制约关系，或同时涉及两个集合的关系，如果没有特殊性质，基本不能 polylog\text{polylog}polylog 去做，但是我们通过根号分治就可以做。
接下来我们来看几道例题：
 2. 例题
 CF1039D You Are Given a Tree
先考虑 O(n2)O(n^2)O(n2) 的情况下怎么做，也就是说我们枚举 kkk，让后一次查询必须是 O(n)O(n)O(n)。有一个想法就是暴力贪心，从叶子向根合并，搜到长为 kkk 的链直接取，证明考虑反证法即可。
让后考虑如何优化，由样例手摸不难发现几个特性：

答案随 kkk 的增大单调不升。
答案不超过 ⌊nk⌋\lfloor \dfrac{n}{k} \rfloor⌊kn​⌋。

答案不超过 ⌊nk⌋\lfloor \dfrac{n}{k} \rfloor⌊kn​⌋？那么我们能不能从这里下手呢？由基本不等式可以得到答案不超过 2n2\sqrt{n}2n​，不难想到 2n&lt;n2\sqrt{n}&lt; n2n​&lt;n，那么也就是说答案是重复的，进一步推广，当 k&gt;nk&gt;\sqrt{n}k&gt;n​ 的时候答案取值是很少的，而 k≤nk\le \sqrt{n}k≤n​ 的答案取值是较多的。哎，一会多，一会少，平衡规划？出动！我们对 k≤nk\le \sqrt{n}k≤n​ 直接做是 O(nn)O(n\sqrt{n})O(nn​)。考虑 k&gt;nk&gt;\sqrt{n}k&gt;n​ 的答案是连续是连续的一段，并且答案具有优秀的单调不升的特性，我们可以通过二分找出下一个答案取值的区间，我们只需要跑 O(n)O(\sqrt{n})O(n​) 次就可以了，时间复杂度是 O(nnlog⁡n)O(n\sqrt{n} \log n)O(nn​logn)。
你说得对，但是我学过基本不等式，上面的操作都是假设块长为 n\sqrt{n}n​，我们考虑基本不等式，设分治阈值为 BBB，那么第一块是 nBnBnB，第二块是 n2log⁡nB\dfrac{n^2 \log n}{B}Bn2logn​，由基本不等式有 B=nlog⁡nB=\sqrt{n\log n}B=nlogn​ 时取最优时间。
代码如下：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,bl,fa[MN],ans[MN],f[MN],dfn[MN],dtot;vector&lt;int&gt; adj[MN];void dfs(int u,int pre)&#123;    fa[u]=pre;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs(v,u);    &#125;    dfn[++dtot]=u;&#125;int solve(int k)&#123;    int ret=0;    for(int i=1;i&lt;=n;i++) f[i]=1;    for(int i=1;i&lt;=n;i++)&#123;        int u=dfn[i],pre=fa[u];        if(pre&amp;&amp;f[u]!=-1&amp;&amp;f[pre]!=-1)&#123;            if(f[u]+f[pre]&gt;=k)&#123;                ret++;                f[pre]=-1;            &#125;else f[pre]=max(f[pre],f[u]+1);        &#125;    &#125;    return ret;&#125;int main()&#123;    cin&gt;&gt;n;    bl=sqrt(n*__lg(n));    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    dfs(1,0);    ans[1]=n;    for(int i=2;i&lt;=bl;i++)&#123;        ans[i]=solve(i);    &#125;    for(int i=bl+1;i&lt;=n;i++)&#123;        int tmp=solve(i);        int l=i,r=n,cnt=i;        while(l+1&lt;r)&#123;            int mid=(l+r)&gt;&gt;1;            if(solve(mid)==tmp)&#123;                cnt=max(cnt,mid);                l=mid;            &#125;else r=mid;        &#125;        for(;i&lt;=cnt;i++) ans[i]=tmp;        i--;    &#125;    for(int i=1;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 [IOI2009] Regions
完蛋啦，又是制约关系，同时涉及两个集合的关系，并且颜色点数与总颜色数相互制约如果我们都考虑显然是不行的。根据我们前面提到的，我们考虑一下根号分治如何去做。
有两个暴力的想法：

分别枚举两个颜色中所有点，利用 DFN 判定是不是在子树内。
将一个颜色所有点加入数据结构，让后枚举另一个颜色所有点，看有多少点在当前子树。

第一个想法时间复杂度 O(n2)O(n^2)O(n2)，第二个空间复杂度时 O(n2)O(n^2)O(n2) 但是时间很好。并且我们前面提到了制约关系，考虑根号分治，我们确定一个阈值 BBB，颜色点数 &gt;B&gt;B&gt;B 的我们称之为重颜色，而 ≤B\le B≤B 的我们称之为轻颜色（对应重儿子和轻儿子 www），考虑分类讨论。

重颜色作为祖先节点：考虑预处理答案，时间复杂度容易做到 O(nnlog⁡n)O(n\sqrt{n \log n})O(nnlogn​)，空间 O(nn)O(n\sqrt{n})O(nn​)。
轻颜色作为祖先节点：枚举轻颜色所有点，考虑对于每一个颜色开 vector 按 DFN 将所有点排序，根据 DFN 顺序判断是否在子树即可，利用二分找边界即可。时间复杂度 O(nnlog⁡n)O(n\sqrt{n \log n})O(nnlogn​)。

故总时间复杂度 O(nnlog⁡n)O(n\sqrt{n \log n})O(nnlogn​)，空间复杂度 O(nn)O(n\sqrt{n})O(nn​)。
至于为什么我用 DFN，答案是因为一开始我想的虚树，这和我说的加数据结构其实差不太多，因为虚树本身也算一种数据结构吗 www。当然每一次建虚树不如用 DFN 好写啦。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e5+15,ML=30,MK=2.5e4+15;int n,r,q,ccnt[MN],fid[MN],id[MN],cf[MN],MB;int ans[520][MK];vector&lt;int&gt; adj[MN],col[MN],dcol[MN];namespace Tree&#123;    int dfn[MN],siz[MN],dtot;    void dfs(int u,int pre)&#123;        dfn[u]=++dtot;        siz[u]=1;        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs(v,u);            siz[u]+=siz[v];        &#125;    &#125;    int cmpdfn(int x,int y)&#123;        return dfn[x]&lt;dfn[y];    &#125;&#125;using namespace Tree;bool cmp(int x,int y)&#123;    return ccnt[x]&gt;ccnt[y];&#125;signed main()&#123;    ios::sync_with_stdio(0);    cin&gt;&gt;n&gt;&gt;r&gt;&gt;q;    MB=sqrt(n*__lg(n)*2);    for(int i=1;i&lt;=n;i++)&#123;        int fa,color;        if(i!=1)&#123;            cin&gt;&gt;fa;            adj[fa].push_back(i);        &#125;        cin&gt;&gt;color;        col[color].push_back(i);        ccnt[color]++;    &#125;    for(int i=1;i&lt;=r;i++) id[i]=i;    sort(id+1,id+1+r,cmp);    dfs(1,0);    for(int i=1;i&lt;=r;i++)&#123;        fid[id[i]]=i;        for(auto p:col[i]) dcol[i].push_back(dfn[p]);        sort(dcol[i].begin(),dcol[i].end());    &#125;    for(int i=1;i&lt;=r&amp;&amp;ccnt[id[i]]&gt;=MB;i++)&#123;        for(int i=1;i&lt;=n+1;i++) cf[i]=0;        for(auto p:col[id[i]])&#123;            cf[dfn[p]]++;            cf[dfn[p]+siz[p]]--;        &#125;        for(int i=1;i&lt;=n+1;i++)&#123;            cf[i]+=cf[i-1];        &#125;        for(int j=1;j&lt;=r;j++)&#123;            for(auto p:col[j])&#123;                ans[i][j]+=cf[dfn[p]];            &#125;        &#125;    &#125;    while(q--)&#123;        int x,y;        cin&gt;&gt;x&gt;&gt;y;        if(ccnt[x]&lt;MB)&#123;            long long ret=0;            for(auto p:col[x])&#123;                ret+=upper_bound(dcol[y].begin(),dcol[y].end(),dfn[p]+siz[p]-1)-lower_bound(dcol[y].begin(),dcol[y].end(),dfn[p]);            &#125;            cout&lt;&lt;ret&lt;&lt;endl;        &#125;else cout&lt;&lt;ans[fid[x]][y]&lt;&lt;endl;    &#125;        return 0;&#125;
 [JRKSJ R2] 你的名字
这种复杂的取模操作，我们一般会利用根号分治来解决这一类问题。
模数不是给定的，这种情况下很难搞，因为我们直接维护模数不固定的数据时很难搞的。
首先，静态区间询问考虑莫队，注意到给出了一个 k&gt;103k&gt;10^3k&gt;103 的包。考虑在 kkk 很大的情况下取模所构成的循环节长度很长，并且值域只有 10510^5105，我们可以通过利用 bitset 来暴力跑循环节，时间复杂度为 O(nm+maω+mak)O(n\sqrt{m}+\dfrac{ma}{\omega}+\dfrac{ma}{k})O(nm​+ωma​+kma​)，实现用 find_first 可以偷懒循环节。
但是 kkk 很小不能这么做，但是我们发现 kkk 很小的时候是一个取模数列的 RMQ 啊，可以暴力预处理 kkk 做四毛子（用传统 ST 表会炸杠）。
但是过不了，考虑若 kkk 的询问数量很小，我们还不如和 k≥Bk\ge Bk≥B 的询问一起处理，这样省下暴力计算的时间。我们可以通过确定一些平衡因子让其自适应数据，这样就能卡过了 www，具体如何操作可以看 meyi 的题解。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=3e5+15,MB=1e5+15;struct Query&#123;    int l,r,K,id;&#125;;int n,m,bl,a[MN],b[MN],ans[MN],cnt[MN];bitset&lt;MB&gt; f;vector&lt;Query&gt; qry[MN];namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;bool mdcmp(Query x,Query y)&#123;    if(x.l/bl==y.l/bl)&#123;        if((x.l/bl)&amp;1) return x.r&lt;y.r;        return x.r&gt;y.r;    &#125;    return x.l/bl&lt;y.l/bl;&#125;signed main()&#123;    read(n,m);    for(int i=1;i&lt;=n;i++)&#123;        read(a[i]);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int l,r,k;        read(l,r,k);        qry[k].push_back(&#123;l,r,k,i&#125;);    &#125;    for(int i=2;i&lt;MN;i++)&#123;        if(qry[i].empty()) continue;        if(min(MB/i,MB&gt;&gt;6)*qry[i].size()&lt;(n&lt;&lt;2))&#123;            qry[0].insert(qry[0].end(),qry[i].begin(),qry[i].end());            continue;        &#125;        bl=n/sqrt(qry[i].size()+1)+1;        for(int j=1;j&lt;=n;j++)&#123;            b[j]=a[j]%i;        &#125;        sort(qry[i].begin(),qry[i].end(),mdcmp);        int l=1,r=0;        for(auto p:qry[i])&#123;			while(l&gt;p.l) (!cnt[b[--l]]++)&amp;&amp;(f[b[l]]=1);			while(r&lt;p.r) (!cnt[b[++r]]++)&amp;&amp;(f[b[r]]=1);			while(l&lt;p.l) (!--cnt[b[l]])&amp;&amp;(f[b[l]]=0),++l;			while(r&gt;p.r) (!--cnt[b[r]])&amp;&amp;(f[b[r]]=0),--r;            for(int k=0;k&lt;i;k++)&#123;                if(f[k])&#123;                    ans[p.id]=k;                    break;                &#125;            &#125;        &#125;        f.reset();        memset(cnt,0,sizeof(cnt));    &#125;    if(!qry[0].empty())&#123;        bl=n/sqrt(qry[0].size()+1)+1;        sort(qry[0].begin(),qry[0].end(),mdcmp);        int l=1,r=0;        for(auto p:qry[0])&#123;			while(l&gt;p.l) (!cnt[a[--l]]++)&amp;&amp;(f[a[l]]=1);			while(r&lt;p.r) (!cnt[a[++r]]++)&amp;&amp;(f[a[r]]=1);			while(l&lt;p.l) (!--cnt[a[l]])&amp;&amp;(f[a[l]]=0),++l;			while(r&gt;p.r) (!--cnt[a[r]])&amp;&amp;(f[a[r]]=0),--r;            ans[p.id]=1e9;			for(int k=f._Find_first(); ans[p.id]&amp;&amp;k!=f.size(); k=(k/p.K+1)*p.K-1&gt;=f.size()?f.size():f._Find_next((k/p.K+1)*p.K-1)) 				(ans[p.id]&gt;k%p.K)&amp;&amp;(ans[p.id]=k%p.K);        &#125;    &#125;    for(int i=1;i&lt;=m;i++) put(ans[i]);    return 0;&#125;
 [Ynoi2008] rplexq
我们要求的值就是 xxx 子树内 [l,r][l,r][l,r] 点个数的平法减去每个儿子子树内 [l,r][l,r][l,r] 点个数的平方，让后整体除二，即子树两两配对即可。
但是暴力做是 O(n2)O(n^2)O(n2) 的，无法接受，考虑如何优化，注意到瓶颈在枚举儿子的子树。我们从儿子下手，根号分治，对于每个节点按照儿子格式分成 &gt;n&gt;\sqrt{n}&gt;n​ 和 ≤n\le \sqrt{n}≤n​ 两组。
小于 n\sqrt{n}n​ 的我们可以把区间拆成二维数点来动态加点进行维护，这样的点数是 O(n)O(n)O(n) 个，询问时 O(mn)O(m\sqrt{n})O(mn​)，考虑复杂度平衡，我们可以利用分块前缀和的方式进行维护，单点修改时 O(n)O(\sqrt{n})O(n​)，而查询 O(1)O(1)O(1)。时间复杂度 O((n+m)n)O((n+m)\sqrt{n})O((n+m)n​)，但空间是 O(mn)O(m\sqrt{n})O(mn​) 的。注意到同一个点上每个询问的询问区间相同，我们 O(n)O(n)O(n) 的存下每个子树区间扫描线，扫描到一点 xxx 在将询问进行二维数点。
而大于 n\sqrt{n}n​ 这么做直接复杂度螺旋式爆炸上天，考虑涉及另一个算法，我们发现在一个区间的点可以类比于颜色，那么问题就是统计 [l,r][l,r][l,r] 编号内的颜色平方和，考虑对每一个点建立离散化莫队，时间复杂度 O(nm)O(n\sqrt{m})O(nm​)，最终时间复杂度可以平衡到 O(nn+nm+qn)O(n\sqrt{n}+n\sqrt{m}+q\sqrt{n})O(nn​+nm​+qn​)。
但是可怕的是我没卡过，54 pt 代码如下：
#include&lt;bits/stdc++.h&gt;#define ll long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e5+100,MB=100,MBL=500;struct Query&#123;    int l,r,id;    ll op;&#125;tqry[MN];int n,m,rt,R[MN],tmp[MN],dg[MN],pos[MN],bl;ll ans1,ans2,ans3[MN],sum[MN],cnt[MN],ans[MN];bool vis[MN];vector&lt;int&gt; adj[MN];vector&lt;Query&gt; qry[MN];namespace Tree&#123;    int siz[MN],fa[MN],dfn[MN],dtot;    pir a[MN];        void dfs1(int u,int pre)&#123;        siz[u]=1;        fa[u]=pre;        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs1(v,u);            siz[u]+=siz[v];        &#125;    &#125;    void dfs2(int u,int pre)&#123;        dfn[++dtot]=u;        a[dtot]=pir(u,pre);        for(auto v:adj[u])&#123;            if(v==pre) continue;            dfs2(v,u);        &#125;    &#125;&#125;using namespace Tree;bool cmpsiz(int x,int y)&#123;    return siz[x]&gt;siz[y];&#125;bool cmpmd(Query x,Query y)&#123;    if(pos[x.l]!=pos[y.l]) return pos[x.l]&lt;pos[y.l];    return (pos[x.l]&amp;1)?x.r&lt;y.r:x.r&gt;y.r;&#125;void add(int x,ll op)&#123;    ans1+=1ll*1+cnt[x]*2*op;    cnt[x]+=op;    ans2+=op;&#125;ll query(int x)&#123;    return (x?(R[x]==x?sum[pos[x]]:sum[pos[x]-1]+cnt[x]):0);&#125;void update(int x)&#123;    for(int i=pos[x];i&lt;=pos[n];i++)&#123;        sum[i]++;    &#125;    for(int i=x;i&lt;=R[x];i++) cnt[i]++;&#125;void solve1(int x)&#123;    if(qry[x].empty()) return;    int tmptot=0;    for(auto v:adj[x])&#123;        if(v==fa[x]) continue;        tmp[++tmptot]=v;    &#125;    sort(tmp+1,tmp+1+tmptot,cmpsiz);    dtot=0;    for(int i=MB+1;i&lt;=tmptot;i++)&#123;        dfs2(tmp[i],tmp[i]);        vis[tmp[i]]=1;    &#125;    sort(a+1,a+1+dtot);    sort(dfn+1,dfn+1+dtot);    for(int i=0;i&lt;qry[x].size();i++)&#123;        int ql=lower_bound(dfn+1,dfn+1+dtot,qry[x][i].l)-dfn;        int qr=upper_bound(dfn+1,dfn+1+dtot,qry[x][i].r)-dfn-1;        tqry[i+1]=&#123;ql,qr,qry[x][i].id&#125;;    &#125;    int l=1,r=0,bl=dtot/sqrt(qry[x].size())+1;    for(int i=1;i&lt;=dtot;i++)&#123;        pos[i]=(i+bl-1)/bl;    &#125;    sort(tqry+1,tqry+1+qry[x].size(),cmpmd);    ans1=ans2=0;    for(int i=1;i&lt;=qry[x].size();i++)&#123;        if(tqry[i].l&gt;dtot||tqry[i].r&lt;1) continue;        while(l&lt;tqry[i].l) add(a[l++].second,-1);        while(l&gt;tqry[i].l) add(a[--l].second,1);        while(r&lt;tqry[i].r) add(a[++r].second,1);        while(r&gt;tqry[i].r) add(a[r--].second,-1);        ans[tqry[i].id]-=ans1;        ans3[tqry[i].id]+=ans2;    &#125;&#125;void solve2(int x)&#123;    if(!vis[x]&amp;&amp;fa[x]&amp;&amp;!qry[fa[x]].empty())&#123;        for(int i=0;i&lt;qry[fa[x]].size();i++)&#123;            qry[fa[x]][i].op=query(qry[fa[x]][i].r)-query(qry[fa[x]][i].l-1);        &#125;    &#125;    update(x);    for(auto v:adj[x])&#123;        if(v==fa[x]) continue;        solve2(v);    &#125;    if(!vis[x]&amp;&amp;fa[x]&amp;&amp;!qry[fa[x]].empty())&#123;        for(int i=0;i&lt;qry[fa[x]].size();i++)&#123;            ll qwq=query(qry[fa[x]][i].r)-query(qry[fa[x]][i].l-1)-qry[fa[x]][i].op;            ans[qry[fa[x]][i].id]-=qwq*qwq;            ans3[qry[fa[x]][i].id]+=qwq;        &#125;    &#125;    for(int i=0;i&lt;qry[x].size();i++)&#123;        if(qry[x][i].l&lt;=x&amp;&amp;x&lt;=qry[x][i].r)&#123;            ans[qry[x][i].id]+=ans3[qry[x][i].id]*2;        &#125;    &#125;&#125;signed main()&#123;    read(n,m,rt);    for(int i=1;i&lt;n;i++)&#123;        int u,v;        read(u,v);        adj[u].push_back(v);        adj[v].push_back(u);        dg[u]++,dg[v]++;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int l,r,x;        read(l,r,x);        qry[x].push_back(&#123;l,r,i,0&#125;);    &#125;    dfs1(rt,0);    for(int i=1;i&lt;=n;i++)&#123;        if(i!=rt) dg[i]--;        if(dg[i]&gt;MB)&#123;            solve1(i);        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        pos[i]=(i+MBL-1)/MBL;        R[i]=min(n,pos[i]*MBL);    &#125;    memset(cnt,0,sizeof(cnt));    solve2(rt);    for(int i=1;i&lt;=m;i++)&#123;        put(((ans3[i]*ans3[i]+ans[i])&gt;&gt;1));    &#125;    return 0;&#125;
 P3591 [POI 2015] ODW
序列跳跃问题可以直接对后继的距离根号分治的。
一个显然的想法就是类似于倍增二分去模拟在树上走路（即倍增求树上 kkk 级祖先，也可以长链剖分做），但是这在 kkk 很大的情况下时可以的，但是 kkk 很小的情况是做不到的。具体来说，步数接近于 nk\dfrac{n}{k}kn​ 的范围附近。坏了又是 nk\dfrac{n}{k}kn​，我们考虑根号分治，设定阈值 BBB，&gt;B&gt;B&gt;B 当然就是我们树上 kkk 级祖先暴力跳，时间复杂度 O(nn)O(n\sqrt{n})O(nn​)。当 k≤Bk\le Bk≤B 的时候我们可以考虑暴力处理 sum(i,j)sum(i,j)sum(i,j) 表示 iii 往上每 jjj 级走一步的答案，查询可以树上差分即可。
时间复杂度 O(nnlog⁡n)O(n\sqrt{n} \log n)O(nn​logn)，预处理 O(nn)O(n\sqrt{n})O(nn​)。利用长链剖分可以做到 O(nlog⁡n+nn)O(n\log n+n\sqrt{n})O(nlogn+nn​)。
但是我写这篇文章的时候我还不会长链剖分？
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=5e4+15,MB=250;int n,a[MN],b[MN],c[MN],sum[MN],s[MB+5][MN],fa[32][MN],dep[MN];vector&lt;int&gt; adj[MN];void dfs1(int u,int pre)&#123;    dep[u]=dep[pre]+1;    fa[0][u]=pre;    sum[u]=sum[pre]+a[u];    for(int i=1;i&lt;=30;i++)&#123;        fa[i][u]=fa[i-1][fa[i-1][u]];    &#125;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs1(v,u);    &#125;&#125;void dfs2(int u,int pre)&#123;    int p=pre;    for(int i=2;i&lt;=MB;i++)&#123;        p=fa[0][p];        if(p==0) break;        s[i][u]=s[i][p]+a[u];    &#125;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs2(v,u);    &#125;&#125;int lca(int x,int y)&#123;    if(dep[x]&gt;dep[y])&#123;        swap(x,y);    &#125;    for(int i=30;i&gt;=0;i--)&#123;        if(fa[i][y]&amp;&amp;dep[fa[i][y]]&gt;=dep[x]) y=fa[i][y];    &#125;    if(x==y) return x;    for(int i=30;i&gt;=0;i--)&#123;        if(fa[i][x]!=fa[i][y])&#123;            x=fa[i][x],y=fa[i][y];        &#125;    &#125;    return fa[0][x];&#125;int getfa(int x,int k)&#123;    for(int i=30;i&gt;=0;i--)&#123;        if((k&gt;&gt;i)&amp;1) x=fa[i][x];    &#125;    return x;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;b[i];    &#125;    for(int i=1;i&lt;n;i++) cin&gt;&gt;c[i];    dfs1(1,0);    dfs2(1,0);    for(int i=1;i&lt;n;i++)&#123;        int u=b[i],v=b[i+1],k=c[i];        int lcaa=lca(u,v);        if(k==1)&#123;            cout&lt;&lt;sum[u]+sum[v]-sum[lcaa]-sum[fa[0][lcaa]]&lt;&lt;&#x27;\n&#x27;;        &#125;        else if(k&lt;=MB)&#123;            int ans=s[k][u],dis=(dep[u]-dep[lcaa])%k;            if(dis==0) dis=k;            for(int i=30;i&gt;=0;i--)&#123;                if(fa[i][u]&amp;&amp;dep[fa[i][u]]-dep[lcaa]&gt;=dis) u=fa[i][u];            &#125;            ans+=a[u]-s[k][u];            if(dep[u]+dep[v]-(dep[lcaa]&lt;&lt;1)&gt;=k)&#123;                dis=k-dep[u]+dep[lcaa];                u=v;                for(int i=30;i&gt;=0;i--)&#123;                    if(fa[i][u]&amp;&amp;dep[fa[i][u]]-dep[lcaa]&gt;=dis) u=fa[i][u];                &#125;                dis=(dep[v]-dep[u])%k;                if(dis!=0) ans+=a[v];                v=getfa(v,dis);                ans+=s[k][v]-s[k][u]+a[u];            &#125;else ans+=a[v];            cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;        &#125;else&#123;            int ans=0;            while(dep[u]-dep[lcaa]&gt;k)&#123;                ans+=a[u];                u=getfa(u,k);            &#125;            ans+=a[u];            if(dep[u]+dep[v]-(dep[lcaa]&lt;&lt;1)&gt;=k)&#123;                int dis=k-dep[u]+dep[lcaa];                u=v;                for(int i=30;i&gt;=0;i--)&#123;                    if(fa[i][u]&amp;&amp;dep[fa[i][u]]-dep[lcaa]&gt;=dis) u=fa[i][u];                &#125;                dis=(dep[v]-dep[u])%k;                if(dis!=0) ans+=a[v];                v=getfa(v,dis);                while(dep[v]-dep[u]&gt;=k)&#123;                    ans+=a[v];                    v=getfa(v,k);                &#125;                ans+=a[v];            &#125;else ans+=a[v];            cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;        &#125;    &#125;    return 0;&#125;
 [Ynoi2011] 初始化
如果你看了论文的话，这个就是第一题的双倍经验。
大多数的数据结构都适合连续区间的询问，但是不擅长这种间隔离散的询问，步数与项数相互制约关系，我们考虑根号分治，设定一个阈值 BBB，对于 &gt;B&gt;B&gt;B 的想法当然是暴力处理啦，但是 ≤B\le B≤B 很难受。
分析性质，我们每一次修改都是对整个序列进行修改，对于 x,yx,yx,y 相同的修改我们可以累加贡献，但是我们查询要对所有 xxx 的都进行一次查询，我们要做到单次 O(1)O(1)O(1)。考虑我们维护每个 x,yx,yx,y 的前缀后缀和，我们一次询问相当于把序列按 xxx 分块，我们借用 YLWang 的 P5309 题解的图片：

那么之间完整段会被所有含 xxx 的操作修改，而两端会被部分修改，询问同理，我们利用前面提到的前缀后缀即可快速维护即可。
#include&lt;bits/stdc++.h&gt;#define pos(x) ((x-1)/BL+1)using namespace std;constexpr int MN=2e5+5,MOD=1e9+7,BL=128;int n,m,bl,a[MN],sum[MN],L[MN],R[MN],pre[BL+15][BL+15],suf[BL+15][BL+15];inline void upd(int &amp;x)&#123;x+=x&gt;&gt;31&amp;MOD;&#125;void init()&#123;    bl=(n-1)/BL+1;    for(int i=1;i&lt;=bl;i++)&#123;        L[i]=(i-1)*BL+1;        R[i]=i*BL;    &#125;    R[bl]=n;    for(int i=1;i&lt;=bl;i++)&#123;        sum[i]=0;        for(int j=L[i];j&lt;=R[i];j++)&#123;            sum[i]+=a[j];            upd(sum[i]-=MOD);        &#125;    &#125;&#125;int query(int l,int r)&#123;    int ql=pos(l),qr=pos(r),ret=0;    if(ql==qr)&#123;        for(int i=l;i&lt;=r;i++)&#123;ret+=a[i];upd(ret-=MOD);&#125;        return ret;    &#125;    for(int i=l;i&lt;=R[ql];i++)&#123;ret+=a[i];upd(ret-=MOD);&#125;    for(int i=ql+1;i&lt;qr;i++)&#123;ret+=sum[i];upd(ret-=MOD);&#125;    for(int i=L[qr];i&lt;=r;i++)&#123;ret+=a[i];upd(ret-=MOD);&#125;    return ret;&#125;void add(int x,int y,int z)&#123;    z-=MOD;upd(z);    if(x&gt;=BL)&#123;        for(int i=y;i&lt;=n;i+=x)&#123;            a[i]+=z;upd(a[i]-=MOD);            sum[pos(i)]+=z;upd(sum[pos(i)]-=MOD);        &#125;    &#125;else&#123;        for(int i=x;i&gt;=y;i--)&#123;pre[x][i]+=z;upd(pre[x][i]-=MOD);&#125;        for(int i=1;i&lt;=y;i++)&#123;suf[x][i]+=z;upd(suf[x][i]-=MOD);&#125;    &#125;&#125;signed main()&#123;    read(n);read(m);    for(int i=1;i&lt;=n;i++)read(a[i]);    init();    while(m--)&#123;        int op,x,y,z,l,r;        read(op);        if(op==1)&#123;            read(x);read(y);read(z);            add(x,y,z);        &#125;else&#123;            read(l);read(r);            int ret=query(l,r);            for(int i=1;i&lt;BL;i++)&#123;                int blkL=(l-1)/i+1,blkR=(r-1)/i+1;                if(blkL==blkR)&#123;                    ret+=pre[i][(r-1)%i+1];upd(ret-=MOD);                    ret-=pre[i][(l-1)%i];upd(ret);                &#125;else&#123;                    ret+=(blkR-blkL-1LL)*pre[i][i]%MOD;upd(ret-=MOD);                    ret+=pre[i][(r-1)%i+1];upd(ret-=MOD);                    ret+=suf[i][(l-1)%i+1];upd(ret-=MOD);                &#125;            &#125;            put(ret);        &#125;    &#125;    return 0;&#125;
 CF1056H Detect Robots
令 s=∑lens=\sum\limits lens=∑len。
考虑我们答案到底是怎么算的，其实就是枚举一个串两个字符 A→C→⋯→BA\to C \to \dots \to BA→C→⋯→B，如果之前出现过 A→D→⋯→BA \to D \to \dots \to BA→D→⋯→B 的路径，检查 CCC 是否等于 DDD 即可，若不等于输出 Human。一个显然的想法就是枚举 A,BA,BA,B 轻松 O(s3)O(s^3)O(s3)，但是我们可以只需要枚举一个，比如枚举 BBB 让后拓展即可，这样的时间复杂度 O(s2)O(s^2)O(s2)。如果 sss 过大直接就爆炸了，考虑一个关键性质：数据范围 3×1053 \times 10^53×105，考虑到长为 kkk 的路径最多有 nk\dfrac{n}{k}kn​ 个，考虑根号分治，按串长分治。小串对小串暴力即可。
大串我们可以暴力枚举，记 posipos_{i}posi​ 表示 iii 在大串中的位置，对于其他串从后往前扫，判断当前字母的 pos&lt;mxposipos&lt;mxpos_{i}pos&lt;mxposi​ 是否成立即可，时间复杂度 O(ss)O(s\sqrt{s})O(ss​)。
#include&lt;bits/stdc++.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=1e6+15;int T,n,m,B,pos[MN],vis[MN];vector&lt;int&gt; a[MN];vector&lt;pir&gt; v[MN];void solve()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        v[i].clear();        vis[i]=pos[i]=0;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        a[i].clear();        int K;        cin&gt;&gt;K;        for(int j=1;j&lt;=K;j++)&#123;            int x;            cin&gt;&gt;x;            a[i].push_back(x);        &#125;        if(a[i].size()&lt;=B)&#123;            for(int j=0;j&lt;a[i].size();j++)&#123;                for(int k=j+1;k&lt;a[i].size();k++)&#123;                    v[a[i][k]].push_back(pir(a[i][j],a[i][j+1]));                &#125;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        if(a[i].size()&lt;=B) continue;        for(int j=1;j&lt;=n;j++) pos[j]=-1;        for(int j=0;j&lt;a[i].size();j++) pos[a[i][j]]=j;        for(int j=i+1;j&lt;=m;j++)&#123;            int r=-1;            for(int k=a[j].size()-1;k&gt;=0;k--)&#123;                if(pos[a[j][k]]==-1) continue;                if(pos[a[j][k]]&gt;r)&#123;                    r=pos[a[j][k]];                &#125;                else if(a[j][k+1]!=a[i][pos[a[j][k]]+1])&#123;                    cout&lt;&lt;&quot;Human\n&quot;;                    return;                &#125;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(auto p:v[i])&#123;            if(vis[p.first]&amp;&amp;vis[p.first]!=p.second)&#123;                cout&lt;&lt;&quot;Human\n&quot;;                return;            &#125;            vis[p.first]=p.second;        &#125;        for(auto p:v[i]) vis[p.first]=0;    &#125;    cout&lt;&lt;&quot;Robot\n&quot;;&#125;int main()&#123;    ios::sync_with_stdio(false);    cin.tie(nullptr);    B=sqrt(300000)/2;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 CF587F Duff is Mad
暴力的想法就是重新建 AC 自动机，不得不承认这个想法及其糟糕。
考虑直接对所有串建立 AC 自动机，那么答案就是将 s∈[l,r]s\in [l,r]s∈[l,r] 上串对应 Fail 树上的权值加一后求权值和，考虑离线下来加根号分治，阈值为 BBB，对于 ∣Sk∣&gt;B|S_k|&gt;B∣Sk​∣&gt;B 的考虑将每个串询问做差，顺序扫过即可，时间复杂度 O(nn)O(n\sqrt{n})O(nn​)。
对于 ∣Sk∣≤B|S_{k}| \le B∣Sk​∣≤B 考虑扫描线，扫到一个串就权值加一，让后暴力查询即可，其实这两个操作都是在 DFS 序上区间加单点查，树状数组即可，时间房租啊都 O(nlog⁡m+QTlog⁡m)O(n \log m+QT\log m)O(nlogm+QTlogm)。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int N=1e5+7;int n,q,sumlen,MB,ans[N];string s[N];vector&lt;int&gt; adj[N];vector&lt;pir&gt; L1[N],R1[N],L2[N],R2[N];struct BIT&#123;    int t[N];    int lowbit(int x)&#123;        return x&amp;-x;    &#125;    void modify(int x,int k)&#123;        while(x&lt;N)&#123;            t[x]+=k;            x+=lowbit(x);        &#125;    &#125;    int query(int x)&#123;        int ret=0;        while(x)&#123;            ret+=t[x];            x-=lowbit(x);        &#125;        return ret;    &#125;&#125;bit;namespace ACAuto&#123;    int trie[N][26],fail[N],fa[N],ed[N],tot=1;    int sum[N],siz[N],dfn[N],dtot;    void insert(string s,int id)&#123;        int p=1;        for(auto c:s)&#123;            int k=c-&#x27;a&#x27;;            if(!trie[p][k]) trie[p][k]=++tot,fa[tot]=p;            p=trie[p][k];        &#125;        ed[id]=p;    &#125;    void build()&#123;        queue&lt;int&gt; q;        for(int i=0;i&lt;26;i++)&#123;            if(trie[1][i]) fail[trie[1][i]]=1,q.push(trie[1][i]);            else trie[1][i]=1;        &#125;        while(!q.empty())&#123;            int x=q.front();            q.pop();            for(int i=0;i&lt;26;i++)&#123;                if(trie[x][i])                    fail[trie[x][i]]=trie[fail[x]][i],q.push(trie[x][i]);                else trie[x][i]=trie[fail[x]][i];            &#125;        &#125;        for(int i=2;i&lt;=tot;i++) adj[fail[i]].push_back(i);    &#125;    void dfs1(int u)&#123;        for(auto v:adj[u])&#123;            dfs1(v);            sum[u]+=sum[v];        &#125;    &#125;    void dfs2(int u)&#123;        siz[u]=1;        dfn[u]=++dtot;        for(auto v:adj[u])&#123;            dfs2(v);            siz[u]+=siz[v];        &#125;    &#125;&#125;using namespace ACAuto;signed main()&#123;    ios::sync_with_stdio(0);    cin.tie(0);    cin&gt;&gt;n&gt;&gt;q;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;s[i];        sumlen+=s[i].length();        insert(s[i],i);    &#125;    build();    MB=sumlen/sqrt(q*log2(sumlen));        for(int i=1;i&lt;=q;i++)&#123;        int l,r,k;        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;        if(s[k].length()&gt;MB)&#123;            L1[k].emplace_back(l,i);            R1[k].emplace_back(r,i);        &#125;else&#123;            L2[l].emplace_back(k,i);            R2[r].emplace_back(k,i);        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(s[i].length()&gt;MB)&#123;            int p=ed[i];            while(p!=1) sum[p]=1,p=fa[p];            dfs1(1);            sort(L1[i].begin(),L1[i].end());            sort(R1[i].begin(),R1[i].end());            reverse(L1[i].begin(),L1[i].end());            reverse(R1[i].begin(),R1[i].end());            int tmp=0;            for(int j=1;j&lt;=n;j++)&#123;                while(L1[i].size()&amp;&amp;L1[i].back().first==j)&#123;                    ans[L1[i].back().second]-=tmp;                    L1[i].pop_back();                &#125;                tmp+=sum[ed[j]];                while(R1[i].size()&amp;&amp;R1[i].back().first==j)&#123;                    ans[R1[i].back().second]+=tmp;                    R1[i].pop_back();                &#125;            &#125;            for(int i=2;i&lt;=tot;i++) sum[i]=0;        &#125;    &#125;    dfs2(1);    for(int i=1;i&lt;=n;i++)&#123;        for(auto [k,id]:L2[i])&#123;            int p=ed[k];            while(p!=1) ans[id]-=bit.query(dfn[p]),p=fa[p];        &#125;        bit.modify(dfn[ed[i]],1);        bit.modify(dfn[ed[i]]+siz[ed[i]],-1);        for(auto [k,id]:R2[i])&#123;            int p=ed[k];            while(p!=1) ans[id]+=bit.query(dfn[p]),p=fa[p];        &#125;    &#125;    for(int i=1;i&lt;=q;i++) cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
 3. 后言
根号分治，做那么多题其实就是根号平衡时空复杂度。注意分治后的情况下具有的性质，同时对次数分类讨论就可以了。
 4. 参考

zxy的思维技巧 - C202044zxy
分治与根号算法 - qAlex_Weiq - 博客园
Hanx16Kira 的 P5901 题解
根号算法_不只是分块——2014国家集训队 王悦同
暴力美学——浅谈根号分治 - 洛谷专栏
YLWang 的 P5309 题解

]]></content>
      <categories>
        <category>离线</category>
      </categories>
      <tags>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title>浅学竞赛图</title>
    <url>/posts/e9f975f5/</url>
    <content><![CDATA[ 1. 定义
竞赛图，即任意两点之前有且仅有一条边的有向图。即有向完全图，有 (n2)\dbinom{n}{2}(2n​) 条边。
至于为什么叫竞赛图，就是赢得点向输的点连边，一个边代表的是胜负关系。
 2. 性质
 兰道定理（竞赛图判定）
我们定义比分序列为将每个点的出度 sis_{i}si​ 从小到大排序的序列。
那么若满足 ∑i=1ksi≥(k2)\sum\limits_{i=1}^k s_{i}\ge \dbinom{k}{2}i=1∑k​si​≥(2k​) 且当 k=nk=nk=n 时取等（即 ∑s=(n2)\sum\limits s=\dbinom{n}{2}∑s=(2n​)），则一定能够造出一种竞赛图，反之不能。
必要性显然，考虑充分性证明，我们构造初始图，对于 j&lt;ij&lt;ij&lt;i 则 i→ji\to ji→j 连边，设此时比分序列为 aaa，这个序列显然在上述条件能够取到等号。保持 ∑i=1kai≤∑i=1ksi\sum\limits_{i=1}^k a_{i}\le \sum\limits_{i=1}^k s_{i}i=1∑k​ai​≤i=1∑k​si​，不断调整图直到 a=sa=sa=s。
未构造完成时开头必然是一段等于后面接一个 al&lt;sla_{l}&lt;s_{l}al​&lt;sl​，为了让后面的方法修改后使得 aaa 仍然有序，我们找到最后一个 al=aua_{l}=a_{u}al​=au​ 的 uuu，显然有 au&lt;sua_{u}&lt;s_{u}au​&lt;su​。因为总和固定，必然能找到第一个 vvv 使得 av&gt;sva_{v}&gt;s_{v}av​&gt;sv​。
此时有 au&lt;su≤sv&lt;ava_{u}&lt;s_{u}\le s_{v}&lt;a_{v}au​&lt;su​≤sv​&lt;av​，有 av≥au+2a_{v}\ge a_{u}+2av​≥au​+2。
当 ∃v→u\exists v \to u∃v→u，考虑翻转这条边，否则必然存在 ppp 使得 v→p→uv \to p \to uv→p→u，那么把路径反转。因为 au&lt;su,ai≤si,∀i∈(u,v)a_{u}&lt;s_{u},a_{i}\le s_{i},\forall i \in (u,v)au​&lt;su​,ai​≤si​,∀i∈(u,v)，不难证明反转后的序列仍然保持性质（∑a≤s\sum\limits a \le s∑a≤s）这样构造下去一定有解。
注意，这里定理都是存在，对于同一个比分序列可能对应本质不同的竞赛图。
 兰道定理实质
兰道定理的实质是在一个序列和一定时，可以对于任意两个有关系（边）的位置进行相等量的调整（si←si+v,sj←sj−vs_{i}\leftarrow s_{i}+v,s_{j}\leftarrow s_{j}-vsi​←si​+v,sj​←sj​−v），那么要判定任意一个值的序列是否与序列值的下界形式一样时，只需要判断是否每个前缀和都大于等于下界，以及最后的和与预期相等即可。证明考虑构造法不断调整。
 竞赛图强连通分量个数（推论）
即：
∑i=1n[∑j=1isj=(i2)]\sum\limits_{i=1}^n [\sum\limits_{j=1}^i 
s_{j}=\binom{i}{2}]i=1∑n​[j=1∑i​sj​=(2i​)]
其中 sss 还是比分序列。证明如下：
GGG 缩点后形成了一条链，拓扑序上靠后的强连通分量里节点的出度一定严格小于靠前的强连通分量里节点的出度。考察链上相邻两个强连通分量 S,TS, TS,T，不妨假设 SSS 在拓扑序上比 TTT 靠前。我们一定能找到一个唯一的 xxx，使得 p1p_1p1​ 到 pxp_xpx​ 一一对应着 TTT 以及在拓扑序上比 TTT 更靠后的强连通分量里节点的出度。显然，∑i=1xpi=(x2)\sum_{i=1}^x p_i = \binom{x}{2}∑i=1x​pi​=(2x​)，因此 ∑i=1n[∑j=1ipj=(i2)]\sum_{i=1}^n \left[ \sum_{j=1}^i p_j = \binom{i}{2} \right]∑i=1n​[∑j=1i​pj​=(2i​)] 不小于 GGG 的强连通分量个数。
同时，∀x∈[1,n−1]∩Z\forall x \in [1, n-1] \cap \mathbb{Z}∀x∈[1,n−1]∩Z，∑i=1xpi=(x2)\sum_{i=1}^x p_i = \binom{x}{2}∑i=1x​pi​=(2x​)，px+1p_{x+1}px+1​ 到 pnp_npn​ 对应的节点都向 p1p_1p1​ 到 pxp_xpx​ 对应的节点连边，所以 xxx 也唯一对应着链上相邻两个强连通分量的分界，因此 ∑i=1n[∑j=1ipj=(i2)]\sum_{i=1}^n \left[ \sum_{j=1}^i p_j = \binom{i}{2} \right]∑i=1n​[∑j=1i​pj​=(2i​)] 不大于 GGG 的强连通分量个数。考虑如果说一个强连通分量被分成了两半，如果后一半和后继的度数和等于 (n2)\binom{n}{2}(2n​) 的话说明后一半的出度达到了最小值，就不能向前一半有连边，所以前一半和后一半就缺少了构成强连通分量的桥梁，所以通过反证法不成立。
综上，∑i=1n[∑j=1ipj=(i2)]\sum_{i=1}^n \left[ \sum_{j=1}^i p_j = \binom{i}{2} \right]∑i=1n​[∑j=1i​pj​=(2i​)] 等于 GGG 的强连通分量个数。在求出出度序列后，通过桶排，我们可以 O(n)O(n)O(n) 求解一个 nnn 阶竞赛图的强连通分量个数。
 缩点后呈链状
这是一个很重要的性质，所有与环，SCC相关的问题都可以用这个性质解决。
即竞赛图强连通缩点后的 DAG 呈链状, 拓扑序小的点向所有拓扑序比它大的点连边，如下图。

证明考虑归纳，考虑一个一个加入连通块。目前假设有一条链，设插入的为块为 xxx。若 xxx 连向所有点，放头，若所有点连向 xxx，放尾。否则找分界点插到中间即可（如果不能查到中间的话会成环）。

 推论

若不存在位置 iii 满足如下条件，则为强连通图：

∑j=insi=(n−i+1)×(i−1)+(n−i+12)\sum\limits_{j=i}^n s_{i} =(n-i+1)\times (i-1)+\binom{n-i+1}{2}
j=i∑n​si​=(n−i+1)×(i−1)+(2n−i+1​)

在同一个SCC中在比分序列上是一个区间，根据比分序列可以完成拓扑排序。

利用拓扑序小的点向所有拓扑序比它大的点连边，从后向前扫，用一个和上面判断 SCC本质相同（只是左右端点不同）的式子判定即可。
 竞赛图存在一条哈密顿路径
证明，先缩点，如图构造：

 竞赛图任意一个 SCC 存在一条哈密顿回路
考虑归纳, 逐点加入目前有一条链, 链上的每个强连通块都存在哈密顿回路，插入一个新点 xxx，只需证明新图中的强连通块都存在哈密顿回路即可。如果不产生新连通块, 就是呈链中讨论的情况, 否则一定存在一条 xxx 的出边在 xxx 入边左边, 随便找一对
如果是连到不同连通块, 见左图.
如果是同一连通块, 必定存在符合环的走向的相邻的一入一出, 见右图.

强连通竞赛图也算整体一个 SCC，也就是强连通竞赛图有哈密顿回路。
 竞赛图若有环一定存在三元环
考虑找到任意一个环，讨论一下顺时针还是逆时针。
例如顺时针，考虑环中的边，若为逆，直接结束有三元环。若为顺向的边可以看做环少了因这条边存在而绕过的点。
始终不出现逆向的边，最后一条边处构成三元环。
 竞赛图的k&gt;=3个点的SCC中一定存在[3,k]元环
归纳法证明即可，作者懒了不证明了。
 3. 例题
 3.1 计数
 不知名题

求 nnn 个点的强连通竞赛图个数。

考虑容斥，设 f(i)f(i)f(i) 表示 iii 个点竞赛图个数，显然 f(i)=2i(i−1)2f(i)=2^{\frac{i(i-1)}{2}}f(i)=22i(i−1)​，设 g(i)g(i)g(i) 表示 iii 个点强连通竞赛图个数。
考虑转移，将图分成两部分，第一个部分是一个 SCC ，另外一个部分至少是一个 SCC ，枚举一个 jjj 个点的 SCC 进行转移。
g(i)=f(i)−∑j=1i−1g(j)×(ii−j)×f(i−j)g(i)=f(i)-\sum\limits_{j=1}^{i-1} g(j) \times \binom{i}{i-j}\times f(i-j)
g(i)=f(i)−j=1∑i−1​g(j)×(i−ji​)×f(i−j)
 CF850D Tournament Construction
mmm 及其小，而且值域很少，设一个图有 nnn 个点，则边数上界就是 30n30n30n，有 n(n−1)2≤30n\dfrac{n(n-1)}{2}\le 30n2n(n−1)​≤30n，解得 n≤61n\le 61n≤61。
用兰顿定理可以判断是否合法，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示能否用集合前 iii 个元素，构造出 jjj 个点 kkk 条边的图，转移方程有：
f(i,j,k)=f(i−1,j−1,k−am)or⁡f(i,j−1,k−am)f(i,j,k)=f(i-1,j-1,k-a_{m}) \operatorname{or} f(i,j-1,k-a_{m})
f(i,j,k)=f(i−1,j−1,k−am​)orf(i,j−1,k−am​)
让后考虑如何构造，发现可以发现一个竞赛图删除一个点以及它的所有边后仍然是一个竞赛图，那么避免冲突每次选择最小出度的点 更新边以及其他点的出度即可。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=80,MM=2520;int m,n=1,a[MN],ret[MM],tmp[MM],ans[MN][MN];bool f[MN][MN][MM];bool cmp(int x,int y)&#123;    return ret[x]&lt;ret[y];&#125;void dfs(int x,int y,int z)&#123;    if(!x) return;    ret[x]=a[y];    z-=a[y];    x--;    if(f[x][y][z]) dfs(x,y,z);    else dfs(x,y-1,z);&#125;void getans()&#123;    for(int i=1;i&lt;=n;i++) tmp[i]=i;    for(int i=1;i&lt;=n;i++)&#123;        sort(tmp+i,tmp+n+1,cmp);        for(int j=i+1;j&lt;=i+ret[tmp[i]];j++)&#123;            ans[tmp[i]][tmp[j]]=1;        &#125;        for(int j=i+ret[tmp[i]]+1;j&lt;=n;j++)&#123;            ans[tmp[j]][tmp[i]]=1;            ret[tmp[j]]--;        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;a[i];    &#125;    sort(a+1,a+1+m);    f[1][1][a[1]]=1;    while(n&lt;62&amp;&amp;(n&lt;m||!f[n][m][n*(n-1)/2]))&#123;        n++;        for(int i=1;i&lt;=m;i++)&#123;            for(int j=(n-1)*(n-2)/2;j&lt;=(n-1)*a[m];j++)&#123;                if(f[n-1][i][j])&#123;                    f[n][i][j+a[i]]=1;                    if(i+1&lt;=m) f[n][i+1][j+a[i+1]]=1;                &#125;            &#125;        &#125;    &#125;    if(n&gt;61)&#123;        cout&lt;&lt;&quot;=(&quot;;        return 0;    &#125;    dfs(n,m,n*(n-1)/2);    getans();    cout&lt;&lt;n&lt;&lt;&#x27;\n&#x27;;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            cout&lt;&lt;ans[i][j];        &#125;        cout&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 BZOJ 5219 最长路径 竞赛图组合计数

计数从 1 出发的最长简单路径经过点数恰好为 iii 的竞赛图个数。i∈[1,n],1≤n≤2000i\in [1,n],1\le n \le 2000i∈[1,n],1≤n≤2000

竞赛图有个很好的性质：一定存在一条哈密尔顿路径。
考虑设 f(i,j)f(i,j)f(i,j) 表示 iii 个点，最长路径为 jjj 的竞赛图数量。
显然有 f(i,i)f(i,i)f(i,i) 为强连通竞赛图，但是这里我们可以不用像上面不知名题求，就用容斥 f(i,i)=2i(i−1)2−∑j=1i−1f(i,j)f(i,i)=2^{\frac{i(i-1)}{2}}-\sum\limits_{j=1}^{i-1} f(i,j)f(i,i)=22i(i−1)​−j=1∑i−1​f(i,j) 即可。
考虑 f(i,1)f(i,1)f(i,1) 可以构造出所有 1 号点的边连向 1 号点即可，有 f(i,1)=2(i−1)(i−2)2f(i,1)=2^{\frac{(i-1)(i-2)}{2}}f(i,1)=22(i−1)(i−2)​。
那么剩下的怎么求，考虑将图划分为两个块，一个块是供 1 走的块，剩下的块不给 1 走，但是可能不存在不给 1 走的块。
那么有 f(i,j)=f(j,j)×(i−1j−1)×2(i−j)(i−j−1)2f(i,j)=f(j,j) \times \binom{i-1}{j-1} \times 2^{\frac{(i-j)(i-j-1)}{2}}f(i,j)=f(j,j)×(j−1i−1​)×22(i−j)(i−j−1)​，考虑 jjj 个点连通块的连边方式，让后要选点，在把剩下的连边即可。
时间复杂度 O(n2)O(n^2)O(n2)，但是可怕的是 BZOJ 挂了，有谁好心传个原题？
 CF913F
令 p=abp=\dfrac{a}{b}p=ba​。
考虑倒推答案，设 f(i)f(i)f(i) 表示 iii 个点的期望答案，g(i)g(i)g(i) 表示形成大小为 iii 的 SCC 概率，h(i,j)h(i,j)h(i,j) 表示 iii 个人打比赛，其中 jjj 个人被 (i−j)(i-j)(i−j) 个人打赢的概率。
最后一个 SCC 的大小，有：
f(i)=∑j=1ig(j)⋅h(i,j)⋅(f(j)+f(i−j)+(j2)+j(i−j))f(i)=\sum\limits_{j=1}^i g(j)\cdot h(i,j)\cdot(f(j)+f(i-j)+\binom{j}{2}+j(i-j))
f(i)=j=1∑i​g(j)⋅h(i,j)⋅(f(j)+f(i−j)+(2j​)+j(i−j))
但是 f(i)f(i)f(i) 会转移到自己，要解方程，这里不过多叙述。
考虑 gig_{i}gi​ 如何求，考虑只要图中没有点被其它点都吊打的情况它就是强联通图，那么转移：
g(i)=1−∑j=1i−1g(j)h(i,j)g(i)=1-\sum\limits_{j=1}^{i-1}g(j) h(i,j)
g(i)=1−j=1∑i−1​g(j)h(i,j)
考虑 hhh，对于新加入一个点，如果在 jjj 中那么输给 i−ji-ji−j，反之要赢 jjj 个点，那么有：
h(i,j)=(1−p)jh(i−1,j)+pi−jh(i−1,j−1)h(i,j)=(1-p)^j h(i-1,j)+p^{i-j}h(i-1,j-1)
h(i,j)=(1−p)jh(i−1,j)+pi−jh(i−1,j−1)
时间 O(n2)O(n^2)O(n2)。
 3.2 SCC 及其拓展
 CF1268D
两个结论：

对于 n≥4n\ge 4n≥4，nnn 阶强联通竞赛图具有 n−1n-1n−1 阶强联通子图。
对于 n≥7n\ge 7n≥7，nnn 阶竞赛图存在一种翻转方案使得只需要翻转一个结点就能让它强联通。

对于 n≤6n\le 6n≤6，暴力枚举翻转结点即可，对于 n&gt;6n&gt;6n&gt;6 考虑枚举每个位置翻转并检查就好了。我们可以用兰顿定理的推论（上面有讲）来快速判断是否强连通。
证明可以看其他题解：题解 CF1268D 【Invertation in Tournament】
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2520,MOD=998244353;int n,cf[MN],h[MN];bool mp[MN][MN];bool check()&#123;    sort(cf+1,cf+1+n);    for(int i=2;i&lt;=n;i++) cf[i]+=cf[i-1];    for(int i=1;i&lt;n;i++)&#123;        if(cf[i]==i*(i-1)/2) return 0;    &#125;    return 1;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            char c;            cin&gt;&gt;c;            mp[i][j]=c-&#x27;0&#x27;;            h[i]+=mp[i][j];        &#125;    &#125;    for(int i=1;i&lt;=n;i++) cf[i]=h[i];    if(check())&#123;        cout&lt;&lt;&quot;0 1&quot;;        return 0;    &#125;    int ret=0;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++) cf[j]=h[j];         for(int j=1;j&lt;=n;j++)&#123;            cf[i]-=mp[i][j]*2-1;            cf[j]+=mp[i][j]*2-1;        &#125;        if(check()) ret++;    &#125;    if(ret)&#123;        cout&lt;&lt;1&lt;&lt;&quot; &quot;&lt;&lt;ret;        return 0;    &#125;    if(n==4) cout&lt;&lt;-1;    if(n==6) cout&lt;&lt;&quot;2 18&quot;;    return 0;&#125;
 P3561 [POI 2017] Turysta 
定理上面都讲完了，先缩点，然后对于每个强连通分量，求哈密顿回路。然后就可以对任意一个强连通分量任意点进，任意点出了。
怎么构造可以去看其他题解的构造。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=2e3+15;int n,tcnt,nxt[MN],a[MN][MN],in[MN],tpos[MN],pos[MN];vector&lt;int&gt; adj[MN],G[MN],dcc[MN],ans[MN];namespace Tarjan&#123;    int dfn[MN],low[MN],s[MN],col[MN],ctot,top,dtot;    bool vis[MN];    void tarjan(int u)&#123;        low[u]=dfn[u]=++dtot;        s[++top]=u;        vis[u]=1;        for(auto v:adj[u])&#123;            if(!dfn[v])&#123;                tarjan(v);                low[u]=min(low[u],low[v]);            &#125;else if(vis[v])&#123;                low[u]=min(low[u],dfn[v]);            &#125;        &#125;        if(low[u]==dfn[u])&#123;            ctot++;            int p;            do&#123;                p=s[top--];                col[p]=ctot;                vis[p]=0;            &#125;while(p!=u);        &#125;    &#125;&#125;using namespace Tarjan;void toposort()&#123;    queue&lt;int&gt; q;    for(int i=1;i&lt;=ctot;i++)&#123;        if(!in[i]) q.push(i);    &#125;    while(!q.empty())&#123;        int u=q.front();        q.pop();        tpos[++tcnt]=u;        pos[u]=tcnt;        for(auto v:G[u])&#123;            in[v]--;            if(!in[v]) q.push(v);        &#125;    &#125;&#125;void getham(int c)&#123;    if(dcc[c].size()==1) return;    int s=dcc[c][0],t=s;    for(int i=1;i&lt;dcc[c].size();i++)&#123;        int x=dcc[c][i];        if(a[t][x]) nxt[t]=x,t=x;        else if(a[x][s]) nxt[x]=s,s=x;        else&#123;            for(int j=s;j!=t;j=nxt[j])&#123;                if(a[j][x]&amp;&amp;a[x][nxt[j]])&#123;                    nxt[x]=nxt[j];                    nxt[j]=x;                    break;                &#125;            &#125;        &#125;    &#125;    t=0;    for(int i=nxt[s];i;i=nxt[i])&#123;        if(t)&#123;            if(a[i][s])&#123;                t=i;                continue;            &#125;            for(int j=s,k=nxt[s];j!=t;j=k,k=nxt[k])&#123;                if(a[i][k])&#123;                    nxt[j]=nxt[t];                    nxt[t]=s;                    s=k;                    t=i;                    break;                &#125;            &#125;        &#125;else if(a[i][s]) t=i;    &#125;    nxt[t]=s;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=2;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=i-1;j++)&#123;            int x;            cin&gt;&gt;x;            if(x)&#123;                adj[j].push_back(i);                a[j][i]=1;            &#125;else&#123;                adj[i].push_back(j);                a[i][j]=1;            &#125;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        if(!dfn[i]) Tarjan::tarjan(i);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        dcc[col[i]].push_back(i);    &#125;    for(int u=1;u&lt;=n;u++)&#123;        for(auto v:adj[u])&#123;            if(col[u]!=col[v])&#123;                G[col[u]].push_back(col[v]);                in[col[v]]++;            &#125;        &#125;    &#125;    toposort();    for(int i=1;i&lt;=tcnt;i++)&#123;        getham(tpos[i]);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        int lst=i,now=pos[col[i]];        while(&#x27;QWQ&#x27;)&#123;            if(dcc[tpos[now]].size()==1)&#123;                ans[i].push_back(lst);                if(now==tcnt) break;                lst=dcc[tpos[++now]][0];                continue;            &#125;            ans[i].push_back(lst);            for(int j=nxt[lst];j!=lst;j=nxt[j])&#123;                ans[i].push_back(j);            &#125;            if(now==tcnt) break;            lst=dcc[tpos[++now]][0];        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cout&lt;&lt;ans[i].size()&lt;&lt;&#x27; &#x27;;        for(auto p:ans[i]) cout&lt;&lt;p&lt;&lt;&quot; &quot;;        cout&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 4. 参考

竞赛图的一些性质 - _zwl - 博客园
【CF913F】Strongly Connected Tournament - heyujun - 博客园
竞赛图专题突破 - Compound_Interest - 博客园
由竞赛图的分数序列构造出竞赛图 - yspm - 博客园
竞赛图小记 - 洛谷专栏

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈FFT与NTT在字符串匹配中的应用</title>
    <url>/posts/d9450503/</url>
    <content><![CDATA[ 0. 前言
记录做题中遇见的一些好玩的科技。
 1. 含通用符的字符串匹配问题
在没有通用符的字符串匹配问题中，我们一般使用 O(n+m)O(n+m)O(n+m) 的 KMP，多模匹配下我们会考虑 AC 自动机。但是，我们还有令玩意中做法：
设 P(x)=∑i=0m−1(Ai−Bx+i)P(x)=\sum\limits_{i=0}^{m-1} (A_{i}-B_{x+i})P(x)=i=0∑m−1​(Ai​−Bx+i​)。
但是 Ai−Bx+iA_{i}-B_{x+i}Ai​−Bx+i​ 是没有正负性这一说的，所以我们要将其平方，有：
P(x)=∑i=0m−1(Ai−Bx+i)2=∑i=0m−1(Ai2−2AiBx+i+Bx+i2)\begin{aligned}
P(x) &amp; =\sum\limits_{i=0}^{m-1} (A_{i}-B_{x+i})^2 \\
&amp; =\sum\limits_{i=0}^{m-1} (A_{i}^2-2A_{i}B_{x+i}+B_{x+i}^2)
\end{aligned}
P(x)​=i=0∑m−1​(Ai​−Bx+i​)2=i=0∑m−1​(Ai2​−2Ai​Bx+i​+Bx+i2​)​
其中 Ai2,Bx+i2A_{i}^2,B_{x+i}^2Ai2​,Bx+i2​ 可以快速预处理，但是 AiBx+iA_{i}B_{x+i}Ai​Bx+i​ 不太好处理。一般对于这种式子需要改写成卷积的形式，不妨将 AAA 反转，那么匹配函数 P(x)=∑i=0m−1(Am−i−12−2Am−i−1Bx−m+i−1+Bx−m+i+12)P(x)=\sum\limits_{i=0}^{m-1}(A_{m-i-1}^2 - 2A_{m-i-1}B_{x-m+i-1}+B_{x-m+i+1}^2)P(x)=i=0∑m−1​(Am−i−12​−2Am−i−1​Bx−m+i−1​+Bx−m+i+12​)。发现 Am−i−1Bx−m+i+1A_{m-i-1}B_{x-m+i+1}Am−i−1​Bx−m+i+1​ 是卷积形式，用 FFT 求解，时间复杂度为 O(nlog⁡n)O(n \log n)O(nlogn)。
 P4173 残缺的字符串
这题出现了可以代替一个字符的通用符，可以将通用符的权值设为 0，再乘上权值即可。
P(x)=∑i=0m−1(Am−i−1−Bx−m+i+1)2Am−i−1Bx−m+i+1=∑i=0m−1(Am−i−13Bx−m+i+1−2Am−i−12Bx−m+i+12+Am−i−1Bx−m+i+13)\begin{aligned}
P(x)&amp;=\sum\limits_{i=0}^{m-1} (A_{m-i-1}-B_{x-m+i+1})^2A_{m-i-1}B_{x-m+i+1} \\ 
&amp; =\sum\limits_{i=0}^{m-1} (A_{m-i-1}^3B_{x-m+i+1}-2A_{m-i-1}^2B_{x-m+i+1}^2+A_{m-i-1}B_{x-m+i+1}^3)
\end{aligned}
P(x)​=i=0∑m−1​(Am−i−1​−Bx−m+i+1​)2Am−i−1​Bx−m+i+1​=i=0∑m−1​(Am−i−13​Bx−m+i+1​−2Am−i−12​Bx−m+i+12​+Am−i−1​Bx−m+i+13​)​
做三次 FFT 即可，代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int MN=1e7+15,MR=MN&lt;&lt;2;const double pi=acos(-1);using compd=complex&lt;double&gt;;int n,m,len,s[MN],tot;int rev[MN],A[MN],B[MN];compd a[MN],b[MN],ans[MN];string s1,s2;void dorev(compd f[],int len)&#123;    for(int i=0;i&lt;len;i++)&#123;        rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;        if(i&amp;1)&#123;            rev[i]|=len&gt;&gt;1;        &#125;    &#125;    for(int i=0;i&lt;len;i++)&#123;        if(i&lt;rev[i]) swap(f[i],f[rev[i]]);    &#125;&#125;void fft(compd f[],int len,int mode)&#123;    dorev(f,len);    for(int i=2;i&lt;=len;i&lt;&lt;=1)&#123;//处理的区间长度        compd wn(cos(2*pi/i),sin(2*pi*mode/i));        for(int j=0;j&lt;len;j+=i)&#123;//步长为i            compd w(1,0);            for(int k=j;k&lt;j+i/2;k++)&#123;// 蝶形优化                compd u=f[k];//左区间                compd t=w*f[k+i/2];//右区间                f[k]=u+t;                f[k+i/2]=u-t;                w=w*wn;            &#125;        &#125;    &#125;    if(mode==-1)&#123;        for(int i=0;i&lt;len;i++)&#123;            f[i]/=len;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;m&gt;&gt;n&gt;&gt;s1&gt;&gt;s2;    reverse(s1.begin(),s1.end());    len=1;    while(len&lt;=n+m) len&lt;&lt;=1;    for(int i=0;i&lt;m;i++)&#123;        A[i]=(s1[i]!=&#x27;*&#x27;)?(s1[i]-&#x27;a&#x27;+1):0;    &#125;    for(int i=0;i&lt;n;i++)&#123;        B[i]=(s2[i]!=&#x27;*&#x27;)?(s2[i]-&#x27;a&#x27;+1):0;    &#125;    for(int i=0;i&lt;=len;i++)&#123;        a[i]=compd(A[i]*A[i]*A[i],0);        b[i]=compd(B[i],0);    &#125;    fft(a,len,1);    fft(b,len,1);    for(int i=0;i&lt;=len;i++) ans[i]=ans[i]+a[i]*b[i];    for(int i=0;i&lt;=len;i++)&#123;        a[i]=compd(A[i],0);        b[i]=compd(B[i]*B[i]*B[i],0);    &#125;    fft(a,len,1);    fft(b,len,1);    for(int i=0;i&lt;=len;i++) ans[i]=ans[i]+a[i]*b[i];    for(int i=0;i&lt;=len;i++)&#123;        a[i]=compd(A[i]*A[i],0);        b[i]=compd(B[i]*B[i],0);    &#125;    fft(a,len,1);    fft(b,len,1);    for(int i=0;i&lt;=len;i++) ans[i]=ans[i]+a[i]*b[i]*compd(-2,0);    fft(ans,len,-1);    for(int i=m-1;i&lt;n;i++)&#123;        if(fabs(ans[i].real())&lt;=0.5) s[++tot]=i-m+2;    &#125;    cout&lt;&lt;tot&lt;&lt;&#x27;\n&#x27;;    for(int i=1;i&lt;=tot;i++) cout&lt;&lt;s[i]&lt;&lt;&quot; &quot;;    return 0;&#125;
 2.关于位置对称的问题
 P4199 万径人踪灭
设 fi=∑j=0i[sj=s2×i−j]f_i=\sum\limits_{j=0}^i [s_j=s_{2\times i-j}]fi​=j=0∑i​[sj​=s2×i−j​]。
如果不管不能是连续的一段的限制，那么每一个 iii 的答案就是 2fi−12_{f_i}-12fi​​−1。
是连续的一段的限制直接用 Manacher 做（其实也可以二分+哈希）。
发现 fi=∑j=0i[sj=s2×i−j]f_i=\sum\limits_{j=0}^i [s_j=s_{2\times i-j}]fi​=j=0∑i​[sj​=s2×i−j​] 是卷积形式。
设 aia_iai​ 表示 sis_isi​ 是否为 a，bib_ibi​ 表示 sis_isi​ 是否为 b。
那么 f=a∗a+b∗bf=a*a+b*bf=a∗a+b∗b。
FFT 直接做即可，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;using compd=complex&lt;double&gt;;constexpr int MN=3e5+15,MOD=1e9+7;int n,x[MN],p[MN],s[MN],ans[MN],ret;string st;compd A[MN],B[MN];namespace PolyFFT&#123;    const double pi=acos(-1);    constexpr int MXREV=1e6;    using compd=complex&lt;double&gt;;    int rev[MXREV];    void dorev(compd f[],int len)&#123;        for(int i=0;i&lt;len;i++)&#123;            rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;            if(i&amp;1)&#123;                rev[i]|=len&gt;&gt;1;            &#125;        &#125;        for(int i=0;i&lt;len;i++)&#123;            if(i&lt;rev[i]) swap(f[i],f[rev[i]]);        &#125;    &#125;    void fft(compd f[],int len,int mode)&#123;        dorev(f,len);        for(int i=2;i&lt;=len;i&lt;&lt;=1)&#123;//处理的区间长度            compd wn(cos(2*pi/i),sin(2*pi*mode/i));            for(int j=0;j&lt;len;j+=i)&#123;//步长为i                compd w(1,0);                for(int k=j;k&lt;j+i/2;k++)&#123;// 蝶形优化                    compd u=f[k];//左区间                    compd t=w*f[k+i/2];//右区间                    f[k]=u+t;                    f[k+i/2]=u-t;                    w=w*wn;                &#125;            &#125;        &#125;        if(mode==-1)&#123;            for(int i=0;i&lt;len;i++)&#123;                f[i]/=len;            &#125;        &#125;    &#125;        // F is the out ans    void Mul(compd F[],compd G[],int n,int m)&#123;        int len=1;        while(len&lt;=n+m) len&lt;&lt;=1;        fft(F,len,1);        fft(G,len,1);        for(int i=0;i&lt;len;i++) F[i]=F[i]*G[i];        fft(F,len,-1);    &#125;    // Ans is the out,The second state is the len    pair&lt;compd*,int&gt; MulAns(compd F[],compd G[],compd Ans[],int n,int m)&#123;        int len=1;        while(len&lt;=n+m) len&lt;&lt;=1;        fft(F,len,1);        fft(G,len,1);        for(int i=0;i&lt;len;i++) Ans[i]=F[i]*G[i];        fft(Ans,len,-1);        return pair&lt;compd*,int&gt;(Ans,len);    &#125;&#125;int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void manacher()&#123;    int r=0,c=0;    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        if(i&lt;r) p[i]=min(p[c*2-i],r-i);        else p[i]=1;        while(x[i+p[i]]==x[i-p[i]]) p[i]++;        if(p[i]+i&gt;r)&#123;            r=p[i]+i;            c=i;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;st;    n=st.length();    for(int i=0;i&lt;n;i++) s[i+1]=(st[i]==&#x27;a&#x27;);    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        if(i&amp;1) x[i]=2;        else x[i]=s[i&gt;&gt;1];    &#125;    x[0]=-1,x[(n+1)&lt;&lt;1]=-2;    for(int i=1;i&lt;=n;i++)&#123;        A[i]=B[i]=compd(s[i],0);    &#125;    PolyFFT::Mul(A,B,n,n);    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        ans[i]+=(llround(A[i].real())-((i&amp;1)^1));    &#125;    memset(A,0,sizeof(A));    memset(B,0,sizeof(B));    for(int i=1;i&lt;=n;i++)&#123;        A[i]=B[i]=compd((s[i]^1),0);    &#125;    PolyFFT::Mul(A,B,n,n);    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        ans[i]+=(llround(A[i].real())-((i&amp;1)^1));    &#125;    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        ans[i]=((ans[i]+((i&amp;1)^1))&gt;&gt;1)+((i&amp;1)^1);    &#125;    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        ans[i]=(ksm(2,ans[i])-1+MOD)%MOD;    &#125;    manacher();    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        ans[i]=(ans[i]-(p[i]&gt;&gt;1)+MOD)%MOD;    &#125;    for(int i=1;i&lt;=(n&lt;&lt;1)+1;i++)&#123;        (ret+=ans[i])%=MOD;    &#125;    cout&lt;&lt;ret;&#125;
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈一类带限制的排列计数问题</title>
    <url>/posts/51b0c72c/</url>
    <content><![CDATA[可能更洛谷的阅读体验
 0.前言
2025.6.11 UPD：更新了枚举最大值转移 DP，删除了杂项，大幅重写文章。
引用蓝书的一句话：

在求解计数类动态规划问题时，通常要找到一个 “基准点”，围绕这个基准点构造一个不可划分的整体，以避免子问题之间的重叠。

在解决排列限制类问题，我们关键就是找到一种生成顺序，使得生成部分不需要逐个记录，而只需要少量的状态即可记录。
 1. 顺序扫描线与插入法
当遇到相邻项限制的排列计数问题，可能第一次做脑子就一头蒙，因为如果直接算排列会算重，想容斥但是限制不好容斥，于是就没招数了 www。
事实上，我们可以把这个长为 nnn 的排列元素都拿出来，让后我们可以一个元素一个元素类似于插入的方式进行 DP 的转移，通过这种一个一个插入的方式我们就能打破题目中转移限制的壕沟。事实上，插入法，实际上就是顺序扫描线，通过逐个插入满足特殊的限制。 有的时候我们一个一个元素的转移，而有的时候只考虑关键点，其他元素利用组合数进行转移。
而在插入过程中，因为我们要考虑相邻项的限制条件。为了方便转移，我们在插入的同时也许要维护插入项的相对数值或者是绝对数值，通常来说就是在 DP 数组内加上一个状态来维护当前项的相对大小或绝对大小，我们按照维护的状态和扫描顺序归结为下类 4 种 DP：




绝对数值（预定）
相对数值（插入）




下表遍历
从左往右逐一确定值
从左往右逐一确定排名


值域遍历
从小到大逐一确定位置
从小到大注意插入排列



我们利用插入法，一个一个元素来看，将每一个元素作为基准点，并利用基准点，围绕限制构造一个不可划分的整体，通过这样，我们就能够避免子问题的重叠。
一般而言，当我们限制方向和 DP 转移方向一致的时候，我们可以考虑记录绝对数值（因为可以优化），反之考虑插入法。
接下来，我们一个一个来看每一类问题：
 从左往右逐一确定值
这种做法显而易见的弊端就是容易出现重复元素，考虑状压记录某个值是否出现过，通常会出现容斥原理来进行优化，在第四章我们提到。
 从小到大逐一确定位置
同上利用状压记录是否填写过，优化状态，我做的题太少还没有见到这一类，有的话欢迎在评论区分享 OvO。
 从左往右逐一确定排名
这一类题是偏多的。
AT_dp_t
对排列的 DP，可以选择按照序列顺序或值域顺序确定具体数值或相对数值。
这个题给定的是相邻项的限制，直接做容斥不太好做，我们不妨考虑上面的思想，我们考虑插入法。
我们考虑 DP 需要维护什么，首先因为我们是一个扫描线的遍历方式，所以我们的 DP 数组需要 iii 一个维护来维护当前我们扫到当前位置的答案。我们考虑从小到大填写。
我们很容易得到一个状态 f(i,j)f(i,j)f(i,j) 表示当前扫到第 iii 个数，当前填写的数是 jjj 的方案数。
然而实际上你仔细考虑发现算重的条件太多了，因为限制关系只关心大小而并非实际的数据。我们考虑我们需要什么，我们需要统计的排列，相邻项的限制只关心其相对大小关系，而与其具体大小无关，所以我们应当采用维护值的排名。
故，设 f(i,j)f(i,j)f(i,j) 表示我们当前扫到第 iii 个位置，当前项填写数在已经填写的数里面的相对大小是 jjj 的总方案数。
转移是显然的，我们考虑从 f(i,&lt;j)f(i,&lt;j)f(i,&lt;j) 和 f(i,&gt;j)f(i,&gt;j)f(i,&gt;j) 转移过来，这样的时间复杂度是 O(n3)O(n^3)O(n3)，不妨考虑前缀和优化，时间复杂度 O(n2)O(n^2)O(n2)。
等会，如果状态这么设置，那初始化 f(1,1)f(1,1)f(1,1) 不应该是 nnn 吗，为啥题解设置的都是 111？实质上是没有理解为什么我们要设置相对大小而不是绝对大小
我们第一个加入的数可以随便填写，而后面扫描的时候插入是会限制的，所以我们不能考虑这个数的值不然，我们考虑排名，在不断往后插的过程，值是动态的，每插入一个数，前 iii 个数是 [1,i][1,i][1,i] 的排列所构成的。不断扫描到 nnn，这个时候我们的答案的排列就是原来长为 nnn 的排列。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3520,MOD=1e9+7;int f[MN][MN],sum[MN][MN],n;string s;signed main()&#123;    cin&gt;&gt;n&gt;&gt;s;    s=&#x27; &#x27;+s;    f[1][1]=1;    for(int i=1;i&lt;=n;i++)&#123;        sum[1][i]=1;    &#125;    for(int i=2;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=i;j++)&#123;            if(s[i-1]==&#x27;&lt;&#x27;) f[i][j]=sum[i-1][j-1]%MOD;            else if(s[i-1]==&#x27;&gt;&#x27;) f[i][j]=(sum[i-1][i-1]-sum[i-1][j-1]+MOD)%MOD;            sum[i][j]=(sum[i][j-1]+f[i][j])%MOD;        &#125;    &#125;    cout&lt;&lt;sum[n][n];    return 0;&#125;
abc282g
不难注意到题目要求限制就是同大或者同小，没有要求特定值的限制。对于本题，我们按照序列顺序确定相对数值
但是这里的答案要求维护限制的贡献，如果我们不维护发现是无法转移的。我们不妨考虑把这个贡献设进状态。
故 f(i,j,k,l)f(i,j,k,l)f(i,j,k,l) 表示扫到第 iii 个元素，aia_iai​ 在 AAA 中的排名为 jjj，BiB_iBi​ 在 BBB 中的排名为 kkk，有 lll 个位置满足限制即可。
转移仍和上面差不太多，小于大于转移即可，注意到还要用二维前缀和，时间复杂度 O(n3k)O(n^{3} k)O(n3k)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=101;int n,K,MOD,f[MN][MN][MN][MN],sum[MN][MN][MN][MN];signed main()&#123;    cin&gt;&gt;n&gt;&gt;K&gt;&gt;MOD;    f[1][0][1][1]=sum[1][0][1][1]=1;    for(int i=2;i&lt;=n;i++)&#123;        for(int j=0;j&lt;=K;j++)&#123;            for(int k=1;k&lt;=i;k++)&#123;                for(int p=1;p&lt;=i;p++)&#123;                    f[i][j][k][p]=((f[i][j][k][p]+sum[i-1][j-1][k-1][p-1])%MOD+MOD)%MOD;                    f[i][j][k][p]=((f[i][j][k][p]+sum[i-1][j][k-1][i-1]-sum[i-1][j][k-1][p-1])%MOD+MOD)%MOD;                    f[i][j][k][p]=((f[i][j][k][p]+sum[i-1][j][i-1][p-1]-sum[i-1][j][k-1][p-1])%MOD+MOD)%MOD;                    f[i][j][k][p]=((f[i][j][k][p]+sum[i-1][j-1][i-1][i-1]-sum[i-1][j-1][k-1][i-1]-sum[i-1][j-1][i-1][p-1])%MOD+sum[i-1][j-1][k-1][p-1]%MOD+MOD)%MOD;                    sum[i][j][k][p]=(((sum[i][j][k-1][p]+sum[i][j][k][p-1]-sum[i][j][k-1][p-1])%MOD+MOD)%MOD+f[i][j][k][p])%MOD;                &#125;            &#125;        &#125;    &#125;    cout&lt;&lt;sum[n][K][n][n];    return 0;&#125;
CF995F
等一会这不是排列吗？
我其实一开始只是想做关于排列，但是考虑到这一类思想在许多题目出现，选一些题目来见识见识。
“恰好” 一词很好，我们可以考虑转二项式反演，注意到分配的工资数很多，但实际上最多只能用 nnn 种。我们可以考虑记录相对大小关系。
我们不妨设 f(i,j)f(i,j)f(i,j) 表示以 iii 为根的子树，节点 iii 的权值相对大小是第 jjj 大的合法方案数，不难得出转移方程：
f(i,j)=∏v∈son(i)∑k=1jf(v,k)f(i,j)=\prod_{v\in son(i)} \sum\limits_{k=1}^j f(v,k)
f(i,j)=v∈son(i)∏​k=1∑j​f(v,k)
不难前缀和优化，时间复杂度 O(n2)O(n^2)O(n2)。
然而，注意到这个实际上是至多使用，因为我们可以重复分配同价值的工作，而在根节点 111 号点取道最大值。
我们令 gig_igi​ 表示用 [1,i][1,i][1,i] 的数填进去，恰好用 iii 种权值的方案数，考虑二项式反演，那么容斥方程如下：
gi=f(1,i)−∑j=1i−1(i−1j−1)gjg_{i}=f(1,i)-\sum\limits_{j=1}^{i-1} \binom{i-1}{j-1} g_{j}
gi​=f(1,i)−j=1∑i−1​(j−1i−1​)gj​
最终答案即为：
∑i=1min⁡(n,d)(di)gi\sum\limits_{i=1}^{\min(n,d)} \binom{d}{i} g_{i}
i=1∑min(n,d)​(id​)gi​
时间复杂度 O(n2)O(n^2)O(n2)。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr int MN=3000+15,MOD=1e9+7;int n,d,sum1,sum2,g[MN][MN],jc[MN],inv[MN];ll ans;vector&lt;int&gt; adj[MN];int ksm(ll a,int b)&#123;    ll ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret%MOD;&#125;void init()&#123;    jc[0]=1;    for(int i=1;i&lt;MN;i++) jc[i]=1ll*jc[i-1]*i%MOD;    inv[MN-1]=ksm(jc[MN-1],MOD-2);    for(int i=MN-2;i&gt;=0;i--)&#123;        inv[i]=1ll*inv[i+1]*(i+1)%MOD;    &#125;&#125;int getC(int a,int b)&#123;    if(a&lt;b) return 0;    return 1ll*jc[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;void dfs(int u)&#123;    for(int i=1;i&lt;=n;i++)&#123;        g[u][i]=1;    &#125;    for(auto v:adj[u])&#123;        dfs(v);        int sum=0;        for(int i=1;i&lt;=n;i++)&#123;            sum=(sum+g[v][i])%MOD;            g[u][i]=1ll*g[u][i]*sum%MOD;        &#125;    &#125;&#125;signed main()&#123;    init();    cin&gt;&gt;n&gt;&gt;d;    for(int i=2;i&lt;=n;i++)&#123;        int v;        cin&gt;&gt;v;        adj[v].push_back(i);    &#125;    dfs(1);    for(int i=1;i&lt;=n;i++)&#123;        g[1][i]=(g[1][i]+g[1][i-1])%MOD;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;i;j++)&#123;            g[1][i]=(g[1][i]-1ll*g[1][j]*getC(i,j)%MOD+MOD)%MOD;        &#125;    &#125;    sum1=sum2=1;    for(int i=1;i&lt;=n;i++)&#123;        sum1=1ll*sum1*(d-i+1)%MOD;        sum2=1ll*sum2*i%MOD;        ans=(ans+1ll*sum1*ksm(sum2,MOD-2)%MOD*g[1][i]%MOD)%MOD;    &#125;    cout&lt;&lt;ans%MOD;    return 0;&#125;
 从小到大逐一确定值
与确切的位置无关，与位置相对关系有关，在接下来的枚举最大值转移会介绍到，请读者一定要坚持啊啊啊。
 2. 连续段DP
连续段利用的是插入法的思想。
连续段 DP 主要用来解决一类计数问题，不光是排列计数问题，这类问题通常的特点是，如果只考虑在序列的两端插入，问题将容易解决（或者说有更简便的状态记录方式），状态转移的过程可能和相邻已插入元素的具体信息相关。
我们可以依次插入每个元素，连续段 dp 的元素插入操作只会在连续段的两端进行。
连续段起手 DP 式子：fi,jf_{i,j}fi,j​ 表示插入到第 iii 个数，划分出 jjj 个连续段的方案数。
转移考虑：

当前元素新开一个连续段。
接在已有连通块的首或尾。
元素用于连接两个连续段。

连续段 dp 的方式是将其理解为建立笛卡尔树的过程。新开一个连通块就是新建叶子节点，合并就是把两颗子树合并为一颗并以当前节点为根，接在首/尾就是选一颗子树作为当前节点的儿子，这样当前节点只会有一个儿子。当然，这只是一种理解方式，请不要和下面枚举最大值转移搞混。
连续段 dp 之所以能够避免记录信息的问题，是因为元素的插入，连续段的合并等操作均在连续段的两端进行，而在这类题目中，这种策略能使得状态维护变得简单。
而对于连续段的定义，每个题都有不同的设计方案，接下来我们通过例题一道一道来体会连续段的设计。
CF1515E Phoenix and Computers
我们手玩样例，不难发现一种组合方案：“ABABA” 其中 “A” 代表手动开启，“B” 代表依赖两边来开启。而方案中我们也可以打破这种，例如 ：”ABABAA“。
不难发现这是一个类似于连续段的形式，不妨考虑连续段 DP，设 f(i,j)f(i,j)f(i,j) 表示插入到第 iii 个数，划分出 jjj 个连续段的方案数。我们考虑分类讨论上面提到的 3 种情况：

新建段：显然由 f[i−1][j−1]f[i-1][j-1]f[i−1][j−1] 转移过来，这个连续段可以里面随便找位置插进去，一共 jjj 个空。乘法原理即可。

f[i][j]=f[i−1][j−1]×jf[i][j]=f[i-1][j-1]\times j
f[i][j]=f[i−1][j−1]×j

合并段：两个情况，第一个是中间空 2 个格子，随便加上一个另一个就能配对。第二种就是中间空了三个格子，这种情况加入中间的那个就可以连起来了。

f[i][j]=f[i−1][j+1]×2×jf[i][j]=f[i-1][j+1]\times 2 \times j
f[i][j]=f[i−1][j+1]×2×j
f[i][j]=f[i−3][j+1]×jf[i][j]=f[i-3][j+1]\times j
f[i][j]=f[i−3][j+1]×j

插段里：因为没有生成新的段，由 f[i−1][j]f[i-1][j]f[i−1][j] 转移过来，因为每一个段两端都可以加，直接乘上 j×2j\times 2j×2 即可。第二个就是隔一个加入，这样又会有一个自动生成，相当于加了 2 个。

f[i][j]=f[i−1][j]×j×2f[i][j]=f[i-1][j]\times j \times 2
f[i][j]=f[i−1][j]×j×2
f[i][j]=f[i−2][j]×2×jf[i][j]=f[i-2][j]\times 2 \times j
f[i][j]=f[i−2][j]×2×j
上面的情况结合起来即可，时间复杂度 O(n2)O(n^2)O(n2)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=520;int f[MN][MN],n,MOD;signed main()&#123;    cin&gt;&gt;n&gt;&gt;MOD;    f[0][0]=1;    for(int i=0;i&lt;n;i++)&#123;        for(int j=0;j&lt;=i;j++)&#123;            f[i+1][j+1]=(f[i+1][j+1]+f[i][j]*(j+1)%MOD)%MOD;            f[i+1][j]=(f[i+1][j]+f[i][j]*2*j%MOD)%MOD;            f[i+2][j]=(f[i+2][j]+f[i][j]*2*j%MOD)%MOD;            if(j&gt;=2)&#123;                f[i+2][j-1]=(f[i+2][j-1]+f[i][j]*(j-1)%MOD*2%MOD)%MOD;                f[i+3][j-1]=(f[i+3][j-1]+f[i][j]*(j-1)%MOD)%MOD;            &#125;        &#125;    &#125;    cout&lt;&lt;f[n][1]&lt;&lt;&#x27;\n&#x27;;    return 0;&#125;
CEOI 2016kangaroo

有多少长为 nnn 的排列 ppp 使得 ∀i∈(1,n)\forall i \in (1,n)∀i∈(1,n)，pip_ipi​ 两边的数同时小于或大于 pip_ipi​，且 p1=s,pn=tp_1=s,p_n=tp1​=s,pn​=t。

还是这种特殊限制，我们不妨考虑插入法。
不难手玩样例发现连续段的形式：大小大小大小大小。
我们设状态：fi,jf_{i,j}fi,j​ 表示插入到第 iii 个数，划分出 jjj 个连续段的方案数。我们考虑从小到大插入。

新建块：注意到后加入一定比 iii 大，所以后面插入在 iii 两边的数一定比 iii 大，所以不用考虑新开一段与前面段的大小限制。但是我们要考虑 p1p_{1}p1​ 与 pnp_{n}pn​ 的限制，如果 i&gt;si&gt;si&gt;s 不能，同理 i&gt;ti&gt;ti&gt;t，故转移为：f[i][j]=f[i−1][j−1]×(j−[i&gt;s]−[i&gt;t])f[i][j]=f[i-1][j-1]\times (j-[i&gt;s]-[i&gt;t])f[i][j]=f[i−1][j−1]×(j−[i&gt;s]−[i&gt;t])。
插入块两端：如果有这种情况的话，那么后面一定会有一个 &gt;i&gt;i&gt;i 的数接在 iii 另一侧，但是这样的话这不就是合并成一个块了吗，与题意不符。
合并块：转移是显然的和上面一样：f[i][j]=f[i−1][j+1]×jf[i][j]=f[i-1][j+1]\times jf[i][j]=f[i−1][j+1]×j。

时间复杂度 O(n2)O(n^2)O(n2)，故代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2e3+15,MOD=1e9+7;int n,s,t,f[MN][MN];signed main()&#123;    cin&gt;&gt;n&gt;&gt;s&gt;&gt;t;    f[1][1]=1;    for(int i=2;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=i;j++)&#123;            if(i!=s&amp;&amp;i!=t)&#123;                f[i][j]=((j*f[i-1][j+1])%MOD+f[i-1][j-1]*(j-(i&gt;s)-(i&gt;t))%MOD)%MOD;            &#125;            else f[i][j]=(f[i-1][j]+f[i-1][j-1])%MOD;        &#125;    &#125;    cout&lt;&lt;f[n][1];    return 0;&#125;
接下来我们来看不同种类的连续段设计类型：
COCI 2021/2022 #2 Magneti
样例 3 解释提示的很明显了吧。
我们还是考虑插入法，先按照特定顺序插入，例如从小到大插，根据 rir_iri​ 排序。
注意到样例 3 的解释中，图示是一个连续段的形式，自己手模以一下发现确实是这样的。
考虑连续段 DP，但是这样设状态是不太对的，因为我们还有不相互吸引的条件，如果不设置一个空位状态的话是无法处理限制的，所以我们要多设置空位的状态。
即：设 fi,j,kf_{i,j,k}fi,j,k​ 表示到第 iii 个位置，形成了 jjj 个连续段，空位使用了 kkk 个的方案数。
转移方法还是我们上面的分类讨论：

成新段：f[i][j][k]=f[i−1][j−1][k−1]f[i][j][k]=f[i-1][j-1][k-1]f[i][j][k]=f[i−1][j−1][k−1]。
接在段两端：f[i][j][k]=f[i][j][k]+f[i−1][j][k−ri]×j×2f[i][j][k]=f[i][j][k]+f[i-1][j][k-r_{i}]\times j \times 2f[i][j][k]=f[i][j][k]+f[i−1][j][k−ri​]×j×2。
合并段：f[i][j][k]=f[i−1][j+1][k−2]×ri+1]×j×(j+1)f[i][j][k]=f[i-1][j+1][k-2]\times r_{i}+1]\times j \times (j+1)f[i][j][k]=f[i−1][j+1][k−2]×ri​+1]×j×(j+1)。

最后统计答案考虑插板法，贡献为 fn,1,i×(l−i+nn)f_{n,1,i}\times \binom{l-i+n}{n}fn,1,i​×(nl−i+n​)，时间复杂度 O(n2l)O(n^{2}l)O(n2l)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=55,ML=1e4+5,MOD=1e9+7;int n,l,r[MN],f[MN][MN][ML],pw[ML],inv[ML];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;ML;i++) pw[i]=pw[i-1]*i%MOD;    inv[ML-1]=ksm(pw[ML-1],MOD-2);    for(int i=ML-2;i&gt;=0;i--) inv[i]=inv[i+1]*(i+1)%MOD;&#125;int getC(int a,int b)&#123;    if(a&lt;b) return 0;    return pw[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;signed main()&#123;    init();    cin&gt;&gt;n&gt;&gt;l;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;r[i];    &#125;    sort(r+1,r+1+n);    f[0][0][0]=1;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=i;j++)&#123;            for(int k=1;k&lt;=l;k++)&#123;                f[i][j][k]=f[i-1][j-1][k-1];                if(k&gt;=r[i]) f[i][j][k]=(f[i][j][k]+f[i-1][j][k-r[i]]*2*j%MOD)%MOD;                if(k&gt;=2*r[i]-1)&#123;                    f[i][j][k]=(f[i][j][k]+f[i-1][j+1][k-2*r[i]+1]*j%MOD*(j+1)%MOD)%MOD;                &#125;            &#125;        &#125;    &#125;    int ans=0;    for(int i=1;i&lt;=l;i++)&#123;        ans=(ans+f[n][1][i]*getC(l-i+n,n)%MOD)%MOD;    &#125;    cout&lt;&lt;ans%MOD;    return 0;&#125;
排列游戏
课上 yy 半天。
首先第一个不难发现的点，f(p)=12∑∣i−pi∣f(p)=\frac{1}{2} \sum\limits |i-p_{i}|f(p)=21​∑∣i−pi​∣，通过手模样例即可。
证明考虑首先每次操作代价如果为 xxx，那么最多使得 w(p)=∑∣i−pi∣w(p)=\sum\limits|i-p_{i}|w(p)=∑∣i−pi​∣ 减少 2x2x2x。并且总存在一种用 xxx 的方案使得将 w(p)w(p)w(p) 减少 2x2x2x。
接下来有一个很经典的 Trick，我们考虑将 i→pii\rightarrow p_ii→pi​ 连边，那么会出现如下奇妙的性质：

我们注意到， 每一个元素都构成了一个环，而且环内元素是可以相互置换的。总的来说会形成几个置换环，而对于置换环上的每个边 (u,v)(u,v)(u,v) 都有 ∣u−v∣|u-v|∣u−v∣ 的贡献。注意到这个置换环也是一个连续整段的性质，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示已经插入到第 iii 个数，当前形态的置换环（或者连续段）个数为 jjj，贡献和为 kkk 的方案数。
考虑怎么转移。新插入有如下可能：

新开环，这个又分成是否连成自环两种。
把一个没有封口的置换环变成了一个完整的环。
直接接在某个还未封口的置换环的开头或结尾。
接在某个未封口的结尾和另一个的开头，合并。

这样的时间复杂度是 O(nm2)O(nm^2)O(nm2)，加点至多把 iii 相邻的至多两条边计入贡献。
我们可以把每条边的贡献进一步细化到值域上，如果当前 jjj 条边还没有接续，如果想要达成 jjj 个置换环，总权值至少为 2+4+⋯+2j=j22+4+\dots+2j=j^22+4+⋯+2j=j2 级别，开 m\sqrt{m}m​ 即可，时间复杂度 O(nmm)O(nm\sqrt{m})O(nmm​)。
双倍经验：ABC134F
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=520,QM=80,MM=10005,MOD=1e9+7;int T,n,m,now,inv2=(MOD+1)/2,f[2][MN][MM],ans[MN][MM],pw[MM],inv[MM];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void initpw()&#123;    pw[0]=1;    for(int i=1;i&lt;MM;i++)&#123;        pw[i]=pw[i-1]*i%MOD;    &#125;    inv[MM-1]=ksm(pw[MM-1],MOD-2);    for(int i=MM-2;i&gt;=0;i--)&#123;        inv[i]=inv[i+1]*(i+1)%MOD;    &#125;&#125;int getC(int a,int b)&#123;    if(a&lt;b) return 0;    return pw[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;int getpw(int x)&#123;    if(x&amp;1) return MOD-1;    else return 1;&#125;void dodp()&#123;    initpw();    f[now][0][0]=1;    for(int i=1;i&lt;MN;i++)&#123;        now^=1;        for(int j=0;j&lt;=min(i,QM);j++)&#123;            for(int k=(j-1)*j;k&lt;MM;k+=2)&#123;                f[now][j][k]=0;                if(j&gt;0) f[now][j][k]=(f[now^1][j-1][k-2*(j-1)]+f[now][j][k]+MOD)%MOD;                if(k&gt;=2*j) f[now][j][k]=(f[now][j][k]+f[now^1][j][k-2*j]*(2*j+1)+MOD)%MOD;                if(k&gt;=2*(j+1)) f[now][j][k]=(f[now][j][k]+f[now^1][j+1][k-2*(j+1)]*(j+1)%MOD*(j+1)%MOD)%MOD;            &#125;        &#125;        for(int j=0;j&lt;MM;j++)&#123;            if(j&amp;1) continue;            int k=j/2,ret=f[now][0][j];            if(k&lt;=i)&#123;                (ret+=(getpw((i&amp;1)+(k&amp;1))*getC(i-1,k)))%=MOD;            &#125;            ret=ret*inv2%MOD;            ans[i][j]=((j&gt;0?ans[i][j-2]:0)+ret)%MOD;        &#125;    &#125;&#125;signed main()&#123;    dodp();    cin&gt;&gt;T;    while(T--)&#123;        cin&gt;&gt;n&gt;&gt;m;        cout&lt;&lt;ans[n][m*2]&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
摩天大楼 / Skyscraper
考虑插入法，从小到大插入可以逃掉绝对值的课。
我们把贡献拆开，考虑每一个 BiB_iBi​ 的贡献，发现会有三种可能：−2Bi,0,2Bi-2B_{i},0,2B_{i}−2Bi​,0,2Bi​。而具体选哪个取决于左右两侧的数是否比他大。
我们按照值域的顺序来插入，从小到大插，这个时候我们要确定的是绝对位置。f(i,j,k)f(i,j,k)f(i,j,k) 表示当前到第 iii 个值，形成 jjj 个连续段，当前所有数贡献为 kkk 的方案数。
转移时还是三个讨论情况，但新的数两侧是否紧贴着连续段就代表了两侧的数是否比他大。由于序列的两侧不能再插入元素，因此还需要记录两个 0/1 变量表示当前序列的左右两侧是否已经被占据了。
还是接着讨论三个情况，时间复杂度 O(n3L)O(n^3L)O(n3L)，但是代码写了 1145 行，于是不放了 www。
 3. 枚举最大值转移DP
枚举最大值转移 DP，实际上就是排列在笛卡尔树结构上的 DP（注意不是真正的笛卡尔树），有点类似于分治的思想。其作用就是用来解决一类取最大值和最小值的排列计数题型。接下来均以最大值来举例子：
我们利用的是一个笛卡尔树的性质：我们设一个区间 [l,r][l,r][l,r] 最大值的位置为 pospospos，发现可以把区间分成 [l,pos][l,pos][l,pos] 和 [pos,r][pos,r][pos,r] 两个区间，并且两个区间互不影响，也就是说我左边怎么乱搞放数也不会影响右边的区间。这个时候全局最大值作为区间的端点出现。

我们可以自底向上类似 “树形 DP” 来合并区间，然而实际上我们在计数 DP 里大多数情况并不能真的建立笛卡尔树跑 DP。通常来说，我们会枚举这个区间最大值（即笛卡尔树的 “根节点”）的位置出现在哪里，我们在这里不妨设位置为 kkk，区间长度为 iii，枚举之后，会从左儿子即 k−1k-1k−1 和右儿子 i−ki-ki−k 转移过来（注意这里舍弃了中间最大值的元素），但我们仍要考虑分配左儿子权值的情况，也就是说我们要乘上 (i−1k−1)\binom{i-1}{k-1}(k−1i−1​) 分配的情况。
其本质就是类似于笛卡尔树的分治结构，我们在合并时确定相对大小，把组合数乘起来，但要注意的是，我们这种方法其实是从小到大逐一确定值的扫描线顺序。
PA2018 Skwarki
首先考虑计数 DP，但是直接做发现不太好做，我们思考能否对删除操作进行进一步转化成好的条件取做。
对于原题目的限制，即只要一个数左右两侧一旦有一个大的就会被删，既有位置限制和数值限制。一步很妙的转化的就是将这个思想转成笛卡尔树，那么删除操作就是在笛卡尔树上删有儿子的点。
我们不妨设 gug_{u}gu​ 表示删空 uuu 子树（包括 uuu 号点）的所需次数，因为题意表明删除操作是同时进行的，不难有如下转移：
gu=max⁡{gls,grs,min⁡(gls,grs)+1}g_{u}=\max\left\{ g_{\text{ls}},g_{\text{rs}},\min(g_{\text{ls}},g_{\text{rs}})+1 \right\}
gu​=max{gls​,grs​,min(gls​,grs​)+1}
其中 ls 表示左儿子，rs 表示右儿子，注意在没有左儿子和右儿子的时候要特判。
方程表明如下情况：

gls,grsg_{\text{ls}},g_{\text{rs}}gls​,grs​：因为操作是并行的，我们可以直接对左右儿子删除操作取 max⁡\maxmax 即可。
某一子树删除完毕后，花一次操作删根节点 uuu 让后把剩下子树接上去。

注意到删除最多删除树的一半节点，也就是当删除操作数量 k≤log⁡(n)k\le \log(n)k≤log(n) 时才可能有解。
验证考虑分类讨论，讨论左右子树操作次数相同和不同的情况即可简明验证。不难发现的一点是答案一定是全局的最大值，并且一定作为叶子节点出现。
接下来我们考虑如何把它搬到计数 DP 上，真的在笛卡尔树上 DP 显然是不现实的，因为树的结构会改变，考虑我们上面所提到的，我们可以这么设置方程：设 f(i,j,0/1)f(i,j,0/1)f(i,j,0/1) 表示共 iii 个元素的排列，恰好 jjj 次删空，全局最大值是否在区间的端点。
对于 f(i,j,0)f(i,j,0)f(i,j,0) 的转移，根据我们上面所述的笛卡尔树的节点，我们需要枚举区间的最大值的位置来进行转移，对于每个位置 kkk 在分配左儿子的方案有 (i−1k−1)\binom{i-1}{k-1}(k−1i−1​) 种方案给乘起来，左儿子 f(k−1,l,0)f(k-1,l,0)f(k−1,l,0) 右儿子 f(i−k,r,0)f(i-k,r,0)f(i−k,r,0)，其中 l,rl,rl,r 是枚举儿子区间最大值的位置，转移即可。
考虑 f(i,j,1)f(i,j,1)f(i,j,1) 的转移，我们不考虑区间端点到底在哪里，因为排列的对称性可以完全统计答案，那么转移只需统计左儿子或者右儿子任一出现最大值的方案数即可，再乘上 (i−1k−1)\binom{i-1}{k-1}(k−1i−1​) 即可。
转移的 jjj 需要通过上面的 ggg 单独计算，答案统计仍枚举最大值转移即可，见代码，时间复杂度 O(n2k2)O(n^{2}k^{2})O(n2k2)。
注意到 kkk 最大为 log⁡(n)\log(n)log(n)，那么时间复杂度就是 O(n2log⁡2n)O(n^2 \log^{2} n)O(n2log2n)，这个复杂度下会被卡常，需要减少取模操作。注意到转移方程可以前缀和优化，那么时间复杂度即为 O(n2log⁡n)O(n^{2} \log n)O(n2logn)，这里就不用关心了。
CF1580B
O(n5)O(n^5)O(n5) 很幽默吗？
考虑笛卡尔树排列 DP，问题转化为求笛卡尔树深度为 mmm 的点有 kkk 个排列的个数，考虑 DP，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示共 iii 个数，笛卡尔树上深度为 jjj 的节点有 kkk 个，考虑枚举最大值转移，枚举左侧有 qqq 个深度为 jjj 个节点，贡献为 f(p−1,j−1,q)×f(i−p,j−1,k−q)×(i−1p−1)f(p-1,j-1,q)\times f(i-p,j-1,k-q) \times \binom{i-1}{p-1}f(p−1,j−1,q)×f(i−p,j−1,k−q)×(p−1i−1​)，O(n5)O(n^5)O(n5) 卡常即可，实在不行因为很多答案为 000，考虑设 g(i,j)g(i,j)g(i,j) 表示共 iii 个数，深度为 jjj 的节点最多有多少个，简单 DP 即可，时间复杂度 O(n3)O(n^3)O(n3)。
不要开 long long！
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=101;int f[MN][MN][MN],C[MN][MN];int g[MN][MN],pw[MN],inv[MN],n,m,K,MOD;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++) pw[i]=1ll*pw[i-1]*i%MOD;    for(int i=0;i&lt;=n;i++)&#123;        C[i][0]=C[i][i]=1;        for(int j=1;j&lt;i;j++)&#123;            C[i][j]=(C[i-1][j-1]+C[i-1][j])%MOD;        &#125;    &#125;&#125;int getC(int a,int b)&#123;    if(a&lt;b||a&lt;0||b&lt;0) return 0;    return C[a][b];&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;K&gt;&gt;MOD;    init();    g[1][1]=1;    for(int i=2;i&lt;=n;i++)&#123;        g[i][1]=1;        for(int j=2;j&lt;=i;j++)&#123;            for(int k=1;k&lt;=i;k++)&#123;                g[i][j]=max(g[i][j],g[k-1][j-1]+g[i-k][j-1]);            &#125;        &#125;    &#125;    if(K&gt;g[n][m])&#123;        cout&lt;&lt;0;        return 0;    &#125;    f[1][1][1]=1;    for(int i=0;i&lt;=n;i++) f[0][i][0]=1;    for(int i=0;i&lt;=n;i++) f[1][i][0]=1;    f[1][1][0]=0;    for(int i=2;i&lt;=n;i++)&#123;        f[i][1][1]=pw[i];        for(int j=2;j&lt;=min(i,m);j++)&#123;            for(int k=0;k&lt;=min(i-j+1,K);k++)&#123;                for(int p=1;p&lt;=i;p++)&#123;                    for(int l=0;l&lt;=k;l++)&#123;                        (f[i][j][k]+=(long long)f[p-1][j-1][l]*f[i-p][j-1][k-l]%MOD*getC(i-1,p-1)%MOD)%=MOD;                    &#125;                &#125;            &#125;        &#125;        for(int j=min(i,m)+1;j&lt;=m;j++) f[i][j][0]=pw[i];    &#125;    cout&lt;&lt;f[n][m][K];    return 0;&#125;
 4. 容斥原理与反演
这里的容斥原理与反演就是泛指题型了，主要思想还是利用扫描线或插入法的思想，但是我们利用上述技巧来统计答案或者优化，这一类题型比较偏向于上述的从左往右逐一确定与从小到大逐一确定排名。
例题 P3349小星星
暴力的想法就是定义 f(i,j,S)f(i,j,S)f(i,j,S) 表示节点 iii 编号为 jjj，子树内编号集合为 SSS，时间复杂度 O(n3×3n)O(n^3 \times 3^n)O(n3×3n)，不能通过。
Trick：可以把一个 111 到 nnn 的排列可以看作每个元素至少出现一次或至多出现一次。
考虑扫描线确定值，定义 f(i,j)f(i,j)f(i,j) 表示节点 iii 编号为 jjj 的方案数，注意到有重复元素，套路的进行状压，钦定树上每个点的编号必须是 SSS 的子集，考虑容斥记录答案，即 S(n)−S(n−1)+S(n−2)−…S(n)-S(n-1)+S(n-2)-\dotsS(n)−S(n−1)+S(n−2)−…，时间复杂度 O(n3×2n)O(n^3\times 2^n)O(n3×2n)。
或者钦定某些元素不能出现，设为集合 SSS，做 O(n3)O(n^3)O(n3) 的树形 DP，这里还是定义 f(i,j)f(i,j)f(i,j) 表示节点 iii 编号为 jjj 的方案数，但是要求 j∉Sj \notin Sj∈/S，设得到的答案为 g(S)g(S)g(S)，答案为 ∑(−1)∣S∣g(S)\sum\limits (-1)^{|S|} g(S)∑(−1)∣S∣g(S)，复杂度同上。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=18;int n,m,f[MN][MN],ans;vector&lt;int&gt; adj[MN],lst;bool mp[MN][MN];void init()&#123;    memset(f,0,sizeof(f));    lst.clear();&#125;void dfs(int u,int pre)&#123;    for(auto p:lst) f[u][p]=1;    for(auto v:adj[u])&#123;        if(v==pre) continue;        dfs(v,u);    &#125;    for(auto p:lst)&#123;        for(auto v:adj[u])&#123;            if(v==pre) continue;            int sum=0;            for(auto q:lst)&#123;                if(!mp[p][q]) continue;                sum+=f[v][q];            &#125;            f[u][p]*=sum;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        mp[u][v]=mp[v][u]=1;    &#125;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    for(int i=0;i&lt;(1&lt;&lt;n);i++)&#123;        init();        for(int j=1;j&lt;=n;j++)&#123;            if(!((i&gt;&gt;(j-1))&amp;1)) lst.push_back(j);        &#125;        dfs(1,0);        int sum=0;        for(auto p:lst) sum+=f[1][p];         ans+=sum*(((__builtin_popcount(i))&amp;1)?-1:1);    &#125;    cout&lt;&lt;ans;    return 0;&#125;
练习：LOJ575 不等关系（分治 NTT）
 5.总结
到了这里，我们可以基本了解对于排列令项限制问题的基本形式，基本思路以及基本套路。
事实上，对于限制的排列计数问题，其核心思想是围绕着插入法来进行操作的。除插入法的核心操作之外，我们还有一些优化技巧，例如连续段和枚举最大值转移。对于容斥原理是扫猫线上的一类统计答案的技巧，通过一些计数技巧来优化时间复杂度或者统计答案。
可能一些题和类型我还是没见过的，欢迎大家在讨论区分享。

参考：


YeahPotato的dp 题方法总汇


ListenSnow的CF995F题解


ChroneZ的浅谈一类处理状态转移依赖邻项的排列计数问题的 dp 策略


Cultreborn的组合数学知识简明大全


蓝书


云浅之处的容斥与反演技巧


看在这么用心的文章上，求留个赞再走吧！awa
哦对这是我的博客不是洛谷，好像不能点赞www，那就求贯注主播谢谢喵~。
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>点分治</title>
    <url>/posts/34afe2f1/</url>
    <content><![CDATA[ 点分治
点分治，又称淀粉质，淀粉脂。是用来解决树上路径问题。
 1.例题引入
P3806 点分治板子

给定一棵有 n 个点的树，询问树上距离为 k 的点对是否存在。

就是求无根树中长度为k的路径数目
暴力做法：考虑枚举每个点，每一次都统计距离路径。时间复杂度O(n2)O(n^2)O(n2)
我们假设一个点为根节点rtrtrt，把它先转化为有根树
考虑对每个路径进行统计，路径统计可以分为2类路径，一个路径是过当前点rtrtrt，一个路径是不过当前点rtrtrt。
这样分类是显然正确的，而且对于不经过ttt的路径，它们一定在ttt的某个子节点所构成的子树中。
对于前者，设dis[u]dis[u]dis[u]表示从节点uuu到根节点rtrtrt的路径长度，则uuu到vvv的路径长度就是dis[u]+dis[v]dis[u]+dis[v]dis[u]+dis[v]
对于后者，我们可以考虑重新统计子树，找到子树的根，让后再子树求第一类路径。
就是分治的思想，点分治途径中每一层所有递归都对点仅处理一次，即时间复杂度O(T×N)O(T\times N)O(T×N) ，TTT即子树大小。
若树退化为一条链，那么T=nT=nT=n，总时间复杂度降为O(n2)O(n^2)O(n2)。那怎么选根节点呢？
我们观察时间复杂度，NNN是固定的，我们只需要让TTT平均小即可。
那么这个时候就要请出——树的重心
树的重心有一个性质，就是它的最大子树大小不大于整颗树大小的一半，也就是说刚好能满足我们即不能退化为链又能满足平均更小

我们可以先求树的重心，代码如下
void dfs(int u,int fa)&#123;    //siz即子树大小，maxp即最大子树大小    // sum即总节点数    siz[u]=1;    maxp[u]=0;    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(v==fa||vis[v]) continue;        dfs(v,u);        siz[u]+=siz[v];        maxp[u]=max(maxp[u],siz[v]);    &#125;    maxp[u]=max(maxp[u],sum-siz[u]);    //考虑与u相邻节点子树的大小    if(maxp[u]&lt;maxp[rt]) rt=u;&#125;
我们在分治的时候每次选取子树的重心为子树的树根进行处理，这样的TTT就不会超过logNlogNlogN层，故时间复杂度为O(nlog⁡n)O(n\log n)O(nlogn)
回到本题，本题可以离线询问，并在分治中处理答案。
对于每一次处理子树，我们需要处理每个节点到rtrtrt的深度。
令judge[dis]judge[dis]judge[dis]表示在子树中是否存在某个点到rtrtrt距离为disdisdis
离线询问用queryqueryquery数组记录。
若当前询问距离为query[j]query[j]query[j]
如果judge[query[j]−rem[i]]=1judge[query[j]-rem[i]]=1judge[query[j]−rem[i]]=1，那么表明存在这个点。则代表询问的路径存在，其实就是将子树内的节点进行配对，看是否有满足询问的条件。
配对完后继续下一个子树的处理。
记得查询完后清空judge，我们发现数组太长每次memset会炸时间，那么就考虑记录rem中出现的数，考虑用sss数组维护出现个数，这样每一次就不用memset只需要遍历数组赋值就好了。
故代码如下
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=1e5+15;const int INF=1e9;int n,m,query[MN],sum,siz[MN],dis[MN],maxp[MN],rt;int s[MN],top,rem[MN];bool test[MN],judge[MN],vis[MN];struct edge&#123;    int v,w;&#125;;vector&lt;edge&gt; adj[MN];void dfs(int u,int fa)&#123;    //siz即子树大小，maxp即最大子树大小    siz[u]=1;    maxp[u]=0;    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(v==fa||vis[v]) continue;        dfs(v,u);        siz[u]+=siz[v];        maxp[u]=max(maxp[u],siz[v]);    &#125;    maxp[u]=max(maxp[u],sum-siz[u]);    //考虑与u相邻节点子树的大小    if(maxp[u]&lt;maxp[rt]) rt=u;&#125;void getdis(int u,int fa)&#123;    rem[++rem[0]]=dis[u];    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(v==fa||vis[v]) continue;        dis[v]=dis[u]+w;        getdis(v,u);    &#125;&#125;void clac(int u)&#123;    int p=0;    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(vis[v]) continue;        rem[0]=0,dis[v]=w;        getdis(v,u);//重新计算深度        for(int i=rem[0];i&gt;=1;i--)&#123;            for(int j=1;j&lt;=m;j++)&#123;                if(query[j]&gt;=rem[i])&#123;                    test[j]|=judge[query[j]-rem[i]];                    //要特判是否大于rem[i]                &#125;            &#125;        &#125;        for(int i=rem[0];i&gt;=1;i--)&#123;            s[++p]=rem[i];            judge[rem[i]]=1;//记录距离出现过        &#125;    &#125;    for(int i=1;i&lt;=p;i++)&#123;        judge[s[i]]=0;    &#125;&#125;void solve(int u)&#123;    vis[u]=1;//当前节点已经处理    judge[0]=1;//初始化    clac(u);//计算以当前节点为根的子树贡献    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(vis[v]) continue;        sum=siz[v];        maxp[rt=0]=INF;        dfs(v,0);//找出子树重心        solve(rt);//solve！    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;n;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        adj[u].push_back(&#123;v,w&#125;);        adj[v].push_back(&#123;u,w&#125;);    &#125;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;query[i];    &#125;    maxp[rt]=sum=n;    dfs(1,0);    solve(rt);    for(int i=1;i&lt;=m;i++)&#123;        if(test[i]) cout&lt;&lt;&quot;AYE\n&quot;;        else cout&lt;&lt;&quot;NAY\n&quot;;    &#125;    return 0;&#125;
 2.P4178 Tree

给定一棵 n个节点的树，每条边有边权，求出树上两点距离小于等于 k 的点对数量。

我们发现这个题和上一道唯一一点不同在于这个题是小于等于。
当然我们可以和上一题一样算dis，但是在枚举路径的时候很麻烦。
我们考虑在一条合法路径上，路径上的点肯定都能满足条件贡献答案。

现在问题在于如何快速统计路径答案？题目要求是len≤klen \le  klen≤k ,那么我们可以考虑对求的的深度进行排序。
在处理出来disdisdis数组后，我们可以利用其对子树节点进行排序，设处理出来后的节点数组为scntscntscnt，排序后可以考虑双指针，左右指针分别在数组一端，若dis[scnt[l]]+dis[scnt[r]]&gt;kdis[scnt[l]]+dis[scnt[r]]&gt;kdis[scnt[l]]+dis[scnt[r]]&gt;k 则缩小右指针
直到dis[scnt[l]]+dis[scnt[r]]≤kdis[scnt[l]]+dis[scnt[r]]\le kdis[scnt[l]]+dis[scnt[r]]≤k 显然答案贡献为r−lr-lr−l，之后不断右移左指针直到相遇，这样的时间复杂度是O(n)O(n)O(n)。
但是这样会有一个问题，如果单个节点重复贡献，有没有这种情况发生？有的兄弟有的。

很丑，但大概是这么个意思，当计算clac(u,0)的时候，这个函数统计的是所有在u的分治区域内，距离之和&lt;=k的点对。这其中包括了同一子树内的点对，这些点对虽然它们的路径可能在子树内部，但因为当前的根是u，所以在计算的时候，它们的路径会被错误地认为经过u。但实际上，这些点对应该属于该子树的内部问题，会在后续递归处理该子树时被正确计算。因此，为了避免重复计算，需要将这些情况减去。
如何解决？考虑容斥原理，很容易发现这种情况下每个节点的答案都会算至多2次（你不可能有好几个根节点吧…)，总的结果是当前根的所有可能点对，减去各个子树内部的情况。所以我们可以在solvesolvesolve函数中先统计完以uuu为根的答案，让后不更新深度，遍历子节点v时，计算v子树中节点到u的距离（初始化为w，即u到v的边权），并统计这些点对。这些点对属于同一子树，其路径不经过u，会被后续递归处理。此处减去以避免重复计数。
故代码如下
#include&lt;bits/stdc++.h&gt;using namespace std;const int MN=1e5+15,INF=1e9;int n,m,siz[MN],maxp[MN],sum,dis[MN],rem[MN],rt,res;bool vis[MN];struct edge&#123;    int v,w;&#125;;vector&lt;edge&gt; adj[MN];bool cmp(int x,int y)&#123;    return dis[x]&lt;dis[y];&#125;void dfs(int u,int fa)&#123;    siz[u]=1;    maxp[u]=0;    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(vis[v]||v==fa) continue;        dfs(v,u);        siz[u]+=siz[v];        maxp[u]=max(maxp[u],siz[v]);    &#125;    maxp[u]=max(maxp[u],sum-siz[u]);    if(maxp[u]&lt;maxp[rt]) rt=u;&#125;void getdis(int u,int fa)&#123;    rem[++rem[0]]=u;    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(v==fa||vis[v]) continue;        dis[v]=dis[u]+w;        getdis(v,u);    &#125;&#125;int clac(int u,int w)&#123;    rem[0]=0;    dis[u]=w;    getdis(u,0);    sort(rem+1,rem+rem[0]+1,cmp);    int l=1,r=rem[0],ans=0;    while (l&lt;=r)&#123;        if(dis[rem[l]]+dis[rem[r]]&lt;=m)&#123;            ans+=r-l;            l++;        &#125;else r--;    &#125;    return ans;&#125;void solve(int u)&#123;    vis[u]=1;    res+=clac(u,0);    for(auto e:adj[u])&#123;        int v=e.v,w=e.w;        if(vis[v]) continue;        res-=clac(v,w);        sum=siz[v];        rt=0;        maxp[rt]=INF;        dfs(v,u);        solve(rt);    &#125;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;n;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        adj[u].push_back(&#123;v,w&#125;);        adj[v].push_back(&#123;u,w&#125;);    &#125;    cin&gt;&gt;m;    maxp[rt]=sum=n;    dfs(1,0);    solve(rt);    cout&lt;&lt;res;    return 0;&#125;
 3. P2664 树上游戏

lrb 有一棵树，树的每个节点有个颜色。给一个长度为 nnn 的颜色序列，定义 s(i,j)s(i,j)s(i,j) 为 iii 到 jjj 的颜色数量。以及
sumi=∑j=1ns(i,j)sum_i=\sum_{j=1}^n s(i, j)
sumi​=j=1∑n​s(i,j)
求出所有的sumisum_isumi​

求单个路径上的颜色数量，我们可以像之前的题一样在remremrem数组中维护颜色信息，但是问题出现在了合并答案，合并信息很难合并因为rem数组中的数据满足DFSDFSDFS序，但是仅凭dfs序无法知道是否处于同一路径。
我们考虑能否转化sumsumsum，对于sumsumsum来说影响他的只有经过边的点颜色在不同的时候有贡献，并且统计的颜色数量是要求不相同的。
设cnt[j]cnt[j]cnt[j]表示颜色为jjj的情况下，以iii为端点包含jjj颜色的路径数量，我们显然可以得到
sum=∑j∈color(u,v)cntjsum=\sum\limits_{j\in color(u,v)}{cnt_j}
sum=j∈color(u,v)∑​cntj​
其中color就是在路径上是否有这个颜色，如果没有默认我们置cnt[j]=0cnt[j]=0cnt[j]=0。
显然我们可以在dfs子树是可以统计以rt为根节点到子树的答案。时间复杂度O(nlog⁡n)O(n\log n)O(nlogn)
但是跨子树的答案如何统计？显然这个时候rtrtrt根节点就是路径的拐点。
考虑对当前根节点的一个字节点ddd，ddd的子树中任取一个点为vvv
考虑(u,v)(u,v)(u,v)路径上出现的颜色，数量设为nownownow，uuu除了ddd以外其他子树的总大小为siz1siz1siz1，那么贡献即为num×siz1num\times siz1num×siz1
考虑没有出现过的颜色jjj，它的贡献来自于uuu除了ddd以外其他所有子树的cntjcnt_jcntj​，那么这部分的答案就是∑j∉(u,v)cntj\sum\limits_{j\notin (u,v)}{cnt_j}j∈/(u,v)∑​cntj​
代码也就呼之欲出了
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MN=1e5+15,INF=1e9;// sum就是题面意思的sum答案,summ即节点总数// visc即表示这个颜色已经访问过了// cnt即子树对当前节点的贡献,下表应为颜色。siz即子树大小ll n,c[MN];int vis[MN];ll cnt[MN],siz[MN],sum,summ,ans[MN],visc[MN];vector&lt;int&gt; adj[MN];ll rt,maxp[MN];void dfs(int u,int fa)&#123;    siz[u]=1;    maxp[u]=0;    for(auto v:adj[u])&#123;        if(v==fa||vis[v]) continue;        dfs(v,u);        siz[u]+=siz[v];        maxp[u]=max(maxp[u],siz[v]);    &#125;    maxp[u]=max(maxp[u],summ-siz[u]);    if(maxp[u]&lt;maxp[rt])&#123;        rt=u;    &#125;&#125;void getdis(int u,int fa,int now)&#123;    // now即当前路径（不含u）的颜色数    siz[u]=1;    if(!visc[c[u]])&#123;        sum-=cnt[c[u]];        now++;    &#125;    visc[c[u]]++;    ans[u]+=sum+now*siz[rt];    // 前面是其他颜色到当前节点的贡献    // 后面是跨rt（就是跨子树,相当于rt就是路径拐点）的贡献    for(auto v:adj[u])&#123;        if(v==fa||vis[v]) continue;        getdis(v,u,now);        siz[u]+=siz[v];    &#125;    visc[c[u]]--;    if(!visc[c[u]])&#123;        sum+=cnt[c[u]];// 回溯防止处理下一个子树出问题    &#125;&#125;void getcnt(int u,int fa)&#123;    if(!visc[c[u]])&#123;        // 统计答案        cnt[c[u]]+=siz[u];        sum+=siz[u];    &#125;    visc[c[u]]++;    for(auto v:adj[u])&#123;        if(v==fa||vis[v]) continue;        getcnt(v,u);    &#125;    visc[c[u]]--;&#125;void clear(int u,int fa,int now)&#123;    if(!visc[c[u]])&#123;        now++;    &#125;    visc[c[u]]++;    ans[u]-=now;//减去重复贡献    ans[rt]+=now;//加上贡献    for(auto v:adj[u])&#123;        if(v==fa||vis[v]) continue;        clear(v,u,now);    &#125;    visc[c[u]]--;    cnt[c[u]]=0;&#125;void clearcnt(int u,int fa)&#123;    cnt[c[u]]=0;    for(auto v:adj[u])&#123;        if(v==fa||vis[v]) continue;        clearcnt(v,u);    &#125;&#125;void solve(int u)&#123;    vis[u]=1;    ans[u]++;    rt=u;    siz[u]=sum=cnt[c[u]]=1;    visc[c[u]]++;    for(auto v:adj[u])&#123;        if(vis[v]) continue;        getdis(v,u,0);        getcnt(v,u);        siz[u]+=siz[v];        cnt[c[u]]+=siz[v];        sum+=siz[v];    &#125;    clearcnt(u,0);    //逆序处理是为了保证所有子树对路径的贡献都被覆盖    siz[u]=sum=cnt[c[u]]=1;    for(int i=adj[u].size()-1;i&gt;=0;i--)&#123;        int v=adj[u][i];        if(vis[v]) continue;        getdis(v,u,0);        getcnt(v,u);        siz[u]+=siz[v];        cnt[c[u]]+=siz[v];        sum+=siz[v];    &#125;    visc[c[u]]--;    clear(u,0,0);//清理并统计2次的答案    //继续分治    for(auto v:adj[u])&#123;        if(vis[v]) continue;        summ=siz[v];        rt=0;        maxp[rt]=INF;        dfs(v,u);        solve(rt);    &#125;&#125;int main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;c[i];    &#125;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    summ=n;    maxp[rt]=n+1;    dfs(1,0);    solve(rt);    for(int i=1;i&lt;=n;i++)&#123;        cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 3.总结
在面对不同点分治题型的时候，要设计不同的clac函数。

]]></content>
      <categories>
        <category>图论</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>点分治优化DP</title>
    <url>/posts/2e160504/</url>
    <content><![CDATA[ 1. 一类连通块问题的优化
 1.1 介绍
对于一类树上连通块或路径问题，合并子树（可以看作卷积）的复杂度很高，但是插入一个点和自己与自己合并（可以看作点积）的复杂度可以用点分治来进行优化。
以一道例题引入：Ridiculous Netizens - HDU 6643
首先你会想到用树形背包来做，但是问题在于如果你直接设置为 f(u,i)f(u,i)f(u,i) 表示为 uuu 子树内乘积为 iii 的方案数，但是直接做会出现两个问题：

你无法保证你选取的方案子树是连通的。
在不考虑乘积的情况下，你的合并是 O(mm)O(m\sqrt{m})O(mm​) 的，因为你要枚举约数。

先保证状态是 O(nm)O(nm)O(nm)，然后我们考虑把第一点解决掉，第一点的问题就是在于我们一般树形背包是自底向上合并的，但是这样可能中途就会断掉。
转化思路，我们考虑每个点作为连通块内部的贡献，我们先考虑强制这个连通块经过根，可以发现在这种情况下，如果一个点在连通块中，那么它的父亲必须也在。
自此，由于选取一个点就必须选它的父亲，所以要去选一个子树就必须选这个子树的根。我们可以把原命题转化为一个单点加入问题。
设 f(u,i)f(u,i)f(u,i) 表示  内加入点的构成的子树，乘积为 iii 的方案数。先定根，然后我们从根开始自上往下进行 DFS，对于每个点进行选或者不选的决策，如果不选那就不从父亲计算贡献，新开 DP 方案；如果选那就维护从父亲转移过来的贡献，然后 dfs 儿子，最后合并儿子的答案，我们就得到了这个点子树内的答案，对于每一个点枚举其作为连通块的根，然后每个点都暴力跑 DFS 对子树（根节点不能遍历父节点）求出答案。
如果认为自顶向下的 DP 比较难想，当然我们可以在 DFS 序上进行 DP，这样选择一个结点就是转移到 DFS 上的下一个，而跳过一个结点就相当于跳过整棵子树，快速跳转即可。设 f(i,j)f(i,j)f(i,j) 表示 uuu 子树内 DFS 序考虑到前 iii 个节点，乘积为 jjj 的方案数，同理对于每一个点暴力求出 DFS 序然后进行规划求出答案。
时间复杂度都是 O(n2mm)O(n^2m\sqrt{m})O(n2mm​) 的。
然后考虑第二个情况，我们不考虑乘积暴力合并是 O(mm)O(m\sqrt{m})O(mm​) 的，我们的目标是要优化到 O(nm)O(n\sqrt{m})O(nm​) 的状态。看起来很难做，考虑发掘性质，注意到我们枚举约数中使得 i←i+1i\leftarrow i+1i←i+1 的时候，所管辖的区间有很多重叠的部分，同时又注意不到，⌊xnm⌋=⌊xnm⌋\lfloor \dfrac{x}{nm} \rfloor=\lfloor \dfrac{\dfrac{x}{n}}{m} \rfloor⌊nmx​⌋=⌊mnx​​⌋，可以用整除可以把 mmm 整除 iii 的值定义到状态里面。根据整除分块状态数变成 O(m)O(\sqrt{m})O(m​)，根据结论值相同在以后的转移方法也相同所以正确性得到保证，那么状态就变为 O(nm)O(n\sqrt{m})O(nm​) 了，但是这不是文章的重点。
说了这么多的求解，终于到优化了。由于上面的统计连通块包含根节点的情况复杂度会到达 O(n2m)O(n^2\sqrt{m})O(n2m​)，瓶颈在于子树大小过大，我们考虑如何减小子树规模，发现我们枚举根的情况可以等价于不包含根就分裂成若干个互不相同的子树，变成子问题，重复以上操作。这种情况我们可以思考点分治，降低分割出来的子树大小，可以将复杂度降低到 O(nmlog⁡n)O(n\sqrt{m} \log n)O(nm​logn)。

复个小盘，点分治优化 DP 的关键就是在于减小子树规模，降低 DP 的复杂度。一般来说，点分治优化 DP 要求满足以下的条件：

问题是根独立的，即问题的答案不依赖选定的根。
问题可以通过合并子树的答案得到。
合并子树复杂度大，但是处理单个节点的贡献可以快速计算。

要对于每个连通块求一个什么东西，我们先考虑强制这个连通块经过根，可以发现在这种情况下，如果一个点在连通块中，那么它的父亲必须也在。所以我们先从根自上向下进行 DP，对于每个点进行选/不选的决策，如果不选那就新开一份 dp 去做；如果选那就操作维护父亲对 dp 的贡献，然后 DFS 儿子；最后把儿子的 DP 值的答案合并上来，我们就得到了这个点子树内的答案。当然最后要强制选重心。
以下直接 DFS 实现版本，若 DFN 可以参考 crashed 的题解。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=2e3+15,MM=1e6+15,INF=1e18,MOD=1e9+7;int n,m,a[MN],w[MN],st[MM],ctot,ans,f[MN][MN];vector&lt;int&gt; adj[MN];namespace Tree&#123;    int dep[MN],maxp[MN],siz[MN],dfn[MN],rt,sum;    bool vis[MN];    void dfs1(int u,int pre)&#123; // getrt        siz[u]=1;        maxp[u]=0;        for(auto v:adj[u])&#123;            if(v==pre||vis[v]) continue;            dfs1(v,u);            siz[u]+=siz[v];            maxp[u]=max(maxp[u],siz[v]);        &#125;        maxp[u]=max(maxp[u],sum-siz[u]);        if(maxp[u]&lt;maxp[rt]) rt=u;    &#125;    void dfs2(int u,int pre)&#123;        for(int i=1;i&lt;=ctot;i++) f[u][i]=0;        for(int i=1;i&lt;=ctot;i++)&#123;            if(w[i]&gt;=a[u])&#123;                (f[u][st[w[i]/a[u]]]+=f[pre][i])%=MOD;            &#125;        &#125;        for(auto v:adj[u])&#123;            if(vis[v]||v==pre) continue;            dfs2(v,u);            for(int i=1;i&lt;=ctot;i++)&#123;                (f[u][i]+=f[v][i])%=MOD;            &#125;        &#125;    &#125;    void calc(int u)&#123;        f[0][ctot]=1;        dfs2(u,0);        for(int i=1;i&lt;=ctot;i++)&#123;            (ans+=f[u][i])%=MOD;        &#125;        f[u][ctot]=0;    &#125;    void solve(int u)&#123;        vis[u]=1;        calc(u);        for(auto v:adj[u])&#123;            if(vis[v]) continue;            sum=siz[v];            maxp[rt=0]=INF;            dfs1(v,0);            solve(rt);        &#125;    &#125;&#125;using namespace Tree;void init()&#123;    rt=ans=0;    sum=0;    for(int i=1;i&lt;=n;i++)&#123;        adj[i].clear();        vis[i]=0;        a[i]=0;        dfn[i]=maxp[i]=dep[i]=siz[i]=dfn[i]=0;    &#125;    for(int i=1;i&lt;=ctot;i++)&#123;        st[w[i]]=0;        w[i]=0;    &#125;    ctot=0;&#125;void prework()&#123;    for(int i=m,ls=0;i&gt;=1;i--)&#123;        int x=m/i;        w[st[x]=x!=ls?++ctot:ctot]=x;        ls=x;    &#125;    for(int i=0;i&lt;=n;i++)&#123;        for(int j=0;j&lt;=ctot;j++)&#123;            f[i][j]=0;        &#125;    &#125;&#125;void solve()&#123;    cin&gt;&gt;n&gt;&gt;m;    init();    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=1;i&lt;n;i++)&#123;        int u,v;        cin&gt;&gt;u&gt;&gt;v;        adj[u].push_back(v);        adj[v].push_back(u);    &#125;    prework();    maxp[rt=0]=sum=n;    dfs1(1,0);    solve(rt);    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        solve();    &#125;    return 0;&#125;
 1.2 例题
 HDU 5909
有点眼熟啊，不是吗，只不过换成了异或。
但是我知道，这不位运算吗？我会 FWT！这个背包显然你一开始就说是卷积，我用脚都会，时间复杂度 O(nmlog⁡m)O(nm\log m)O(nmlogm)，轻松水过。
但显然我不是要讲这个做法，考虑到这个玩意直接做背包很难，但是单独加入一个点的复杂度近乎 O(1)O(1)O(1)，并且一个点选了，其儿子才能选，否则其儿子不能选，一眼连通块加树上依赖背包。直接转 DFS 序上 DP。设 f(i,j)f(i,j)f(i,j) 表示 uuu 子树内 DFS 序考虑到前 iii 个节点，异或和为 jjj 的方案数，暴力显然是 O(n2m)O(n^2m)O(n2m) 的，但是点分治就能够做到 O(nmlog⁡n)O(nm\log n)O(nmlogn)。
 CodeChef SUBWAY
注意有中文题面，首先这是一颗有重边的树，可以看成每条边选择一个颜色，让相邻边不同的最多。
然后考虑分析性质，发现一个树有很多重边甚是卑鄙，考虑简化问题。我们发现如果一条边有三种颜色，那么这条边一定可以选出一种颜色使得于另外两边颜色都不相同，所以可以看成只有一种以前没有出现过的颜色。所以每条边我们至多保留两个颜色即可。
其次，我们求的是同色路径，如果我们直接自底向上进行合并的话会因为要求联通而不行，我们还是和上面一样的方法，枚举根 rtrtrt 也就是起点，让后自上向下进行拓展，用 DP 计算方案，设 f(i,j,k)f(i,j,k)f(i,j,k) 表示当前到 iii 点，从 rtrtrt 进入包含 iii 点子树选择的边颜色为第 jjj 个（共两个，取值 0/10/10/1），父亲到 iii 点选择边颜色为第 kkk 种，仍为 0/10/10/1 变量。这样状态设计可以很方便地满足我们自上向下进行拓展。转移暴力拓展其子树即可，时间复杂度 O(n2)O(n^2)O(n2)，无法通过。但是注意到本问题和根选择无关，只需要确定一种顺序即可，我们可以通过点分治优化这一过程，时间复杂度 O(nlog⁡n)O(n\log n)O(nlogn)。
同时本题显然存在倍增 DP 做法，状态同上但是加入了倍增必须的 2j2^j2j，我写了，我大输特输，直接当场暴毙。
 2.参考
求赞 QwQ。

Querainy 的点分治优化 dp 学习笔记；
HDU6643 题解 C202044zxy。

]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形DP</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>状压DP</title>
    <url>/posts/f36e10f6/</url>
    <content><![CDATA[ 0.前言
位运算记不记得？
(n&gt;&gt;k)&amp;1 取出非负数n的第k位
n&amp;((1&lt;&lt;K)-1) 取出非负数n的后k位
n^(1&lt;&lt;k)把非负数n的第k位取反
n^(1&lt;&lt;k)把非负数的第k位取反

 1.定义与例题引入

状压 DP 是动态规划的一种，通过将状态压缩为整数来达到优化转移的目的。       ——oiwiki

那么怎么个状态压缩法呢？
例如这个题：  P1896 [SCOI2005] 互不侵犯

在 N×NN \times NN×N 的棋盘里面放 KKK 个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上左下右上右下八个方向上附近的各一个格子，共 888 个格子。(1≤N≤9,0≤K≤N×N1\le N \le 9,0\le K \le N\times N1≤N≤9,0≤K≤N×N)

这里我们发现好像我们可以设几个状态，分别是放到第几行，放了多少个国王，和如何放置的。前两个都好说，但是第三个却让我们很头疼。如果按照常规思路来想，我们肯定会开一个非常非常大的数组来表示这个放置状态，而且甚至移动方向是8个方向，更头疼，怎么办？
状态压缩就是来干这种事的，我们可以用一个二进制数来表示国王放置的状态。设一个二进制数，当它的一个数位表示1的时候就表明放置的国王，如果表示0就表示没有放置国王，如下图。

这样的话我们只需要一个十进制整数就可以对应唯一一个放置国王的状态，也就不需要开那么多的空间啦。
但是对于一个状态来说，有可能合法，也有可能并不合法，并且在判断的时候我们还要处理出攻击范围以及放置了多少个国王，很麻烦。。。。？
我们可以预处理啊！
cin&gt;&gt;n&gt;&gt;k;int tt=1&lt;&lt;n;for(int i=0;i&lt;tt;i++)&#123;//i的二进制位表示一列上国王的摆放状态    isok[i]=((i&amp;(i&lt;&lt;1))==0)&amp;&amp;((i&amp;(i&gt;&gt;1))==0);//状态是否合法    attack[i]=i|(i&lt;&lt;1)|(i&gt;&gt;1);//攻击范围    cnt1[i]=cnt1[i&gt;&gt;1]+(i&amp;1);//总共多少个1（国王数量）&#125;
接下来我们来看isokisokisok这个数组怎么判断的，还是上面那个图，我们对i &amp; (i&lt;&lt;1)做一下解释。

如果有非法的情况呢？

右移同理。
那么attackattackattack攻击范围如何处理呢，如下图：

对于1的统计cntcntcnt，这个就不多说了自己画图吧（逃
那么开始dp，其实之前已经说出来转移方程了，这一贴一个oiwiki的

故有代码如下：
f[0][0][0]=1;for(int i=0;i&lt;n;i++)&#123;//枚举行数    for(int j=0;j&lt;tt;j++)&#123;//枚举状态        for(int l=0;l&lt;=k;l++)&#123;//枚举放多少个国王            if(f[i][j][l])&#123;//如果当前位置有放置的话                for(int p=0;p&lt;tt;p++)&#123;                    if(isok[p]&amp;&amp;(attack[p]&amp;j)==0)&#123;                        //如果状态合法并且攻击范围不在j的状态表示内                        f[i+1][p][l+cnt1[p]]+=f[i][j][l];                        //对下一行执行操作累加答案                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;
让后拼装以下，就有了AC代码
#include&lt;iostream&gt;#include&lt;cstring&gt;#define ll long longusing namespace std;const int MN=(1&lt;&lt;10)+15;int isok[MN],attack[MN],cnt1[MN],n,k;ll ans,f[121][MN][121];int main()&#123;    cin&gt;&gt;n&gt;&gt;k;    int tt=1&lt;&lt;n;    for(int i=0;i&lt;tt;i++)&#123;//i的二进制位表示一列上国王的摆放状态        isok[i]=((i&amp;(i&lt;&lt;1))==0)&amp;&amp;((i&amp;(i&gt;&gt;1))==0);//状态是否合法        attack[i]=i|(i&lt;&lt;1)|(i&gt;&gt;1);//攻击范围        cnt1[i]=cnt1[i&gt;&gt;1]+(i&amp;1);//总共多少个1（国王数量）    &#125;    f[0][0][0]=1;    for(int i=0;i&lt;n;i++)&#123;//枚举行数        for(int j=0;j&lt;tt;j++)&#123;//枚举状态            for(int l=0;l&lt;=k;l++)&#123;//枚举放多少个国王                if(f[i][j][l])&#123;//如果当前位置有放置的话                    for(int p=0;p&lt;tt;p++)&#123;                        if(isok[p]&amp;&amp;(attack[p]&amp;j)==0)&#123;                            //如果状态合法并且攻击范围不在j的状态表示内                            f[i+1][p][l+cnt1[p]]+=f[i][j][l];                            //对下一行执行操作累加答案                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;    for(int i=0;i&lt;tt;i++)&#123;        ans+=f[n][i][k];    &#125;    cout&lt;&lt;ans;    return 0;&#125;
当然最后统计答案的时候需要一个一个枚举状态。
 例题1:  P1879 [USACO06NOV] Corn Fields G

农场主 John\rm JohnJohn 新买了一块长方形的新牧场，这块牧场被划分成 MMM 行 NNN 列 (1≤M≤12,1≤N≤12)(1 \le M \le 12, 1 \le  N \le 12)(1≤M≤12,1≤N≤12)，每一格都是一块正方形的土地。 John\rm JohnJohn 打算在牧场上的某几格里种上美味的草，供他的奶牛们享用。
遗憾的是，有些土地相当贫瘠，不能用来种草。并且，奶牛们喜欢独占一块草地的感觉，于是 John\rm JohnJohn 不会选择两块相邻的土地，也就是说，没有哪两块草地有公共边。
John\rm JohnJohn 想知道，如果不考虑草地的总块数，那么，一共有多少种种植方案可供他选择？（当然，把新牧场完全荒废也是一种方案）
输入样例将给出每一格的贫瘠和肥沃的状态

根据上面的思想，我们可以很容易设计出来状态转移方程。
设f[i][j]f[i][j]f[i][j]表示前iii行已经种完，开始种第iii行，按照jjj的状态进行种植能获得的方案
故有f[i][j]=f[i][j]+f[i−1][k]f[i][j]=f[i][j]+f[i-1][k]f[i][j]=f[i][j]+f[i−1][k]，其中kkk是枚举上一行的的种植状态
我们显然可以知道，对于种植状态，判断条件有2个，第一个是该土地是否肥沃（能否种植），第二个是种植时不能出现相邻，如下，橙色为种植点，红色为不能种植点。
对于该一行的种植很简单，和之前一样照常写isokisokisok就可以了，但是竖直方向怎么
处理？很简单我们发现如果有覆盖种植的话那么与起来一定会出现一个大于0的数，没有那么一定为0。

放码过来吧！
注意这里的isok写法不同
#include&lt;iostream&gt;using namespace std;const int MN=15,MK=1&lt;&lt;MN,MOD=1e8;int n,m,map[MN][MN],st[MK],isok[MK],f[MN][MK],ml;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    ml=(1&lt;&lt;m);    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=m;j++)&#123;            cin&gt;&gt;map[i][j];        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=m;j++)&#123;            st[i]=(st[i]&lt;&lt;1)+map[i][j];        &#125;    &#125;    for(int i=0;i&lt;ml;i++)&#123;        isok[i]=((i&amp;(i&lt;&lt;1))==0);    &#125;    f[0][0]=1;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=0;j&lt;ml;j++)&#123;            if(isok[j]&amp;&amp;((j&amp;st[i])==j))&#123;                for(int k=0;k&lt;ml;k++)&#123;                    if(!(j&amp;k))&#123;                        f[i][j]=(f[i][j]+f[i-1][k])%MOD;                    &#125;                &#125;            &#125;        &#125;    &#125;    int ans=0;    for(int i=0;i&lt;ml;i++)&#123;        ans=(ans+f[n][i])%MOD;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 例题2: P10963 Islands and Bridges

给定一张由岛屿和连接这些岛屿的桥梁构成的地图，众所周知，哈密顿路径是沿着桥梁的路径，能够恰好访问每个岛屿一次。在我们的地图中，每个岛屿还关联一个正整数值。我们定义一种哈密顿路径为 最佳三角形哈密顿路径，其最大化以下描述的值。
假设有 nnn 个岛屿。哈密顿路径 C1,C2,…,CnC_1,C_2,\dots,C_nC1​,C2​,…,Cn​ 的值分为三部分计算。设 ViV_iVi​ 为岛屿 CiC_iCi​ 的值。第一部分为路径中每个岛屿的 ViV_iVi​ 值的总和。第二部分，对于路径中的每条边 CiCi+1C_i C_{i+1}Ci​Ci+1​，加上 Vi×Vi+1V_i \times V_{i+1}Vi​×Vi+1​ 的积。第三部分，对于路径中的每三个连续岛屿 Ci,Ci+1,Ci+2C_i, C_{i+1}, C_{i+2}Ci​,Ci+1​,Ci+2​，如果它们在地图中形成一个三角形（即 CiC_iCi​ 和 Ci+2C_{i+2}Ci+2​ 之间有桥），加上 Vi×Vi+1×Vi+2V_i \times V_{i+1} \times V_{i+2}Vi​×Vi+1​×Vi+2​ 的积。
最佳三角形哈密顿路径很可能（但不一定）包含多个三角形。可能会存在多个最佳三角形哈密顿路径。你的第二个任务是找出这样的路径的数量。

对于三角形路径，在DP中如果考虑枚举端点拼凑，那么时间复杂度是不可承受的，我们可以直接在状态中加上2个点，枚举第3个点即可。
那就设fi,j,Sf_{i,j,S}fi,j,S​表示枚举2个点i,ji,ji,j，之前加入点的集合为SSS。用邻接矩阵存图判断起来好一点…
这里邻接矩阵设为mpmpmp
转移方程也很简单，枚举3个点，就有：
fi,j,s=max⁡mp[i][j]=1,mp[j][k]=1fj,k,S⊕2i−1+Vi+Vi×Vj+{Vi×Vj×Vkmp[i][k]=10mp[i][k]=0f_{i,j,s}=\max\limits_{mp[i][j]=1,mp[j][k]=1}f_{j,k,S\oplus 2^{i-1}}+V_i+V_i \times V_j+\begin{cases} V_{i}\times V_{j} \times V_{k} &amp; mp[i][k]=1 \\ 0 &amp; mp[i][k]=0 \end{cases}
fi,j,s​=mp[i][j]=1,mp[j][k]=1max​fj,k,S⊕2i−1​+Vi​+Vi​×Vj​+{Vi​×Vj​×Vk​0​mp[i][k]=1mp[i][k]=0​
路径数怎么统计，如果用pre数组记录直接爆炸，那么直接考虑dp数量，设gi,j,Sg_{i,j,S}gi,j,S​，字母含义见上，有：
gi,j,S={gj,k,S⊕2i−1fi,j,S&lt;fj,k,S⊕2i−1+tgj,k,S⊕2i−1+gi,j,Sfi,j,S=fj,k,S⊕2i−1+tgi,j,Sfi,j,S&gt;fj,k,S⊕2i−1+tg_{i,j,S}=\begin{cases} g_{j,k,S\oplus2^{i-1}} &amp; f_{i,j,S}&lt;f_{j,k,S\oplus2^{i-1}}+t \\  g_{j,k,S\oplus2^{i-1}}+g_{i,j,S} &amp; f_{i,j,S} = f_{j,k,S\oplus2^{i-1}}+t \\ g_{i,j,S} &amp; f_{i,j,S}&gt;f_{j,k,S\oplus2^{i-1}}+t \end{cases}
gi,j,S​=⎩⎪⎪⎨⎪⎪⎧​gj,k,S⊕2i−1​gj,k,S⊕2i−1​+gi,j,S​gi,j,S​​fi,j,S​&lt;fj,k,S⊕2i−1​+tfi,j,S​=fj,k,S⊕2i−1​+tfi,j,S​&gt;fj,k,S⊕2i−1​+t​
故有代码如下：
#include&lt;bits/stdc++.h&gt;#define int long long  // 定义 int 为 long long 类型，避免溢出using namespace std;const int MN = 14;  // 最大岛屿数量int T;  // 测试用例的数量int f[MN][MN][1 &lt;&lt; MN], g[MN][MN][1 &lt;&lt; MN], v[MN], n, m;  // DP 数组、岛屿值、岛屿数量、桥梁数量bool mp[MN][MN];  // 邻接矩阵，表示岛屿之间是否有桥梁void solve() &#123;    // 初始化变量    memset(v, 0, sizeof(v));  // 初始化岛屿值数组    memset(f, 0, sizeof(f));  // 初始化 DP 值数组    memset(g, 0, sizeof(g));  // 初始化 DP 计数数组    memset(mp, 0, sizeof(mp));  // 初始化邻接矩阵    cin &gt;&gt; n &gt;&gt; m;  // 输入岛屿数量和桥梁数量    for (int i = 1; i &lt;= n; i++) &#123;        cin &gt;&gt; v[i];  // 输入每个岛屿的值    &#125;    // 输入桥梁信息并构建邻接矩阵    for (int i = 1; i &lt;= m; i++) &#123;        int u, v;        cin &gt;&gt; u &gt;&gt; v;        mp[u][v] = mp[v][u] = 1;  // 标记双向桥梁    &#125;    // 特殊情况处理：只有一个岛屿    if (n == 1) &#123;        cout &lt;&lt; v[1] &lt;&lt; &quot; &quot; &lt;&lt; 1 &lt;&lt; &#x27;\n&#x27;;  // 输出该岛屿的值和路径数量        return;    &#125;    // 初始化 DP 数组：处理长度为 2 的路径    for (int i = 1; i &lt;= n; i++) &#123;        for (int j = 1; j &lt;= n; j++) &#123;            if (i == j || !mp[i][j]) continue;  // 跳过相同岛屿或没有桥梁的情况            f[i][j][(1 &lt;&lt; (i - 1)) | (1 &lt;&lt; (j - 1))] = v[i] * v[j] + v[i] + v[j];  // 计算路径值            g[i][j][(1 &lt;&lt; (i - 1)) | (1 &lt;&lt; (j - 1))] = 1;  // 初始化路径数量        &#125;    &#125;    // DP 状态转移：处理更长的路径    for (int i = 0; i &lt; 1 &lt;&lt; n; i++) &#123;  // 遍历所有状态        for (int j = 1; j &lt;= n; j++) &#123;  // 遍历所有可能的当前岛屿            if (!((i &gt;&gt; (j - 1)) &amp; 1)) continue;  // 跳过未访问的岛屿            for (int k = 1; k &lt;= n; k++) &#123;  // 遍历所有可能的上一个岛屿                if (j == k || !mp[j][k] || !((i &gt;&gt; (k - 1)) &amp; 1)) continue;  // 跳过无效情况                for (int p = 1; p &lt;= n; p++) &#123;  // 遍历所有可能的下一个岛屿                    if (!((i &gt;&gt; (p - 1)) &amp; 1) || j == p || k == p || !mp[k][p] || !g[k][p][i ^ (1 &lt;&lt; (j - 1))]) continue;  // 跳过无效情况                    int val = f[k][p][i ^ (1 &lt;&lt; (j - 1))] + v[j] + v[j] * v[k] + (mp[j][p]) * v[j] * v[k] * v[p];  // 计算新路径值                    if (val == f[j][k][i]) g[j][k][i] += g[k][p][i ^ (1 &lt;&lt; (j - 1))];  // 更新路径数量                    else if (val &gt; f[j][k][i]) &#123;  // 如果新路径值更大                        f[j][k][i] = val;  // 更新最大路径值                        g[j][k][i] = g[k][p][i ^ (1 &lt;&lt; (j - 1))];  // 更新路径数量                    &#125;                &#125;            &#125;        &#125;    &#125;    // 计算最终结果    int ans = 0, cnt = 0;  // 最大路径值和路径数量    for (int i = 1; i &lt;= n; i++) &#123;        for (int j = 1; j &lt;= n; j++) &#123;            if (!mp[i][j] || !g[i][j][(1 &lt;&lt; n) - 1] || i == j) continue;  // 跳过无效情况            if (ans &lt; f[i][j][(1 &lt;&lt; n) - 1]) &#123;  // 如果找到更大的路径值                ans = f[i][j][(1 &lt;&lt; n) - 1];  // 更新最大路径值                cnt = g[i][j][(1 &lt;&lt; n) - 1];  // 更新路径数量            &#125; else if (ans == f[i][j][(1 &lt;&lt; n) - 1]) &#123;  // 如果路径值相同                cnt += g[i][j][(1 &lt;&lt; n) - 1];  // 累加路径数量            &#125;        &#125;    &#125;    // 输出结果，路径数量除以 2 是因为路径的顺序反转被视为相同的路径    cout &lt;&lt; ans &lt;&lt; &quot; &quot; &lt;&lt; (cnt &gt;&gt; 1) &lt;&lt; &#x27;\n&#x27;;&#125;signed main() &#123;    cin &gt;&gt; T;  // 输入测试用例数量    while (T--) &#123;        solve();  // 处理每个测试用例    &#125;    return 0;&#125;
 2.状压DP的另一种状压——枚举子集
例题如下：P5911 [POI 2004] PRZ

有nnn个人需要过桥，第iii的人的重量为wiw_iwi​，过桥用时为tit_iti​这些人过桥时会分成若干组，只有在某一组的所有人全部过桥后，其余的组才能过桥。桥最大承重为WWW，问这些人全部过桥的最短时间。
100≤W≤400100\le W \le400100≤W≤400 ，1≤n≤161\le n\le 161≤n≤16，1≤t≤501\le t\le501≤t≤50，10≤w≤10010\le w\le10010≤w≤100。

数据范围较小，可以进行状压，我们发现这题的关键就是分组别的规划。故我们可以设状态f[i]f[i]f[i]，表示状态为iii下过桥最少要用的时间。
状态iii表示把每个人选或不选压为二进制。
故有f[i]=min{f[j]+mt[i xor j]}f[i]=min\{ f[j]+mt[i\,xor\,j]\}f[i]=min{f[j]+mt[ixorj]}
其中i xor ji\,xor\,jixorj表示iii种除jjj外剩余的子集，前提jjj是iii的子集
但是我们对于每个状态要统计他们的最大重量和和时间，每个状态都是二进制数，怎么分别取出有没有人在其中呢？
这就是这章要讲的——枚举子集。
怎么枚举？先看代码。
int ml=1&lt;&lt;n;    for(int i=0;i&lt;ml;i++)&#123;        for(int j=i;;j=(j-1)&amp;i)&#123;	        // j是i的一个非空子集		    // ...        &#125;    &#125;
我怎么证明这个是对的呢？
我们枚举一下，看下图。

详细证明如下：

遍历子集的时间复杂度是O(3n)O(3^n)O(3n)
故我们可以得到转移代码如下：
for(int i=0;i&lt;ml;i++)&#123;    for(int j=i;;j=(j-1)&amp;i)&#123;        if(mw[i^j]&lt;=w)&#123;            f[i]=min(f[i],f[j]+mt[i^j]);        &#125;        if(!j) break;    &#125;&#125;
拼装一下，AC代码如下
#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;const int MN=450,MF=(1&lt;&lt;16)+15;int w,n;int t[MN],wei[MN],ml,f[MF],mt[MF],mw[MF];int main()&#123;    cin&gt;&gt;w&gt;&gt;n;    ml=(1&lt;&lt;n);    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;t[i]&gt;&gt;wei[i];    &#125;    for(int i=0;i&lt;ml;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            if(i&amp;(1&lt;&lt;(j-1)))&#123;                mt[i]=max(mt[i],t[j]);                mw[i]+=wei[j];            &#125;        &#125;    &#125;    memset(f,0x3f,sizeof(f));    f[0]=0;    for(int i=0;i&lt;ml;i++)&#123;        for(int j=i;;j=(j-1)&amp;i)&#123;            if(mw[i^j]&lt;=w)&#123;                f[i]=min(f[i],f[j]+mt[i^j]);            &#125;            if(!j) break;        &#125;    &#125;    cout&lt;&lt;f[ml-1];    return 0;&#125;
 3.状压DP的拓展，三进制优化+DFS（例题引入）
来看题
P7689

给定N×MN \times MN×M的矩形，让你在上面放尽量多的2×32\times 32×3的矩形（或3×23\times 23×2，就是横着竖着都可以放），矩形上有一些坏点，放置的矩形不能覆盖这些坏点，求最多能放多少个矩形。
多组测试数据，1≤T≤5,1≤N≤150,1≤M≤101\le T\le 5,1\le N \le 150,1\le M \le 101≤T≤5,1≤N≤150,1≤M≤10
内存限制：8MB;时间限制：2s

我们不难可以用类似P1879或炮兵阵地类似的思想，也就是平面覆盖问题。但是这里出现一个问题，这里的宽是2或3！如果单纯用二进制枚举的话转移方程会十分甚至九分的复杂，而且状态还不好表示。
那我们就可以使用三进制，三进制的一个好处就是数字拓展到0,1,20,1,20,1,2，那么对于这个题来说，我们使用三进制枚举，按行自上往下递推。
那么就是以下2个合法状态：

我们从右往左按列枚举当前行，记当前位置为pospospos，分2种情况：

如果枚举到pospospos位，如果上一行对应的不是0，那么我们就要根据上图，填写相应的数，就是2→1,1→02\rightarrow 1,1\rightarrow 02→1,1→0。如果当前位置是坏的无法填写，那么排除。
如果是0，那么我们3种情况

填0直接跳过
填1，前提是右边3个都能够填写上1，这里判断方法其实和上面是一样的。
填2，右边2个要都能填写上2，同上



但是这么麻烦的情况，转移方程真的不太好得出。
没关系，DP2种实现方式，一种叫迭代，另一种叫记忆化搜索。
这里我们定义f[i][j]f[i][j]f[i][j]表示第iii行填写的状态为jjj(jjj为三进制数)
那么就可以从i−1i-1i−1转移过来，但是这里的内存限制是8MB，没关系滚一滚就好了。
#include&lt;bits/stdc++.h&gt;using namespace std;// 定义常量与全局变量constexpr int MN=16; // 最大列数（题目中M≤10，此处设为16足够）constexpr int NINF=-1061109567; // 极大负数，用于初始化DP数组int T,n,m,k; // 测试用例数，硅片的行数，列数，坏块数量int f[2][1&lt;&lt;MN]; // DP数组，滚动数组存储前两行状态，2表示滚动，1&lt;&lt;MN是三进制状态数上限int pw[MN]; // 3的幂次数组，用于三进制位运算bool isbad[MN][MN]; // 标记硅片中坏块的位置// 获取三进制数的第pos位数值（0/1/2）int getn(int x,int pos)&#123;    return x%pw[pos]/pw[pos-1];&#125;// 判断当前位置是否可以放置芯片bool isok(int x,int lst,int pos)&#123;    // 当前位置非坏块，且上一行对应位置为0    if(!isbad[x][pos]&amp;&amp;!getn(lst,m-pos+1)) return 1;    return 0;&#125;// 深度优先搜索生成当前行的合法状态并更新DP值void dfs(int x,int lst,int now,int pos,int cnt)&#123;    if(!pos)&#123; // 所有列处理完毕        // 更新当前行now状态的最大芯片数：前一行lst的值 + 当前cnt        f[x%2][now] = max(f[x%2][now], f[(x-1)%2][lst] + cnt);        return;    &#125;    // 处理上一行当前列非0的情况（受约束）    if(getn(lst,pos))&#123;        // 当前列损坏则无法放置        if(isbad[x][m-pos+1]) return;        // 根据上一列的值决定当前列只能为1或0        if(getn(lst,pos)==2) dfs(x,lst,now*3+1,pos-1,cnt); // 上一列是2 → 当前列必须为1        else dfs(x,lst,now*3,pos-1,cnt); // 上一列是1 → 当前列必须为0    &#125;else&#123;        // 不放置任何芯片，直接跳过        dfs(x,lst,now*3,pos-1,cnt);        // 尝试放置3×2竖直芯片（需要连续两列）        if(pos&gt;=2 &amp;&amp;            isok(x,lst,m-pos+1) &amp;&amp;            isok(x,lst,m-pos+2))&#123;            dfs(x,lst,(now*3+2)*3+2,pos-2,cnt+1);        &#125;        // 尝试放置2×3水平芯片（需要连续三列）        if(pos&gt;=3 &amp;&amp;            isok(x,lst,m-pos+1) &amp;&amp;            isok(x,lst,m-pos+2) &amp;&amp;            isok(x,lst,m-pos+3))&#123;            dfs(x,lst,((now*3+1)*3+1)*3+1,pos-3,cnt+1);        &#125;    &#125;&#125;// 处理单个测试用例void solve()&#123;    memset(isbad,0,sizeof(isbad)); // 清空坏块标记    memset(f,-0x3f3f3f3f,sizeof(f)); // 初始化DP数组为极小值    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;    for(int i=1;i&lt;=k;i++)&#123; // 读取坏块坐标        int x,y;        cin&gt;&gt;x&gt;&gt;y;        isbad[x][y]=1;    &#125;    f[0][0]=0; // 初始状态：0行0状态对应0芯片    for(int i=0;i&lt;n;i++)&#123; // 处理每一行（从0到n-1对应第1到第n行）        for(int j=0;j&lt;pw[m];j++)&#123; // 清空下一行的DP值            f[(i+1)%2][j]=NINF;        &#125;        for(int j=0;j&lt;pw[m];j++)&#123; // 遍历上一行所有可能状态            if(f[i%2][j]&lt;0) continue; // 跳过无效状态            dfs(i+1,j,0,m,0); // 从当前行初始状态开始递归生成        &#125;    &#125;    cout&lt;&lt;f[n%2][0]&lt;&lt;&#x27;\n&#x27;; // 输出最终结果：最后一行状态0的最大值&#125;int main()&#123;    pw[0]=1; // 初始化3的0次幂    for(int i=1;i&lt;MN;i++)&#123; // 预计算3的幂次数组        pw[i]=pw[i-1]*3;    &#125;    cin&gt;&gt;T;    while (T--)&#123;        solve(); // 处理每组数据    &#125;    return 0;&#125;
一般来说，三进制优化DP使用DFS来进行编写。
]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>猫树分治</title>
    <url>/posts/e9478aba/</url>
    <content><![CDATA[猫树，整体二分与线段树分治的结合，前者我快忘了，后者更是学都没学过 www。
说人话，就是一种不支持修改，仅仅支持快速区间询问的一种静态线段树。构造要执行 O(nlog⁡n)O(n\log n)O(nlogn) 次合并操作，而查询可以加速到 O(1)O(1)O(1) 次合并操作。
猫树问题可以适用于离线解决以下类型的数据结构问题：

与序列有关，且询问是一段区间。
序列静态，即，不涉及修改操作。

当然离不离线都可以，由于其过程类似于点分治，所以在线的情况可通过类似于建出建出点分治的情况动态维护。
我们通过一道例题来进行引入：

给你一个长为 nnn 的序列 aaa，有 qqq 次询问，每次询问区间 [l,r][l,r][l,r] 的最大值和最大值个数，可以离线。
1≤n≤2×105,1≤q≤7×106,1≤l≤r≤n,1≤ai≤1091\le n\le 2\times 10^5,1\le q \le 7\times 10^6,1\le l\le r\le n,1\le a_{i}\le 10^91≤n≤2×105,1≤q≤7×106,1≤l≤r≤n,1≤ai​≤109。

显然你会线段树，但是在 q≤7e6q\le 7e6q≤7e6 的等级下你还是别想了，也就是说我们必须严格 O(1)O(1)O(1) 回答每一次询问，但是我们预处理的时间复杂度算是比较充裕的 O(nlog⁡n)O(n\log n)O(nlogn)。
先离线询问，然后我们考虑一种序列分治的思想，即我们对于一个序列取中点 midmidmid 进行分治，那么会分成 [l,mid][l,mid][l,mid] 和 [mid+1,r][mid+1,r][mid+1,r] 的两个部分。对于询问区间在左部分和右部分的我们可以让递归下去的分治解决。那么现在就剩下一种了，就是跨 midmidmid 的询问区间。
我们考虑怎么处理询问，有一种思路就是我们从 midmidmid 开始，向左预处理后缀最大值数组 sufsufsuf，向右预处理前缀最大值数组 preprepre，同理最大值个数，这里不再提及。那么我们处理查询的时候只需要将 suflsuf_{l}sufl​ 和 prerpre_{r}prer​ 的答案合并起来就可以了……没了？
我们分析下复杂度，我们发现每次操作都是 O(n)O(n)O(n) 的，然后递归复杂度是 T(n)=2T(n/2)+O(n)T(n)=2T(n/2)+O(n)T(n)=2T(n/2)+O(n)，答案是显然的 O(nlog⁡n)O(n\log n)O(nlogn)，离线状态下的空间复杂度也是优秀的 O(log⁡n)O(\log n)O(logn)，但每次处理询问是 O(1)O(1)O(1) 的！
这个就是猫树，我们下面详细解释实现：具体的，考虑分治区间 [l,r][l, r][l,r] 时，将所有满足 [L,R]⊆[l,r][L, R] \subseteq [l, r][L,R]⊆[l,r] 的区间压入一个 vector。
如果 l=rl = rl=r，那答案一般是比较好求的，直接算就行了。
否则设 mid=⌊l+r2⌋mid = \left\lfloor \frac{l + r}{2} \right\rfloormid=⌊2l+r​⌋，然后对于 i∈[l,mid]i \in [l, mid]i∈[l,mid] 扫一遍处理 [i,mid][i, mid][i,mid] 的答案，再对 i∈[mid+1,r]i \in [mid + 1, r]i∈[mid+1,r] 扫一遍处理 [mid+1,i][mid + 1, i][mid+1,i] 的答案，这样处理某个询问 [L,R][L, R][L,R] 时：

如果 [L,R]⊆[l,mid][L, R] \subseteq [l, mid][L,R]⊆[l,mid]，则把它放到左边区间的 vector 里递归；
如果 [L,R]⊆[mid+1,r][L, R] \subseteq [mid + 1, r][L,R]⊆[mid+1,r]，则把它放到右边区间的 vector 里递归；
如果 L∈[l,mid],R∈[mid+1,r]L \in [l, mid], R \in [mid + 1, r]L∈[l,mid],R∈[mid+1,r]，则将 [l,mid][l, mid][l,mid] 和 [mid+1,r][mid + 1, r][mid+1,r] 的答案合并即可。

不难发现，在上述做法中，我们通过分治把 log⁡n\log nlogn 的复杂度和单次插入的复杂度摊到了一起，这样每次询问时只用合并一次。如果我们记插入的复杂度为 Tinsert(n)T_{\text{insert}}(n)Tinsert​(n)，那么上述算法的复杂度就是：nlog⁡n⋅Tinsert(n)+q⋅Tmerge(n)n \log n \cdot T_{\text{insert}}(n) + q \cdot T_{\text{merge}}(n)nlogn⋅Tinsert​(n)+q⋅Tmerge​(n)
当然如果强制在线也做得了，直接对每一层分治记录下 [i,mid],[mid+1,j][i, mid], [mid + 1, j][i,mid],[mid+1,j] 的答案，这样可以做到强制在线，复杂度为：nlog⁡n⋅Tinsert(n)+qlog⁡n⋅Tmerge(n)n \log n \cdot T_{\text{insert}}(n) + q \log n \cdot T_{\text{merge}}(n)nlogn⋅Tinsert​(n)+qlogn⋅Tmerge​(n)当然这种空间可能略有点危，如果记我们单个合并的信息的空间复杂度为 M(n)M(n)M(n)，那么该做法空间复杂度为：nlog⁡n⋅M(n)n \log n \cdot M(n)nlogn⋅M(n)。具体的，将序列长度扩充至 222 的幂（维护区间为 [1,2h][1, 2^h][1,2h]），我们考虑将这个区间建成一颗分治树。虽然这是一颗满二叉树，那么我们要找的节点必然是 [l,l][l, l][l,l] 和 [r,r][r, r][r,r] 的 LCA。我们采用堆式存储，即节点 iii 的左儿子编号为 2i2i2i，右儿子为 2i+12i+12i+1。观察其二进制形式，不难发现：每一个左儿子的编号相当于父结点编号左移一位，右儿子则是左移一位加一。所以代表 [l,l][l, l][l,l] 和 [r,r][r, r][r,r] 这两个区间的两个节点的 LCA 必然是两者编号在二进制下的最长相同前缀（只适用于在同一深度的节点）。至于这两点的编号是多少，我们可以在预处理时提前存储，这样，我们单次查询的时间复杂度为 O(1)O(1)O(1)。假设节点编号分别为 x,yx, yx,y，那么他们的 LCA 编号便是：
x&gt;&gt;log⁡2(x⊕y)x &gt;&gt; \log_2(x \oplus y)
x&gt;&gt;log2​(x⊕y)
这里 log⁡2[k]\log_2[k]log2​[k] 存储的是 kkk 在二进制表示下有多少位。
当然离线询问更好写，这里贴以下来自[数据结构入门]分治树（猫树） - Dfkuaid - 博客园 的在线的区间最大子段和：
/*SPOJ GSS1 https://www.spoj.com/problems/GSS1/ */const int N = 1000100;const int INF = 0x3fffffff;int loc[N],a[N],n,m,len = 1;int s[25][N],p[25][N],lg[N];/*s 是不能与 mid 断开的前后缀，p 是可与 mid 断开的最大子段*/inline int Max(const int &amp;a,const int &amp;b)&#123;    return a &gt; b ? a : b;&#125;inline void build(int k,int l,int r,int d)&#123;    if (l == r) &#123;loc[l] = k;return;&#125; //叶节点，记录编号    int mid = (l + r) &gt;&gt; 1;    int pre,sm;    /*维护 mid 左边*/    s[d][mid] = a[mid],p[d][mid] = a[mid];    pre = sm = a[mid];sm = sm &gt; 0 ? sm : 0;    for (int i = mid - 1;i &gt;= l;i --)&#123;        pre += a[i],sm += a[i];        s[d][i] = Max(s[d][i + 1],pre),        p[d][i] = Max(p[d][i + 1],sm);        sm = sm &gt; 0 ? sm : 0;        /*如果小于零了，后面的维护可以        从中断开，保证最大值*/    &#125;    /*维护 mid 右边*/    s[d][mid + 1] = a[mid + 1],    p[d][mid + 1] = a[mid + 1];    pre = sm = a[mid + 1];  sm = sm &gt; 0 ? sm : 0;    for (int i = mid + 2;i &lt;= r;i ++)&#123;        pre += a[i],sm += a[i];        s[d][i] = Max(s[d][i - 1],pre);        p[d][i] = Max(p[d][i - 1],sm);        sm = sm &gt; 0 ? sm : 0;    &#125;    build(k &lt;&lt; 1,l,mid,d + 1);    build(k &lt;&lt; 1 | 1,mid + 1,r,d + 1);&#125;inline int query(int l,int r)&#123;    if (l == r) return a[l];    int d = lg[loc[l]] - lg[loc[l] ^ loc[r]];    return Max(Max(p[d][l],p[d][r]),s[d][l] + s[d][r]);&#125;int main()&#123;    scanf(&quot;%d&quot;,&amp;n);    while (len &lt; n) len &lt;&lt;= 1;    for (int i = 1;i &lt;= n;i ++)      scanf(&quot;%d&quot;,&amp;a[i]);    for (int i = 1;i &lt;= len &lt;&lt; 1;i ++)      lg[i] = lg[i &gt;&gt; 1] + 1;    build(1,1,len,1);    scanf(&quot;%d&quot;,&amp;m);    while (m --)&#123;        int l,r;        scanf(&quot;%d%d&quot;,&amp;l,&amp;r);        printf(&quot;%d\n&quot;,query(l,r));    &#125;    return 0;&#125;
P6240 好吃的题目
猫树分治背包，直接做即可，复杂度是 O(nVlog⁡n+qV)O(nV\log n+qV)O(nVlogn+qV)：
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=5e5+15,MV=255;int suf[MN][MV],pre[MN][MV],n,m,ql[MN],qr[MN],qt[MN],h[MN],w[MN],ans[MN];vector&lt;int&gt; qry;void solve(int l,int r,const vector&lt;int&gt; &amp;qry)&#123;    if(!qry.size()) return;    if(l==r)&#123;        for(auto p:qry)&#123;            if(qt[p]&gt;=h[l]) ans[p]=w[l];            else ans[p]=0;        &#125;        return;    &#125;    int mid=(l+r)&gt;&gt;1;    for(int i=l;i&lt;=r;i++)&#123;        memset(suf[i],0,sizeof(suf[i]));        memset(pre[i],0,sizeof(pre[i]));    &#125;    for(int i=mid;i&gt;=l;i--)&#123;        memcpy(suf[i],suf[i+1],sizeof(suf[i]));        for(int j=h[i];j&lt;MV;j++)&#123;            suf[i][j]=max(suf[i][j],suf[i+1][j-h[i]]+w[i]);        &#125;    &#125;    for(int i=mid+1;i&lt;=r;i++)&#123;        memcpy(pre[i],pre[i-1],sizeof(pre[i]));        for(int j=h[i];j&lt;MV;j++)&#123;            pre[i][j]=max(pre[i][j],pre[i-1][j-h[i]]+w[i]);        &#125;    &#125;    vector&lt;int&gt; qryl,qryr;    for(auto p:qry)&#123;        if(qr[p]&lt;=mid) qryl.push_back(p);        else if(ql[p]&gt;mid) qryr.push_back(p);        else&#123;            for(int i=0;i&lt;=qt[p];i++)&#123;                ans[p]=max(ans[p],suf[ql[p]][i]+pre[qr[p]][qt[p]-i]);            &#125;        &#125;    &#125;    solve(l,mid,qryl);    solve(mid+1,r,qryr);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;h[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;w[i];    &#125;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;ql[i]&gt;&gt;qr[i]&gt;&gt;qt[i];        qry.push_back(i);    &#125;    solve(1,n,qry);    for(int i=1;i&lt;=m;i++)&#123;        cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    &#125;            return 0;&#125;
P6109 [Ynoi2009] rprmq1
先考虑没有修改怎么做，用 ST 表或者二维 BIT 简单维护即可。考虑有单点修改怎么做，ST 表当场坠机不过二维 BIT 还建在！考虑区间修改怎么做，发现极其难以直接进行维护。
注意到题目可以离线，而且一个很神秘的一点就是修改操作时小于查询的操作的，同时如果不仔细看，难发现所有查询操作在修改操作之后！
我们考虑这个矩形加 vvv 的操作怎么维护，我们发现这个玩意可以扫描线，例如 (l1,r1,l2,r2,v)(l1,r1,l2,r2,v)(l1,r1,l2,r2,v) 操作，可以对 [l1,r1][l1,r1][l1,r1] 进行扫描线，实现中我们将询问转化为两个区间端点上的修改即可，用历史和线段树维护 [l2,r2][l2,r2][l2,r2] 的范围，用历史和是因为我们求得是矩形最大值，用历史最大值可以表示一个矩形面内的答案。
但是问题在于如果我们要求的是一个时间段内的信息，历史和最大值比较难以做到多次撤销回退，快速对一个时间段求历史最大值做不了，但是可以对一个时间 lll 开始往后求 [l,r][l,r][l,r] 时间中的历史最大值。
考虑猫树分治，具体的，我们将所有询问对应的 l1,r1l1,r1l1,r1 挂到猫树上，从 mid 开始正反做两遍历史最大值即可求出所有挂在该节点的询问答案。 具体的就是我们现将 [l,mid][l,mid][l,mid] 的操作加入，在 mid+1mid+1mid+1 时刻清空历史最大值，从 [mid+1,r][mid+1,r][mid+1,r] 开始做历史最大值，并处理对应询问。接着猫树上递归 [mid+1,r][mid+1,r][mid+1,r]。对于左边 [l,mid][l,mid][l,mid] 同样不过就是反过来了，注意撤销 [mid+1,r][mid+1,r][mid+1,r] 的遗留答案，时间复杂度 O(mlog⁡2n+(n+q)log⁡n)O(m\log^2 n+(n+q)\log n)O(mlog2n+(n+q)logn)。
CF1100F Ivan and Burgers
线性鸡猫猫好题。
这道题我们可以直接把询问离线，然后上猫树分治。
具体地，我们用 O(log⁡∣V∣)O(\log |V|)O(log∣V∣) 的暴力预处理 [l,mid][l,mid][l,mid] 和 [mid+1,r][mid+1,r][mid+1,r] 的线性基，然后在合并的时候用 O(log⁡2∣V∣)O(\log^2 |V|)O(log2∣V∣) 的暴力合并跨越 midmidmid 的两个线性基答案，时间复杂度是 O(nlog⁡nlog⁡∣V∣+qlog⁡2∣V∣)O(n\log n\log |V|+q\log^2 |V|)O(nlognlog∣V∣+qlog2∣V∣)。
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>珂朵莉树</title>
    <url>/posts/e28fd031/</url>
    <content><![CDATA[ 0.前情提要

在学长的课上听到了颜色段覆盖问题，顺手讲了个ODT，当时的我以为就是一个可爱的数据结构，但是学下来发现确实很可爱(｡・ω・｡)
CF896C——ODT的起源


你需要知道——STL的set怎么用（cppreference）
对就这些。
 1.什么是珂朵莉树
珂朵莉树，又称ODT（老司机树），是一种利用set的暴力数据结构，用于解决区间问题的数据结构。
 2.珂朵莉树可以解决什么问题
区间推平问题出现的时候我们就可以用珂朵莉树了。她高效的基础是当数据随机生成的时候，复杂度是正确的（见下文），但是若没说，你就要开赌，这个很容易被构造数据卡掉。
 3.珂朵莉树的构造
借用一下大佬的图

对于珂朵莉树的节点，我们维护的是一个数值相同的区间，如上图。我们考虑维护一个三元组(l,r,val)(l,r,val)(l,r,val)，其中l和r是数值相同区间的左右端点，val就是这个区间对应的数值，那么每个相同数列的区间就可以浓缩为一个节点，如下图

当然在维护区间的时候我们要满足区间左端点和右端点都样单调递增，这里只需要比较左端点就可以了。
代码如下
当然对于CF896C我们一开始维护n个长度为1的单点
struct kdltree&#123;    int l,r;    mutable ll val;//set里面的元素一般不可修改，用mutable修饰就珂以修改    kdltree(int L,int R=-1,ll V=0)&#123;        //构造函数，左端点是必须有，若后面不添加R和V（就是val）默认就是单独的一个端点[pos,pos]        l=L,r=R,val=V;    &#125;    bool operator&lt;(const kdltree&amp;a)const&#123;        return l&lt;a.l;    &#125;&#125;;set&lt;kdltree&gt; odt;
 4.split分裂区间
如果我们想要的修改范围对于一个大区间来说小的话，我们就需要把区间拆开成我们想要的
split就是干这个的，他的唯一一个需要的参数就是pos，代表意义就是把一个[L,R][L,R][L,R]的区间劈成[L,pos−1][L,pos-1][L,pos−1],[pos,R][pos,R][pos,R]
很显然利用set的平衡树特性，我们可以用lower_bound函数找到其对应的区间节点
接下来分类讨论，其实也挺简单的

如果pos刚好是区间节点的左端点（就是找到pos的具体数值了），那么分裂都不用分，直接返回即可
如果不是，那么因为lower_bound是≥\ge≥的操作，那么这里返回的是pos右边对应的区间节点，那么我们只需要将获取到的迭代器it–就可以获得其对应的节点，让后一刀劈成[L,pos−1][L,pos-1][L,pos−1],[pos,R][pos,R][pos,R]

代码如下
//分割区间，把区间分成[l,pos-1],[pos,r]auto split(int pos)&#123;    auto it=odt.lower_bound(kdltree(pos));//找第一个左端点不小于pos的的区间    if(it!=odt.end()&amp;&amp;it-&gt;l==pos)&#123;        return it;//pos是左端点是无需分裂    &#125;    it--;//pos一定在前一个区间；    int l=it-&gt;l,r=it-&gt;r;    ll val=it-&gt;val;    odt.erase(it);//删除原来的区间    odt.insert(kdltree(l,pos-1,val));    return odt.insert(kdltree(pos,r,val)).first;//这里返回的是指向[pos,r]这个区间的迭代器&#125;
 5.区间推平
其实在构造区间节点的时候我们发现，这个数据结构其实就是天生适合区间推平这个操作的，因为她刚好存储的就是一个区间相同的值的。

例如我们将[2,8][2,8][2,8]这个区间推平改为666，set里面有4个区间节点。首先我们发现[8,10][8,10][8,10]是一个区间，那么要先split(8+1),拆成[8,8][8,8][8,8]和[9,10][9,10][9,10]两个区间。同理，[1,2][1,2][1,2]这个区间我们要拆成[1,1][1,1][1,1]和[2,2][2,2][2,2]
//合并区间并赋值xvoid merge(int l,int r,ll val)&#123;    //注意顺序！先右端点后左端点不然可能会RE！    auto itr=split(r+1);    auto itl=split(l);    odt.erase(itl,itr);//删除[l,r]区间内所有元素    //其实这里是[l,r+1)(由于set删除特性经典左闭右开)    //但是r+1取不到也就只能取到r了    odt.insert(kdltree(l,r,val));//插入大区间&#125;
注意这里不能先分左再分右！

先分左再分右，你会发现这个itr和itl指向的东西出事了，如果你erase就会出问题，直接RE
但是问题在于这个顺序反了也有可能会AC，这个RE的概率是大约1%，随机RE。十分的“珂”学。最好还是先右再左
 6.更新查询操作
对于任意的更新查询操作我们可以套如下的模板

先split右，在split左把区间[l,r][l,r][l,r]搞出来
暴力，启动！

这里我们贴上CF896C的几个操作，体会一下模板的套用(ﾟ∀。)

区间加

void add(int l,int r,ll val)&#123;    auto itr=split(r+1);    auto itl=split(l);    for(auto it=itl;it!=itr;it++)&#123;        it-&gt;val+=val;//这就是为啥用mutable的原因    &#125;&#125;
2.区间第k小
typedef pair&lt;ll,int&gt; kdl;//前人种树后人看动漫//区间第k小ll topk(int l,int r,int k)&#123;    vector&lt;kdl&gt; a;    auto itr=split(r+1);    auto itl=split(l);    for(auto it=itl;it!=itr;it++)&#123;        a.push_back(kdl(it-&gt;val,it-&gt;r-it-&gt;l+1));        //sort会先比较val，如果val相同则比较区间长度        //升序保证第k小，第k大倒序即可    &#125;       sort(a.begin(),a.end());    for(auto it=a.begin();it!=a.end();it++)&#123;        k-=it-&gt;second;        if(k&lt;=0)&#123;            return it-&gt;first;//找到了        &#125;    &#125;    return -1;//不好没找到&#125;

区间幂次和（这里使用的是快速幂）

ll fastpow(ll x,ll y,ll mod)&#123;    ll res=1;    x%=mod;    while (y&gt;0)    &#123;        if(y&amp;1)&#123;            res=res*x%mod;        &#125;        x=x*x%mod;        y&gt;&gt;=1;    &#125;    return res;&#125;ll sum(int l,int r,int x,int y)&#123;    ll ans=0;    auto itr=split(r+1);    auto itl=split(l);    for(auto it=itl;it!=itr;it++)&#123;        ans=(ans+fastpow(it-&gt;val,x,y)*(it-&gt;r-it-&gt;l+1))%y;    &#125;  
 7.时间复杂度
这里前提条件是数据随机情况下复杂度正确，如果数据不随机会出现O(nm)O(nm)O(nm)的错误时间复杂度
一般来说仅区间推平这一个区间操作的时间复杂度是均摊O(log2log2n)O(log_2log_2n)O(log2​log2​n),如果有暴力操作就是O(log2n)O(log_2n)O(log2​n),我们发现这个数据结构能够高效的关键在于区间推平，区间推平能把小区间合并成一个大区间，这是珂朵莉树高效的关键，也是她适用范围小的原因。
很容易被构造数据卡掉，导致变成一个一个散点。
 8.代码
#include&lt;iostream&gt;#include&lt;set&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#define ll long longusing namespace std;const int MOD=1000000007,MN=1e5+15;ll n,m,seed,vmax;ll a[MN];ll rnd()&#123;    ll ret=seed;    seed=(seed*7+13)%MOD;    return ret;&#125;struct kdltree&#123;    int l,r;    mutable ll val;//set里面的元素一般不可修改，用mutable修饰就珂以修改    kdltree(int L,int R=-1,ll V=0)&#123;        //构造函数，左端点是必须有，若后面不添加R和V（就是val）默认就是单独的一个端点[pos,pos]        l=L,r=R,val=V;    &#125;    bool operator&lt;(const kdltree&amp;a)const&#123;        return l&lt;a.l;    &#125;&#125;;set&lt;kdltree&gt; odt;//分割区间，把区间分成[l,pos-1],[pos,r]auto split(int pos)&#123;    auto it=odt.lower_bound(kdltree(pos));//找第一个左端点不小于pos的的区间    if(it!=odt.end()&amp;&amp;it-&gt;l==pos)&#123;        return it;//pos是左端点是无需分裂    &#125;    it--;//pos一定在前一个区间；    int l=it-&gt;l,r=it-&gt;r;    ll val=it-&gt;val;    odt.erase(it);//删除原来的区间    odt.insert(kdltree(l,pos-1,val));    return odt.insert(kdltree(pos,r,val)).first;//这里返回的是指向[pos,r]这个区间的迭代器&#125;//合并区间并赋值xvoid merge(int l,int r,ll val)&#123;    //注意顺序！先右端点后左端点不然可能会RE！    auto itr=split(r+1);    auto itl=split(l);    odt.erase(itl,itr);//删除[l,r]区间内所有元素    //其实这里是[l,r+1)(由于set删除特性经典左闭右开)    //但是r+1取不到也就只能取到r了    odt.insert(kdltree(l,r,val));//插入大区间&#125;//所有的区间操作可以套一个模板//先split右，在split左把区间[l,r]搞出来//让后直接暴力！//区间加void add(int l,int r,ll val)&#123;    auto itr=split(r+1);    auto itl=split(l);    for(auto it=itl;it!=itr;it++)&#123;        it-&gt;val+=val;//这就是为啥用mutable的原因    &#125;&#125;typedef pair&lt;ll,int&gt; kdl;//前人种树后人看动漫//区间第k小ll topk(int l,int r,int k)&#123;    vector&lt;kdl&gt; a;    auto itr=split(r+1);    auto itl=split(l);    for(auto it=itl;it!=itr;it++)&#123;        a.push_back(kdl(it-&gt;val,it-&gt;r-it-&gt;l+1));        //sort会先比较val，如果val相同则比较区间长度        //升序保证第k小，第k大倒序即可    &#125;       sort(a.begin(),a.end());    for(auto it=a.begin();it!=a.end();it++)&#123;        k-=it-&gt;second;        if(k&lt;=0)&#123;            return it-&gt;first;//找到了        &#125;    &#125;    return -1;//不好没找到&#125;ll fastpow(ll x,ll y,ll mod)&#123;    ll res=1;    x%=mod;    while (y&gt;0)    &#123;        if(y&amp;1)&#123;            res=res*x%mod;        &#125;        x=x*x%mod;        y&gt;&gt;=1;    &#125;    return res;&#125;ll sum(int l,int r,int x,int y)&#123;    ll ans=0;    auto itr=split(r+1);    auto itl=split(l);    for(auto it=itl;it!=itr;it++)&#123;        ans=(ans+fastpow(it-&gt;val,x,y)*(it-&gt;r-it-&gt;l+1))%y;    &#125;    return ans;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;seed&gt;&gt;vmax;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=rnd()%vmax+1;        odt.insert(kdltree(i,i,a[i]));    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int op=rnd()%4+1,l=rnd()%n+1,r=rnd()%n+1,x,y;        if(l&gt;r) swap(l,r);        if(op==3)&#123;            x=rnd()%(r-l+1)+1;        &#125;else x=rnd()%vmax+1;        if(op==4) y=rnd()%vmax+1;        if(op==1)&#123;            add(l,r,x);        &#125;else if(op==2)&#123;            merge(l,r,x);        &#125;else if(op==3)&#123;            cout&lt;&lt;topk(l,r,x)&lt;&lt;endl;        &#125;else cout&lt;&lt;sum(l,r,x,y)&lt;&lt;endl;    &#125;    return 0;&#125;
 10.拓展
ODT映射思想的推广
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵快速幂优化DP</title>
    <url>/posts/d1a4963/</url>
    <content><![CDATA[ 0. 前言
本文章还是不太完善的，这篇文章也只是我个人的一个经验总结，希望能帮助到后人学习。
 1.矩阵小芝士
矩阵优化是干啥的啊？
有的时候，你会发现你设计了一个极好的 DP 状态，没有后效性，没有重叠，你很开心，你去看数据范围就会炸掉！你死活都想不出来怎么优化，感觉去掉这个状态之后就感觉 “不完美” 了，让后点开题解，发现一堆密密麻麻的数学公式和矩阵，开心的点进去，郁闷的叉掉，那么怎么解决这种郁闷心情呢？当然就是学矩阵优化啦
好端端的那么优美的递推式子我们为什么要用矩阵来转移呢？答案很简单，因为矩阵乘法有结合律，可以快速幂！当转移式子固定的时候，我们可以通过快速幂，设置好初始矩阵和转移矩阵，通过矩阵快速幂就能轻轻松松的将复杂度变成 log⁡\loglog，是不是很好？（怎么可能？）
我们介绍一下矩阵乘法：
设 A=(ai,j)m×n,B=(bi,j)n×sA=(a_{i,j})_{m\times n},B=(b_{i,j})_{n\times s}A=(ai,j​)m×n​,B=(bi,j​)n×s​，定义 C=A×B=(ci,j)m×sC=A\times B=(c_{i,j})_{m\times s}C=A×B=(ci,j​)m×s​，其中
ci,j=∑k=1nai,kbk,jc_{i,j}=\sum_{k=1}^na_{i,k}b_{k,j}
ci,j​=k=1∑n​ai,k​bk,j​
即 AAA 的第 iii 行与 BBB 的第 jjj 列相乘得到 CCC 的 (i,j)(i,j)(i,j) 元素。
向量可以视为 1×n1\times n1×n 或 n×1n\times 1n×1 的矩阵，类似定义向量和矩阵的乘法。
矩阵乘法满足结合律和分配律，但不满足交换律。
不只是普通乘法，我们还有广义矩阵乘法！
一些约定：

⊗\otimes⊗ 有交换律：a⊗b=b⊗aa\otimes b=b\otimes aa⊗b=b⊗a；
⊗\otimes⊗ 有结合律：(a⊗b)⊗c=a⊗(b⊗c)(a\otimes b)\otimes c=a\otimes (b\otimes c)(a⊗b)⊗c=a⊗(b⊗c)；
⊗\otimes⊗ 对 ⊕\oplus⊕ 有分配律：a⊗(b⊕c)=(a⊗b)⊕(a⊗c)a\otimes (b\oplus c)=(a\otimes b)\oplus(a\otimes c)a⊗(b⊕c)=(a⊗b)⊕(a⊗c)；

若 ⊗\otimes⊗ 满足交换律、结合律，⊗\otimes⊗ 对 ⊕\oplus⊕ 有分配律，那么我们就有广义矩阵乘法：
(A×B)i,j=⨁k(Ai,k⊗Bj,k)(A\times B)_{i,j}=\bigoplus_{k}(A_{i,k}\otimes B_{j,k})
(A×B)i,j​=k⨁​(Ai,k​⊗Bj,k​)
广义矩阵乘法也同样满足普通矩阵乘法的结合律、分配律。
例如 ⊕\oplus⊕ 是 min⁡\minmin 或 max⁡\maxmax，⊗\otimes⊗ 是 +++。
广义上说，只要我们内层的运算具有结合律，外层的运算对于内存运算有分配律，并且状态转移递推恒定，并且发现转移来的状态数少但转移次数极大，我们就可以考虑矩阵优化DP。
严谨的讲，其实矩阵优化的本质就是线性递推 DP 方程，也就是从 iii 推到 i+1i+1i+1 的状态。比如说 f(i,j)f(i,j)f(i,j) 我们对 jjj 一维优化，通过转移矩阵我们可以将 f(i,j)→f(i,j+1)f(i,j) \rightarrow f(i,j+1)f(i,j)→f(i,j+1)。
设矩阵规模为 n×nn\times nn×n，转移阶段为 mmm，则复杂度为 n3log⁡mn^3 \log mn3logm，瓶颈在矩阵快速幂。
我们这里给出一个封装好的矩阵，其中 MN 需要额外定义常量。
struct Matrix&#123;    int mat[MN][MN];    Matrix(int x=0)&#123;        memset(mat,0,sizeof(mat));        if(!x) return;        for(int i=0;i&lt;MN;i++) mat[i][i]=x;    &#125;    Matrix operator*(const Matrix x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    ret.mat[i][j]+=mat[i][k]*x.mat[k][j];                &#125;            &#125;        &#125;        return ret;    &#125;&#125;;Matrix ksm(Matrix a,int b)&#123;    Matrix ret(1);    while(b)&#123;        if(b&amp;1) ret=ret*a;        a=a*a;        b&gt;&gt;=1;    &#125;    return ret;&#125;
 2.矩阵优化操作手册
Luogu P1962 斐波那契数列
斐波那契数列是满足如下性质的一个数列：
fn={1 (n≤2)fn−1+fn−2 (n≥3)f_n = \left\{\begin{aligned} 1 \space (n \le 2) \\ f_{n-1}+f_{n-2} \space (n\ge 3) \end{aligned}\right.
fn​={1 (n≤2)fn−1​+fn−2​ (n≥3)​
请你求出 fn mod 109+7f_n \bmod 10^9 + 7fn​mod109+7 的值。
这个题看起来还挺简单的，不就是斐波那契数列递推吗，直接 O(n)O(n)O(n) 乱搞就可以了。
但是 nnn 太大了怎么办？
我们发现，如果你想递推出 fnf_nfn​ 你需要用到 fn−1,fn−2f_{n-1},f_{n-2}fn−1​,fn−2​ 的数据，而且这个也类似于一个 “DP转移”，而且不难发现每一次只用到上面两个的数据，转移来的状态极少，我们就可以考虑矩阵优化喽。
通过简单的例题我们来介绍以下矩阵优化的 “操作手册”。
 写出转移方程，判断优化类型
对于一般的矩阵优化方程，它的转移方程一般是不难写出来的，但是你会通常会发现其中一个维度数量极其大，转移十分困难，空间也十分困难，而且一个特征就是转移的式子很简单，近似于线性递推而且转移来的状态数量极少，这种就是矩阵优化的鲜明特征。
这里我们的方程就是：
fn={1 (n≤2)fn−1+fn−2 (n≥3)f_n = \left\{\begin{aligned} 1 \space (n \le 2) \\ f_{n-1}+f_{n-2} \space (n\ge 3) \end{aligned}\right.
fn​={1 (n≤2)fn−1​+fn−2​ (n≥3)​
然而有的时候你可能看不出来维度数量极其大，这种我的建议就是你在设计 DP 的时候要写全，就是方程写出来，初始化设置好，计算好空间。
 确定优化维度
我们要确定我们是要对哪一维度，普遍都是对那些数极其大的状态维度进行优化，有的时候可能不太一样，需要自行判断。
这里的优化维度显然就是 fnf_nfn​ 的 nnn。
 根据转移方程需要的量，确定初始矩阵
确定初始矩阵实际上就是我们到底在转移需要什么数据才能转移到 iii，这些数据可以通过转移方程来知道。
注意到，我们的转移方程需要的是前两个数，于是我们的初始矩阵可以这么设置：
[fnfn−1]\begin{bmatrix}
 f_n &amp; f_n-1
\end{bmatrix}[fn​​fn​−1​]
你这不对吧，fn−2f_{n-2}fn−2​ 呢？
事实上，你应当回忆第一节后面我们讲的，矩阵优化的本质就是线性递推 DP 方程。我们从 fnf_nfn​ 推到 fn+1f_{n+1}fn+1​ 需要什么数据呢？回看转移方程，我们需要 fnf_{n}fn​ 和 fn−1f_{n-1}fn−1​，所以我们在初始矩阵这样设置。
那么初始设置就是 [1,1][1,1][1,1]，与方程对应。
初始矩阵的实质？它是动态规划中递推起点的状态值所构成的急诊，必须包含递推所需的全部初始状态，只有包含这些初始状态才能推到后面的状态。
一般来说，我们的初始矩阵大多是是一个向量的形式存在，我们的初始矩阵其实就是用来存状态的。
大多数时候初始矩阵的如果不填则默认为 0，但有的时候因为运算的限制我们需要填写负无穷（例如出现负数的时候或者取 max⁡\maxmax 操作）
 设计转移矩阵
难点来了，我们考虑如何设计转移矩阵。
我们回忆一下矩阵乘法的操作：

图画的不好，请见谅，但大体上是这个操作，我们考虑我们的转移方程该怎么操作。
首先明确目标，我们是要从 fnf_nfn​ 递推到 fn+1f_{n+1}fn+1​。我们目前有转移到 fn+1f_{n+1}fn+1​ 的必须数据——前两项。
接下来我们确定转移后的数据，转移后我们要递推 fn+2f_{n+2}fn+2​，就需要 fn+1,fnf_{n+1},f_nfn+1​,fn​ 的数据，而原来矩阵的 fn−1f_{n-1}fn−1​ 的数据以及没用了，我们就可以舍弃，那么我们列出初始矩阵和转移后的目标矩阵。
接下来是填空时间！请读者自行填空。若感到吃力可以看上面我们矩阵运算的示意图。答案下面会给出

我们总结一下这个步骤：

确定转移矩阵大小。
确定初始矩阵转移后的目标矩阵。
根据转移方程和目标矩阵，列出转移矩阵。
利用转移矩阵模拟运算后是否能得出目标矩阵的结果。

答案如下：

 确定转移顺序，确定快速幂的幂数
我们不妨设初始矩阵为 AAA，转移矩阵为 GGG。
那么求 fnf_nfn​ 的过程就是 A×G×G×⋯×GA\times G \times G \times \dots \times GA×G×G×⋯×G。
注意到一开始说矩阵乘法是有结合律的，考虑直接把后面结合起来，注意到是一个幂的形式，于是我们就可以快速幂了！
那为什么需要这一步呢，是因为有的时候转移过程中因为题目条件矩阵转移顺序有所变化，所以我们可能需要中断转移改变转移矩阵，这里下面的例题会讲到。
在这里我们需要确定矩阵快速幂的幂数，注意到我们初始矩阵是 [f2,f1][f_2,f_1][f2​,f1​] （不能用 f0f_0f0​ 因为就没有第 0 项），那么我们总共需要递推 n−2n-2n−2 次，所以快速幂的幂数就是 n−2n-2n−2。
 根据初始矩阵设计，确定答案统计范围
这个一般需要你通过初始矩阵设计来确定，可能是矩阵的某一项，或者矩阵一个范围。
 写代码，注意细节。
写代码的时候尤其要注意矩阵初始化的赋值，到底是 0 还是 -INF 还是 INF。一般来说矩阵都需要开 long long，注意__int128 的时候。
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MOD=1e9+7,MT=5;struct matrix&#123;    ll mt[MT][MT]&#123;&#125;;    matrix operator *(const matrix &amp;x)&#123;        matrix ret;        for(int i=1;i&lt;=2;i++)&#123;            for(int j=1;j&lt;=2;j++)&#123;                for(int k=1;k&lt;=2;k++)&#123;                    ret.mt[i][j]+=mt[i][k]*x.mt[k][j]%MOD;                    // ret.mt[i][j]%=MOD;                &#125;            &#125;        &#125;        return ret;    &#125;&#125;;ll n;matrix qp(matrix x,matrix ans,ll k)&#123;    while (k)    &#123;        if(k&amp;1)&#123;            ans=ans*x;        &#125;        x=x*x;        k&gt;&gt;=1;    &#125;    return ans;&#125;matrix ans,base;int main()&#123;    cin&gt;&gt;n;    if(n&lt;2)&#123;        cout&lt;&lt;n;        return 0;    &#125;    base.mt[1][1]=base.mt[1][2]=base.mt[2][1]=1;    ans.mt[1][1]=ans.mt[1][2]=1;    cout&lt;&lt;qp(base,ans,n-2).mt[1][1]%MOD;    return 0;&#125;
 3. 例题与TRICK
接下来是例题时间，对于每一个例题我们后面都会有对应的 TRICK 进行讲解。
 USACO07NOV Cow Relays G——Floyd倍增转移

给定一张 TTT 条边的无向连通图，求从 SSS 到 EEE 经过 NNN 条边的最短路长度。

你真的理解 Floyd 了吗？
我们回忆图的邻接矩阵，邻接矩阵的本质是矩阵，它原始表示图两点之间经过 111 条边的路径数量。
我们考虑 Floyd 算法本质上是在干什么，对于 3 层循环 (k,i,j)(k,i,j)(k,i,j)，其中 kkk 我们在枚举中间点，我们来看 Floyd 的转移：mp[i][j]=min(mp[i][j],mp[i][k]+mp[k][j]);。你会发现，这有点类似于广义矩阵乘法啊！
事实上，Floyd 枚举中间点的转移，事实上对于原来的邻接矩阵来说，从经过 1 条边到2 条边，从经过 2 条边到经过 3 条边，如此下去将所有边遍历完就能求出多源最短路了！
以下我们改写以下方程：
c[i][j]=min⁡(c[i][j],a[i][k]+b[k][j])c[i][j]=\min(c[i][j],a[i][k]+b[k][j])
c[i][j]=min(c[i][j],a[i][k]+b[k][j])
根据 Floyd ，aaa 矩阵是经过 xxx 条边的最短路，而 bbb 为经过 yyy 条边的最短路，那么 ccc 矩阵就是经过 x+yx+yx+y 的最短路，那么我们根据初始输入的数组，一开始是经过 111 条边的，那么转移 n−1n-1n−1 次就是我们想要的答案了，我们显然不能暴力转移，注意到满足广义矩阵乘法进行快速幂即可，注意实现细节。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=520;int n,t,s,e,tot;struct Matrix&#123;    int mt[MN][MN];    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ans;        memset(ans.mt,0x3f,sizeof(ans.mt));        for(int k=1;k&lt;=tot;k++)&#123;            for(int i=1;i&lt;=tot;i++)&#123;                for(int j=1;j&lt;=tot;j++)&#123;                    ans.mt[i][j]=min(ans.mt[i][j],mt[i][k]+x.mt[k][j]);                &#125;            &#125;        &#125;        return ans;    &#125;&#125;dis,ans;unordered_map&lt;int,int&gt; ump;Matrix ksm()&#123;    n--;    ans=dis;    while(n)&#123;        if(n&amp;1)&#123;            ans=ans*dis;        &#125;        dis=dis*dis;        n&gt;&gt;=1;    &#125;    return ans;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;t&gt;&gt;s&gt;&gt;e;    memset(dis.mt,0x3f,sizeof(dis.mt));    for(int i=1;i&lt;=t;i++)&#123;        int u,v,w;        cin&gt;&gt;w&gt;&gt;u&gt;&gt;v;        if(!ump[u]) ump[u]=++tot;        if(!ump[v]) ump[v]=++tot;        dis.mt[ump[u]][ump[v]]=dis.mt[ump[v]][ump[u]]=w;    &#125;    cout&lt;&lt;ksm().mt[ump[s]][ump[e]];        return 0;&#125;
 经典图例题

给定一个 nnn 个点，mmm 条边的有向图，对于两个点之间要么不连边，要么边权为 111，求从起点出发长度为 kkk 到达终点的路径方案数（n≤500,m≤250n \le 500,m\le 250n≤500,m≤250，kkk 极大）。

先不考虑数据范围，我们可以用 DP 来解决。
设 f(i,j)f(i,j)f(i,j) 表示到第 iii 个点，路径长度为 jjj 的路径条数，注意到边权为 1 我们可以考虑直接通过相邻边转移即可，时间复杂度 O(mk)O(mk)O(mk)。
注意到 kkk 极大但 mmm 很小，也就是转移过来的状态数量极少，自然想到矩阵优化，那么我们根据什么列转移矩阵呢？我们可以考虑邻接矩阵，我们利用邻接矩阵类似floyd的方法来进行转移，时间复杂度 O(n3log⁡k)O(n^3 \log k)O(n3logk)。
 SCOI2009迷路——边权拆点

给定一个 nnn 个点，mmm 条边的有向图，边权为 www，求从 1 号点出发长度为 kkk 到达 nnn 号点的路径方案数（n≤10,w≤9n \le 10,w \le 9n≤10,w≤9，k≤109k\le 10^9k≤109）。

注意到这里边权为 www。我们矩阵的一个要求就是线性递推，从 k−1→kk-1 \rightarrow kk−1→k，但是这里因为有边权就不满足了，如何处理？
这里我们用到一个技巧叫做边权拆点，矩阵的要求就是线性递推，那么为了满足线性递推的要求，我们把一条边拆成一个一个边权为 1 的小边，同时我们把一个节点拆成 9 个点，分别表示周围边权为 1 到周围边权为9。对于拆点内部，我们让 (u,i)→(u,i+1)(u,i)\rightarrow (u,i+1)(u,i)→(u,i+1) 连边；对于拆点外部，我们让 (u,w)→(v,1)(u,w) \rightarrow (v,1)(u,w)→(v,1)。
例如 u→v,w=4u\rightarrow v,w=4u→v,w=4 这条边，我们就是将 (u,4)(u,4)(u,4) 连向 (v,1)(v,1)(v,1) 号节点。如此，这样构建能够保证当前图和原图等价，于是直接跑矩阵加速即可。
使用这个技巧的的前提是边权很小，这样我们才能用边权拆点。
拆点实际上就是将原图换为一个于此等价的图，使得题目中的特殊性质被满足，从而达到简化题目的目的。
我们其实也可以拆边，把边拆为点，但是我们应当在尽量满足题意的情况下尽量减少点的数量，从而减低复杂度，时间复杂度为 O((9n)3log⁡k)O((9n)^3 \log k)O((9n)3logk)。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=100,MOD=2009;int n,t,tot,idx[MN][10];struct Matrix&#123;    int mat[MN][MN];    Matrix(int x=0)&#123;        memset(mat,0,sizeof(mat));        if(!x) return;        for(int i=0;i&lt;MN;i++) mat[i][i]=x;     &#125;    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    ret.mat[i][j]+=mat[i][k]*x.mat[k][j];                    ret.mat[i][j]%=MOD;                &#125;            &#125;        &#125;        return ret;    &#125;&#125;A,G;Matrix ksm(Matrix a,int b)&#123;    Matrix ret(1);    while(b)&#123;        if(b&amp;1) ret=ret*a;        a=a*a;        b&gt;&gt;=1;    &#125;    return ret;&#125;void initG()&#123;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=9;j++)&#123;            idx[i][j]=++tot;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;9;j++)&#123;            G.mat[idx[i][j]][idx[i][j+1]]=1;        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;t;    initG();    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            char c;            int num;            cin&gt;&gt;c;            num=c-&#x27;0&#x27;;            if(num&gt;0)&#123;                G.mat[idx[i][num]][idx[j][1]]=1;            &#125;        &#125;    &#125;    A=ksm(G,t);    cout&lt;&lt;A.mat[1][idx[n][1]]%2009;    return 0;&#125;
 SDOI2009 HH去散步——点边转化，超级源点

给定 nnn 个点，mmm 条无向边的图，边权均为 1，求从 S→TS\rightarrow TS→T 的路径上有多少长度为 ttt 的路径，满足上一步走过的路下一步不能重复走。答案对 459894598945989 取模。
1≤n≤50,1≤m≤60,t≤230,0≤S,T1\le n \le 50,1\le m \le 60,t\le 2^{30},0\le S,T1≤n≤50,1≤m≤60,t≤230,0≤S,T。

考虑DP，设 f(i,j)f(i,j)f(i,j) 表示走到第 iii 个点，路径长度为 jjj 的路径条数，显然有转移方程：
f(u,j)=∑v∈son(u)f(v,j−1)\begin{aligned} f(u,j)=\sum\limits_{v\in son(u)} f(v,j-1) \end{aligned}
f(u,j)=v∈son(u)∑​f(v,j−1)​
那你这方程也不对啊，题目说了满足上一步走过的路下一步不能重复走。那么接下来怎么在图上转移？
卡住了……但是我们发现边数极小！当然我们需要构造一个新图使得能够满足这个限制，考虑怎么构造？
注意到边数极小，我们可以利用点边互换的技巧！点边互换的核心思想是：把原图中的某些点看作边，或者把原图中的某些边看作点 ，从而构造一个新的图来满足题目中的限制。
边可以转为点，而点也可以转为边，这样的代价就是我们必须增加点的数量或边的数量。
那么我们修改一下转移方程，转移方程基本不变，但是转移有区别。
f(u,j)=∑v∈to(u)f(v,j−1)f(u,j)=\sum\limits_{v\in to(u)} f(v,j-1)
f(u,j)=v∈to(u)∑​f(v,j−1)
其中 to(u)to(u)to(u) 表示能够到达 uuu 点的边集，那么这个边集怎么搞呢，我们可以考虑割点！把每个点拆成相邻边数个点，第 iii 个点代表第 iii 条相邻的边走过来得点，让后该点向除第 iii 条边以外所连的点连一条单向边即可构造出新图。
但是 SSS 节点可能向周围任意一个点前进，不好在矩阵掌控，不妨考虑超级源点 0 号点，0 号点向 SSS 连边，只需要把 f0f_0f0​ 初始化为 1 即可跑矩阵优化。
对于每一个点，期望连边 2 条，都会割出 2 个点，最多 120120120 个点，时间复杂度 (m3log⁡k)(m^3 \log k)(m3logk)。
割点其实就是将每个点的不同状态放大化，使其“人格分裂”，从而将【节点的转移】转化为【状态的转移】，从而达到实现满足特殊条件约束的目的。 ——Ydtz的教程
 HAOI2015 数字串拆分——指数高精？发掘性质！
自己看题吧。
注意到 fff 可以 DP 求出，根据题意列出转移方程。
f(i)=∑j=max(i−m,0)i−1f(j)f(i)=\sum\limits_{j=max(i-m,0)}^{i-1} f(j)
f(i)=j=max(i−m,0)∑i−1​f(j)
初始 f(0)=1f(0)=1f(0)=1。
注意到 mmm 极小，而 ∣s0∣|s_0|∣s0​∣ 及其大，考虑矩阵优化，注意到这个和斐波那契数列的转移有点类似，不过要的是前 mmm 个数。
但是你会发现这个 ggg 的划分及其奇怪，并且转移的 1050010^{500}10500 太大了要指数高精，而且暴力划分 ggg 最大会有 2∣s0∣2^{|s_0|}2∣s0​∣ 种。
考虑分析 ggg 的划分形式，首先矩阵满足一个性质：
An+m=An×AmA^{n+m}=A^n \times A^m
An+m=An×Am
正确性是很显然的，例如 g(123)g(123)g(123) 可以分解为：
g(123)=f(1+2+3)+f(12+3)+f(1+23)+f(123)=f(1+2)×3+f(12)×f(3)+f(1)×f(23)+f(123)\begin{aligned} g(123) &amp; =f(1+2+3)+f(12+3)+f(1+23)+f(123) \\ &amp; = f(1+2) \times 3+f(12) \times f(3) +f(1) \times f(23)+f(123) \end{aligned}
g(123)​=f(1+2+3)+f(12+3)+f(1+23)+f(123)=f(1+2)×3+f(12)×f(3)+f(1)×f(23)+f(123)​
考虑按数位递推求解 ggg，设 gi′g_i&#x27;gi′​ 表示对于 sss 中前 iii 位数字的答案 ggg，考虑算 g(123)g(123)g(123) 时 g(12),g(1)g(12),g(1)g(12),g(1) 已经算过，考虑改写有：
g(123)=f(1+2)×3+f(12)×f(3)+f(1)×f(23)+f(123)=f(123)+g1′×f(23)+g2′×f(3)\begin{aligned} g(123) &amp; = f(1+2) \times 3+f(12) \times f(3) +f(1) \times f(23)+f(123) \\ &amp; = f(123) + g&#x27;_{1} \times f(23) +g&#x27;_{2} \times f(3)   \end{aligned}
g(123)​=f(1+2)×3+f(12)×f(3)+f(1)×f(23)+f(123)=f(123)+g1′​×f(23)+g2′​×f(3)​
答案即为 gn′g&#x27;_ngn′​。
问题转化为如何求出一个后缀字符串的 fff 值，考虑 fi,j′f&#x27;_{i,j}fi,j′​ 表示 sss 第 iii 位数字第 jjj 位数字组成的 fff 的转移矩阵，通过 fi,j′=f(10n−i)si×fi+1,j′f&#x27;_{i,j}=f(10^{n-i})^{s_{i}}\times f&#x27;_{i+1,j}fi,j′​=f(10n−i)si​×fi+1,j′​ 即可转移，预处理 f(10i)f(10^i)f(10i) 即可，其中 sis_isi​ 表示代表 sss 中第 iii 个数字的矩阵。
当我们发现指数需要高精，心中默念 “这题绝对不是让我指数高精，一定题目中有什么其他的特性在里面，如果山穷水尽可能我们还有特殊快速幂”，关于这个特殊快速幂我们下文会提到。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5,MOD=998244353;int m,len,ans;string s;struct Matrix&#123;    int mat[MN][MN];    Matrix(int x=0)&#123;        memset(mat,0,sizeof(mat));        if(x==0) return;        for(int i=0;i&lt;MN;i++)&#123;            mat[i][i]=x;        &#125;    &#125;    void init(int x)&#123;        memset(mat,0,sizeof(mat));        if(x==0) return;        for(int i=0;i&lt;MN;i++)&#123;            mat[i][i]=x;        &#125;    &#125;    void initf()&#123;        for(int i=0;i&lt;m;i++) mat[i][m-1]=1;        for(int i=1;i&lt;m;i++) mat[i][i-1]=1;    &#125;        Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    ret.mat[i][j]+=mat[i][k]*x.mat[k][j]%MOD;                    ret.mat[i][j]%=MOD;                &#125;            &#125;        &#125;        return ret;    &#125;    Matrix operator+(const Matrix &amp;x)const&#123;        Matrix ret;         for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                ret.mat[i][j]=(mat[i][j]+x.mat[i][j])%MOD;            &#125;        &#125;        return ret;    &#125;&#125;pw[520],f[520][520],g[520];Matrix ksm(Matrix a,int b)&#123;    Matrix ret(1);    while(b&gt;0)&#123;        if(b&amp;1) ret=ret*a;        a=a*a;        b&gt;&gt;=1;    &#125;    return ret;&#125;signed main()&#123;    cin&gt;&gt;s&gt;&gt;m;    len=s.length();    s=&#x27; &#x27;+s;    pw[0].initf();    for(int i=1;i&lt;len;i++) pw[i]=ksm(pw[i-1],10);    for(int i=1;i&lt;=len;i++)&#123;        for(int j=i;j&gt;=1;j--)&#123;            if(i!=j)&#123;                f[j][i]=f[j+1][i]*ksm(pw[i-j],s[j]-&#x27;0&#x27;);            &#125;else&#123;                f[j][i]=ksm(pw[0],s[j]-&#x27;0&#x27;);            &#125;        &#125;    &#125;    g[0].init(1);    for(int i=1;i&lt;=len;i++)&#123;        for(int j=0;j&lt;i;j++)&#123;            g[i]=g[i]+(g[j]*f[j+1][i]);        &#125;    &#125;    for(int i=0;i&lt;m;i++) ans=(ans+g[len].mat[0][i])%MOD;    cout&lt;&lt;ans;    return 0;&#125;
 NOI2013 矩阵游戏——指数高精与费马小定理，10进制快速幂。
F[1,1]=1F[i,j]=a×F[i,j−1]+b,j≠1F[i,1]=c×F[i−1,m]+d,i≠1\begin{aligned}
F[1, 1] &amp;= 1 \\
F[i, j] &amp;=a\times F[i, j-1]+b, &amp;j\neq 1 \\
F[i, 1] &amp;=c\times F[i-1, m]+d, &amp;i\neq 1 \\
\end{aligned}F[1,1]F[i,j]F[i,1]​=1=a×F[i,j−1]+b,=c×F[i−1,m]+d,​j=1i=1​
不难发现是线性递推，考虑设置两个转移方程 M1,M2M1,M2M1,M2 分别表示转移列的和转移行的。
转移方程已经写出来了，我们考虑怎么设置初始转移，我们不难发现这个矩阵转移常数项怎么处理，对于常数项的处理我们一般是在初始矩阵中加一位列单独设置为 1，让后在之后的转移一直设置为 1，如果需要常数项我们就将对应位置改成 bbb 或 ddd 即可。
矩阵如下,列转移：
[f1]×[a0b1]=[f′1]\begin{bmatrix}
 f &amp; 1
\end{bmatrix}

\times \begin{bmatrix}
 a &amp; 0\\
 b &amp; 1
\end{bmatrix}

=
\begin{bmatrix}
 f&#x27; &amp; 1
\end{bmatrix}[f​1​]×[ab​01​]=[f′​1​]
行转移：
[f1]×[c0d1]=[f′1]\begin{bmatrix}
 f &amp; 1
\end{bmatrix}

\times \begin{bmatrix}
 c &amp; 0\\
 d &amp; 1
\end{bmatrix}

=
\begin{bmatrix}
 f&#x27; &amp; 1
\end{bmatrix}[f​1​]×[cd​01​]=[f′​1​]
对于转移实际上就是 A×(M1m−1×M2)n−1×M1m−1A \times ({M1}^{m-1}\times M2)^{n-1} \times {M1}^{m-1}A×(M1m−1×M2)n−1×M1m−1
注意到 n,mn,mn,m 的范围及其离谱，log⁡2\log_2log2​ 都搞不了。
等会 log⁡2\log_2log2​ 不行其他的 log⁡x\log_xlogx​ 是不是可以，我们可以考虑 10进制快速幂，让后就可以了！
显然我没写 10进制快速幂，心中默念是不是有没有什么性质。
注意到这个矩阵对于列的转移，其中 aaa 总共被乘上了 am−1a^{m-1}am−1 次，同理与 cn−1c^{n-1}cn−1，而注意到模数为质数，可以考虑费马小定理取模，模上 φ(MOD)\varphi(MOD)φ(MOD)即可。
注意到，当 a=c=1a=c=1a=c=1 时不能用费马小定理，考虑直接矩阵快速幂幂取模原来模数。
#include&lt;bits/stdc++.h&gt;#define int __int128using namespace std;constexpr int MN=15,MOD=1e9+7;int n,m,a,b,c,d,base0,base1;string sn,sm;struct Matrix&#123;    int mat[MN][MN];    // INIT THE MATRIX    Matrix(int x=0)&#123;        memset(mat,0,sizeof(mat));        for(int i=0;i&lt;MN;i++) mat[i][i]=x;    &#125;    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    ret.mat[i][j]+=mat[i][k]*x.mat[k][j];                    ret.mat[i][j]%=MOD;                &#125;            &#125;        &#125;        return ret;    &#125;&#125;M1,M2;Matrix ksm(Matrix A,int B)&#123;    Matrix ret(1);    while(B&gt;0)&#123;        if(B&amp;1) ret=ret*A;        A=A*A;        B&gt;&gt;=1;    &#125;    return ret;&#125;namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;signed main()&#123;    read(sn,sm,a,b,c,d);    base0=(a==1?MOD:MOD-1);    for(auto p:sm)&#123;        m=((m&lt;&lt;3)+(m&lt;&lt;1)+(p^48))%(base0);    &#125;    Matrix ans;    M1.mat[0][0]=a,M1.mat[0][1]=b,M1.mat[1][1]=1;    M2.mat[0][0]=c,M2.mat[0][1]=d,M2.mat[1][1]=1;    ans.mat[0][0]=ans.mat[1][0]=1;    Matrix d=ksm(M1,(m+base0-1)%base0)*M2;    int base1;    if(d.mat[0][0]==1) base1=MOD;    else base1=MOD-1;    for(auto p:sn)&#123;        n=((n&lt;&lt;3)+(n&lt;&lt;1)+(p^48))%(base1);    &#125;    ans=ksm(d,(n+base1-1)%base1)*ksm(M1,(m+base0-1)%base0)*ans;    put(ans.mat[0][0]);    return 0;&#125;
 CF576D Flights for Regular Customers——强制中断，bitset优化
又是特殊限制，我们还是设DP。
设 f(i,j)f(i,j)f(i,j) 表示在第 iii 个点，在走过的边数为 jjj 的情况下是否能够到达（取值为0/1），由 j−1j-1j−1 可以转移过来，并且矩阵味很重，转移是或的关系，可以考虑矩阵优化。
考虑无解的情况怎么做，不妨假设 1 号节点边都可以走，如果都可以走的情况下还是到不了那就GG。
我们根据操作手册，发现在第五步就炸了，因为每一次 did_idi​ 的更新都需要重新设置转移矩阵，考虑根据 did_idi​ 的变化量进行快速幂，每一次中断跑多源BFS更新答案，让后就做完了。
我们不难发现 fff 的取值只有 0 或 1，可以利用 bitset优化，写的时候如下：
struct Matrix&#123;    bitset&lt;MN&gt; mat[MN];    Matrix(int x=0)&#123;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                mat[i][j]=0;            &#125;        &#125;        if(!x) return;        for(int i=0;i&lt;MN;i++) mat[i][i]=x;    &#125;    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int k=0;k&lt;MN;k++)&#123;                if(mat[i][k])&#123;// 把j省去了                    ret.mat[i]|=x.mat[k];                &#125;            &#125;        &#125;        return ret;    &#125;&#125;;
代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=250,INF=1e18;struct Edge&#123;    int u,v,d;&#125;e[MN];int n,m,ans,dis[MN];struct Matrix&#123;    bitset&lt;MN&gt; mat[MN];    Matrix(int x=0)&#123;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                mat[i][j]=0;            &#125;        &#125;        if(!x) return;        for(int i=0;i&lt;MN;i++) mat[i][i]=x;    &#125;    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int k=0;k&lt;MN;k++)&#123;                if(mat[i][k])&#123;                    ret.mat[i]|=x.mat[k];                &#125;            &#125;        &#125;        return ret;    &#125;&#125;a,G;Matrix ksm(Matrix a,int b)&#123;    Matrix ret(1);    while(b&gt;0)&#123;        if(b&amp;1) ret=ret*a;        a=a*a;        b&gt;&gt;=1;    &#125;    return ret;&#125;bool cmp(Edge x,Edge y)&#123;    return x.d&lt;y.d;&#125;void bfs()&#123;    for(int i=1;i&lt;=n;i++) dis[i]=INF;    queue&lt;int&gt; q;    for(int i=1;i&lt;=n;i++)&#123;        if(a.mat[1][i]) q.push(i),dis[i]=0;    &#125;    while(!q.empty())&#123;        int f=q.front();        cerr&lt;&lt;f&lt;&lt;&#x27;\n&#x27;;        q.pop();        for(int i=1;i&lt;=n;i++)&#123;            if(G.mat[f][i]&amp;&amp;dis[i]==INF)&#123;                dis[i]=dis[f]+1;                q.push(i);            &#125;        &#125;    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        cin&gt;&gt;e[i].u&gt;&gt;e[i].v&gt;&gt;e[i].d;    &#125;    sort(e+1,e+1+m,cmp);    a.mat[1][1]=1,ans=INF,dis[n]=INF;    for(int i=1,lst=0;i&lt;=m;i++)&#123;        if(ans&lt;e[i].d) break;        int dt=e[i].d-lst;        lst=e[i].d;        a=a*ksm(G,dt);        G.mat[e[i].u][e[i].v]=1;        if(i==m||e[i+1].d!=e[i].d) bfs();        ans=min(ans,lst+dis[n]);    &#125;    if(ans==INF) cout&lt;&lt;&quot;Impossible&quot;;    else cout&lt;&lt;ans;    return 0;&#125;
 NOI2020 美食家——强制中断，二进制分组快速幂！

给定一张 nnn 个点 mmm 条边的有向图，有重边，边有时间 wiw_iwi​。每一个点有价值 ccc，走到点 iii 可以获得 cic_ici​ 的价值。
初始时间为 000，你需要从起点 111 开始走，恰好在 TTT 时间回到起点 111。最终得到的价值为所有经过的点的价值 ccc 的和，点可以被重复经过而且价值也可以重复累加。
不能在任何一个点停留，也就是说 ttt 时间到达一个点 t+1t+1t+1 时间必须往其他点走。
现在有 kkk 个特殊时间点，形式为三个参数 (ti,xi,yi)(t_i,x_i,y_i)(ti​,xi​,yi​)。表示恰好在 tit_iti​ 时间点到达点 xix_ixi​ 时可以得到 yiy_iyi​ 的额外价值。
求最终能获得的最大价值和，若无法在 TTT 时间回到起点，输出 −1-1−1。
1≤n≤50,n≤m≤500,0≤k≤2001\le n\le 50,n\le m \le 500,0 \le k \le 2001≤n≤50,n≤m≤500,0≤k≤200
1≤ti≤T≤109,1≤wi≤5,1≤ci≤52501,1≤yi≤1091\le t_{i}\le T \le 10^9,1\le w_{i}\le 5,1\le c_{i}\le 52501,1\le y_{i}\le 10^91≤ti​≤T≤109,1≤wi​≤5,1≤ci​≤52501,1≤yi​≤109
数据保证所有 tit_iti​ 互不相同，图一定联通。

一眼 DP（因为我也想不出来如何用贪心做www），考虑设 f(i,j)f(i,j)f(i,j) 表示到达第 iii 个点，当前时间为 jjj 的最大价值和，因为没有停留甚至都不用设置是否停留的状态太好啦。转移方程是显然的：
f(u,j)=max⁡v=fa(u)f(v,j−1)+w(u,v)\begin{aligned}
f(u,j)=\max\limits_{v=fa(u)}f(v,j-1)+w(u,v)
\end{aligned}
f(u,j)=v=fa(u)max​f(v,j−1)+w(u,v)​
这是转移方程，我们可以写成递推的形式，就不写出了。考虑特殊时间，直接用 map 存下来特判即可，这样我们就能拿到高贵的 40 分（环特判时间即可），对于性质 A 是一个大环直接瞎做即可，就有50分。
首先特别重要的一点，1≤wi≤5,n≤m≤5001\le w_{i} \le 5,n\le m \le 5001≤wi​≤5,n≤m≤500。如果这个图是一个完全图则对应的边数也太少了，每个点期望连边的边数很小，也就是说 DP 方程转移过来的状态数量极小，并且 wiw_iwi​ 极小，有因为取 max⁡\maxmax 和内部操作满足广义矩阵乘法，考虑矩阵优化+边权拆点。
不对啊，还是卡在了第五步，因为有特殊时间点的存在，我们可以想上面题一样强制中断快速幂，更新矩阵后再次快速幂，ok啊，写完，交上去发现只有75分（拼好分版本）。
怎么回事呢，原来是 kkk 太炸裂了，这样的时间复杂度为 O(k×(5n)3log⁡T)O(k\times (5n)^3 \log T)O(k×(5n)3logT)，只能过 k≤10k\le 10k≤10。
我们考虑怎么优化，发现每次中断转移后重新转移的Δt\Delta tΔt，Δt\Delta tΔt中有一些幂我们是重复在乘上的。
我们考虑对 Δt\Delta tΔt 进行二进制分解，首先我们写预处理转移矩阵 GGG
的幂 pw[i]pw[i]pw[i] ，(G1,G2,G4,…,G229)(G^1,G^2,G^4,\dots,G^{2^{29}})(G1,G2,G4,…,G229)，预处理的时间复杂度就是 O((5n)3log⁡T)O((5n)^3 \log T)O((5n)3logT)。让后我们每一次快速幂转移的时候，我们将 Δt\Delta tΔt 做二进制分解，将对应二进制数上的幂对应预处理的转移矩阵幂。让后我们让初始矩阵乘上这些 pw[i]pw[i]pw[i]，就可以了。
分析复杂度，不难发现我们的初始矩阵是一个 1 行 5n5n5n 列的向量，复杂度为 O(k×(5n)2log⁡T)O(k \times (5n)^2 \log T)O(k×(5n)2logT)，可以通过。
类似于这种凑 kkk 的多次询问或者需要多次用到凑 kkk，如果求解二进制整数幂答案的时间复杂度较低，可以考虑倍增+二进制拆分求解。
注意转矩阵乘法后千万不要思维定势，因为这里是取 max⁡\maxmax 操作，所有无用项和初始值为 -INF 而非 0。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=260,NINF=-1e18;struct Festival&#123;    int t,u,y;&#125;fst[MN];int logt,n,m,T,K,tot,idx[MN][MN],c[MN];struct Matrix&#123;    int mat[MN][MN];    Matrix(int x=NINF)&#123;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                if(i==j) mat[i][j]=x;                else mat[i][j]=NINF;            &#125;        &#125;    &#125;    Matrix operator*(const Matrix &amp;x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    if(mat[i][k]==NINF||x.mat[k][j]==NINF) continue;                    ret.mat[i][j]=max(ret.mat[i][j],mat[i][k]+x.mat[k][j]);                &#125;            &#125;        &#125;        return ret;    &#125;&#125;pw[55],A,B;void initA()&#123;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=5;j++)&#123;            idx[i][j]=++tot;        &#125;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;5;j++)&#123;            A.mat[idx[i][j]][idx[i][j+1]]=0;           &#125;    &#125;&#125;void initpw(Matrix x)&#123;    pw[0]=x;    for(int i=1;i&lt;=logt;i++) pw[i]=pw[i-1]*pw[i-1];&#125;bool cmp(Festival x,Festival y)&#123;    return x.t&lt;y.t;&#125;Matrix ksmpw(Matrix a,int b)&#123;    for(int i=0;i&lt;=logt;i++)&#123;        if((b&gt;&gt;i)&amp;1)&#123;            Matrix ret;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    if(a.mat[1][k]==NINF||pw[i].mat[k][j]==NINF) continue;;                    ret.mat[1][j]=max(ret.mat[1][j],a.mat[1][k]+pw[i].mat[k][j]);                &#125;            &#125;            a=ret;        &#125;    &#125;    return a;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;T&gt;&gt;K;    logt=__lg(T);    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;c[i];    &#125;    initA();    for(int i=1;i&lt;=m;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        A.mat[idx[u][w]][idx[v][1]]=c[v];    &#125;    for(int i=1;i&lt;=K;i++)&#123;        cin&gt;&gt;fst[i].t&gt;&gt;fst[i].u&gt;&gt;fst[i].y;    &#125;    sort(fst+1,fst+1+K,cmp);    initpw(A);    B.mat[1][idx[1][1]]=c[1];    int lst=0;    for(int i=1;i&lt;=K;i++)&#123;        B=ksmpw(B,fst[i].t-lst);        if(B.mat[1][idx[fst[i].u][1]]!=NINF) B.mat[1][idx[fst[i].u][1]]+=fst[i].y;        lst=fst[i].t;    &#125;    if(lst!=T) B=ksmpw(B,T-lst);    if(B.mat[1][idx[1][1]]==NINF) cout&lt;&lt;-1;    else cout&lt;&lt;B.mat[1][idx[1][1]];    return 0;&#125;
 POI 2015 WYC——倍增二分思想

给定一个 nnn 个点，mmm 条边的有向图，无自环有重边，边权为 www，求第 kkk 小路径长度（1≤n≤40,1≤m≤1000,1≤w≤31\le n \le 40,1\le m\le 1000,1 \le w \le 31≤n≤40,1≤m≤1000,1≤w≤3，k≤1018k\le 10^{18}k≤1018）。

A* ? 痴人说梦啊。
注意到又是经典的 n,wn,wn,w 极小，kkk 极大，稍微分析以下满足矩阵的特点，考虑矩阵递推+边权拆点，因为有重边所以不能单纯的矩阵设为 1，应当为G.mat[idx[u][c]][idx[v][1]]++;。但是我们怎么统计一个状态有多少路径呢？我们发现可以利用超级源点的思想，0 号点向他们连边，边权为0，这样就能够统计0 号点的路径了。
注意到我们需要找第 kkk 小，也就是凑 kkk，我们就可以利用前面提到的思想。注意到这个是一个倍增的形式，我们可以利用倍增二分的技巧找 kkk，时间复杂度就是O(n3log⁡k)O(n^3 \log k)O(n3logk)
注意开__int128
#include&lt;bits/stdc++.h&gt;#define int __int128using namespace std;constexpr int MN=150;int n,m,k,lgk,tot,idx[MN][5];struct Matrix&#123;    int mat[MN][MN];    Matrix(int x=0)&#123;        memset(mat,0,sizeof(mat));        if(!x) return;        for(int i=0;i&lt;MN;i++) mat[i][i]=x;    &#125;    Matrix operator*(const Matrix x)const&#123;        Matrix ret;        for(int i=0;i&lt;MN;i++)&#123;            for(int j=0;j&lt;MN;j++)&#123;                for(int k=0;k&lt;MN;k++)&#123;                    ret.mat[i][j]+=mat[i][k]*x.mat[k][j];                &#125;            &#125;        &#125;        return ret;    &#125;&#125;a,G,pw[70];namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;void initG()&#123;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=3;j++) idx[i][j]=++tot;    &#125;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;3;j++)&#123;            G.mat[idx[i][j]][idx[i][j+1]]++;        &#125;        G.mat[idx[i][1]][0]++;        a.mat[0][idx[i][1]]++;    &#125;    G.mat[0][0]++;&#125;signed main()&#123;    read(n,m,k);    initG();    for(int i=1;i&lt;=m;i++)&#123;        int u,v,c;        read(u,v,c);        G.mat[idx[u][c]][idx[v][1]]++;    &#125;    int i;    pw[0]=G;    for(i=1;;i++)&#123;        pw[i]=pw[i-1]*pw[i-1];        Matrix ret=a*pw[i];        if(ret.mat[0][0]-n&gt;=k) break;        if(i&gt;62)&#123;            cout&lt;&lt;-1;            return 0;        &#125;    &#125;    int ans=0;    for(;i&gt;=0;i--)&#123;        Matrix ret=a*pw[i];        if(ret.mat[0][0]-n&lt;k)&#123;            a=ret;            if(ret.mat[0][0]-n&lt;k) ans+=(1ll&lt;&lt;i);        &#125;    &#125;    put(ans);    return 0;&#125;
 CF1067D Computer Game——矩阵优化与斜率优化，倍增二分思想
首先这个升级显然是吓唬你的，因为我可以一直选一个游戏 van，所以我只需要看 bipib_{i}p_{i}bi​pi​ 最大就可以了。但是这里我们并不能考虑贪心，因为在时间短的情况下可能升级升不了，还是要 dp 的。
不难有 dp 方程如下，设 f(t)f(t)f(t) 表示还剩下 ttt 秒的最大期望，vvv 表示 bipib_{i}p_ibi​pi​ 的最大值：
f(t+1)=max⁡i=1n{pi(tv+ai)⏟升级成功+（1−pi)ft⏟升级失败}f(t+1)= \max_{i=1}^n \left\{ \underbrace{p_{i}(tv+a_i)}_{\text{升级成功}} +  \underbrace{（1-p_{i})f_t}_{\text{升级失败}}  \right\}
f(t+1)=i=1maxn​⎩⎪⎨⎪⎧​升级成功pi​(tv+ai​)​​+升级失败（1−pi​)ft​​​⎭⎪⎬⎪⎫​
时间复杂度 O(nt)O(nt)O(nt)
不难看出来可以斜率优化啊，但是我们要变下形式：
f(t+1)=max⁡i=1n{pi(tv+ai)+(1−pi)ft}=pitv+piai+ft−pift=pi(tv−ft)+piai+ft\begin{aligned}
f(t+1) &amp; = \max_{i=1}^n \left\{ p_{i}(tv+a_i) +  (1-p_{i})f_t  \right\} \\
&amp; = p_{i}tv+p_{i}a_{i}+f_t-p_{i}f_{t} \\
&amp; = p_{i}(tv-f_t)+p_{i}a_{i}+f_t
\end{aligned}
f(t+1)​=i=1maxn​{pi​(tv+ai​)+(1−pi​)ft​}=pi​tv+pi​ai​+ft​−pi​ft​=pi​(tv−ft​)+pi​ai​+ft​​
因为 ftf_{t}ft​ 是已知的，所以这个就是一个显然的斜率优化式子，通过将 pip_ipi​ 排序可以满足 kkk 单调，但是 xxx 呢？其实也是一样的：
tv−ft≥(t−1)v−ft−1tv−ft≥tv−v−ft−1ft−1−ft≤v\begin{aligned}
tv-f_{t}&amp; \ge (t-1)v-f_{t-1} \\
tv-f_{t}&amp; \ge tv-v-f_{t-1} \\
f_{t-1}-f_{t} &amp; \le v
\end{aligned}tv−ft​tv−ft​ft−1​−ft​​≥(t−1)v−ft−1​≥tv−v−ft−1​≤v​
因为两个游戏之间获得的收益不可能比玩最大收益（最大的 bipib_{i}p_{i}bi​pi​ 的游戏）还大，所以式子成立，xxx 单调不降。
故单调队列优化，时间复杂度 O(t+n)O(t+n)O(t+n)…t≤1010t\le 10^{10}t≤1010？
这个数据范围已经不行了，必须出矩阵优化…等会矩阵怎么斜率优化？
首先我们先把转移的矩阵搞出来，推啊推：
[fi−1i−11]×[(1−pi)00piv10(pi−ai)11]=[fii1]\begin{bmatrix}
 f_{i-1} &amp; i-1 &amp; 1 
\end{bmatrix}
\times 
\begin{bmatrix}
 (1-p_i) &amp; 0 &amp; 0\\
 p_i v &amp; 1 &amp; 0\\
 (p_i-a_i) &amp; 1 &amp; 1
\end{bmatrix}
=
\begin{bmatrix}
 f_{i} &amp; i &amp; 1 
\end{bmatrix}[fi−1​​i−1​1​]×⎣⎢⎡​(1−pi​)pi​v(pi​−ai​)​011​001​⎦⎥⎤​=[fi​​i​1​]
其实也不是很难推，有啥加啥，因为少个 1 直接加上去就行。
如果我们想找出来有哪些游戏是我们在斜率优化需要的，可以利用单调栈（不能用单调队列我们要存下来的）来记录我们斜率从那些点转移过来，现在问题在于如何确定什么时候从一个点转移到另一个点。
回忆一下这张图：

在斜率优化上，我们能用单调队列来做是因为对于每一个点上的斜率，它有一定转移的边界，在这之前是这个斜率，在之后就不是了。
说的好听矩阵怎么做？首先一个游戏的转移矩阵肯定不会变。问题在于我们怎么像单调队列优化一样找到所谓的边界呢？
首先单调队列不太行因为它不适用于矩阵这种玩意，那怎么办，矩阵这玩意也不能上斜率不单调三小将…………二分？

但其实维护凸壳的时候斜率函数单调递增，我们可以借助这个二分，找到顶点就可以了，其实二分也可以套在 kkk 与 xxx 同单调的地方，芝士没有那么优罢了

我们可以二分矩阵快速幂的幂，到哪个幂的时候转移是最优的！这样的时间复杂度是 O(nlog⁡2t)O(n \log^2 t)O(nlog2t)，可以通过。
我们不妨快点，不难发现幂其实是一个倍增的形式，我们可以利用倍增的形式二分，首先预处理矩阵快速幂后的各个幂对应的矩阵，从大到小枚举倍增的幂，不断检查是否合法（即是否 &lt;t&lt;t&lt;t )，让后检查是否更优，直接赋值即可！时间复杂度 O(nlog⁡t)O(n \log t)O(nlogt)，其中 log⁡t=33\log t=33logt=33 可以通过。
代码如下，注意精度！！！！！
#include&lt;bits/stdc++.h&gt;#define ll long long#define double long doubleusing namespace std;constexpr int MN=6e5+15;constexpr double eps=1e-13;struct Node&#123;    double k,b;&#125;ln[MN],cl[MN],s[MN];ll n,t,top,tot,now;double v;struct Matrix&#123;    double mat[5][5];    Matrix operator *(const Matrix &amp;x)const&#123;        Matrix ret;        memset(ret.mat,0,sizeof(ret.mat));        for(int i=1;i&lt;=3;i++)&#123;            for(int j=1;j&lt;=3;j++)&#123;                for(int k=1;k&lt;=3;k++)&#123;                    ret.mat[i][j]+=mat[i][k]*x.mat[k][j];                &#125;            &#125;        &#125;        return ret;    &#125;&#125;g[40],f;bool cmp(Node x,Node y)&#123;    if(fabs(x.k-y.k)&lt;eps) return x.b&lt;y.b;    return x.k&lt;y.k;&#125;int ck(double x)&#123;    if(fabs(x)&lt;eps) return 0;    return x&gt;0?1:-1;&#125;double gety(Node x,Node y)&#123;    return (x.b-y.b)/(y.k-x.k);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;t;    for(int i=1;i&lt;=n;i++)&#123;        double a,b,p;        cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;        v=max(v,b*p);        ln[i].k=p;        ln[i].b=p*a;    &#125;    sort(ln+1,ln+1+n,cmp);    for(int i=1;i&lt;=n;i++)&#123;	    // 先把那些相等斜率的全排了        if(i == n || ck(ln[i].k - ln[i+1].k) != 0) cl[++tot]=ln[i];    &#125;    for(int i=1;i&lt;=tot;i++)&#123;	    // 单调栈处理转移的点        while(top&gt;1&amp;&amp;ck(gety(s[top],s[top-1])-gety(cl[i],s[top-1]))&gt;=0) top--;        s[++top]=cl[i];    &#125;    // f 为 初始矩阵    f.mat[1][3]=1;    for(int i=1;i&lt;=top;i++)&#123;        double x=now*v-f.mat[1][1];        while(i&lt;top&amp;&amp;ck(x-gety(s[i],s[i+1]))&gt;=0) i++;// 先把过时决策排了        if(i&lt;top) x=gety(s[i],s[i+1]);        g[0].mat[1][2]=g[0].mat[1][3]=g[0].mat[2][3]=0;        g[0].mat[2][2]=g[0].mat[3][2]=g[0].mat[3][3]=1;        g[0].mat[1][1]=1-s[i].k,g[0].mat[2][1]=s[i].k*v,g[0].mat[3][1]=s[i].b;// 初始化矩阵        for(int j=1;j&lt;=35;j++) g[j]=g[j-1]*g[j-1];        for(int j=35;j&gt;=0;j--)&#123;            ll np=now+(1ll&lt;&lt;j);            if(np&gt;=t) continue;            // 如果决策更优或已经到头了即可转移            if(i==top||ck(x-np*v+(f*g[j]).mat[1][1])&gt;=0)&#123;                f=f*g[j];                now=np;            &#125;        &#125;        f=f*g[0];        now++;        if(now==t) break;    &#125;    cout&lt;&lt;fixed&lt;&lt;setprecision(10)&lt;&lt;f.mat[1][1];    return 0;&#125;
 4.后言
总结下来，矩阵优化的特征分为如下：

数据范围既有极大又有极小
具有线性递推特征，或者转移过来的状态数量偏小。
DP式子可以写成矩阵并且矩阵规模小
转移规模极大

用途就2种，一个优化转移，一个优化边权较小图上的统计问题，基本步骤就是根据操作手册来就行。
转移过程中还是有一些trick的：

如果题目中有一些关键节点会改变转移矩阵，考虑到向量乘矩阵和矩阵乘矩阵不同复杂度，可以考虑强制中断，二进制分组处理。
如果转移矩阵仅由0/1构成，考虑bitset优化。
若图有边权，边权极小，可以考虑拆点
如果涉及到指数高精，想想性质或者10进制快速幂
矩阵快速幂也满足倍增的思想，可以考虑倍增二分

个人理解，矩阵优化的本质就是线性递推，其实回看所有拆点操作，都是将这些转移满足 i→i+1i\rightarrow i+1i→i+1 的形式，只有这样才能进行矩阵加速递推。
而对于操作手册是自己根据刷题经验总结出来的一些步骤，大家可以根据这几个步骤灵活调用。
完结撒花！
]]></content>
      <categories>
        <category>DP优化</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>DP优化</tag>
      </tags>
  </entry>
  <entry>
    <title>私有笔记与课件</title>
    <url>/posts/da4314dd/</url>
    <content><![CDATA[
  a0048e2418083c29588730b2cab069400a4d4017da86ba28de13cb4d7ea8922d8fdb546300f46184887b1ee1af5123268869ac42bd4d166b55d9d6729528e62cd9ffad4c627485ea30d02211187eec439e7e5eafa8c217d64309dc6a593b9d244e784bf781845ed7806904709d610c20d549c8efaeb4fbb1bcd970cfd412bff356a92d080ad6d96eccd224eb8dfa6aa118027253425380447f8543a078a71429c385d540de472b88db72cd2e5da3210a948eb2b0fa569510cb51662c607efea6e4036b3d367070dcd0e4fec5df49b0200d4f42e8b959209ba2f9d8118796730fe6ea7df1b0162f3486fdee730a977a5f65b4adbc0fe143df55a9be4c89208974659ca663c4db66da5f5f32e27a29fe27417b9c5f0528b48f1954039d126459b3ccf25e6b9066102a6ca66ed21f3db5fc3cef717cbafdb7f52650f20f146e86c9743a3d7147742bf9f54e2bb6bdbd91e1210cde43e5da43cebc8cf4eed62e0c33
  
    
      
      
        您好, 这里需要密码.
      
    
  

]]></content>
  </entry>
  <entry>
    <title>线性基</title>
    <url>/posts/fa56ba17/</url>
    <content><![CDATA[ 1. 介绍
我们称一个 nnn 维向量组是线性无关的，当且仅当不存下不全为 0 的一组数 cic_ici​，使得 ∑ciai=0\sum c_i a_i =0∑ci​ai​=0。
而线性基认为是一个 nnn 维向量集合中极大的线性无关向量子集，可以证明任何向量集合存在线性基，且一个向量集合的任意线性基大小相同。
最坏情况下线性基会有 nnn 个元素，即全部都线性无关。我们可以通过维护一个向量数组 aia_iai​（i∈[1,n]i\in [1,n]i∈[1,n]）来表示最终得到的线性基。
依次加入每一个向量 vvv，从高到低扫描每一位，如果 vvv 的第 iii 位非零，那么就检查 aia_iai​：

若 aia_iai​ 不存在，那么令 ai←va_i \leftarrow vai​←v，结束循环。
若 aia_iai​ 存在，那么令 v←vxai,xaiv \leftarrow \dfrac{v_x}{a_{i,x}}a_iv←ai,x​vx​​ai​，继续循环下一位。

上述算法时间复杂度为 O(n2m)O(n^2 m)O(n2m)，其中 mmm 为加入的向量数量。溶蚀如果一个向量可以通过上面的过程循环到最后一位，最终变为零向量的话，说明这个向量可以被这一组线性基所表示。
在 OI 中，相较于上面我们我们所说的 nnn 维实线性空间 Rn\mathbb{R}^nRn 下的实数线性基，一般的我们研究的更多的是布尔线性空间下的异或线性基。
那么在异或线性基中，一个把一个数的二进制位看做一个向量，即一个向量等价于一个 [0,2n)[0,2^n)[0,2n) 内的整数。
其中加法等价于按位异或，数乘等价于且。
那么同等于上面，异或线性基中的数线性无关等价于异或和不为 0。一个数如果能够被线性基表示，那么等价于被表示成数集中若干个数的异或和，也就是数集的子集异或和。
异或线性基的插入其实和实数线性基是差不太多。
我们加入一个数 vvv，从高到低扫描每一个二进制位，如果 vvv 的第 iii 位非零，那么检查 aia_iai​：

若 aia_iai​ 不存在，那么令 ai←va_i\leftarrow vai​←v，结束。
如果 aia_iai​ 存在，那么令 v←vxor⁡aiv\leftarrow v \operatorname{xor} a_iv←vxorai​，继续循环。

时间复杂度为 O(n2mω)O(\dfrac{n^2 m}{\omega})O(ωn2m​)，但是我们位运算的话在位数 n&lt;64n&lt;64n&lt;64 的情况下一般认为是 O(nm)O(nm)O(nm)。
代码如下：
void insert(int x)&#123;    for(int i=52;i&gt;=0;i--)&#123;        if((x&gt;&gt;i)&amp;1)&#123;            if(!p[i])&#123;                p[i]=x;                break;            &#125;            x^=p[i];        &#125;    &#125;&#125;
线性基有一些性质，这里我们举例异或线性基，性质同样适用于实数线性基：

原序列的任意一个数都可以由线性基内部的一些数异或得到。
线性基内部的任意数异或起来都不能得到 0。
线性基内部的数个数唯一；且在保持性质一的前提下，数的个数是最少的。

证明如下：

显然。因为我们是极大线性无关集，那么把线性无关的都放进去，剩下了向量一定能被线性表示出来。
线性无关也就是说互相不能线性表示出来，根据最开头我们提到的线性无关定义是显然的。
若去掉线性基里面的任一个数，都会使得原序列里的数无法通过用线性基里的元素线性表示得到，没有多余的元素。所以线性基的元素个数在保持性质一的前提下，一定是最少的。

 2.线性基操作
 插入
上面提到了：
void insert(int x)&#123;    for(int i=52;i&gt;=0;i--)&#123;        if((x&gt;&gt;i)&amp;1)&#123;            if(!p[i])&#123;                p[i]=x;                break;            &#125;            x^=p[i];        &#125;    &#125;&#125;
 求最大值
考虑贪心，初始答案为 0，从线性基的最高位开始，若当前答案异或线性基可以让这个答案变得更大，那就异或它。根据性质 1 容易证明这是对的：
int getmx()&#123;    int ans=0;    for(int i=52;i&gt;=0;i--)&#123;        if((ans^p[i])&gt;ans) ans^=p[i];    &#125;    return ans;&#125;
 求最小值
如果求的是线性基 ppp 能表示出的异或的最小值，那么就是最小的 pip_ipi​，原因是线性无关且异或是不进位加法。
如果是整个序列，要另外检查有没有元素不能插入线性基，如果有，那么最小值就是 0，否则依然是最小的 pip_ipi​。
 求第 k 小
从一个序列中取任意元素进行异或，求能异或出的所有数字中第 kkk 小的那个。
收先预处理线性基 ppp，对于每一个 pip_ipi​，枚举 j=i∼1j=i\sim 1j=i∼1，如果 pip_ipi​ 二进制第 jjj 位为 1，那么让 pip_ipi​ 异或上 pj−1p_{j-1}pj−1​。
将 kkk 转为二进制，假如第 iii 位为 1，则 ansansans 异或线性集中第 iii 个元素。
 能否被异或
尝试把一个数插入线性基，如果可以插入说明不能，反之可以。
 线性基求并
一个线性基元素插入到另一个线性基即可。时间复杂度 O(log⁡2∣V∣)O(\log^2 |V|)O(log2∣V∣)，其中 VVV 为值域。
求交不太会呜呜。
 3. 前缀线性基
例题：CF1100F
询问相当于求区间 [l,r][l,r][l,r] 内 cic_ici​ 构成的一组线性基。
当然我们可以通过线段树维护，时间复杂度 O(nlog⁡2∣V∣+qlog⁡nlog⁡2∣V∣)O(n \log^2 |V|+q\log n \log^2 |V|)O(nlog2∣V∣+qlognlog2∣V∣)，很那泵。
我们先想一想，为什么区间查的线性基不能用全局的维护，某种意义上也就是为什么线性基不支持删除。
答案是我们根本不知道线性基每一位数是如何组成的，我们不知道线性基上每一位数的位置，这就导致我们不知道在区间查询的时候能不能选择某一位。
一般构造线性基的方法是增量构造，也就是我们上面所说的一个一个插入。枚举 i=1∼ni=1\sim ni=1∼n，依次尝试把 aia_iai​ 插入到线性基中。
那么在加入 ara_rar​ 之后，当前线性基对应的就是 [1,r][1,r][1,r] 构成的线性基。如果此时能够想办法仅考虑 l≤il\le il≤i 的 aia_iai​，那么也就得到了 [l,r][l,r][l,r] 构成的线性基。
说人话就是我们希望当前的线性基中 aia_iai​ 的 iii 尽可能大，加入的时间尽可能晚。
那么在前面构造线性基的方法中，如果我们当前加入的是 vvv，会在 aia_iai​ 存在的时候直接对 vvv 进行修改，但是由于 vvv 加入的时间比 aia_iai​ 晚，而 v,aiv,a_iv,ai​ 在当前位置的地位是等价的，所以我们可以将 ai,va_i,vai​,v 进行交换，让加入时间更晚的 vvv 留下，让原本线性基中的 aia_iai​ 代替 vvv 去做接下来的处理。
那么我们可以维护线性基的同时，维护线性基内每一个元素对应的原数下表 timitim_itimi​，那么区间查询的时候只考虑那些 timi≥ltim_i \ge ltimi​≥l 的元素即可，时间复杂度是 O(log⁡∣V∣)O(\log |V|)O(log∣V∣)。
这样的结构，我们叫做前缀线性基或者时间戳线性基。
总时间复杂度 O((n+q)log⁡∣V∣)O((n+q)\log |V|)O((n+q)log∣V∣)。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=5e5+15,MP=32;int n,q,a[MN];struct prexxj&#123;    int num,pos[MN][MP],p[MN][MP];    void insert(int x)&#123;        num++;        for(int i=0;i&lt;MP;i++)&#123;            p[num][i]=p[num-1][i];            pos[num][i]=pos[num-1][i];        &#125;        int P=num;        for(int i=MP-1;i&gt;=0;i--)&#123;            if((x&gt;&gt;i)&amp;1)&#123;                if(!p[num][i])&#123;                    p[num][i]=x;                    pos[num][i]=P;                    break;                &#125;else&#123;                    if(pos[num][i]&lt;P)&#123;                        swap(pos[num][i],P);                        swap(p[num][i],x);                    &#125;                    x^=p[num][i];                &#125;            &#125;        &#125;    &#125;    int getmx(int l,int r)&#123;        int ans=0;        for(int i=31;i&gt;=0;i--)&#123;            if(pos[r][i]&lt;l) continue;            if((ans^p[r][i])&gt;ans) ans^=p[r][i];        &#125;        return ans;    &#125;&#125;pxj;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        int x;        cin&gt;&gt;x;        pxj.insert(x);    &#125;    cin&gt;&gt;q;    while(q--)&#123;        int x,y;        cin&gt;&gt;x&gt;&gt;y;        cout&lt;&lt;pxj.getmx(x,y)&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 4. 例题
 P4301 新 Nim 游戏
没有第一回合那就是传统的 Nim 游戏，先手有必胜策略当且仅当所有 aia_iai​ 异或起来不为 0。
那么考虑第一回合后后手的操作，假设第一回合后石子的集合是 SSS，那么其可以保留该石子集合的任意子集。而后手只需要是的保留的子集异或和为 0，他就可以获得胜利。
所以第一回合先手要想获胜，必须让 SSS 集合不能存在任何一个非空子集使得里面所有元素异或和为 000。
由异或线性基的性质，元素异或和不为 0。我们可以通过这个性质入手，但是同时由于先手第一回合要尽可能少地取
石子，那么也就要让 SSS 中的元素和尽可能大。
那么可以得到 SSS 是元素和最大的那一组线性基，我们每一次贪心的将 aia_iai​ 从大到小贪心的加入线性基，那么最后得到的线性基就是 ∑ai\sum a_i∑ai​ 最大的线性基。
时间复杂度 O(klog⁡∣V∣)O(k\log |V|)O(klog∣V∣)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e5+15;int n,a[MN],p[MN],ans;bool cmp(int x,int y)&#123;    return x&gt;y;&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    sort(a+1,a+1+n,cmp);    for(int i=1;i&lt;=n;i++)&#123;        int x=a[i];        for(int j=30;j&gt;=0;j--)&#123;            if((x&gt;&gt;j)&amp;1)&#123;                if(!p[j])&#123;                    p[j]=x;                    break;                &#125;else x^=p[j];            &#125;        &#125;        if(!x)&#123;            ans+=a[i];        &#125;    &#125;    cout&lt;&lt;ans;    return 0;&#125;
 CF895C
完全平方数有一个性质，就是在质因数分解下的表示，所有质因数的指数都是偶数。
而本题目只需要让我们判断是否质因子全为偶数即可，根据奇偶性的表示，就是一个 0/1 表示。
考虑到 ∣V∣≤70|V|\le 70∣V∣≤70，也就是说质数一共只有 19 个，考虑每一个数对应一个 19 维的布尔向量，那么问题转化为有多少种线性组合的方式使得异或和为 0.
先建异或线性基，那么不在线性基里面的元素一定能够被线性基内的元素所线性组合切以一一对应，那么线性组合后异或的和为 0.
设线性基内元素数量为 kkk，则最终答案不在线性基内元素任选的方案数，为 2n−k−12^{n-k}-12n−k−1（把所有元素都不选的去掉）。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=55,MOD=1e9+7;int n;int pri[30] = &#123; 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 &#125; ;struct xxj&#123;    int p[MN];    void insert(int x)&#123;        for(int i=19;i&gt;=0;i--)&#123;            if((x&gt;&gt;i)&amp;1)&#123;                if(!p[i])&#123;                    p[i]=x;                    break;                &#125;                x^=p[i];            &#125;        &#125;    &#125;&#125;xj;int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        int x,ret=0;        cin&gt;&gt;x;        for(int j=0;j&lt;19;j++)&#123;            if(x%pri[j]==0)&#123;                int now=0;                while(x%pri[j]==0)&#123;                    x/=pri[j];                    now^=1;                &#125;                ret^=(now&lt;&lt;j);            &#125;        &#125;        xj.insert(ret);    &#125;    for(int i=0;i&lt;=19;i++)&#123;        if(xj.p[i]) n--;    &#125;    cout&lt;&lt;(ksm(2,n)-1)%MOD;        return 0;&#125;
 P4570 元素
和上面例题一样，按顺序尝试将每个元素插入线性基中，如果能插入就累加答案。
#include&lt;bits/stdc++.h&gt;#define int long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int mp=65,mn=1520;int n;pir a[mn];struct xxj&#123;    int p[mp],ans=0;    void insert(int x,int y)&#123;        for(int i=63;i&gt;=0;i--)&#123;            if((x&gt;&gt;i)&amp;1)&#123;                if(!p[i])&#123;                    p[i]=x;                    ans+=y;                    break;                &#125;                x^=p[i];            &#125;        &#125;    &#125;&#125;xj;signed main()&#123;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i].second&gt;&gt;a[i].first;    &#125;    sort(a+1,a+1+n);    for(int i=n;i&gt;=1;i--)&#123;        xj.insert(a[i].second,a[i].first);    &#125;    cout&lt;&lt;xj.ans;    return 0;&#125;
 P4151 WC2011 最大 XOR 和路径
我们先从一条 1→n1\to n1→n 的路径，让后向外拓展。显然只有环对答案有影响，因为非环的边一定会走两次，异或和为 0。
因为图是连通的，所以可以经过任意环，把所有的环的异或值扔到线性基里，然后再考虑选择哪一条路径。注意到，若从 111 到 nnn 有多条路径，其实这些路径也构成了环，也会被加入到线性基里，这时候随便选一条路径即可。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e5+15,MP=65;struct Edge&#123;    int v,w;&#125;;int n,m,ans,dis[MN];bool vis[MN];vector&lt;Edge&gt; adj[MN];struct xxj&#123;    int p[MP];        void insert(int x)&#123;        for(int i=63;i&gt;=0;i--)&#123;            if((x&gt;&gt;i)&amp;1)&#123;                if(!p[i])&#123;                    p[i]=x;                    break;                &#125;                x^=p[i];            &#125;        &#125;    &#125;    int getmx(int x)&#123;        int ans=x;        for(int i=63;i&gt;=0;i--)&#123;            if((ans^p[i])&gt;ans) ans^=p[i];        &#125;        return ans;    &#125;&#125;xj;void dfs(int u,int fa)&#123;    vis[u]=1;    for(auto e:adj[u])&#123;        if(vis[e.v]) xj.insert(dis[e.v]^e.w^dis[u]);        else dis[e.v]=dis[u]^e.w,dfs(e.v,u);    &#125;&#125;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=m;i++)&#123;        int u,v,w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        adj[u].push_back(&#123;v,w&#125;);        adj[v].push_back(&#123;u,w&#125;);    &#125;    dfs(1,0);    cout&lt;&lt;xj.getmx(dis[n]);    return 0;&#125;]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树理论笔记</title>
    <url>/posts/dba6cc97/</url>
    <content><![CDATA[ 0.前言
侧重于理论以及做题大方向，方法论的指导。
本博客若没有特殊说明，所有变量默认取值范围为 Z\mathbb{Z}Z。
 1.半群线段树
 1.1 定义
我们都说，线段树能维护具有结合律的信息，不能维护没有结合律的信息，那么为什么线段树只能维护有结合律的信息呢？这里我们可以利用半群线段树的理论来进行说明。
首先要定义什么是半群，半群是一个二元组 (S,×)(S,\times)(S,×)，其中：

SSS 是一个非空集合；
×\times× 是一个定义在 SSS 上的运算，即 x∈S,y∈S,x×y=z,z∈Sx\in S,y\in S,x\times y=z,z\in Sx∈S,y∈S,x×y=z,z∈S，即满足封闭性。
这个 ×\times× 运算满足结合律，即 (x×y)×z=x×(y×z)(x\times y)\times z=x\times(y\times z)(x×y)×z=x×(y×z)。

注意这里上面的 ×\times× 不是乘法，是抽象代数中的集合运算，这里用乘法符号让读者更好理解。同时要注意，半群并不要求拥有单位元和逆元。
而半群线段树是一种数据结构，可以维护一个序列 a1,a2,…,ana_1,a_2,\dots,a_na1​,a2​,…,an​，其中 ai∈Sa_i \in Sai​∈S，(S,×)(S,\times)(S,×) 是一个半群，支持操作：

单点修改，即给定 x,k(1≤x≤n,k∈S)x,k(1\le x \le n,k\in S)x,k(1≤x≤n,k∈S)，令 ax←ka_x \leftarrow kax​←k。
区间查询，即给定 l,r(1≤l≤r≤n)l,r(1\le l \le r \le n)l,r(1≤l≤r≤n)，求 al×al+1×⋯×ara_l \times a_{l+1} \times  \dots \times a_ral​×al+1​×⋯×ar​。

而对于实现的时候我们当然就是用线段树的结构啦，代表区间 [l,r][l,r][l,r] 的节点 iii 上记录了 al×al+1×⋯×ara_l \times a_{l+1} \times  \dots \times a_ral​×al+1​×⋯×ar​ 的信息。修改的时候单点修改，从叶子自底向上，按照 ti=tlson×trsont_i=t_{lson}\times t_{rson}ti​=tlson​×trson​ 的顺序从底往上合并（就是我们写的 pushup 函数），假设我们一次运算 ×\times× 的时间复杂度是 kkk，那么一次查询和修改的时间复杂度就是 O(klog⁡n)O(k\log n)O(klogn)。
而对于半群线段树的实现，我们可以把节点写成一个结构体的形式，让后重载运算符，这样的话你每一次写半群线段树的形式代码时候，就可以真正的按照 “模板” 来去写了。
当然要注意的一点，我们这里定义的乘法运算是没有交换律的，所以你不能瞎 pushup，根据上面定义可以知道 ti≠trson×tlsont_i \neq t_{rson}\times t_{lson}ti​=trson​×tlson​，大家做题应该体会过 pushup 写错の痛。
这里我们并没有说懒标记，其实懒标记从一开始我们学习线段树的时候，它的出现其实就是将许多的单点修改转化为了一次对于区间上的单点修改，所以对于懒标记来说，我们同样需要满足结合律和封闭性，但是我们没有必要满足交换律，我们通过及时地 pushdown 记都是将当前懒标记对应的操作序列接在原懒标记对应的操作序列之后，即我们按时间顺序处理所有懒标记。
对于懒标记线段树,他不一定满足我们上面所提到半群的性质，我们第二章会提到。
相对的，区间修改要维护的信息可能会比单点修改要更多。
 1.2 应用
应用比如说有区间和，区间最大最小值，维护矩阵乘法，维护哈希值等。
 区间求和与区间求积

我不知道 2+32+32+3 等于几，但是我知道 2+3=3+22+3=3+22+3=3+2，因为实数集上的加法运算构成阿贝尔群。

实数和加法当然构成群啦，因为加法即满足结合律，也满足交换律，所以我们可以通过线段树来维护加法操作，乘法当然也是同理的。
 线段树维护矩阵乘法
不知道大家有没有做过动态 DP，那个题就是通过线段树加树剖维护矩阵来进行 O(log⁡n)O(\log n)O(logn) 的 DP 的。矩阵和矩阵乘法当然满足结合律，而且大家都知道，矩阵乘法满足结合律不满足交换律
 线段树维护字符串哈希
这个想必大家在学习字符串哈希的时候应该是见过的，其实字符串哈希的计算过程如下：
H(s)=(∑i=0n−1si⋅basen−i−1)mod  mH(s) = \left( \sum_{i=0}^{n-1} s_i \cdot base^{n-i-1} \right) \mod m
H(s)=(i=0∑n−1​si​⋅basen−i−1)modm
那么我们定义哈希值上的二元运算 ⊕\oplus⊕，我们令 SSS 集合中每一个元素为一个二元组 (h,len)(h,len)(h,len)，其中表示如下：

hhh：字符串哈希值。
lenlenlen：字符串长度

那么运算定义如下：
(h1,l1)⊗(h2,l2)=((h1⋅basel2+h2)mod  m,  l1+l2)(h_1, l_1) \otimes (h_2, l_2) = \left( (h_1 \cdot base^{l_2} + h_2) \mod m,\; l_1 + l_2 \right)
(h1​,l1​)⊗(h2​,l2​)=((h1​⋅basel2​+h2​)modm,l1​+l2​)
可以理解为拼接哈希的过程，下面是我们证明线段树可以通过半群线段树维护哈希值，即证明上述是否能为一个半群，如果你能理解拼接哈希具有结合律和封闭性那么就不用看 www。
封闭性是显然成立的，因为对任意 $ (h_1, l_1), (h_2, l_2) \in \mathcal{S} $：

$ h_1 \cdot b^{l_2} + h_2 \mod m \in \mathbb{Z}_m $
$ l_1 + l_2 \in \mathbb{N} $

所以 $ (h_1, l_1) \otimes (h_2, l_2) \in \mathcal{S} $，封闭性成立。
考虑结合律，我们要证明：
((h1,l1)⊗(h2,l2))⊗(h3,l3)=(h1,l1)⊗((h2,l2)⊗(h3,l3))((h_1, l_1) \otimes (h_2, l_2)) \otimes (h_3, l_3) = (h_1, l_1) \otimes ((h_2, l_2) \otimes (h_3, l_3))
((h1​,l1​)⊗(h2​,l2​))⊗(h3​,l3​)=(h1​,l1​)⊗((h2​,l2​)⊗(h3​,l3​))
算左边：
先算 $ (h_1, l_1) \otimes (h_2, l_2) $：
=(h1⋅bl2+h2,  l1+l2)= (h_1 \cdot b^{l_2} + h_2, \; l_1 + l_2)
=(h1​⋅bl2​+h2​,l1​+l2​)
再与 $ (h_3, l_3) $ 合并：
=((h1⋅basel2+h2)⋅basel3+h3,  (l1+l2)+l3)=(h1⋅basel2+l3+h2⋅basel3+h3,  l1+l2+l3)= \left( (h_1 \cdot base^{l_2} + h_2) \cdot base^{l_3} + h_3, \; (l_1 + l_2) + l_3 \right)
= \left( h_1 \cdot base^{l_2 + l_3} + h_2 \cdot base^{l_3} + h_3, \; l_1 + l_2 + l_3 \right)
=((h1​⋅basel2​+h2​)⋅basel3​+h3​,(l1​+l2​)+l3​)=(h1​⋅basel2​+l3​+h2​⋅basel3​+h3​,l1​+l2​+l3​)
算右边：
先算 $ (h_2, l_2) \otimes (h_3, l_3) $：
=(h2⋅basel3+h3,  l2+l3)= (h_2 \cdot base^{l_3} + h_3, \; l_2 + l_3)
=(h2​⋅basel3​+h3​,l2​+l3​)
再与 $ (h_1, l_1) $ 合并：
=(h1⋅basel2+l3+(h2⋅basel3+h3),  l1+(l2+l3))=(h1⋅basel2+l3+h2⋅basel3+h3,  l1+l2+l3)= \left( h_1 \cdot base^{l_2 + l_3} + (h_2 \cdot base^{l_3} + h_3), \; l_1 + (l_2 + l_3) \right)
= \left( h_1 \cdot base^{l_2 + l_3} + h_2 \cdot base^{l_3} + h_3, \; l_1 + l_2 + l_3 \right)
=(h1​⋅basel2​+l3​+(h2​⋅basel3​+h3​),l1​+(l2​+l3​))=(h1​⋅basel2​+l3​+h2​⋅basel3​+h3​,l1​+l2​+l3​)
左右两边相等，结合律成立。
然而都知道拼接哈希的时间复杂度是 O(1)O(1)O(1)，所以可以 O(log⁡n)O(\log n)O(logn) 支持查询和单点修改。
 1.3 一般性的可合并信息
上面都是一般性的问题，但是如果你做过一些仅通过线段树维护的题目的话，你会发现并不想上面一样简单，因为有一些信息它甚至一般情况下都不是传统的乘除加减运算，但是他们的共性就是满足结合律，这个时候我们需要一个更一般性的结论。
我们定义这种可合并的信息，还是从半群的角度入手，设这些信息构成集合 SSS，那么有映射（不知道映射的可以理解为函数）f:([1,n]∩Z)2→Sf:([1,n]\cap \mathbb{Z})^2 \to Sf:([1,n]∩Z)2→S，说人话就是 f(x,y)→S(x,y∈[1,n],Zf(x,y) \to S (x,y \in [1,n],\mathbb{Z}f(x,y)→S(x,y∈[1,n],Z。同时定义运算 ×\times× 满足 S×S→SS \times S \to SS×S→S。若满足 f(l,m)=x,f(m+1,r)=yf(l,m)=x,f(m+1,r)=yf(l,m)=x,f(m+1,r)=y，那么 f(l,r)=x×yf(l,r)=x\times yf(l,r)=x×y。直观理解就是每一个区间对应的都是唯一的值，并且这个运算对于于相邻区间的合并，即 pushup，且封闭性满足能够让我们能够从 f(l,m),f(m+1,r)f(l,m),f(m+1,r)f(l,m),f(m+1,r) 能够推出 f(l,r)f(l,r)f(l,r)。
那么我们根据上面的定义的话，一个区间的信息无论怎么选取 mmm 拆分为自取件，按照什么顺序合并起来，只要你左右顺序一致的，那么就还能满足 al×al+1×⋯×ara_l \times a_{l+1} \times  \dots \times a_ral​×al+1​×⋯×ar​ 这样的结果，这说明这种一般性的可合并取件信息也是构成半群的，可以用我们的半群线段树来去做。
 1.4 做题的大方向
那么我们上面说了这么多的例子，感觉好像就是在重新讲一遍单点修改区间查询的线段树，其实不然，我们可以通过给信息设计半群的结构来进行操作。
一般的来说，我们在做类似于线段树的题中我们要考虑的是以下的几步：

观察题目性质。
我需要维护什么？
这种信息是不是什么常见类型，若不是，我能不能通过构造信息和操作，让它构成一个半群？
如果可以的话，我们可不可以通过线段树来进行维护，并且定义的运算符操作是否高效。

最难的地方在于观察题目性质，设计信息和思考信息的合并，下面给出几道例题。
 1.5 例题
 维护最大子段和
例如区间最大子段和，根据上面我们提出过的一般性的可合并信息的维护。
首先我们分析性质，我们维护的信息要具有结合律和封闭性，通过 f(l,mid),f(mid+1,r)f(l,mid),f(mid+1,r)f(l,mid),f(mid+1,r) 的信息推出 f(l,r)f(l,r)f(l,r)。
一个显然的想法就是维护 ansansans 为区间最大子段和，让后从左右区间传递上来，但是这样的操作是不满足封闭性的，因为我们丢弃了跨区间 midmidmid 的合并信息。而注意到跨过 midmidmid 的区间是通过 [l,mid][l,mid][l,mid] 的最大后缀以及 [mid+1,r][mid+1,r][mid+1,r]的最大前缀拼在一起，那么我们可以考虑维护区间最大前后缀和 pre,sufpre,sufpre,suf，这样的话我们 ansansans 就可以这么合并：
ans←max⁡{ansls,ansrs,sufls+prers}ans\leftarrow \max\{ ans_{ls},ans_{rs},suf_{ls}+pre_{rs} \}
ans←max{ansls​,ansrs​,sufls​+prers​}
现在 ansansans 满足我们性质的，并且好处是这个运算显然是满足结合律与封闭性的，但是我们现在要考虑维护 pre,sufpre,sufpre,suf 了 www。
考虑 pre,sufpre,sufpre,suf，前缀后缀和当然也是要考虑跨区间的贡献，注意到跨区间的贡献，例如 preprepre，一定是 prelspre_{ls}prels​ 或者 sumls+prerssum_{ls}+pre_{rs}sumls​+prers​ 所构成的，其中 sumsumsum 是区间和，同理于 sufsufsuf，这样的信息合并设计也是满足结合律的。
总结一下我们需要维护什么信息：

ansansans：区间最大子段和，合并为 ans←max⁡{ansls,ansrs,sufls+prers}ans\leftarrow \max\{ ans_{ls},ans_{rs},suf_{ls}+pre_{rs} \}ans←max{ansls​,ansrs​,sufls​+prers​}。
preprepre：区间最大前缀和，合并为 pre←max⁡{prels,sumls+prers}pre\leftarrow \max \{ pre_{ls},sum_{ls}+pre_{rs} \}pre←max{prels​,sumls​+prers​}。
sufsufsuf：区间最大后缀和，合并基本同上，这里不再给出。
sumsumsum：区间和，合并不给出。

读者可以感受我们上面所提出的设计信息构造半群的流程，我们首先要从我们所求出的答案开始，让后考虑答案如何从子区间的信息合并上来，再一开始的时候可能是不满足半群所要求的封闭性，为此我们要敢于构造信息以满足封闭性，让后我们再考虑构造出来的信息如何从子区间合并上来。
重复上面的过程，直到我们的半群合并并且信息封闭，这种方法比我们一开始要想出所有要维护的信息是更简单的。
 CF1076G
区间修改和区间查询，但是我们要维护的是一个博弈论的状态，首先我们肯定不是从线段树来去思考，而是先去思考我们维护信息的特殊性质。
我们先考虑 [1,n][1,n][1,n] 的时候该怎么做，显然有一个 DP，设 fif_ifi​ 表示跳到第 iii 个格子的时候是先手必胜还是先手必败，考虑倒过来 DP，注意到我们的信息只关注就行即可，那么有转移：

当 aia_iai​ 为奇数的时候，fi=1f_i=1fi​=1。这时显然无论怎么跳后手一定是跳出去的。
当 aia_iai​ 为偶数的时候，fif_ifi​ 能否先手必赢当且仅当后面 mmm 个格子中没有先手必败状态。

时间复杂度为 O(nmq)O(nmq)O(nmq) 无法通过。
考虑优化，本题目的瓶颈在于我们要知道后面 mmm 个格子中有没有先手必败，同时观察到我们要维护的信息是一个 0/1 序列，而且 mmm 极小，考虑状压 DP 值，对于线段树上每一个区间，记录 [r+1,r+m][r+1,r+m][r+1,r+m] 的 DP 状态状压为 SSS，让后考虑我们 [l,l+m−1][l,l+m-1][l,l+m−1] 的 DP 信息是什么，合并考虑到结合律是显然的（因为是这么定义的 www），封闭性同理，可以用线段树维护。
让后考虑区间修改，我们维护的信息只具有奇偶性，区间加偶数显然没有任何卵用，但是区间加奇数会使得区间奇偶性翻转，我们考虑维护一个区间翻转 tag，同时答案维护两份，一份是正常的答案，一份是反转过后的，区间翻转奇偶性的时候交换两份答案即可。但是注意到一次合并信息的时间复杂度过高，考虑优化运算操作，注意到我们每次都要便利这个 SSS 的状态，其实我们只需要知道 SSS 中第一个 0 的位置就可以了，这样就足够高效了，时间复杂度为 O(qmlog⁡n)O(qm\log n)O(qmlogn)。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=5e5+15;int n,m,q,a[MN];struct Segment&#123;#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1    struct QWQ&#123;        int pos[11];                QWQ operator +(const QWQ &amp;x)const&#123;            QWQ ret;            for(int i=1;i&lt;=m+1;i++)&#123;                ret.pos[i]=pos[x.pos[i]];            &#125;            return ret;        &#125;    &#125;;    struct Node&#123;        int l,r;        int isrev;        QWQ val[2];    &#125;t[MN&lt;&lt;2];    void dorev(int p)&#123;        swap(t[p].val[1],t[p].val[0]);        t[p].isrev^=1;    &#125;    void pushdown(int p)&#123;        if(t[p].isrev)&#123;            dorev(ls);            dorev(rs);            t[p].isrev=0;        &#125;    &#125;    void pushup(int p)&#123;        t[p].val[0]=t[ls].val[0]+t[rs].val[0];        t[p].val[1]=t[ls].val[1]+t[rs].val[1];    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        if(l==r)&#123;            for(int i=1;i&lt;=m;i++)&#123;                t[p].val[0].pos[i]=t[p].val[1].pos[i]=i+1;            &#125;            if(a[l]==1)&#123;                t[p].val[1].pos[m+1]=m+1;                t[p].val[0].pos[m+1]=1;            &#125;else&#123;                t[p].val[1].pos[m+1]=1;                t[p].val[0].pos[m+1]=m+1;            &#125;            return;        &#125;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void modify(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            dorev(p);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) modify(ls,fl,fr);        if(mid&lt;fr) modify(rs,fl,fr);        pushup(p);    &#125;    QWQ query(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].val[1];        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&lt;fl) return query(rs,fl,fr);        if(mid&gt;=fr) return query(ls,fl,fr);        return query(ls,fl,fr)+query(rs,fl,fr);    &#125;&#125;sg;signed main()&#123;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];        a[i]=(a[i]&amp;1)^1;    &#125;    sg.build(1,1,n);    while(q--)&#123;        int op,l,r,x;        cin&gt;&gt;op&gt;&gt;l&gt;&gt;r;        if(op==1)&#123;            cin&gt;&gt;x;            if(x&amp;1) sg.modify(1,l,r);        &#125;else&#123;            auto ret=sg.query(1,l,r);            if(ret.pos[m+1]==1)&#123;                cout&lt;&lt;&quot;2\n&quot;;            &#125;else cout&lt;&lt;&quot;1\n&quot;;        &#125;    &#125;    return 0;&#125;
 CF1149C
还是我们的套路，我们不可能一次就想着把所有信息的设计完毕，我们先从听我们要维护的信息的特殊性质入手，让后我们再进行信息的设计使其能够满足半群的性质。
此处的 ( 和 ) 本质上可以看做欧拉序中通过一条边搜索以及回溯的过程，对应深度分别自增或者自减。
那么我们把 ( 看做深度加 1，而 ) 看作为深度减 1，计算前缀和数组 pip_ipi​，那么 pip_ipi​ 对应的就是欧拉序中第 i+1i+1i+1 点的深度（第一个点是根）。
那么对于欧拉序上第 lll 个点 uuu 和第 rrr 个点 vvv，设 w=lca⁡(u,v)w=\operatorname{lca}(u,v)w=lca(u,v)，那么有：
depu=pl−1,depv=pr−1,depw=min⁡i=l−1r−1pidis(u,v)=depu+depv−2depw=pl−1+pr−1−2min⁡i=l−1r−1pi\begin{aligned}
dep_u &amp;= p_{l-1},dep_v =p_{r-1},dep_w =\min_{i=l-1}^{r-1}p_i \\
dis(u,v)&amp;=dep_u +dep_v -2dep_w=p_{l-1}+p_{r-1}-2\min_{i=l-1}^{r-1} p_i
\end{aligned}
depu​dis(u,v)​=pl−1​,depv​=pr−1​,depw​=i=l−1minr−1​pi​=depu​+depv​−2depw​=pl−1​+pr−1​−2i=l−1minr−1​pi​​
注意到一次修改会修改一个后缀并且让区间加减 2，考虑维护如下操作：

对所有的 1≤l≤r≤2n−11\le l \le r \le 2n-11≤l≤r≤2n−1 求 pl−1+pr−1−2min⁡i=l−1r−1pip_{l-1}+p_{r-1}-2\min_{i=l-1}^{r-1} p_ipl−1​+pr−1​−2mini=l−1r−1​pi​ 的最大值。

考虑用线段树维护答案，首先我们肯定需要维护一个区间最小深度，即 mnmnmn，区间最大深度 mxmxmx，和当前区间的答案 ansansans。
当然 ansansans 是不封闭的，因为如果我们合并两个区间的答案的话就忽略了 lcalcalca 在哪个的问题。
我们考虑我们维护的信息 pl−1+pr−1−2min⁡i=l−1r−1pip_{l-1}+p_{r-1}-2\min_{i=l-1}^{r-1} p_ipl−1​+pr−1​−2mini=l−1r−1​pi​ 可以拆分为 (x−2min⁡i=l−1r−1pi)+y(x-2\min_{i=l-1}^{r-1} p_i)+y(x−2mini=l−1r−1​pi​)+y，考虑维护前半部分，这样好处就是我们可以方便的处理 LCA 的问题。
考虑对于每一个区间维护 pl−1−wmin⁡i=l−1r−1pi,pr−1−wmin⁡i=l−1r−1pip_{l-1}-w\min_{i=l-1}^{r-1} p_i,p_{r-1}-w\min_{i=l-1}^{r-1} p_ipl−1​−wmini=l−1r−1​pi​,pr−1​−wmini=l−1r−1​pi​，记作 lmx,rmxlmx,rmxlmx,rmx。那么 ansansans 转移是有：
ans←max⁡{ansls,ansrs,rmxls+mxrs,mxls+lmxrs}ans\leftarrow \max \{ ans_{ls},ans_{rs},rmx_{ls}+mx_{rs},mx_{ls}+lmx_{rs} \}
ans←max{ansls​,ansrs​,rmxls​+mxrs​,mxls​+lmxrs​}
区间操作打标记即可，时间复杂度 O(mlog⁡n)O(m\log n)O(mlogn)。
#include&lt;bits/stdc++.h&gt;using namespace std;constexpr int MN=1e6+15;int n,q,a[MN],sum[MN];struct Segment&#123;    #define ls p&lt;&lt;1    #define rs p&lt;&lt;1|1    struct Node&#123;        int l,r,mx,mn,lmx,rmx,ans,add;    &#125;t[MN&lt;&lt;2];    void pushup(int p)&#123;        t[p].mx=max(t[ls].mx,t[rs].mx);        t[p].mn=min(t[ls].mn,t[rs].mn);        t[p].lmx=max(&#123;t[ls].lmx,t[rs].lmx,t[rs].mx-2*t[ls].mn&#125;);        t[p].rmx=max(&#123;t[ls].rmx,t[rs].rmx,t[ls].mx-2*t[rs].mn&#125;);        t[p].ans=max(&#123;t[ls].ans,t[rs].ans,t[ls].mx+t[rs].lmx,t[rs].mx+t[ls].rmx&#125;);    &#125;    void doadd(int p,int k)&#123;        t[p].add+=k;        t[p].mx+=k,t[p].mn+=k;        t[p].lmx-=k;        t[p].rmx-=k;    &#125;    void pushdown(int p)&#123;        if(t[p].add)&#123;            doadd(ls,t[p].add);            doadd(rs,t[p].add);            t[p].add=0;        &#125;    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        if(l==r)&#123;            t[p].mx=t[p].mn=sum[l];            t[p].lmx=t[p].rmx=-sum[l];            t[p].ans=0;            return;        &#125;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);        pushup(p);    &#125;    void modify(int p,int pos,int k)&#123;        if(t[p].l==t[p].r)&#123;            doadd(p,k);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=pos)&#123;            modify(ls,pos,k);            doadd(rs,k);        &#125;else modify(rs,pos,k);        pushup(p);    &#125;&#125;sg;int main()&#123;    cin&gt;&gt;n&gt;&gt;q;    n=(n&lt;&lt;1)-1;    for(int i=2;i&lt;=n;i++)&#123;        char qwq;        cin&gt;&gt;qwq;        a[i]=(qwq==&#x27;(&#x27;?1:-1);    &#125;    a[1]=1;    for(int i=1;i&lt;=n;i++)&#123;        sum[i]=sum[i-1]+a[i];    &#125;    sg.build(1,1,n);    cout&lt;&lt;sg.t[1].ans&lt;&lt;&#x27;\n&#x27;;    while(q--)&#123;        int x,y;        cin&gt;&gt;x&gt;&gt;y;        ++x,++y;        if(a[x]==1)&#123;            sg.modify(1,x,-2);            a[x]=-1;        &#125;else&#123;            sg.modify(1,x,2);            a[x]=1;        &#125;        if(a[y]==1)&#123;            sg.modify(1,y,-2);            a[y]=-1;        &#125;else&#123;            sg.modify(1,y,2);            a[y]=1;        &#125;        cout&lt;&lt;sg.t[1].ans&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 2. 环线段树
这里的环可不是图论的环，环指的是一个元素集合和乘法、加法运算，乘法满足结合律，加法满足结合律、交换律，乘法与加法满足分配率，我们写作 (S,×,+)(S,\times,+)(S,×,+)。
特别注意上面的加法操作是具有交换律的。
而环线段树对应一种数据结构，可以维护一个序列 a1,a2,…,ana_1,a_2,\dots,a_na1​,a2​,…,an​，其中 ai∈Sa_i \in Sai​∈S，(S,×,+)(S,\times,+)(S,×,+) 是一个环，支持操作：

区间修改：给定 l,r,xl,r,xl,r,x，对于所有 l≤i≤rl\le i \le rl≤i≤r，令 ai←x×aia_i \leftarrow x\times a_iai​←x×ai​。
区间查询，即给定 l,r(1≤l≤r≤n)l,r(1\le l \le r \le n)l,r(1≤l≤r≤n)，求 al+al+1+⋯+ara_l + a_{l+1} +  \dots + a_ral​+al+1​+⋯+ar​。

这种线段树就是我们所说的 LazyTag 线段树。相比于半群线段树在环线段树上的节点 iii 除了要维护所谓的 si∈Ss_i \in Ssi​∈S 上之外，还要维护 ti∈St_i \in Sti​∈S 代表 “懒标记”，其意味着节点 iii 的子树尚有一些修改没有下穿，这些修改等效于左乘 TiT_iTi​。
修改，查询的时候可能需要将标记下传。当要查询左右儿子的时候，我们将懒标记下传至左右儿子更新 s,ts,ts,t，让后将当前节点的 tit_iti​ 重置为所谓的 “单位元”。
通常而言，若一次运算的时间复杂度为 O(k)O(k)O(k)，那么修改查询时间复杂度为 $O(k\log n)。
 2.1 将 val 和 tag 分离
有的时候，环线段树并不能很好地描述我们所要做的事情，而是我们要把所谓的 val 和 tag 认为是不同的东西。
具体来说，就是我们要把线段树所存储的值集合 DDD 和标记集合分开，设标记集合为 EEE，那么有运算：

×\times×：E⊕D→DE\oplus D \to DE⊕D→D，表示给某个值下传标记的结果。
×\times×：E⊕E→EE\oplus E \to EE⊕E→E，表示标记的下传，有结合律。
+++：D⊕D→DD \oplus D \to DD⊕D→D，表示值得求和，与 E,DE,DE,D 见乘法有分配律。

如果要直观理解的话，那么就是 DDD 为 nnn 维向量的集合，EEE 为 n×nn\times nn×n 矩阵的集合。
那么对应到修改为区间左乘 x(x∈E)x(x\in E)x(x∈E)，而查询为求区间值和。
 2.2 应用
间加区间和、区间加乘区间和、区间加区间历史最大值、区间加区间历史版本和都
可以 “环线段树” 做。
接下来我们会大量设计矩阵操作，用于演示 val 和 tag 分离的操作，可以看下面的图来显理解：

 区间加乘区间和
观察区间加乘的本质其实是什么：

加：ai←ai+x=ai+1×xa_i \leftarrow a_i +x=a_i +1\times xai​←ai​+x=ai​+1×x（这里的 ×\times× 就是乘号）。
乘：ai←kaia_i \leftarrow ka_iai​←kai​。

这两个都是线性变换耶，我们可以考虑维护一个向量：[ai,1][a_i,1][ai​,1]，，那么每次修改相当于就是乘上一个 2×22\times 22×2 的矩阵。而矩阵与其乘法加法都是构成环的（满足分配律），所以可以用环线段树来去做。
 区间加区间历史版本和
考虑维护向量序列 [ai,hi,1][a_i,h_i,1][ai​,hi​,1]，表示原序列值，历史版本和，和方便用的常数。那么操作就是：

加：a_i \lfetarrow a_i +x\times 1，显然线性变换。
累加历史版本：hi←hi+aih_i\leftarrow h_i+a_ihi​←hi​+ai​，显然线性变换。

所以也是可以用环线段树做的。
然而实际上你会发现几乎很少人会真的去那么写，因为矩阵实在是太慢了，有一个 333^333 的常数摆在那里。
但是这种想法，矩阵当然是很好想的啦，总比想不出来好吧，毕竟可以骗骗分，让后根据矩阵的特性进行优化 blablalba。
 2.3 例题
做题时的重心仍然要放在观察性质与构造信息上，但是因为我们有了懒标记，所以要考虑的比半群线段树要更多一些。
 [NOIP2022] 比赛
询问过于逆天，正难则反，考虑每个 ai,bia_i,b_iai​,bi​ 会在哪些区间作为最大值，这个区间信息我们可以通过单调栈 O(n)O(n)O(n) 求出。
我们把区间看成平面上的一个点。每个点上维护向量 [mxa,mxb,v,1][mx_a,mx_b,v,1][mxa​,mxb​,v,1]，其中 mxa⋅mxbmx_a \cdot mx_bmxa​⋅mxb​，那么有修改：

矩形范围内 mxamx_amxa​ 加 xxx：mxa←mxa+x⋅1,v←v+x⋅mxbmx_a \leftarrow mx_a +x \cdot 1,v\leftarrow v+x \cdot mx_bmxa​←mxa​+x⋅1,v←v+x⋅mxb​。
矩形范围内 mxbmx_bmxb​ 加 xxx：mxb←mxb+x⋅1,v←v+x⋅mxamx_b \leftarrow mx_b +x \cdot 1,v\leftarrow v+x \cdot mx_amxb​←mxb​+x⋅1,v←v+x⋅mxa​。

都是线性变化，而查询查询的就是矩形范围内 vvv 的和，矩形范围求和我们可以用过对一维差分，转化为两个区间历史版本和，说人话就是扫描线。
历史版本和是显然的，在向量上加一个维度就可以了，这里不在细说，代码根据矩形特征仍可以约去一大堆没用的信息。
我们还有构造双半群的做法，不过我不会 www。
代码如下：
#include&lt;bits/stdc++.h&gt;#define int long long#define ull unsigned long long#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e5+15;int T,n,q,top1,top2,a[MN],b[MN],s1[MN],s2[MN];ull ans[MN];vector&lt;pir&gt; qry[MN];struct Segment&#123;#define ls p&lt;&lt;1#define rs p&lt;&lt;1|1    struct&#123;        ull l,r,hsum,sum,suma,sumb,adda,addb,hadda,haddb,haddab,hcnt;    &#125;t[MN&lt;&lt;2];    void doadd(int p,int va,int vb)&#123;        t[p].sum+=t[p].sumb*va;        t[p].suma+=(t[p].r-t[p].l+1)*va;        t[p].adda+=va;        t[p].sum+=t[p].suma*vb;        t[p].sumb+=(t[p].r-t[p].l+1)*vb;        t[p].addb+=vb;    &#125;    void dohadd(int p,int cnt,int va,int vb,int vab)&#123;        t[p].hsum+=t[p].sum*cnt+t[p].suma*vb+t[p].sumb*va+vab*(t[p].r-t[p].l+1);        t[p].hcnt+=cnt;        t[p].hadda+=t[p].adda*cnt+va;        t[p].haddb+=t[p].addb*cnt+vb;        t[p].haddab+=t[p].adda*t[p].addb*cnt+t[p].adda*vb+t[p].addb*va+vab;    &#125;    void pushup(int p)&#123;        t[p].sum=t[ls].sum+t[rs].sum;        t[p].suma=t[ls].suma+t[rs].suma;        t[p].sumb=t[ls].sumb+t[rs].sumb;        t[p].hsum=t[ls].hsum+t[rs].hsum;    &#125;    void pushdown(int p)&#123;        dohadd(ls,t[p].hcnt,t[p].hadda,t[p].haddb,t[p].haddab);        dohadd(rs,t[p].hcnt,t[p].hadda,t[p].haddb,t[p].haddab);        doadd(ls,t[p].adda,t[p].addb);        doadd(rs,t[p].adda,t[p].addb);        t[p].adda=t[p].addb=t[p].hadda=t[p].haddb=t[p].haddab=t[p].hcnt=0;    &#125;    void build(int p,int l,int r)&#123;        t[p].l=l;        t[p].r=r;        if(l==r) return;        int mid=(l+r)&gt;&gt;1;        build(ls,l,mid);        build(rs,mid+1,r);    &#125;    void modifya(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            doadd(p,k,0);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) modifya(ls,fl,fr,k);        if(mid&lt;fr) modifya(rs,fl,fr,k);        pushup(p);    &#125;    void modifyb(int p,int fl,int fr,int k)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            doadd(p,0,k);            return;        &#125;        pushdown(p);        int mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) modifyb(ls,fl,fr,k);        if(mid&lt;fr) modifyb(rs,fl,fr,k);        pushup(p);            &#125;    int query(int p,int fl,int fr)&#123;        if(t[p].l&gt;=fl&amp;&amp;t[p].r&lt;=fr)&#123;            return t[p].hsum;        &#125;        pushdown(p);        int ret=0,mid=(t[p].l+t[p].r)&gt;&gt;1;        if(mid&gt;=fl) ret+=query(ls,fl,fr);        if(mid&lt;fr) ret+=query(rs,fl,fr);        return ret;    &#125;    void upd()&#123;        dohadd(1,1,0,0,0);    &#125;#undef ls#undef rs&#125;sg;signed main()&#123;    cin&gt;&gt;T&gt;&gt;n;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;b[i];    &#125;    cin&gt;&gt;q;    for(int i=1;i&lt;=q;i++)&#123;        int l,r;        cin&gt;&gt;l&gt;&gt;r;        qry[r].push_back(pir(l,i));    &#125;    sg.build(1,1,n);    for(int i=1;i&lt;=n;i++)&#123;        while(top1&amp;&amp;a[i]&gt;a[s1[top1]])&#123;            sg.modifya(1,s1[top1-1]+1,s1[top1],-a[s1[top1]]);            top1--;        &#125;        sg.modifya(1,s1[top1]+1,i,a[i]);        while(top2&amp;&amp;b[i]&gt;b[s2[top2]])&#123;            sg.modifyb(1,s2[top2-1]+1,s2[top2],-b[s2[top2]]);            top2--;        &#125;        sg.modifyb(1,s2[top2]+1,i,b[i]);        sg.upd();        s1[++top1]=i;        s2[++top2]=i;        for(auto p:qry[i])&#123;            ans[p.second]=sg.query(1,p.first,i);        &#125;    &#125;    for(int i=1;i&lt;=q;i++)&#123;        cout&lt;&lt;ans[i]&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 3. 特殊线段树
有一类线段树不能简单归类到半群和环线段树，但是通常底层的信息维护都具有一定的相通性。
 3.1 平衡树
平衡树就是支持插入的线段树。
啊？
 3.2 吉司机线段树
这里吉司机可以去网上搜索教程，这里不在叙述。
那么吉司机和环线段树的相通之处，在于环结构需要多维护一个 “仅最小值加 xxx” 的操作，然后寻找修改区间这部分的算法有所改变。所以很多“环线段树”
的方法还是可用的。
 3.3 底层分块
底层分块是一个线段树优化空间的技巧，大致思想就是线段树的叶子节点是 O(log⁡n)O(\log n)O(logn) 而不是 O(1)O(1)O(1) 的区间长度，那么节点数量就减少到了 O(nlog⁡n)O(\dfrac{n}{\log n})O(lognn​)，而修改查询的时间复杂度仍然是 O(log⁡n)O(\log n)O(logn) 的。
这种修改在有很多个线段树，但是储存的底层下标不交的时候有很好的优化效果，例如魔鬼题 [Ynoi2007] rgxsxrs。
这种结构我们只是认为它的结构发生了改变，而底层信息在维护的时候是没有太大变化的，和环线段树差不太多。
 4. 后言
抽象化不是为了变难，而是为了变得更加简便，方便与实践。

“在数学中，进步往往来自于更深刻的抽象，而不是更复杂的计算” ——Alexander Grothendieck

通过抽象化，我们能够总结出线段树解题的一般步骤，以及各个线段树维护复杂信息的一般性与特殊性。
感觉学到很多，故作学习笔记，以摸鱼。
开始时间：2025/7/23 18:34
结束时间：2025/7/23 20:36
字数：5209 字。
 参考

Alex_wei 的线段树进阶
神秘课件

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学乱学</title>
    <url>/posts/b4e7c6f/</url>
    <content><![CDATA[ 0.前言与ntt
组合数学过于差得我，必须重修！
ntt板子？其中MOD，G,INVG需要自行定义
namespace Poly&#123;        int rev[MN];    int ksm(int a,int b)&#123;        int ret=1;        while(b)&#123;            if(b&amp;1) ret=ret*a%MOD;            a=a*a%MOD;            b&gt;&gt;=1;        &#125;        return ret;    &#125;    void dorev(int f[],int len)&#123;        for(int i=0;i&lt;len;i++)&#123;            rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;            if(i&amp;1)&#123;                rev[i]|=len&gt;&gt;1;            &#125;        &#125;        for(int i=0;i&lt;len;i++)&#123;            if(i&lt;rev[i]) swap(f[i],f[rev[i]]);        &#125;    &#125;    void NTT(int f[],int len,int op)&#123;        dorev(f,len);        for(int i=1;i&lt;len;i&lt;&lt;=1)&#123;            int Wn=ksm((op==1?G:INVG),(MOD-1)/(i&lt;&lt;1));            for(int j=0;j&lt;len;j+=(i&lt;&lt;1))&#123;                int w=1;                for(int k=0;k&lt;i;k++,w=(w*Wn)%MOD)&#123;                    int x=f[j+k],y=w*f[j+k+i]%MOD;                    f[j+k]=(x+y)%MOD;                    f[j+k+i]=(x-y+MOD)%MOD;                &#125;            &#125;        &#125;        if(op==-1)&#123;            int invlen=ksm(len,MOD-2);            for(int i=0;i&lt;len;i++) f[i]=f[i]*invlen%MOD;        &#125;    &#125;    // f is the output array    void Mul(int f[],int g[],int n,int m)&#123;        m+=n;        n=1;        while(n&lt;=m) n&lt;&lt;=1;        NTT(f,n,1);        NTT(g,n,1);        for(int i=0;i&lt;=n;i++) f[i]=f[i]*g[i]%MOD;        NTT(f,n,-1);    &#125;&#125;
 1. 二项式反演
 定义与形式
二项式反演用于解决“某个物品恰好若干个”这类计数问题。
两种形式，我们统计 fnf_{n}fn​ 为恰好 nnn 种的方案数量：

至多：gn=∑i=0n(ni)fi⇔fn=∑i=0n(−1)n−i(ni)gig_{n}=\sum\limits_{i=0} ^n \binom{n}{i} f_{i} \Leftrightarrow f_{n}=\sum\limits_{i=0}^n (-1)^{n-i} \binom{n}{i} g_{i}gn​=i=0∑n​(in​)fi​⇔fn​=i=0∑n​(−1)n−i(in​)gi​
至少：gk=∑i=kn(ik)fi⇔fk=∑i=kn(−1)i−k(ik)gig_{k}=\sum\limits_{i=k} ^n \binom{i}{k} f_{i} \Leftrightarrow f_{k}=\sum\limits_{i=k}^n (-1)^{i-k} \binom{i}{k} g_{i}gk​=i=k∑n​(ki​)fi​⇔fk​=i=k∑n​(−1)i−k(ki​)gi​

速记：至少往上走，至多往下走，容斥系数就是组合数上下相减。
有的时候，题目不会明确标出恰好，需要自行探索。
至少和至多的选取根据题目类型来选取，哪个简单那个就可以。
 例题
HDU1465

求长为 nnn 的序列的错排的数量，其中 1≤n≤201\le n \le 201≤n≤20.

设 fnf_nfn​ 表示恰好有 nnn 个位置错开，gng_{n}gn​ 表示至多 nnn 个位置错开，注意到，gng_ngn​ 可以瞎排列即可，所以 gn=n!g_{n}=n!gn​=n!。
答案即为：
fn=∑i=0n(ni)(−1)n−ii!f_{n}=\sum\limits_{i=0}^n \binom{n}{i} (-1)^{n-i} i!
fn​=i=0∑n​(in​)(−1)n−ii!
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=25;int ans,pw[MN],n;int getC(int a,int b)&#123;    if(a&lt;b) return 0;    return pw[a]/(pw[b]*pw[a-b]);&#125;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++)&#123;        pw[i]=pw[i-1]*i;    &#125;&#125;void solve()&#123;    ans=0;    for(int i=0;i&lt;=n;i++)&#123;        ans+=getC(n,i)*((n-i)&amp;1?-1:1)*pw[i];    &#125;    cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;&#125;signed main()&#123;    init();    while(cin&gt;&gt;n)&#123;        solve();    &#125;    return 0;&#125;
洛谷P4859 已经没有什么好害怕的了
设 ai&gt;bia_{i}&gt;b_{i}ai​&gt;bi​ 的数量为 xxx 个，所以有 x+(x−k)=nx+(x-k)=nx+(x−k)=n
即 x=n+k2x=\dfrac{n+k}{2}x=2n+k​，也就是说 ai&gt;bia_{i}&gt;b_{i}ai​&gt;bi​ 的对数恰好为 kkk 个。
先两个序列排序，双指针预处理 ai&gt;bia_{i}&gt; b_iai​&gt;bi​ 的个数 cic_{i}ci​
考虑动态规划，我们设 g(i,j)g(i,j)g(i,j) 表示前 iii 个数，强制钦定 jjj 个数使得 ak&gt;bka_{k}&gt;b_{k}ak​&gt;bk​，而其他位置任意，即至少满足形式。
分类讨论得到转移方程：
g(i,j)=g(i−1,j)+g(i−1,j−1)×(ci−(j−1))g(i,j)=g(i-1,j)+g(i-1,j-1)\times(c_{i}-(j-1))
g(i,j)=g(i−1,j)+g(i−1,j−1)×(ci​−(j−1))
那么：
gi=g(n,i)×(n−i)!g_{i}=g(n,i) \times (n-i)!
gi​=g(n,i)×(n−i)!
至少与恰好，二项式反演即可，故代码：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=4090,MOD=1e9+9;int n,K,ans,fc[MN],f[MN][MN],a[MN],b[MN],c[MN];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void init()&#123;    fc[0]=1;    for(int i=1;i&lt;MN;i++)&#123;        fc[i]=fc[i-1]*i%MOD;    &#125;&#125;int getC(int a,int b)&#123;    return fc[a]*ksm(fc[b],MOD-2)%MOD*ksm(fc[a-b],MOD-2)%MOD;&#125;signed main()&#123;    init();    cin&gt;&gt;n&gt;&gt;K;    K=(n+K)/2;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;b[i];    &#125;    sort(a+1,a+1+n);    sort(b+1,b+1+n);    for(int i=1,p=1;i&lt;=n;i++)&#123;        while(p&lt;=n&amp;&amp;b[p]&lt;a[i])&#123;            p++;        &#125;        c[i]=(p-1);    &#125;    for(int i=0;i&lt;=n;i++) f[i][0]=1;    for(int i=1;i&lt;=n;i++)&#123;        for(int j=1;j&lt;=i;j++)&#123;            f[i][j]=(f[i][j]+f[i-1][j-1]*max(c[i]-j+1,0ll)%MOD+f[i-1][j])%MOD;        &#125;    &#125;    for(int i=K;i&lt;=n;i++)&#123;        int tmp=f[n][i]*fc[n-i]%MOD;         ans=(ans+tmp*getC(i,K)*((i-K)&amp;1?-1:1)%MOD)%MOD;    &#125;    cout&lt;&lt;(ans+MOD)%MOD;    return 0;&#125;
BZOJ2839 组合计数

一个有 NNN 个元素的集合有 2N2^N2N 个不同子集（包含空集），现在要在这 2N2^N2N 个集合中取出若干集合（至少一个），使得它们的交集的元素个数为 KKK，求取法的方案数，答案模 109+710^9+7109+7。

设交集元素个数恰好为 kkk 个元素的方案数为 fkf_{k}fk​，观察至多不好求，考虑设至少 gkg_{k}gk​
对于 gkg_{k}gk​ 只需要强制钦定谁为交集元素，首先 (nk)\binom{n}{k}(kn​) 飞上去，让后其他是任意选择的，数量为 2n−k2^{n-k}2n−k。我们要求的是方案数，对于这是一个族，因为集合选择是相互独立的，但是至少要选取一个集合不能为空集，所以方案数即为 22n−k−12^{2^{n-k}}-122n−k−1 个集族，乘法原理：
gk=(nk)(22n−k−1)g_{k}=\binom{n}{k} (2^{2^{n-k}}-1)
gk​=(kn​)(22n−k−1)
二项式反演即可：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=1e6+15,MOD=1e9+7;int n,K,pw[MN],inv[MN],g[MN];int ksm(int a,int b,int P)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%P;        a=a*a%P;        b&gt;&gt;=1;    &#125;    return ret;&#125;void init(int n)&#123;    pw[0]=1;    for(int i=1;i&lt;=n;i++) pw[i]=pw[i-1]*i%MOD;    inv[n]=ksm(pw[n],MOD-2,MOD);    for(int i=n;i&gt;=1;i--)&#123;        inv[i-1]=inv[i]*i%MOD;    &#125;&#125;int getC(int a,int b)&#123;    if(a&lt;b) return 0;    return pw[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;namespace ly&#123;    namespace IO    &#123;        #ifndef LOCAL            constexpr auto maxn=1&lt;&lt;20;            char in[maxn],out[maxn],*p1=in,*p2=in,*p3=out;            #define getchar() (p1==p2&amp;&amp;(p2=(p1=in)+fread(in,1,maxn,stdin),p1==p2)?EOF:*p1++)            #define flush() (fwrite(out,1,p3-out,stdout))            #define putchar(x) (p3==out+maxn&amp;&amp;(flush(),p3=out),*p3++=(x))            class Flush&#123;public:~Flush()&#123;flush();&#125;&#125;_;        #endif        namespace usr        &#123;            template&lt;typename type&gt;            inline type read(type &amp;x)            &#123;                x=0;bool flag(0);char ch=getchar();                while(!isdigit(ch)) flag^=ch==&#x27;-&#x27;,ch=getchar();                while(isdigit(ch)) x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48),ch=getchar();                return flag?x=-x:x;            &#125;            template&lt;typename type&gt;            inline void write(type x)            &#123;                x&lt;0?x=-x,putchar(&#x27;-&#x27;):0;                static short Stack[50],top(0);                do Stack[++top]=x%10,x/=10;while(x);                while(top) putchar(Stack[top--]|48);            &#125;            inline char read(char &amp;x)&#123;do x=getchar();while(isspace(x));return x;&#125;            inline char write(const char &amp;x)&#123;return putchar(x);&#125;            inline void read(char *x)&#123;static char ch;read(ch);do *(x++)=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            template&lt;typename type&gt;inline void write(type *x)&#123;while(*x)putchar(*(x++));&#125;            inline void read(string &amp;x)&#123;static char ch;read(ch),x.clear();do x+=ch;while(!isspace(ch=getchar())&amp;&amp;~ch);&#125;            inline void write(const string &amp;x)&#123;for(int i=0,len=x.length();i&lt;len;++i)putchar(x[i]);&#125;            template&lt;typename type,typename...T&gt;inline void read(type &amp;x,T&amp;...y)&#123;read(x),read(y...);&#125;            template&lt;typename type,typename...T&gt;            inline void write(const type &amp;x,const T&amp;...y)&#123;write(x),putchar(&#x27; &#x27;),write(y...),sizeof...(y)^1?0:putchar(&#x27;\n&#x27;);&#125;            template&lt;typename type&gt;            inline void put(const type &amp;x,bool flag=1)&#123;write(x),flag?putchar(&#x27;\n&#x27;):putchar(&#x27; &#x27;);&#125;        &#125;        #ifndef LOCAL            #undef getchar            #undef flush            #undef putchar        #endif    &#125;using namespace IO::usr;&#125;using namespace ly::IO::usr;signed main()&#123;    read(n,K);    init(n);    int ans=0;    for(int i=K;i&lt;=n;i++)&#123;        int ksmm=ksm(2,ksm(2,n-i,MOD-1),MOD);        int tmp=getC(n,i)*(ksmm-1)%MOD;        ans=(ans+((i-K)&amp;1?-1:1)*tmp%MOD*getC(i,K)%MOD+MOD)%MOD;    &#125;    put((ans+MOD)%MOD);    return 0;&#125;
HAOI2018 染色
这里至少好求，还是上面的恰好与至少。
我们考虑求解 gkg_{k}gk​，首先飞上去一个强制钦定 (mk)\binom{m}{k}(km​)。那么还剩下 n−k×Sn-k\times Sn−k×S 个位置没有染色，这些位置可以看作同一类，方案是 (n−k×S)!(n-k \times S)!(n−k×S)!。注意到我们还有排列，但是观察染色实际上是一个多重集排列的形式，那么公式即为 n!(S!)k(n−k×S)!\dfrac{n!}{(S!)^k (n-k\times S)!}(S!)k(n−k×S)!n!​。这样就满足了约束，但是还有 n−k×Sn-k \times Sn−k×S 空位置啊，也不能剩下，考虑染色方案，那么就是 (m−k)n−k×S(m-k)^{n-k \times S}(m−k)n−k×S。
乘法原理，答案即为：
gk=(mk)n!(S!)k(n−k×S)!(m−k)n−k×Sg_{k}=\binom{m}{k}\dfrac{n!}{(S!)^k (n-k\times S)!}(m-k)^{n-k \times S}
gk​=(km​)(S!)k(n−k×S)!n!​(m−k)n−k×S
设 R=min⁡(m,⌊nS⌋)R=\min(m,\lfloor \dfrac{n}{S} \rfloor)R=min(m,⌊Sn​⌋) 为真正能使用的颜色种类，代入形式二有：
fk=∑i=kR(−1)i−k(ik)gi=∑i=kR(−1)i−ki!k!(i−k)!考虑将 k! 移项有：fk×k!=∑i=kR(−1)i−ki!(i−k)!gi\begin{aligned} f_{k}&amp;=\sum\limits_{i=k}^R  (-1)^{i-k} \binom{i}{k} g_{i} \\ &amp; = \sum\limits_{i=k}^R (-1){i-k} \frac{i!}{k! (i-k)!}  \\

&amp;\text{考虑将 }  k! \text{ 移项有：} \\

f_{k} \times k! &amp; = \sum\limits_{i=k}^R (-1)^{i-k}\frac{i!}{(i-k)!} g_{i}

\end{aligned}fk​fk​×k!​=i=k∑R​(−1)i−k(ki​)gi​=i=k∑R​(−1)i−kk!(i−k)!i!​考虑将 k! 移项有：=i=k∑R​(−1)i−k(i−k)!i!​gi​​
设 Ax=∑i=0Rgii!⋅xi,Bx=∑i=0R=(−1)ii!⋅xiA_x=\sum\limits_{i=0}^R g_{i}i! \cdot x^{i},B_{x}=\sum\limits_{i=0}^R = \dfrac{(-1)^i}{i!} \cdot x^iAx​=i=0∑R​gi​i!⋅xi,Bx​=i=0∑R​=i!(−1)i​⋅xi，差卷积 NTT既得：
#include&lt;bits/stdc++.h&gt;#include &lt;cmath&gt;#define int long longusing namespace std;constexpr int MN=1e7+15,MOD=1004535809,MODG=3,MODGinv=334845270;int n,m,s,ans,f[MN],g[MN],pw[MN],rev[MN],inv[MN],w[MN];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;int getC(int a,int b)&#123;    if(a&lt;b) return 0;    return pw[a]*inv[b]%MOD*inv[a-b]%MOD;&#125;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++) pw[i]=pw[i-1]*i%MOD;    inv[MN-1]=ksm(pw[MN-1],MOD-2);    for(int i=MN-2;i&gt;=0;i--)&#123;        inv[i]=inv[i+1]*(i+1)%MOD;    &#125;&#125;void dorev(int f[],int len)&#123;    for(int i=0;i&lt;len;i++)&#123;        rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;        if(i&amp;1)&#123;            rev[i]|=len&gt;&gt;1;        &#125;    &#125;    for(int i=0;i&lt;len;i++)&#123;        if(i&lt;rev[i]) swap(f[i],f[rev[i]]);    &#125;&#125;void NTT(int f[],int len,int op)&#123;    dorev(f,len);    for(int i=1;i&lt;len;i&lt;&lt;=1)&#123;        int Wn=ksm((op==1?MODG:MODGinv),(MOD-1)/(i&lt;&lt;1));        for(int j=0;j&lt;len;j+=(i&lt;&lt;1))&#123;            int w=1;            for(int k=0;k&lt;i;k++,w=(w*Wn)%MOD)&#123;                int x=f[j+k],y=w*f[j+k+i]%MOD;                f[j+k]=(x+y)%MOD;                f[j+k+i]=(x-y+MOD)%MOD;            &#125;        &#125;    &#125;if (op == -1) &#123;    int inv_len = ksm(len, MOD-2);    for (int i = 0; i &lt; len; i++)         f[i] = f[i] * inv_len % MOD;&#125;&#125;int getG(int x)&#123;    return getC(m,x)*pw[n]%MOD*ksm(inv[s],x)%MOD*inv[n-s*x]%MOD*ksm(m-x,n-s*x)%MOD;&#125;signed main()&#123;    init();    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;    int lim=min(m,n/s);    for(int i=0;i&lt;=lim;i++)&#123;        f[i]=getG(i)*pw[i]%MOD;        g[i]=(i&amp;1)?MOD-inv[i]:inv[i];    &#125;    reverse(f,f+1+lim);    int len;    for(len=1;len&lt;lim*2+2;len&lt;&lt;=1);    NTT(f,len,1);    NTT(g,len,1);    for(int i=0;i&lt;len;i++)&#123;        f[i]=f[i]*g[i]%MOD;    &#125;    NTT(f,len,-1);    reverse(f,f+lim+1);    for(int i=0;i&lt;=lim;i++)&#123;        int w;        cin&gt;&gt;w;        ans=(ans+f[i]*inv[i]%MOD*w)%MOD;    &#125;    cout&lt;&lt;ans%MOD;    return 0;&#125;
洛谷P9850
[ICPC 2021 Nanjing R] Ancient Magic Circle in Teyvat

给定 nnn 个点的完全图，其中 mmm 条边为红色边，其余边为蓝色边。
定义以下：
f红色f_{\text{红色}}f红色​ 为四元组 (i,j,k,l)(i,j,k,l)(i,j,k,l)，其中任意两点都有红色边连接的个数。
f蓝色f_{\text{蓝色}}f蓝色​ 为四元组 (i,j,k,l)(i,j,k,l)(i,j,k,l)，其中任意两点都有蓝色边连接的个数。
求 ∣f红色−f蓝色∣|f_{\text{红色}}-f_{\text{蓝色}}|∣f红色​−f蓝色​∣。
其中 1≤n≤105,1≤m≤2×1051\le n \le 10^5,1\le m \le 2\times 10^51≤n≤105,1≤m≤2×105。

赛时没想出正解（废话都没学二项式反演能做？）
发现蓝色很难受，显然可以考虑以下容斥，但是怎么容斥呢？
红色边的信息我们是有的，我们可以通过红色边来容斥。
但是这咋求啊？暴力枚举直接 O(n4)O(n^4)O(n4) 了www。
对于一张存在 jjj 条红色边的图，假设存在 gig_igi​ 个 iii 条边的红色子图，而且只需要满足边颜色都是红色就可以了，那么有 (ji)\binom{j}{i}(ij​) 种选择方法，那么我们不妨设 fif_ifi​ 表示四元组存在 iii 条边的红色子图个数，有下列式子：
gi=∑j=i(ji)fjg_i=\sum\limits_{j=i}\binom{j}{i} f_j
gi​=j=i∑​(ij​)fj​
长的就很二项式反演：
fi=∑j=i(ji)(−1)j−igjf_i=\sum\limits_{j=i}\binom{j}{i} (-1)^{j-i} g_j
fi​=j=i∑​(ij​)(−1)j−igj​
那么 ∣f6−f0∣=∣g0−g1+g2−g3+g4−g5∣|f_6-f_0|=|g_0-g_1+g_2-g_3+g_4-g_5|∣f6​−f0​∣=∣g0​−g1​+g2​−g3​+g4​−g5​∣。不难发现可以一个一个讨论（废话那你怎么求）

g0g_0g0​：不选红色边，瞎选4个点：(n4)\dbinom{n}{4}(4n​)。
g1g_1g1​:选一个的方案数 (m1)\dbinom{m}{1}(1m​)，让后在确定2个端点瞎选：(m1)(n−22)\dbinom{m}{1}\dbinom{n-2}{2}(1m​)(2n−2​)。
g2g_2g2​：分类讨论

如果是一点连两条边，枚举公共点，让后再枚举以该端点出发的两个点，让后再瞎选一个：(n−3)∑i=1n(degi2)(n-3)\sum\limits_{i=1}^{n}\dbinom{deg_i}{2}(n−3)i=1∑n​(2degi​​)，其中 degideg_idegi​ 表示节点 iii 的度数
如果没有公共点，正南则反，就是原图任意选2个边减去有公共点的，即：(m2)−∑i=1n(degi2)\dbinom{m}{2}-\sum\limits_{i=1}^n \dbinom{deg_i}{2}(2m​)−i=1∑n​(2degi​​)。


g3g_3g3​：继续

如果三元环，那就枚举剩下一个点为 (n−3)C3(n-3)C_3(n−3)C3​.
如果是共用一个顶点，那么很简单直接枚举即可，结果 ∑i=1n(n3)\sum\limits_{i=1}^n \binom{n}{3}i=1∑n​(3n​)。
如果是链，注意一下要把三元环的三个情况舍去，结果就是 ∑(u,v)∈E(degu−1)(degv−1)−3C3\sum\limits_{(u,v)\in E}(deg_u-1)(deg_v-1)-3C_3(u,v)∈E∑​(degu​−1)(degv​−1)−3C3​。


g4g_4g4​:

如果四元环，那不用枚举直接 C4C_4C4​.
如果三元环出来一个那就是 ∑i=1nTi(degi−2)\sum\limits_{i=1}^n T_i(deg_i-2)i=1∑n​Ti​(degi​−2)，其中 TiT_iTi​ 为 iii 号点不同三元环的个数


g5g_5g5​ ：只能是两个三元环共用一条边枚举公共边即可，其中 f5=∑i=∈C3(ti2)f_5=\sum\limits_{i=\in \mathbb{C}_3}\binom{t_i}{2}f5​=i=∈C3​∑​(2ti​​) ，其中 C3\mathbb{C}_3C3​ 表示求解三元环完成定向的边集，tit_iti​ 表示覆盖带边 iii 的不同三元环个数。

做完了，直接公式计算即可，注意瓶颈在三元环和四员化计算，不要超过 O(n2)O(n^2)O(n2)：
#include &lt;bits/stdc++.h&gt;#define pir pair&lt;int, int&gt;#define ll long longusing namespace std;constexpr int MN = 1e5 + 15, MM = 2e5 + 15;struct Edge &#123;    int u, v;&#125; e[MM];ll f0, f1, f2, f3, f4, f5;int dg[MN],n,m,top,s[MN],id[MN];ll cp[MN], ce[MM];vector&lt;int&gt; adj[MN];vector&lt;pir&gt; G[MN];ll countthree() &#123;    ll ret = 0;    for (int i = 1; i &lt;= n; i++) &#123;        for (auto p : G[i]) id[p.first] = p.second;        for (auto p : G[i]) &#123;            int v = p.first;            for (auto pv : G[v]) &#123;                int w = pv.first;                if (id[w]) &#123;                    ret++;                    cp[i]++;                    cp[v]++;                    cp[w]++;                    ce[p.second]++;                    ce[pv.second]++;                    ce[id[w]]++;                &#125;            &#125;        &#125;        for (auto p : G[i]) id[p.first] = 0;    &#125;    return ret;&#125;ll countfour() &#123;    memset(id, 0, sizeof(id));    ll ret = 0;    for (int i = 1; i &lt;= n; i++) &#123;        for (int v : adj[i]) &#123;            for (auto p : G[v]) &#123;                int w = p.first;                if (dg[i] &lt; dg[w] || (dg[i] == dg[w] &amp;&amp; i &lt; w)) &#123;                    ret += id[w];                    if (!id[w]) s[++top] = w;                    id[w]++;                &#125;            &#125;        &#125;        for (int j = 1; j &lt;= top; j++) id[s[j]] = 0;        top = 0;    &#125;    return ret;&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= m; i++) &#123;        cin &gt;&gt; e[i].u &gt;&gt; e[i].v;        dg[e[i].u]++;        dg[e[i].v]++;        adj[e[i].u].push_back(e[i].v);        adj[e[i].v].push_back(e[i].u);    &#125;    for (int i = 1; i &lt;= m; i++) &#123;        int u = e[i].u, v = e[i].v;        if ((dg[u] == dg[v] &amp;&amp; u &gt; v) || dg[u] &gt; dg[v])            swap(u, v);        G[u].push_back(&#123;v, i&#125;);    &#125;    ll tri = countthree();    ll quad = countfour();    for (int i = 1; i &lt;= n; i++) &#123;        f2+=1LL * dg[i] * (dg[i] - 1) / 2 * (n - 4);        f3+=1LL * dg[i] * (dg[i] - 1) * (dg[i] - 2) / 6;        f4+=1LL * cp[i] * (dg[i] - 2);        for (auto p : G[i]) &#123;            int v = p.first;            f3+=1LL * (dg[i] - 1) * (dg[v] - 1);        &#125;    &#125;    for (int i = 1; i &lt;= m; i++) &#123;        f5+=1LL * ce[i] * (ce[i] - 1) / 2;    &#125;    f0=(__int128)n * (n - 1) * (n - 2) * (n - 3) / 24;    f1=1LL * m * (n - 2) * (n - 3) / 2;    f2+=1LL * m * (m - 1) / 2;    f3+=tri * (n - 6);    f4+=quad;    cout &lt;&lt; abs(f0 - f1 + f2 - f3 + f4 - f5);    return 0;&#125;
 2 斯特林数
 小约定
我们有一些小概念，比较简单：

下降幂，即 xn‾=x(x−1)(x−2)…(x−n+1)x^{\underline{n}}=x(x-1)(x-2)\dots(x-n+1)xn​=x(x−1)(x−2)…(x−n+1)

例如 x3‾=x(x−1)(x−2)x^{\underline{3}}=x(x-1)(x-2)x3​=x(x−1)(x−2)。


上升幂，即 xn‾=x(x+1)(x+2)…(x+n−1)x^{\overline{n}}=x(x+1)(x+2)\dots(x+n-1)xn=x(x+1)(x+2)…(x+n−1)。


普通幂，就是 xn=x1×x2⋯×xnx^n=x_1 \times x_2 \dots  \times x_nxn=x1​×x2​⋯×xn​，没啥好说的。


 第一类
 定义与递推
我们定义，[nm]\begin{bmatrix} n \\ m \end{bmatrix}[nm​] 为把 nnn 个元素分成 mmm 个环的方案数，这 mmm 个环不同当且仅当环不能旋转得到另一个环。
递推：
[nm]=[n−1m−1]+(n−1)×[n−1m]\begin{bmatrix} n \\ m \end{bmatrix}=\begin{bmatrix} n-1 \\ m-1 \end{bmatrix} + (n-1) \times \begin{bmatrix} n-1 \\ m \end{bmatrix}
[nm​]=[n−1m−1​]+(n−1)×[n−1m​]
从 n−1n-1n−1 个元素推过来，两个空环肯定是不符合的。
空一个环我们考虑插入元素，插入法即可。
 性质与求法
性质：
与阶乘的关系：

n!=∑i=0n[ni]n! =\sum\limits_{i=0}^n \begin{bmatrix} n \\ i \end{bmatrix}n!=i=0∑n​[ni​]

本质就是置换吗。
下降幂与上升幂与普通幂的转化：
下降幂转普通幂：
xn‾=∑i=0n[ni](−1)n−ixix^{\underline{n}}=\sum\limits_{i=0}^n \begin{bmatrix} n \\ i \end{bmatrix} (-1)^{n-i} x^{i}
xn​=i=0∑n​[ni​](−1)n−ixi
上升幂转普通幂：
xn‾=∑i=0n[ni]xix^{\overline{n}}=\sum\limits_{i=0}^n \begin{bmatrix}n \\ i  \end{bmatrix} x^i
xn=i=0∑n​[ni​]xi
注意，上升幂转普通幂用第一类斯特林数。
证明：

如何求呢？
∑i=0n[ni]xi=∏i=0n−1(x+i)=(x+n−1)!(x−1)!\sum\limits_{i=0} ^n \begin{bmatrix} n \\ i \end{bmatrix} x^i =\prod_{i=0}^{n-1} (x+i)=\frac{(x+n-1)!}{(x-1)!}
i=0∑n​[ni​]xi=i=0∏n−1​(x+i)=(x−1)!(x+n−1)!​
其实就是类似上面的递推式子，我们利用分治 FFT 即可 O(nlog⁡n)O(n \log n)O(nlogn) 求解第一类斯特林数，代码如下。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3e5+15,MOD=167772161,MODG=3,MODGinv=55924054;int n,rev[MN],inv[MN],pw[MN],f[MN],g[MN],a[MN],b[MN];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=ret*a%MOD;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret;&#125;void dorev(int f[],int len)&#123;    for(int i=0;i&lt;len;i++)&#123;        rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;        if(i&amp;1)&#123;            rev[i]|=len&gt;&gt;1;        &#125;    &#125;    for(int i=0;i&lt;len;i++)&#123;        if(i&lt;rev[i]) swap(f[i],f[rev[i]]);    &#125;&#125;void NTT(int f[],int len,int op)&#123;    dorev(f,len);    for(int i=1;i&lt;len;i&lt;&lt;=1)&#123;        int Wn=ksm((op==1?MODG:MODGinv),(MOD-1)/(i&lt;&lt;1));        for(int j=0;j&lt;len;j+=(i&lt;&lt;1))&#123;            int w=1;            for(int k=0;k&lt;i;k++,w=(w*Wn)%MOD)&#123;                int x=f[j+k],y=w*f[j+k+i]%MOD;                f[j+k]=(x+y)%MOD;                f[j+k+i]=(x-y+MOD)%MOD;            &#125;        &#125;    &#125;if (op == -1) &#123;    int inv_len = ksm(len, MOD-2);    for (int i = 0; i &lt; len; i++)         f[i] = f[i] * inv_len % MOD;&#125;&#125;void Mul(int f[],int g[],int n,int m)&#123;    m+=n,n=1;    while(n&lt;m) n&lt;&lt;=1;    NTT(f,n,1);    NTT(g,n,1);    for(int i=0;i&lt;n;i++) f[i]=f[i]*g[i]%MOD;    NTT(f,n,-1);&#125;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++) pw[i]=pw[i-1]*i%MOD;    inv[MN-1]=ksm(pw[MN-1],MOD-2);    for(int i=MN-2;i&gt;=0;i--)&#123;        inv[i]=inv[i+1]*(i+1)%MOD;    &#125;&#125;void solve(int f[],int n)&#123;    if(n==1)&#123;        f[1]=1;        return;    &#125;    if(n&amp;1)&#123;        solve(f,n-1);        for(int i=n;i&gt;=1;i--)&#123;            f[i]=(f[i-1]+f[i]*(n-1)%MOD)%MOD;        &#125;        f[0]=f[0]*(n-1)%MOD;    &#125;else&#123;        int m=n/2,ret=1;        solve(f,m);        for(int i=0;i&lt;=m;i++)&#123;            a[i]=f[i]*pw[i]%MOD;            b[i]=ret*inv[i]%MOD;            ret=ret*m%MOD;        &#125;        reverse(a,a+1+m);        Mul(a,b,m+1,m+1);        for(int i=0;i&lt;=m;i++)&#123;            g[i]=inv[i]*a[m-i]%MOD;        &#125;        Mul(f,g,m+1,m+1);        int lim=1;        while(lim&lt;(m+1)&lt;&lt;1) lim&lt;&lt;=1;        for(int i=m+1;i&lt;lim;i++) a[i]=b[i]=g[i]=0;        for(int i=n+1;i&lt;lim;i++) f[i]=0;    &#125;&#125;signed main()&#123;    init();    cin&gt;&gt;n;    solve(f,n);    for(int i=0;i&lt;=n;i++) cout&lt;&lt;f[i]&lt;&lt;&quot; &quot;;    return 0;&#125;
 第二类
 定义
说实话第二类才是用的最多的。
我们定义：{nm}\begin{Bmatrix} n \\ m \end{Bmatrix}{nm​}，或记作 S(n,m)S(n,m)S(n,m)。表示将 nnn 个元素分成 mmm 个互不区分的非空子集的方案数。
递推式子：
S(n,k)=S(n−1,k−1)+k×S(n−1,k)S(n,k)=S(n-1,k-1)+k \times S(n-1,k)
S(n,k)=S(n−1,k−1)+k×S(n−1,k)
其中 S(n,0)=[n=0]S(n,0)=[n=0]S(n,0)=[n=0]。
考虑证明，我们插入一个新元素，用两种方案：

将新元素单独放入一个子集，有 S(n−1,k−1)S(n-1,k-1)S(n−1,k−1) 种方案
将新元素放入一个现有的非空子集，共 k×S(n−1,k)k\times S(n-1,k)k×S(n−1,k) 种方案
加法原理即可。

 性质
性质如下：
mn=∑i=0mS(n,i)×i!×(mi)m^n=\sum\limits_{i=0}^m S(n,i)\times i! \times \binom{m}{i}
mn=i=0∑m​S(n,i)×i!×(im​)
当然可以写成：
mn=∑i=0mS(n,i)×mi‾m^n=\sum\limits_{i=0}^m S(n,i) \times m^{\underline{i}}
mn=i=0∑m​S(n,i)×mi​
反演时写作，即普通幂转下降幂：
mn=∑i=0nS(n,i)×mi‾m^n=\sum\limits_{i=0}^n S(n,i) \times m^{\underline{i}}
mn=i=0∑n​S(n,i)×mi​
可以这么理解，我们将 nnn 个不同小球丢进 mmm 个不同的盒子的方案数，我们枚举有效盒子的个数，从 mmm 个盒子选 iii 个盒子，让后将 nnn 个小球丢进 iii 个盒子（即第二类斯特林数）
然而事实上，这就是第二类斯特林数的生成函数。
那普通幂转上升幂呢：
mn=∑i=0n(−1)n−i×S(n,i)×mi‾m^n=\sum\limits_{i=0}^n (-1)^{n-i} \times  S(n,i)   \times m^{\overline{i}}
mn=i=0∑n​(−1)n−i×S(n,i)×mi
第二类斯特林显然和排列组合有关系：
S(n,m)=1m!∑i=0m(−1)i(mi)(m−i)nS(n,m)=\frac{1}{m!}\sum\limits_{i=0}^m (-1)^i \binom{m}{i} (m-i)^n
S(n,m)=m!1​i=0∑m​(−1)i(im​)(m−i)n
如果空箱子的情况算进去，那么答案就是 mnm!\dfrac{m^n}{m!}m!mn​
选 iii 个空盒子，让后把小球放进其他盒子里。
但我们的答案是有区别的盒子，要乘以 1m!\dfrac{1}{m!}m!1​ 去情况，
 求第二类斯特林数
如何求呢，注意到上面的式子：
S(n,m)=1m!∑i=0m(−1)i(mi)(m−i)n=1m!∑i=0m(−1)im!k!(m−k)!(m−i)n=∑i=0m(−1)k×(m−k)nk!(m−k)!\begin{aligned}

S(n,m) &amp; =\frac{1}{m!}\sum\limits_{i=0}^m (-1)^i \binom{m}{i} (m-i)^n \\

 &amp; =\frac{1}{m!}\sum\limits_{i=0}^m (-1)^i \frac{m!}{k!(m-k)!} (m-i)^n \\

 &amp; = \sum\limits_{i=0}^m (-1)^k \times \frac{(m-k)^n}{k!(m-k)!}

\end{aligned}S(n,m)​=m!1​i=0∑m​(−1)i(im​)(m−i)n=m!1​i=0∑m​(−1)ik!(m−k)!m!​(m−i)n=i=0∑m​(−1)k×k!(m−k)!(m−k)n​​
至此，我们可以实现以 O(nlog⁡n)O(n\log n)O(nlogn) 的时间复杂度求出 S(n)S(n)S(n)这一行的第二类斯特林数。
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=3e6+15,MOD=167772161,MODG=3,MODGinv=55924054;int n,pw[MN],inv[MN],A[MN],B[MN];namespace Poly&#123;    int rev[MN];    int ksm(int a,int b)&#123;        int ret=1;        while(b)&#123;            if(b&amp;1) ret=ret*a%MOD;            a=a*a%MOD;            b&gt;&gt;=1;        &#125;        return ret;    &#125;void dorev(int f[],int len)&#123;    for(int i=0;i&lt;len;i++)&#123;        rev[i]=rev[i&gt;&gt;1]&gt;&gt;1;        if(i&amp;1)&#123;            rev[i]|=len&gt;&gt;1;        &#125;    &#125;    for(int i=0;i&lt;len;i++)&#123;        if(i&lt;rev[i]) swap(f[i],f[rev[i]]);    &#125;&#125;void NTT(int f[],int len,int op)&#123;    dorev(f,len);    for(int i=1;i&lt;len;i&lt;&lt;=1)&#123;        int Wn=ksm((op==1?MODG:MODGinv),(MOD-1)/(i&lt;&lt;1));        for(int j=0;j&lt;len;j+=(i&lt;&lt;1))&#123;            int w=1;            for(int k=0;k&lt;i;k++,w=(w*Wn)%MOD)&#123;                int x=f[j+k],y=w*f[j+k+i]%MOD;                f[j+k]=(x+y)%MOD;                f[j+k+i]=(x-y+MOD)%MOD;            &#125;        &#125;    &#125;if (op == -1) &#123;    int inv_len = ksm(len, MOD-2);    for (int i = 0; i &lt; len; i++)         f[i] = f[i] * inv_len % MOD;&#125;&#125;void Mul(int f[],int g[],int n,int m)&#123;    m+=n,n=1;    while(n&lt;m) n&lt;&lt;=1;    NTT(f,n,1);    NTT(g,n,1);    for(int i=0;i&lt;n;i++) f[i]=f[i]*g[i]%MOD;    NTT(f,n,-1);&#125;&#125;using namespace Poly;void init()&#123;    pw[0]=1;    for(int i=1;i&lt;MN;i++)&#123;        pw[i]=pw[i-1]*i%MOD;    &#125;    inv[MN-1]=ksm(pw[MN-1],MOD-2);    for(int i=MN-2;i&gt;=0;i--)&#123;        inv[i]=inv[i+1]*(i+1)%MOD;    &#125;&#125;signed main()&#123;    init();    cin&gt;&gt;n;    for(int i=0;i&lt;=n;i++)&#123;        A[i]=(i&amp;1?MOD-inv[i]:inv[i]);        B[i]=ksm(i,n)*inv[i]%MOD;    &#125;    Mul(A,B,n,n);    for(int i=0;i&lt;=n;i++) cout&lt;&lt;A[i]&lt;&lt;&quot; &quot;;    return 0;&#125;
 与自然数幂的关系
∑i=0nik=∑j=0kS(k,j)(n+1)j+1j+1\sum\limits_{i=0}^n i^k=\sum\limits_{j=0}^k S(k,j) \frac{(n+1)^{j+1}}{j+1}
i=0∑n​ik=j=0∑k​S(k,j)j+1(n+1)j+1​
证明：

 斯特林反演
斯特林反演：
f(n)=∑k=0nS(n,k)×g(k)⇔g(n)=∑k=0n(−1)n−k[nk]f(k)f(n)=\sum\limits_{k=0}^n S(n,k)\times g(k) \Leftrightarrow g(n)=\sum\limits_{k=0}^n (-1)^{n-k} \begin{bmatrix} n \\ k \end{bmatrix} f(k)
f(n)=k=0∑n​S(n,k)×g(k)⇔g(n)=k=0∑n​(−1)n−k[nk​]f(k)
f(n)=∑k=0n(−1)n−kS(n,k)×g(k)⇔g(n)=∑k=0n[nk]f(k)f(n)=\sum\limits_{k=0}^n (-1)^{n-k} S(n,k)\times g(k) \Leftrightarrow g(n)=\sum\limits_{k=0}^n \begin{bmatrix} n \\ k \end{bmatrix} f(k)
f(n)=k=0∑n​(−1)n−kS(n,k)×g(k)⇔g(n)=k=0∑n​[nk​]f(k)
f(n)=∑i=nS(i,n)g(i)⇔g(i)=∑i=n(−1)i−n[in]f(i)f(n)=\sum\limits_{i=n} S(i,n) g(i) \Leftrightarrow g(i)= \sum\limits_{i=n} (-1)^{i-n} \begin{bmatrix} i \\ n \end{bmatrix} f(i)
f(n)=i=n∑​S(i,n)g(i)⇔g(i)=i=n∑​(−1)i−n[in​]f(i)
f(n)=∑i=n(−1)i−nS(i,n)g(i)↔g(n)=∑i=n[in]f(i)f(n)=\sum\limits_{i=n} (-1)^{i-n} S(i,n) g(i) \leftrightarrow g(n)=\sum\limits_{i=n} \begin{bmatrix} i \\ n \end{bmatrix} f(i)
f(n)=i=n∑​(−1)i−nS(i,n)g(i)↔g(n)=i=n∑​[in​]f(i)
 例题以及应用
题型分类：

函数与斯特林数公式相同
这类问题通常需要自设函数，通过发现与斯特林数的关系利用其性质求解
根据题意运用斯特林函数及公式
这类问题通常隐晦地交代了需要运用斯特林函数求解，存在有效解与无效解的原式
往往需要经验才能快速判断选择并化简原式
直接推式
这类问题会直接给出包含或间接包含斯特林函数的公式，要求简化公式以得到优秀的时间复杂度
斯特林反演的运用
容斥类问题，通常需要自设函数并找到与斯特林数的关系，从而化简求解过程

 3. 贝尔数
贝尔数表示将基数为 nnn 的集合划分方法的数目，划分即将 SSS 划分成两两不相交的非空子集的族。例如 B3=5B_3=5B3​=5。
特别的，B0B_{0}B0​ 为 1 因为空集有一种划分方法。
递推公式如下：
Bn+1=∑k=0n(nk)BkB_{n+1}=\sum\limits_{k=0}^n \binom{n}{k} B_{k}
Bn+1​=k=0∑n​(kn​)Bk​
同时因为每个贝尔数都为相邻第二类斯特林数的和，因为第二类斯特林树是把基数为 nnn 的集合乎分成 kkk 个非空集的方法数目。
即：
Bn=∑k=0n{nk}B_{n}=\sum\limits_{k=0}^n \begin{Bmatrix} n \\ k \end{Bmatrix}
Bn​=k=0∑n​{nk​}
当贝尔数到达第 151515 项时，已经变得非常大。可以细心观察以下数据范围。
 4. Lucas 定理
《初等数论》一书对卢卡斯(Lucas)\texttt{(Lucas)}(Lucas)定理是这么定义的:::

设ppp为素数,a,b∈N∗,,a,b\in N^* ,,a,b∈N∗,并且

a=∑i=0kaipi,b=∑i=0kbipia=\sum\limits_{i=0}^k a_i p^i,b=\sum\limits_{i=0}^k b_i p^i
a=i=0∑k​ai​pi,b=i=0∑k​bi​pi

这里0⩽ai,bi⩽p−10\leqslant a_i,b_i\leqslant p-10⩽ai​,bi​⩽p−1都是整数,i=0,1,2,…,k.i=0,1,2,…,k.i=0,1,2,…,k.则:::

Cab≡∏i=0kCaibi(modp)C_a^b \equiv \prod\limits_{i=0}^k C_{a_i}^{b_i} \pmod{p}
Cab​≡i=0∏k​Cai​bi​​(modp)

或者写成这样:::

Cab≡Cakbk⋅Cak−1bk−1⋅…⋅Ca0b0(modp)C_a^b \equiv C_{a_k}^{b_k} \cdot C_{a_{k-1}}^{b_{k-1}} \cdot … \cdot C_{a_0}^{b_0}\pmod{p}
Cab​≡Cak​bk​​⋅Cak−1​bk−1​​⋅…⋅Ca0​b0​​(modp)
Ps.Ps.Ps.如果bi&gt;ai,b_i&gt;a_i,bi​&gt;ai​,那么Caibi=0.C_{a_i}^{b_i} = 0 .Cai​bi​​=0.
本质上卢卡斯定理就是把组合数的计算拆到模数 ppp 的进制表示里去做。
 性质
该书又介绍了Lucas\texttt{Lucas}Lucas定理的两个性质:::

当且仅当存在i∈{0,1,2,…,k}i \in \{ 0, 1, 2, …,k\}i∈{0,1,2,…,k}使得bi&gt;aib_i &gt; a_ibi​&gt;ai​时,Cab≡0(modp).,C_a^b \equiv 0 \pmod{p}.,Cab​≡0(modp).
CabC_a^bCab​ 为奇数的充要条件为二进制表示下aaa的每一位上的数都不小于bbb相应位上的数，即 bbb 在二进制表示下时 aaa 的子集。

 应用
Lucas\texttt{Lucas}Lucas定理的主要用途在于在O(log⁡pa)O(\log_p a)O(logp​a)的时间求出Cabmod  pC_a^b \mod pCab​modp的结果...显然地,,,有一种方法:::

对于a,a,a,我们预处理出a0,a1,…,ak,a_0,a_1,…,a_k,a0​,a1​,…,ak​,对于bbb同理...然后我们直接算组合数并乘起来,,,注意随时取模...如果ppp较小且询问较多,,,可以考虑预处理组合数...

这听起来很容易,,,但做起来好难啊...
这时候我们把秦九韶请出来,,,可以将
∑i=0kaipi\sum\limits_{i=0}^k a_i p^i
i=0∑k​ai​pi
变成
(((akp+ak−1)p+ak−2)p+…)p+a0(((a_kp+a_{k-1})p+a_{k-2})p+…)p+a_0
(((ak​p+ak−1​)p+ak−2​)p+…)p+a0​
这样的形式,,,对于另一个同理,,,于是我们便可以层层除法+++取模,,,将求解变成了一个递归形式,,,即:::
Lucas(a,b,p)=Lucas(a/p,b/p,p)⋅Ca%pb%p,Lucas(a,b,p)=Lucas(a/p,b/p,p) \cdot C_{a\%p}^{b\%p},
Lucas(a,b,p)=Lucas(a/p,b/p,p)⋅Ca%pb%p​,
这里的Lucas(a,b,p)Lucas(a,b,p)Lucas(a,b,p)即要求的Cabmod  p,C_a^b \mod p ,Cab​modp,
根据我们上面所提到的，组合数的计算拆成 ppp 进制下的计算，实质是这样的：
(nm) mod p=(n/pm/p)×(n mod pm mod p) mod p=(n/p2m/p2)×(n/p mod pm/p mod p)×(n mod pm mod p) mod p=⋯=1×⋯×(n/p mod pm/p mod p)×(n mod pm mod p) mod p\begin{aligned} \dbinom{n}{m} \bmod p &amp;= \dbinom{n/p}{m/p} \times \dbinom{n \bmod p}{m \bmod p} \bmod p \\ &amp;= \dbinom{n/p^2}{m/p^2} \times \dbinom{n/p \bmod p}{m/p \bmod p} \times \dbinom{n \bmod p}{m \bmod p} \bmod p \\ &amp;= \cdots \\ &amp;= 1 \times \cdots \times \dbinom{n/p \bmod p}{m/p \bmod p} \times \dbinom{n \bmod p}{m \bmod p} \bmod p \\ \end{aligned}
(mn​)modp​=(m/pn/p​)×(mmodpnmodp​)modp=(m/p2n/p2​)×(m/pmodpn/pmodp​)×(mmodpnmodp​)modp=⋯=1×⋯×(m/pmodpn/pmodp​)×(mmodpnmodp​)modp​
在上述推导中，可以发现其中每一项都带上了 (modp)\pmod p(modp)，即将每一项都限制在了 ppp 以内，即转化到了 ppp 进制。
 例题
 arc137d
注意到这个贡献的顺序是一个类似于前缀和的形式，如下图：

考虑如何异或只有系数为 1 的时候才能贡献到，注意到系数一定和操作次数有关，并且这个贡献顺序有点类似于格路计数，手摸不难有系数，前面的数对 ana_nan​ 的贡献就是：
an=∑i=0(k+i−1i)an−ia_n =\sum_{i=0} \binom{k+i-1}{i} a_{n-i}
an​=i=0∑​(ik+i−1​)an−i​
其中因为是异或 (k+i−1i)\binom{k+i-1}{i}(ik+i−1​)，不难有这个是在 (mod2)\pmod 2(mod2) 意义下的，根据卢卡斯定理，当 (nm) mod 2=1\binom{n}{m} \bmod 2 =1(mn​)mod2=1 当且仅当 n bitand m=mn \text{ bitand } m=mn bitand m=m。
用高维后缀和实现即可，时间复杂度 O(nlog⁡n)O(n \log n)O(nlogn)。
 P3373 吉夫特
根据我们上面所说的，二进制模数下的组合数要想为 1 当且仅当 mmm 是 nnn 二进制表示下的子集。这道题由于值域很小，可以直接暴力枚举子集，让后就做完了，时间复杂度为 3log⁡∣V∣3^{\log |V|}3log∣V∣。
 P4345 超粒子炮
原式子所求：
∑i=0k(ni)(mod2333)\sum_{i=0}^k \binom{n}{i} \pmod{2333}
i=0∑k​(in​)(mod2333)
注意到 2333 是质数，根据 Lucas 定理有：
p=2333∑i=0k(ni)=∑i=0k(n/pi/p)(n mod pi mod p)(modp)\begin{aligned}
p &amp; = 2333 \\
\sum_{i=0}^k \binom{n}{i} &amp; = \sum_{i=0}^k \binom{n/p}{i/p}\binom{n \bmod p}{i\bmod p} \pmod p
\end{aligned}
pi=0∑k​(in​)​=2333=i=0∑k​(i/pn/p​)(imodpnmodp​)(modp)​
注意到前面的式子类似于整除分块，枚举 i/pi/pi/p 有：
(n/p0)∑i=0p−1(n mod pi mod p)+(n/p1)∑i=0p−1(n mod pi mod p)+⋯+(n/pk/p)∑i=0p−1(n mod pi mod p)(modp)\binom{n/p}{0} \sum_{i=0}^{p-1} \binom{n \bmod p}{i\bmod p}+\binom{n/p}{1} \sum_{i=0}^{p-1} \binom{n \bmod p}{i\bmod p}+\dots+\binom{n/p}{k/p} \sum_{i=0}^{p-1} \binom{n \bmod p}{i\bmod p} \pmod p
(0n/p​)i=0∑p−1​(imodpnmodp​)+(1n/p​)i=0∑p−1​(imodpnmodp​)+⋯+(k/pn/p​)i=0∑p−1​(imodpnmodp​)(modp)
不妨令 f(n,k)=∑i=0k(ni)(modp)f(n,k)=\sum_{i=0}^k \binom{n}{i} \pmod pf(n,k)=∑i=0k​(in​)(modp)，那么有：
f(n,k)=f(n/p,(k/p)−1)⋅f(n mod p,p−1)+(n/pk/p)⋅f(n mod p,k mod p)f(n,k)=f(n/p,(k/p)-1) \cdot f(n\bmod p,p-1)+\binom{n/p}{k/p}\cdot f(n\bmod p,k\bmod p)
f(n,k)=f(n/p,(k/p)−1)⋅f(nmodp,p−1)+(k/pn/p​)⋅f(nmodp,kmodp)
前面就是上面类似于整除分块的地方，后面是遗留的小块单独算。时间复杂度 O(p2+Tlog⁡p2n)O(p^2+T\log_{p}^2 n)O(p2+Tlogp2​n)
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>群论与Burnside定理与Polya定理</title>
    <url>/posts/1005d80f/</url>
    <content><![CDATA[ 0. 前言
抽象代数警告！
你需要有：

集合论芝士
一颗清醒不头痛的大脑

 1. 群
 1.1 群的定义
设 GGG 是非空集合，其上有二元运算 ×\times× （这不是单纯的乘号，这里是抽象代数你应当有这种意识）。若这个运算满足以下四个性质，我们称其为一个群，记为：(G,×)(G,\times)(G,×)。

封闭性


若存在 aaa 和 bbb 满足 a∈G,b∈Ga\in G,b\in Ga∈G,b∈G，则有 a×b∈Ga\times b \in Ga×b∈G。


结合律


对于任意 a,b,c∈G,有(a×b)×c=a×(b×c)a,b,c \in G,\text{有}(a\times b)\times c=a\times (b\times c)a,b,c∈G,有(a×b)×c=a×(b×c)。


单位元


∃e∈G\exists e\in G∃e∈G，满足对于任意 a∈Ga\in Ga∈G，有：a×e=e×a=aa\times e=e\times a=aa×e=e×a=a。
这样的 eee 称为单位元，并且单位元唯一（如果有多个很容易看出来矛盾）


逆元


对于任意 a∈Ga\in Ga∈G，存在a′∈Ga&#x27;\in Ga′∈G，满足a×a′=a′×a=ea\times a&#x27;=a&#x27;\times a=ea×a′=a′×a=e。
a′a&#x27;a′ 也是唯一的。

举个例子，我们比如说实数域上的乘法法则就构成一个群，模意义下的乘法（除0以外）同样是一个群，单位元 e=1e=1e=1 。

（推论）消去律：对于 a,b,c∈Ga,b,c\in Ga,b,c∈G，如果 a×c=b×ca\times c=b\times ca×c=b×c 或c×a=c×bc\times a=c\times bc×a=c×b，那么有 a=ba=ba=b。

还有一些举例，正整数在加法下不够成群，因为正整数没有加法单位元（应为0但是正整数），整数在乘法下不构成群，2整数范围没有乘法逆元。
 1.2 子群
如果 HHH 为 GGG 的一个子集并且 (H,×)(H,\times)(H,×) 构成一个群，那么称 (H,×)(H,\times)(H,×) 为 (G,×)(G,\times)(G,×) 的子群，简记为 H≤GH\le GH≤G（这么记是因为子集包括 GGG）。
如果 GGG 是一个群，且 HHH 是 GGG 的子群，且 g∈Gg\in Gg∈G，那么：

gH=g×h,h∈HgH=g\times h,h\in HgH=g×h,h∈H，称其为 HHH 在 GGG 内关于 ggg 的左陪集。
Hg=h×g,h∈HHg=h\times g,h\in HHg=h×g,h∈H，称其为 HHH 在 GGG 内关于 ggg 的右陪集。

为什么要这么分呢，看上面的性质，我们没有提到交换律，所以这种算数系统交换过来的结果不一定相同，所以我们需要特别规定。
配集的性质（这里只讨论右配集）：

∀g∈G,∣H∣=∣Hg∣\forall g\in G,|H|=|Hg|∀g∈G,∣H∣=∣Hg∣。

根据逆元唯一，那么对于任意的g×h1,g×h2g\times h_{1},g\times h_2g×h1​,g×h2​，一定必然不同。

∀g∈G,g∈Hg\forall g\in G,g\in Hg∀g∈G,g∈Hg。

单位元 e∈Hge\in Hge∈Hg ，证毕。

Hg=H⇔g∈HHg=H \Leftrightarrow g\in HHg=H⇔g∈H。

封闭性即得。

Ha=Hb⇔a×b−1∈HHa=Hb \Leftrightarrow a\times b^{-1}\in HHa=Hb⇔a×b−1∈H

根据陪集运算和逆元可以证明。

Ha∩Hb≠∅⇔Ha=HbHa \cap Hb \ne \varnothing \Leftrightarrow Ha=HbHa∩Hb=∅⇔Ha=Hb。

这个性质很有用，这说明陪集的交集要么是空集么两个相同。

HHH 的全体右陪集并为 GGG 。
显然？因为 HHH 有单位元。

拉格朗日定理：
对于有限群 GGG 与有限群 HHH，若 HHH 为 GGG 的子群，那么有：
∣H∣ 整除 ∣G∣|H|\text{ 整除 } |G|
∣H∣ 整除 ∣G∣
 1.3 群作用
我们对于一个集合 MMM 和群 GGG。
若给定二元函数 μ(a,b)\mu(a,b)μ(a,b)，其中 a∈G,b∈Ma\in G,b\in Ma∈G,b∈M，并且：
μ(e,k)=ke为单位元μ(g,μ(s,k))=μ(g×s,k)g,s∈G,k∈M\begin{aligned}
\mu(e,k)&amp; =k &amp; \text{e为单位元} \\
\mu(g,\mu(s,k)) &amp; = \mu(g\times s,k) &amp; g,s\in G,k\in M
\end{aligned}
μ(e,k)μ(g,μ(s,k))​=k=μ(g×s,k)​e为单位元g,s∈G,k∈M​
那么我们就称 GGG 作用于集合 MMM 。
理解的来说其实就是把 GGG 的运算法则给融合进 集合 MMM 了。
 2. 置换
定义：一个集合 XXX 到自身的双射（一一对应）σ\sigmaσ 称为 XXX 的一个置换。
 2.1 置换的表示
双行表示法，即用两个括号扩起来，令元素从上面一行 “置换” 到下面一行，这个置换就可以用两行来表示。例如下面：
σ=(1234523154)\sigma=
\begin{pmatrix}  
  1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\  
  2 &amp; 3 &amp; 1 &amp; 5 &amp; 4 
\end{pmatrix} σ=(12​23​31​45​54​)
这个意思将排列 1,2,3,4,51,2,3,4,51,2,3,4,5 变为 2,3,1,5,42,3,1,5,42,3,1,5,4 的一个置换，可以理解就是用原本第二个代替第一个，第三个代替第二个，以此类推。
单行表示法，就是把置换后的结果表示出来如下：
σ=(a1,a2,...an)\sigma=(a_1,a_2,...a_n)
σ=(a1​,a2​,...an​)
例如：σ=(2,3,1,5,4)\sigma=(2,3,1,5,4)σ=(2,3,1,5,4)。
我们还有轮换表示，但是我看不懂。
一个长度为 nnn 的不同置换的个数为 n!n!n!，这个很重要！
 2.2 置换的运算
很简单，其实就是 σ×a\sigma \times aσ×a，或者更一般的写作 σ(a)\sigma(a)σ(a)。
运算规则就是：σ(a)=(aσ1,aσ2,....,aσn)\sigma(a)=(a_{\sigma_1},a_{\sigma_2},....,a_{\sigma_n})σ(a)=(aσ1​​,aσ2​​,....,aσn​​)。
还是例如上面的数列 a=(1,2,3,4,5)a=(1,2,3,4,5)a=(1,2,3,4,5)，那么 σ(a)=(2,3,1,5,4)\sigma(a)=(2,3,1,5,4)σ(a)=(2,3,1,5,4)。
我们称这个运算叫做置换的「合成」。
 2.3 置换群
我们不妨设集合 N={1,2,3,...,n}N=\left\{ 1,2,3,...,n \right\}N={1,2,3,...,n}，令集合 MMM 为 NNN 的若干个排列所构成的集合，我们令群 G=(M,×)G=(M,\times)G=(M,×)，其中这个 ×\times× 运算即为上面提到的置换的「合成」，若在此基础上，如果满足群的性质我们称 GGG 为一个置换群。
我们验证上面提到 MMM 是否和 置换合成满足群的性质：

封闭性：显然置换不可能出来新元素。
单位元 eee：显然 σ×e=e×σ=σ\sigma \times e=e\times \sigma=\sigmaσ×e=e×σ=σ。
结合律：容易验证。
逆元：容易构造并验证。

 3. 轨道-稳定子定理
 3.1 轨道与稳定子
我们设一个作用在集合 MMM 上的群 GGG 。MMM 中的一个元素 xxx 的轨道就是通过 GGG 中的元素可以到达的元素的集合。 xxx 的轨道被记为 G(x)G(x)G(x)。
G(x)={g×x∣g∈G}G(x)=\left\{ g \times x | g\in G \right\}
G(x)={g×x∣g∈G}
轨道是 MMM 的一个子集，表示 xxx 在群作用下的“运动范围”。
稳定子指的是 GGG 中固定 xxx 的元素组成的子群，用GxG^xGx 表示：
Gx={g×x=x∣g∈G}G^x=\left\{ g\times x=x| g\in G \right\}
Gx={g×x=x∣g∈G}
稳定子是 GGG 的子群，表示那些不改变 xxx 的群元素。
咱们举个例子，比如说旋转正方形。
我们就定义 GGG 为旋转操作。
G={旋转0°,旋转90°,旋转180°,旋转270°}G=\left\{ \text{旋转0°},\text{旋转90°},\text{旋转180°},\text{旋转270°} \right\}
G={旋转0°,旋转90°,旋转180°,旋转270°}
不妨令集合 MMM 为正方形四个顶点。
M={A,B,C,D}M=\left\{ A,B,C,D \right\}
M={A,B,C,D}
我们选顶点 x=Ax=Ax=A，那么它的轨道根据上面不难推出：

0度：A-&gt;A
90度：A-&gt;B
180度：A-&gt;C
270度：A-&gt;D
那么 G(A)=4G(A)=4G(A)=4。稳定子显然转0度才是固定的，所以 GA=1G^A =1GA=1。

 3.2 轨道-稳定子定理
对于有限群 GGG 作用与集合上 XXX 上，定理指出：
∣G∣=∣Gx∣⋅∣G(x)∣|G|=|G^x|\cdot |G(x)|
∣G∣=∣Gx∣⋅∣G(x)∣
还是上面的例子，根据上面发现 4×1=4=∣G∣4\times 1=4=|G|4×1=4=∣G∣。
为什么是对的？
根据上面我们提到的拉格朗日定理，那么根据上面提到的 GxG^xGx 是 GGG 子群结论，有：
∣Gx∣ 整除 ∣G∣|G^x|\text{ 整除 } |G|
∣Gx∣ 整除 ∣G∣
现在只需要证明 G(x)G(x)G(x) 是上面的 “除数” 即可。
考虑群 GGG 在轨道上的作用。对于任意 g∈Gg \in Gg∈G，我们定理映射：
g⋅x→gG(x)g\cdot x \rightarrow gG(x)
g⋅x→gG(x)
其中G(x)G(x)G(x) 仍为稳定子，轨道中的每个点 g⋅xg\cdot xg⋅x 对应 GGG 的一个左陪集 gG(x)gG(x)gG(x)，这个显然可以证明。
那么 GG(x)\frac{G}{G(x)}G(x)G​ 表示 GGG 所有左配集的集合，这个显然可证明，那就证明完了。
 4. Burnside定理与Polya定理
定义 GGG 为一个群，定义其作用于 XXX，轨道的个数等于群中每个元素对应置换的不动点的平均个数，即：
∣X/G∣=1∣G∣∑g∈G∣Xg∣|X/G|=\frac{1}{|G|}\sum\limits_{g\in G} |X^g|
∣X/G∣=∣G∣1​g∈G∑​∣Xg∣
证明即：
∣X/G∣=∑p∈X/G1∣X/G∣=∑x∈X1∣Gx∣∣X/G∣=1∣G∣∑g∈G∣Xg∣\begin{aligned}
|X/G|&amp; =\sum\limits_{p\in X/G} 1 \\
|X/G| &amp; = \sum\limits_{x\in X}\frac{1}{|Gx|} \\
|X/G|&amp;=\frac{1}{|G|}\sum\limits_{g\in G} |X^g|
\end{aligned}
∣X/G∣∣X/G∣∣X/G∣​=p∈X/G∑​1=x∈X∑​∣Gx∣1​=∣G∣1​g∈G∑​∣Xg∣​
Polya定理是Burnside定理的推论。
对于其中那个不动点解释，并不是要求每个顶点位置都不变，而是要求 “颜色” 分布整体不变，顶点可以移动但是整体的 “颜色” 排列看起来和原来一样
给定群 GGG 在集合 XXX 上的作用和颜色集合 CCC，则不同的染色方案数目为：
∣CX/G∣=1∣G∣∑g∈Gmc(g)|C^X/G|=\frac{1}{|G|}\sum\limits_{g\in G} m^{c(g)}
∣CX/G∣=∣G∣1​g∈G∑​mc(g)
其中，mmm 为颜色数目，c(g)c(g)c(g) 是元素 g∈Gg\in Gg∈G 的置换表示的轮换分解中的轮换数目。
我们啥时候用这个定理，要求比如说计数，并且出现关键词本质不同。
 4.1 小练习热身

用红绿蓝（RGB）三个颜色给 3 个顶点的环染色，求本质不同的方案数（旋转对称）。

首先这环旋转肯定构成一个置换群（如果你想用 Burnside 定理，你的前提这个得构成一个置换群！）
我们分类讨论一下。

旋转0度：瞎染色反正不动：333^333。
旋转120度：这个包括左旋和右旋，只有三个相同的颜色才能做到旋转后不动，所以即 31=33^1=331=3。
旋转240度：同理 333 。

不动点个数即为 333333 。因为就对称群就3个操作，所以本质不同方案数即为：
ans=1∣G∣∑g∈G∣Xg∣=333=11ans=\frac{1}{|G|}\sum\limits_{g\in G} |X^g|=\frac{33}{3}=11
ans=∣G∣1​g∈G∑​∣Xg∣=333​=11
不难验证 11 个方案本质不同。
 4.2 大练习

给定一个 nnn 个点，nnn 条边的环，有 nnn 种颜色，给每个顶点染色，问有多少种本质不同的染色方案，答案对 109+710^9+7109+7 取模。

4.2是4.1的严格加强版
根据 burnside定理得到：
Ans=1∣G∣∑g∈G∣Xg∣Ans=\frac{1}{|G|}\sum\limits_{g\in G} |X^g|
Ans=∣G∣1​g∈G∑​∣Xg∣
我们考虑将这个环转化成一个置换，我们分类讨论：

若旋转0个点，那么所有集合的点都是不动点，那么数量为：nnn^nnn。
若旋转 kkk 个点，那么一个点是不动点当且仅当这个点在循环节中循环了 kkk 次后还能回到原来位置，说明就是长度能够被 kkk 整除。因为循环的长度能被 nnn 整除。所以其实就是这个长度 dgcd⁡(k,n)≡0(modn)d\gcd(k,n) \equiv 0 \pmod ndgcd(k,n)≡0(modn)

不难发现有 gcd(k,n)gcd(k,n)gcd(k,n) 个循环节，所以不动点集合的大小就是 gcd(k,n)gcd(k,n)gcd(k,n)。
源式即为：
ans=1n∑k=1nngcd(k,n)ans=\frac{1}{n}\sum\limits_{k=1}^n n^{gcd(k,n)}
ans=n1​k=1∑n​ngcd(k,n)
这个怎么做？大力反演！
ans=1n∑k=1nngcd(k,n)ans=1n∑d∣nnd×∑k=1n/d[gcd(k,n)=1]枚举gcdans=1n∑d∣nndφ(nd)\begin{aligned}
ans&amp;=\frac{1}{n}\sum\limits_{k=1}^n n^{gcd(k,n)} \\
ans &amp;= \frac{1}{n}\sum\limits_{d|n}n^d\times \sum\limits_{k=1}^{n/d}[gcd(k,n)=1] &amp; \text{枚举gcd}\\
ans &amp; =\frac{1}{n}\sum\limits_{d|n}n^d\varphi(\frac{n}{d})
\end{aligned}
ansansans​=n1​k=1∑n​ngcd(k,n)=n1​d∣n∑​nd×k=1∑n/d​[gcd(k,n)=1]=n1​d∣n∑​ndφ(dn​)​枚举gcd​
注意到本题可以暴力计算欧拉函数，代码如下：
#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;constexpr ll MOD=1e9+7;ll phi(ll n)&#123;    ll ans=n;    for(ll i=2;i*i&lt;=n;i++)&#123;        if(n%i==0)&#123;            ans=ans/i*(i-1);            while (n%i==0)            &#123;                n/=i;            &#125;        &#125;    &#125;    if(n&gt;=2)&#123;        ans=ans/n*(n-1);    &#125;    return ans;&#125;ll qpow(ll a,ll b)&#123;    ll ret=1;    while(b)&#123;        if(b&amp;1)&#123;            ret=ret*a%MOD;        &#125;        a=a*a%MOD;        b&gt;&gt;=1;    &#125;    return ret%MOD;&#125;int main()&#123;    int T;    cin&gt;&gt;T;    while(T--)&#123;        ll n,ans=0;        cin&gt;&gt;n;        for(ll i=1;i*i&lt;=n;i++)&#123;            if(n%i!=0) continue;            ans=(ans+(qpow(n,i)*phi(n/i))%MOD)%MOD;            if(i*i!=n)&#123;                ans=(ans+qpow(n,n/i)*phi(i)%MOD)%MOD;            &#125;        &#125;        ans=ans*qpow(n,MOD-2)%MOD;        cout&lt;&lt;ans&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
 5.经典大例题
蒟蒻计数太菜了www，有很大一部分都是不会求不动点www。
部分题出自省选集训（原深？启动！）。
 5.1 洛谷P1446
不难发现这个洗牌其实就是置换。虽然没说本质不同，但是解释中说明了如果置换后颜色相同那么就说明是相同方案，其实这个代表的就是置换方案。我们后边把 “洗牌” 统一称为 “置换”。
这个置换当然是构成置换群的啦，所以可以搞喽。
考虑用Burnside还是Polya，这个题目限制染色数目了，看来只能用Burnside。
我们公式的 ∣G∣|G|∣G∣ 其实就是 m+1m+1m+1，但是不动点怎么求？我们考虑原题中说明的，如果置换后仍为原来的颜色集合，那么说明相同。这其实和上面的小大练习有点类似。我们可以知道，我们把一个置换拆成若干个循环置换，这些循环置换对应的位置只能有一种颜色，我们和上面的小大练习算算置换的长度。
设一共有 tottottot 个循环置换，第 iii 个循环置换的长度是 lenilen_ileni​，这个问题转化为i：把 lenlenlen 划分成 3 个集合，让三个集合中和分别为 Sr,Sb,SgS_r,S_b,S_gSr​,Sb​,Sg​ 的方案数。这不就是背包问题吗。
设 f(i,j,k,p)f(i,j,k,p)f(i,j,k,p) 表示对于置换 ggg ，考虑到第 iii 个循环置换，三个集合里的和分别为 i,j,ki,j,ki,j,k 的方案数。
边界：f(0,0,0,0)=1f(0,0,0,0)=1f(0,0,0,0)=1.
转移方程如下：
f[0][0][0]=1;for(int i=1;i&lt;=tot;i++)&#123;    for(int j=sr;j&gt;=0;j--)&#123;        for(int k=sb;k&gt;=0;k--)&#123;            for(int p=sg;p&gt;=0;p--)&#123;                if(j&gt;=siz[i])&#123;                    f[j][k][p]=(f[j-siz[i]][k][p]+f[j][k][p])%P;                &#125;                if(k&gt;=siz[i])&#123;                    f[j][k][p]=(f[j][k-siz[i]][p]+f[j][k][p])%P;                &#125;                if(p&gt;=siz[i])&#123;                    f[j][k][p]=(f[j][k][p-siz[i]]+f[j][k][p])%P;                &#125;            &#125;        &#125;    &#125;&#125;
那么每一个洗牌（置换）都跑一遍记录答案就可以了，于是代码如下：
#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;constexpr int MN=520;int sr,sb,sg,n,m,tot,P,f[MN][MN][MN];int a[MN],siz[MN];bool vis[MN];int ksm(int a,int b)&#123;    int ret=1;    while(b)&#123;        if(b&amp;1) ret=(ret*a)%P;        a=(a*a)%P;        b&gt;&gt;=1;    &#125;    return ret;&#125;void getring()&#123;    memset(vis,0,sizeof(vis));    tot=0;    for(int i=1;i&lt;=n;i++)&#123;        if(!vis[i])&#123;            int p=i,len=0;            while(!vis[p])&#123;                len++;                vis[p]=1;                p=a[p];            &#125;            siz[++tot]=len;        &#125;    &#125;&#125;int clac()&#123;    memset(f,0,sizeof(f));    f[0][0][0]=1;    for(int i=1;i&lt;=tot;i++)&#123;        for(int j=sr;j&gt;=0;j--)&#123;            for(int k=sb;k&gt;=0;k--)&#123;                for(int p=sg;p&gt;=0;p--)&#123;                    if(j&gt;=siz[i])&#123;                        f[j][k][p]=(f[j-siz[i]][k][p]+f[j][k][p])%P;                    &#125;                    if(k&gt;=siz[i])&#123;                        f[j][k][p]=(f[j][k-siz[i]][p]+f[j][k][p])%P;                    &#125;                    if(p&gt;=siz[i])&#123;                        f[j][k][p]=(f[j][k][p-siz[i]]+f[j][k][p])%P;                    &#125;                &#125;            &#125;        &#125;    &#125;    return f[sr][sb][sg];&#125;signed main()&#123;    int ans=0;    cin&gt;&gt;sr&gt;&gt;sb&gt;&gt;sg&gt;&gt;m&gt;&gt;P;    n=sr+sb+sg;    for(int i=1;i&lt;=n;i++)&#123;        a[i]=i;    &#125;    getring();    // for(int i=1;i&lt;=tot;i++)&#123;    //     cout&lt;&lt;siz[i]&lt;&lt;&quot; &quot;;    // &#125;    ans=(ans+clac())%P;    for(int i=1;i&lt;=m;i++)&#123;        for(int j=1;j&lt;=n;j++)&#123;            cin&gt;&gt;a[j];        &#125;        getring();        ans=(ans+clac())%P;    &#125;    cout&lt;&lt;ans*ksm(m+1,P-2)%P;    return 0;&#125;
 5.2 洛谷P4128有色图
哪里有色图！
参考AsunderSquall大佬的题解。
如果是点染色，我们可以像上面一样类似的做，但是这里是给边染色，怎么做？我们的Polya定理只能解决点的置换。
我们知道，一个置换其实可以表示成若干个循环，这里我们可以把一个长度为 nnn 的循环拆成 mmm 个循环，循环长度分别为 a1,a2...ama_1,a_2...a_ma1​,a2​...am​。
因为这里是无标号，我们可以考虑怎样算这样一个拆分对应几个置换。
我们把这些长度当作一个一个区间，往里面填数，但是填数的过程中会发现你填的顺序会造成重复的计算。
注意！以下mmm不是指颜色个数！
我们先把 nnn个数随便排列的方案数是 n!n!n!。
因为起点不重要都一样，我们除掉，即除∏i=1mai\prod\limits_{i=1}^m a_ii=1∏m​ai​
因为两个大小相同的循环相对位置无论怎么放无影响，考虑大小为 kkk 的循环有 cntkcnt_kcntk​个，排列数为 cntk!cnt_k!cntk​!，那么还要除掉 ∏k=1cntk\prod_{k=1} cnt_k∏k=1​cntk​
到这里还是点置换，边置换呢？
考虑一条边，分类讨论：

在循环内，如果循环长度 kkk 为奇数，一共有(k2)\binom{k}{2}(2k​)中可能，一共是k−12\frac{k-1}{2}2k−1​个循环节，所以不动点是 k−12\frac{k-1}{2}2k−1​。如果是偶数，除了上面的情况还有一种情况的循环节是 k2\frac{k}{2}2k​（半个周期并且还是双向边），化简一下出来还是 k2\frac{k}{2}2k​.综上即为⌊k2⌋\lfloor \frac{k}{2} \rfloor⌊2k​⌋
不在循环上，考虑两个循环，他们共处在一个lcm(k1,k2)lcm(k_1,k_2)lcm(k1​,k2​)的循环上（这个也很重要，可以自行搜索），所以一共有 k1×k2lcm(k1,k2)=gcd(k1,k2)\frac{k_{1\times}k_2}{lcm(k_1,k_2)}=gcd(k_1,k_2)lcm(k1​,k2​)k1×​k2​​=gcd(k1​,k2​)个循环节，对于分子就是两个循环节能构成多少个点对。综上，不动点共 gcd(k1,k2)gcd(k_1,k_2)gcd(k1​,k2​) 个。

综上，答案即为：
ans=1n!×n!∏ai∏lencntlen!×k∑i=1m⌊ai2⌋+∑1≤i&lt;j≤mgcd(ai,aj)ans=\frac{1}{n!}\times \frac{n!}{\prod a_{i}\prod_{len}cnt_{len}!} \times k^{\sum\limits_{i=1}^m\lfloor \frac{a_{i}}{2} \rfloor + \sum\limits_{1\le i &lt; j \le m} gcd(a_i,a_j)}
ans=n!1​×∏ai​∏len​cntlen​!n!​×ki=1∑m​⌊2ai​​⌋+1≤i&lt;j≤m∑​gcd(ai​,aj​)
不难发现可以消，于是就做完了。
 6. 后言
还是太菜了，以后有机会会在加进来题的。
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>路线反思</title>
    <url>/posts/a6ad8815/</url>
    <content><![CDATA[
  
  
    
      
      
        您好, 这里需要密码.
      
    
  

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>题解P7361拜神</title>
    <url>/posts/48ad214/</url>
    <content><![CDATA[可能更洛谷的阅读体验
题目很好，考察了 SA 中的并查集思想以及启发式合并，而且实现也不难，值得一做。
形式化题面如下：

给定一个长为 nnn 的字符串，询问次数为 qqq，多次询问区间 [l,r][l,r][l,r] 内最长重复子串的长度。
1≤n≤5×104,1≤q≤1051\le n \le 5\times 10^4,1\le q \le 10^51≤n≤5×104,1≤q≤105。

没有形式化题面感觉都想不出来怎么做 www。
肯定没有那么菜啦，首先考虑二分长度，问题转化为区间内是否存在一个长为 midmidmid 的最长重复子串。
接下来我们考虑这个最长重复子串怎么求，一个比较明显的想法就是后缀数组的 LCP 功能，原命题询问的实质就是是否存在 i,j∈[l,r−mid+1],LCP⁡(i,j)≥midi,j \in [l,r-mid+1],\operatorname{LCP}(i,j)\ge midi,j∈[l,r−mid+1],LCP(i,j)≥mid。看到后面这个式子，回忆起品酒大会的思路：从大到小将 Height 数组插入，若仅考虑 ≥L\ge L≥L 的 Height，将 sai−1,saisa_{i-1},sa_{i}sai−1​,sai​ 之间连边，那么若 p,qp,qp,q 在同一联通块里，表明 LCP⁡(p,q)≥L\operatorname{LCP}(p,q)\ge LLCP(p,q)≥L。我们通过并查集和启发式合并就可以做到 O(log⁡n)O(\log n)O(logn) 的优秀复杂度啦。
但是有点问题啊，如果我们直接这么做我们并没有考虑区间位置，也就是说在两个联通块启发式合并的时候我们必须要记录区间的位置。我们不妨考虑对于联通块内每一个位置，我们维护它在当前联通块内上一个元素的位置，记作 preipre_{i}prei​，那么区间限制转化为 max⁡i∈set(L),i∈[l,r−L+1]prei≥l\max\limits_{i\in set(L),i\in [l,r-L+1]} pre_{i}\ge li∈set(L),i∈[l,r−L+1]max​prei​≥l。我们可以通过对每一个联通块开主席树来辅助查询，这样就能够做到优秀的 O(qlog⁡2nO(q \log^2 nO(qlog2n) 的查询啦，其中两个 log⁡\loglog 由二分和主席树查询贡献。
问题转化为如何维护 preprepre 的合并。首先，唯一确定一个联通块的信息就是所对应的 LCP 长度 LLL（具体见上面品酒大会思路），根据品酒大会启发式合并的思路，一次启发式 preprepre 的变化最多只有 O(log⁡n)O(\log n)O(logn) 个，考虑用 set 把联通块内的元素存下来，启发式合并的时候暴力单点修改 preprepre，这样处理的复杂度是 O(nlog⁡2n)O(n \log^2 n)O(nlog2n) 的，可以过。故总时间复杂度为 O(qlog⁡2n+nlog⁡2n)O(q\log^2 n + n \log^2 n)O(qlog2n+nlog2n)。
请注意二分的实现：
#include&lt;bits/stdc++.h&gt;#define pir pair&lt;int,int&gt;using namespace std;constexpr int MN=5e4+15;int n,q,pre[MN];vector&lt;int&gt; vht[MN];set&lt;int&gt; st[MN];string s;struct Segment&#123;#define ls t[p].lson#define rs t[p].rson    struct Node&#123;        int lson,rson,val;    &#125;t[MN&lt;&lt;9];    int tot,rt[MN];        void pushup(int p)&#123;        t[p].val=max(t[ls].val,t[rs].val);    &#125;    void modfiy(int &amp;p,int lst,int l,int r,int pos,int v)&#123;        p=++tot;        t[p]=t[lst];        if(l==r)&#123;            t[p].val=max(t[p].val,v);            return;        &#125;        int mid=(l+r)&gt;&gt;1;        if(mid&gt;=pos) modfiy(ls,t[lst].lson,l,mid,pos,v);        else modfiy(rs,t[lst].rson,mid+1,r,pos,v);        pushup(p);    &#125;    int query(int p,int l,int r,int fl,int fr)&#123;        if(l&gt;=fl&amp;&amp;r&lt;=fr)&#123;            return t[p].val;        &#125;        int mid=(l+r)&gt;&gt;1,ret=0;        if(mid&gt;=fl) ret=max(ret,query(ls,l,mid,fl,fr));        if(mid&lt;fr) ret=max(ret,query(rs,mid+1,r,fl,fr));        return ret;    &#125;#undef ls#undef rs&#125;sg;namespace SA&#123;    int len,sa[MN],x[MN],y[MN],rk[MN],c[MN],ht[MN],ST[30][MN];    // 接受 string 和 vector_int 输入，其他输入不保证正确性    // ST表需要手动初始化调用initst函数    template&lt;typename vct&gt;    void getsa(vct &amp;s)&#123;        int m=400000;        len=s.size();        s.insert(s.begin(),&#x27; &#x27;);        for(int i=1;i&lt;=len;i++)&#123;            x[i]=s[i];            ++c[x[i]];        &#125;        for(int i=2;i&lt;=m;i++) c[i]+=c[i-1];        for(int i=len;i&gt;=1;i--) sa[c[x[i]]--]=i;        for(int k=1;k&lt;=len;k&lt;&lt;=1)&#123;            int num=0;            for(int i=len-k+1;i&lt;=len;i++) y[++num]=i;            for(int i=1;i&lt;=len;i++)&#123;                if(sa[i]&gt;k) y[++num]=sa[i]-k;            &#125;            for(int i=1;i&lt;=m;i++) c[i]=0;            for(int i=1;i&lt;=len;i++) c[x[i]]++;            for(int i=2;i&lt;=m;i++) c[i]+=c[i-1];            for(int i=len;i&gt;=1;i--) sa[c[x[y[i]]]--]=y[i],y[i]=0;            swap(x,y);            num=1,x[sa[1]]=1;            for(int i=2;i&lt;=len;i++)&#123;                if(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+k]==y[sa[i-1]+k]) x[sa[i]]=num;                else x[sa[i]]=++num;            &#125;            if(num==len) break;            m=num;        &#125;        for(int i=1;i&lt;=len;i++) rk[sa[i]]=i;        for(int i=1,k=0;i&lt;=len;i++)&#123;            if(rk[i]==1) continue;            if(k) k--;            int j=sa[rk[i]-1];            while(i+k&lt;=len&amp;&amp;j+k&lt;=len&amp;&amp;s[i+k]==s[j+k]) k++;            ht[rk[i]]=ST[0][rk[i]]=k;        &#125;    &#125;&#125;using namespace SA;int root(int x)&#123;    if(pre[x]==x) return pre[x];    else return pre[x]=root(pre[x]);&#125;void merge(int x,int y,int L)&#123;    int rx=root(x),ry=root(y);    if(rx==ry) return;    if(st[rx].size()&lt;st[ry].size()) swap(rx,ry);    pre[ry]=rx;    for(auto p:st[ry])&#123;        auto it=st[rx].lower_bound(p);        if(it!=st[rx].end())&#123;            sg.modfiy(sg.rt[L],sg.rt[L],1,n,*it,p);        &#125;        if(it!=st[rx].begin())&#123;            it--;            sg.modfiy(sg.rt[L],sg.rt[L],1,n,p,*it);        &#125;    &#125;    for(auto p:st[ry]) st[rx].insert(p);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;    getsa(s);    for(int i=2;i&lt;=n;i++)&#123;        vht[ht[i]].push_back(i);    &#125;    for(int i=1;i&lt;=n;i++)&#123;        pre[i]=i;        st[i].insert(i);    &#125;    for(int i=n;i&gt;=1;i--)&#123;        sg.rt[i]=sg.rt[i+1];        for(auto p:vht[i])&#123;            merge(sa[p],sa[p-1],i);        &#125;    &#125;    while(q--)&#123;        int L,R;        cin&gt;&gt;L&gt;&gt;R;        int l=0,r=R-L+1;        while(l+1&lt;r)&#123;            int mid=(l+r)&gt;&gt;1;            if(sg.query(sg.rt[mid],1,n,L,R-mid+1)&gt;=L)&#123;                l=mid;            &#125;else r=mid;        &#125;        cout&lt;&lt;l&lt;&lt;&#x27;\n&#x27;;    &#125;    return 0;&#125;
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
</search>
